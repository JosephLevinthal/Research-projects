== TEST (2019-05-12 23:56:47) 
-- CODE:
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    x = eval(input(""))
  File "<string>", line 1, in <module>
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 23:57:23) 
-- CODE:
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    x = eval(input(""))
  File "<string>", line 1, in <module>
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 00:05:30) 
-- CODE:
from math import factorial
k = float(input("numero natural: "))


def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    x = eval(input(""))
  File "<string>", line 1, in <module>
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 00:05:49) 
-- CODE:
from math import factorial
n = float(input("numero natural: "))


def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    x = eval(input(""))
  File "<string>", line 1, in <module>
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:40:31) 
-- CODE:
from math import *factorial
n = float(input("numero natural: "))


def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

-- ERROR:
File "XXXX", line 1
    from math import *factorial
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:40:38) 
-- CODE:
from math import *
n = float(input("numero natural: "))


def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

-- ERROR:
File "XXXX", line 1
    from math import *factorial
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:16:04) 
-- CODE:
from math import *
k = float(input("numero natural: "))
soma = 0      #variavel acumuladora
i = 0         #variavel contadora
while (i < k):
	soma = soma + 1 / fatoria(i)
	i = i +1
print(round(soma,8))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma = soma + 1 / fatoria(i)
NameError: name 'fatoria' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:16:28) 
-- CODE:
from math import *
k = float(input("numero natural: "))
soma = 0      #variavel acumuladora
i = 0         #variavel contadora
while (i < k):
	soma = soma + 1 / factorial(i)
	i = i +1
print(round(soma,8))

-- OUTPUT:
2.71805556
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 13:16:37) 
-- CODE:
from math import *
k = float(input("numero natural: "))
soma = 0      #variavel acumuladora
i = 0         #variavel contadora
while (i < k):
	soma = soma + 1 / factorial(i)
	i = i +1
print(round(soma,8))

-- EXECUTION TIME:
0.161351
-- TEST CASE 1:
---- input:
7
---- correct output:
2.71805556
---- user output:
2.71805556
-- TEST CASE 2:
---- input:
15
---- correct output:
2.71828183
---- user output:
2.71828183
-- TEST CASE 3:
---- input:
6
---- correct output:
2.71666667
---- user output:
2.71666667
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
