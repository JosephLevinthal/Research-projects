== TEST (2019-03-25 15:09:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import *
area = pi*r**2
volume = 4/3* pi * r**3
print(area)
print(volume)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    area = pi*r**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:09:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import *
area = pi * r**2
volume = 4/3* pi * r**3
print(area)
print(volume)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    area = pi * r**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:09:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import *
area = (pi * r**2)
volume = (4/3* pi * r**3)
print(area)
print(volume)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    area = (pi * r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:10:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import *
area = math(pi) * r**2
volume = 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    area = math(pi) * r**2
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:10:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import *pi
area = pi * r**2
volume = 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    from math import *pi
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:11:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import *
area = from math import *pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 7
    area = from math import *pi * r**2
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:11:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import *
area = from math import *pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 7
    area = from math import *pi * r**2
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:11:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import*
area = from math import * pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 7
    area = from math import * pi * r**2
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import* pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    from math import* pi
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import* pi= 3,1415
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    from math import* pi= 3,1415
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from math import* pi=
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    from math import* pi=
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:17:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from <math> import* pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    from <math> import* pi
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:17:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
pi= from <math> import* pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    pi= from <math> import* pi
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
pi= from math_ import* pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    pi= from math_ import* pi
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
pi= from math import* pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    pi= from math import* pi
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
pi= from math import* pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    pi= from math import* pi
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
pi= from(math)import* pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    pi= from(math)import* pi
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
pi= from(math)import*pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    pi= from(math)import*pi
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
pi = from(math)import*pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    pi = from(math)import*pi
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:19:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from(math)import*pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    from(math)import*pi
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:19:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from<math>import*pi
area = pi * r**2
volume = from math import * 4/3* (pi) * r**3
print(area)
print(volume)
-- ERROR:
File "XXXX", line 6
    from<math>import*pi
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:19:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

r = input(":")
from<math>import*pi
print(pi)

-- ERROR:
File "XXXX", line 6
    from<math>import*pi
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:19:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
from<math>import*pi
print(pi)

-- ERROR:
File "XXXX", line 4
    from<math>import*pi
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:20:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
from<math>import*pi
pi = 3,14
print(pi)

-- ERROR:
File "XXXX", line 4
    from<math>import*pi
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:20:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
from<math>import*
pi = 3,14
print(pi)

-- ERROR:
File "XXXX", line 4
    from<math>import*
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:20:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
from math import *
pi = 3,14
print(pi)

-- OUTPUT:
(3, 14)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:20:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
from math import *
print(pi)

-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:23:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
area=pi*r**2
volume=4/3*pi*r**3
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    area=pi*r**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)
area=*r**2
volume=4/3*pi*r**3
print(area)
print(volume)

-- ERROR:
File "XXXX", line 8
    area=*r**2
        ^
SyntaxError: can't use starred expression here
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)


-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)


-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)


-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)


-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)


-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig

from math import *
pi
print(pi)


-- OUTPUT:
3.141592653589793
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:25:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)
area=pi*r**2
volume=4/3*pi*r**3
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    area=pi*r**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:25:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)
area=int(pi*r**2)
volume=4/3*pi*r**3
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    area=int(pi*r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:25:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)
area=int(pi*r**2)
volume=4/3*pi*r**3
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    area=int(pi*r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:28:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= input()
from math import *
pi
print(pi)
area=(pi*r**2)
volume=4/3*pi*r**3
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    area=(pi*r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:29:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
print(pi)

area=(pi*r**2)
volume=4/3*pi*r**3
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:29:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
print(pi)

area=(pi*r**2)
volume=4/3*pi*r**3
print(area)
print(volume)

-- EXECUTION TIME:
0.138819
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:30:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
print(pi)

area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:30:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
print(pi)

area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- EXECUTION TIME:
0.177692
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
print(pi)

area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
print(pi)

area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:31:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- EXECUTION TIME:
0.210343
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:31:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- EXECUTION TIME:
0.161162
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= int(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    r= int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= float(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:32:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codig
r= float(input())
from math import *
pi
area=round((pi*r**2),3)
volume=round((4/3*pi*r**3),3)
print(area)
print(volume)

-- EXECUTION TIME:
0.191954
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
