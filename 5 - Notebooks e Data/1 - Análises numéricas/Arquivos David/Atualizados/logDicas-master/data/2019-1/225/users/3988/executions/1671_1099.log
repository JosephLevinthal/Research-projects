== TEST (2019-04-19 16:40:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	elif(A==B)	
-- ERROR:
File "XXXX", line 9
    elif(A==B)	
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:43:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	elif(A==B) and (C != A):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:44:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	elif(A==B) and (C != A):
		print("isosceles")
	else(A!=B) and (A!=C) and (C!=B)
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    else(A!=B) and (A!=C) and (C!=B)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:45:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	elif(A==B) and (C != A):
		print("isosceles")
	else(A!=B) and (B!=C) and (C!=A):
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    else(A!=B) and (B!=C) and (C!=A):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:46:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	elif(A==B) and (C != A):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:50:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	elif(A==B) and (C != A):
		print("isosceles")
		
	elif(A!=C) and (B!=C) and (C!=A)
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    elif(A!=C) and (B!=C) and (C!=A)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:51:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	elif(A==B) and (C != A):
		print("isosceles")
	elif(A!=C) and (B!=C) and (C!=A)
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    elif(A!=C) and (B!=C) and (C!=A)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:55:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else(A!=C) and (B!=C) and (C!=A):
			print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    else(A!=C) and (B!=C) and (C!=A):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:55:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 16:56:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.163281
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 16:59:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and (A+B>C) or (A+C>B) or (B+C>A):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 17:00:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and ((A+B>C) or (A+C>B) or (B+C>A)):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 17:01:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and ((A+B>C) and (A+C>B) and (B+C>A)):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 17:01:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and ((A+B>C) and (A+C>B) and (B+C>A)):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.189759
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 17:01:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and ((A+B>C) and (A+C>B) and (B+C>A)):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 17:02:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and (A+B>C) and (A+C>B) and (B+C>A):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 17:02:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and (A+B>C) and (A+C>B) and (B+C>A):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.148307
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 17:02:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and (A+B>C) and (A+C>B) and (B+C>A):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 17:02:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and (A+B>C) and (A+C>B) and (B+C>A):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 17:04:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if (A>=0) and (B>=0) and (C>=0) and ((A+B>C) or (A+C>B) or (B+C>A)):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:59:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if ((A>0) and (B>0) and (C>0)) and ((A+B>C) or (A+C>B) or (B+C>A)):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:59:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
if ((A>0) and (B>0) and (C>0)) and ((A+B>C) or (A+C>B) or (B+C>A)):
	if (A==C) and (B==C):
		print("equilatero")
	else:
		if(A==B) and (C != A):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.13953
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:16:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
if ((c>=a+b) and (b>=c+a) and (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) and (a!=c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
	
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:16:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
if ((c>=a+b) and (b>=c+a) and (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) and (a!=c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- OUTPUT:
Tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:16:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
if ((c>=a+b) and (b>=c+a) and (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) and (a!=c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- EXECUTION TIME:
0.167307
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:17:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
if ((c>=a+b) and (b>=c+a) and (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) and (a!=c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- OUTPUT:
Tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:20:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
if ((c>=a+b) and (b>=c+a) and (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:21:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:21:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- EXECUTION TIME:
0.16298
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:23:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
print("Entrada: ", a,",", b,",", c)
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:23:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
print("Entrada: ", a,",", b,",", c)
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	msg = ("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	msg = ("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	msg = ("Tipo de triangulo: isosceles")
else:
	msg = ("Tipo de triangulo: escaleno")
print(msg)	
	
-- EXECUTION TIME:
0.191901
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:26:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
print("Entrada: ", a,",", b,",", c)
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	print("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	print("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:26:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
print("Entrada: ", a,",", b,",", c)
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	print("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	print("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- EXECUTION TIME:
0.125967
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:27:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
print("Entrada: ", a,",", b,",", c)
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	print("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	print("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:27:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("A:"))
b = float(input("B:"))
c = float(input("C:"))
print("Entrada: ", a,",", b,",", c)
if ((c>=a+b) or (b>=c+a) or (a>=c+b)):
	print("Tipo de triangulo: invalido")
elif ((a==b) and (b==c)):
	print("Tipo de triangulo: equilatero")
elif ((a==b) or (a==c) or (b==c)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- EXECUTION TIME:
0.136867
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:03:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
print("Entrada: ", A,",", B,",", C)
if ((C>=A+B) or (B>=C+A) or (A>=C+B)):
	print("Tipo de triangulo: invalido")
elif ((A==B) and (B==C)):
	print("Tipo de triangulo: equilatero")
elif ((A==B) or (A==C) or (B==C)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 19:03:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
print("Entrada: ", A,",", B,",", C)
if ((C>=A+B) or (B>=C+A) or (A>=C+B)):
	print("Tipo de triangulo: invalido")
elif ((A==B) and (B==C)):
	print("Tipo de triangulo: equilatero")
elif ((A==B) or (A==C) or (B==C)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- EXECUTION TIME:
0.12751
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:04:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
print("Entrada: ", A,",", B,",", C)
if ((C>=A+B) or (B>=C+A) or (A>=C+B)):
	print("Tipo de triangulo: invalido")
elif ((A==B) and (B==C)):
	print("Tipo de triangulo: equilatero")
elif ((A==B) or (A==C) or (B==C)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:04:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
print("Entrada: ", A,",", B,",", C)
if ((C>=A+B) or (B>=C+A) or (A>=C+B)):
	print("Tipo de triangulo: invalido")
elif ((A==B) and (B==C)):
	print("Tipo de triangulo: equilatero")
elif ((A==B) or (A==C) or (B==C)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:04:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
print("Entrada: ", A,",", B,",", C)
if ((C>=A+B) or (B>=C+A) or (A>=C+B)):
	print("Tipo de triangulo: invalido")
elif ((A==B) and (B==C)):
	print("Tipo de triangulo: equilatero")
elif ((A==B) or (A==C) or (B==C)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- OUTPUT:
Entrada:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 19:05:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("A:"))
B = float(input("B:"))
C = float(input("C:"))
print("Entradas: ", A,",", B,",", C)
if ((C>=A+B) or (B>=C+A) or (A>=C+B)):
	print("Tipo de triangulo: invalido")
elif ((A==B) and (B==C)):
	print("Tipo de triangulo: equilatero")
elif ((A==B) or (A==C) or (B==C)):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
	
	
-- EXECUTION TIME:
0.191873
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
