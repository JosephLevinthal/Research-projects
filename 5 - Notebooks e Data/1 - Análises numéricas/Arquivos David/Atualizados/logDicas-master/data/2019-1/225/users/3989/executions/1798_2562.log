== TEST (2019-06-04 00:09:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(size(npar)) and (size(nimpar))
)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 24
    )
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:09:16) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(size(npar)) and (size(nimpar))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:09:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(size(npar)) and (size(nimpar))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:10:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(npar)) and (size(nimpar))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:14:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > ):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			print (npar)

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(npar)) and (size(npar))

   # No. total de elementos
   print(size(npar)) and (size(npar))
)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    while (size(vet) > ):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:14:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > ):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			print (nimpar)

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(npar)) and (size(npar))

   # No. total de elementos
   print(size(npar)) and (size(npar))
)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    while (size(vet) > ):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:15:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			print (nimpar)

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(npar)) and (size(npar))

   # No. total de elementos
   print(size(npar)) and (size(npar))
)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:15:13) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	else:
			print (nimpar)

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(npar)) and (size(npar))

   # No. total de elementos
   print(size(npar)) and (size(npar))
)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:15:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	else:
		print (nimpar)

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(npar)) and (size(npar))

   # No. total de elementos
   print(size(npar)) and (size(npar))
)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:15:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	   else:
		    print (nimpar)

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(npar)) and (size(npar))

   # No. total de elementos
   print(size(npar)) and (size(npar))
)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:17:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == ???):
         npar = npar + 1
	   else:
		   print(nimpar)

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 13
    if (elemento % 2 == ???):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:17:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	   else:
		   print(nimpar)

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:18:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
	      print(nimpar)

   # No. de elementos pares
   print()

   # No. de elementos impares
   print()

   # No. total de elementos
   print()

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:18:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
	      print(nimpar)

   # No. de elementos pares
   print()

   # No. de elementos impares
   print()

   # No. total de elementos
   print()

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:20:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif (size(vet) - size(npar))
   # No. de elementos pares
   print()

   # No. de elementos impares
   print()

   # No. total de elementos
   print()

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    elif (size(vet) - size(npar))
                                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 00:20:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif (size(vet) - size(npar)):
			print(nimpar)
   # No. de elementos pares
   print()

   # No. de elementos impares
   print()

   # No. total de elementos
   print()

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    elif (size(vet) - size(npar)):
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 20:54:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print()

   # No. total de elementos
   print()

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 20:57:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print()

   # No. total de elementos
   print()

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:00:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print()

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:01:55) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print()

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:02:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0 

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print()

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 10
    nimpar = 0 
              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:03:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print()

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:05:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - size(npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 23
    print(size(vet))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:07:32) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size(vet) - size(npar)
   print 

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size(vet) - size(npar)
                                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:07:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size(vet) - size(npar)
   print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size(vet) - size(npar)
                                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:08:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = (size(vet) - size(npar))
   print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = (size(vet) - size(npar))
                                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:12:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = (size(vet)) - (size(npar))
   print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = (size(vet)) - (size(npar))
                                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:12:17) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = (size(vet)) - (size(npar))
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = (size(vet)) - (size(npar))
                                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:12:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = (size(vet)) - size(npar)
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = (size(vet)) - size(npar)
                                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:12:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = (size(vet)) - npar
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = (size(vet)) - npar
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:13:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print (size(vet)) - npar

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print (size(vet)) - npar
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:13:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print ((size(vet)) - (npar))

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print ((size(vet)) - (npar))
                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:19:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size(vet) - size(npar)
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size(vet) - size(npar)
                                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:20:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size (vet) - size (npar)
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size (vet) - size (npar)
                                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:20:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size (vet)-size(npar)
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size (vet)-size(npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:20:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = (size(vet)-size(npar))
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = (size(vet)-size(npar))
                                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:25:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size(vet) - 1 - elemento
	print (nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size(vet) - 1 - elemento
                                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:26:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size(vet)
	print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size(vet)
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:27:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size(vet)
	print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size(vet)
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:27:39) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	nimpar = size(vet)
	print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    nimpar = size(vet)
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:27:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print (size(vet))

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print (size(vet))
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:28:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print size(vet)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print size(vet)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:28:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print size [vet]

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print size [vet]
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:28:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print (size [vet])

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print (size [vet])
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:28:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print size [vet]

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print size [vet]
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:28:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print (size [vet])

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print (size [vet])
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:29:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
	print (size ([vet]))

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print (size ([vet]))
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:29:16) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
   # No. de elementos impares
	print 
   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 19
    print 
         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:29:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
   # No. de elementos impares

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-04 21:29:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
   # No. de elementos impares

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- EXECUTION TIME:
1.00307
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 24, in <module>
    vet = array(eval(input()))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:30:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
   # No. de elementos impares
	print (size(vet)) - size(npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 19
    print (size(vet)) - size(npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:30:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
   # No. de elementos impares
	print ((size(vet)) - size(npar))

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 19
    print ((size(vet)) - size(npar))
                                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:34:52) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
   # No. de elementos impares
	print (size(vet)) - (npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 19
    print (size(vet)) - (npar)
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:34:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
   # No. de elementos impares
	print (size(vet)) - npar

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 19
    print (size(vet)) - npar
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:35:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
	
   # No. de elementos impares
	print (size(vet)) - npar
   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print (size(vet)) - npar
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:35:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   # No. de elementos pares
   print(npar)
	
   # No. de elementos impares
	print size(vet) - (npar)
   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 20
    print size(vet) - (npar)
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:35:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	print size(vet) - (npar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print size(vet) - (npar)
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:36:16) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	print (size(vet) - (npar))
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print (size(vet) - (npar))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:36:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	print (size(vet)) - (npar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print (size(vet)) - (npar)
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:36:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	print (size(vet)) - size(npar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print (size(vet)) - size(npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:36:49) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	print (size(vet))
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print (size(vet))
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:36:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	print(size(vet))
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print(size(vet))
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:37:37) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0 
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	for elemento in vet:
      if (elemento % 2 =! 0):
         nimpar = nimpar + 1
		
   print(npar)
	
	print(nimpár)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 10
    nimpar = 0 
              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:38:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0 
	
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	for elemento in vet:
      if (elemento % 2 =! 0):
         nimpar = nimpar + 1
		
   print(npar)
	
	print(nimpár)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 10
    nimpar = 0 
              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:42:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	print (size(vet)) - (npar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print (size(vet)) - (npar)
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:42:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	nimpar = (size(vet)) - (npar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = (size(vet)) - (npar)
                                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:43:10) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	nimpar = size(vet)-(npar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = size(vet)-(npar)
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:43:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	nimpar = size(vet)-(npar)
	print(nimpar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = size(vet)-(npar)
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:43:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >= 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	nimpar = (size(vet)-(npar))
	print(nimpar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = (size(vet)-(npar))
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:44:16) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
	
	nimpar = (size(vet)-(npar))
	print(nimpar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = (size(vet)-(npar))
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:44:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
   print(npar)
  
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:46:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	nimpar = size(vet) - (npar)
	
   print(npar)
  

   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 13
    nimpar = size(vet) - (npar)
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:47:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = size(vet) - (npar)
	
   print(npar)
  

   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:47:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
	
   print(npar)
  

   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:47:38) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(nimpar)
	
   print(npar)
  

   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:47:52) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(nimpar)
	print(npar)
	
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:48:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(nimpar)
print(npar)
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 19
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:48:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(nimpar)
print(npar)
print(size(vet))
 # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:48:55) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(nimpar)
print(npar)
print(size(vet))
 # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:49:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(npar)
print(nimpar)
print(size(vet))
 # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:52:16) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(npar)
print(nimpar)
print(size(vet))
 # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:52:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
nimpar = (size(vet) - (npar))
print(npar)
print(nimpar)
print(size(vet))
 # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:53:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)


   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:53:31) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 21:54:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	nimpar = (size(vet) - (npar))
	print(nimpar)
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 14
    nimpar = (size(vet) - (npar))
                                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:17:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	
	nimpar = size(vet) - len(npar)
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    nimpar = size(vet) - len(npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:17:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	
	nimpar = len(vet) - (npar)
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    nimpar = len(vet) - (npar)
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:17:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	
	nimpar = (len(vet) - (npar))
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    nimpar = (len(vet) - (npar))
                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:18:14) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	
	nimpar = (len(vet) - (npar))
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    nimpar = (len(vet) - (npar))
                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:18:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	
	nimpar = size(vet) - len(npar)
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    nimpar = size(vet) - len(npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:19:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
	
	nimpar = size(vet) - len(npar)
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 15
    nimpar = size(vet) - len(npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:20:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	nimpar = size(vet) - len(npar)
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = size(vet) - len(npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:20:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	nimpar = (size(vet) - len(npar))
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = (size(vet) - len(npar))
                                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:21:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	nimpar = (size(vet) 
	print(nimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    nimpar = (size(vet) 
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:21:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	numeroimpar= len(vet) - npar
	print(numeroimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    numeroimpar= len(vet) - npar
                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:22:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	numeroimpar= len(vet) - (npar)
	print(numeroimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    numeroimpar= len(vet) - (npar)
                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:23:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) >=1):
   # Zera contador de elementos pares
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	numeroimpar= size(vet) - len(elemento)
	print(numeroimpar)
	
   print(size(vet))
 # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 16
    numeroimpar= size(vet) - len(elemento)
                                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:25:17) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) >=1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	numeroimpar = size(vet) - (npar)
	print(numeroimpar)
	
   print(size(vet))

   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 12
    numeroimpar = size(vet) - (npar)
                                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:26:56) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
	numeroimpar = size(vet) - (npar)
	print(numeroimpar)
	
   print(size(vet))

   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 12
    numeroimpar = size(vet) - (npar)
                                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:27:40) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
   print(size(vet))

   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:28:36) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	
   print(size(vet))

   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:30:14) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   print(npar)
	nimpar = ((size(vet)) - (npar))
	print(nimpar)
   print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 11
    nimpar = ((size(vet)) - (npar))
                                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:41:03) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar + = 1 
		else:
			nimpar + = 1
	
   print(npar)
	print(nimpar)
   print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 8
    npar + = 1 
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:41:38) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
	nimpar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar + = 1 
		else:
			nimpar + = 1
	
   print(npar)
	print(nimpar)
   print(size(vet))
	
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 6
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:51:42) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
	nimpar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar + = 1 
		else:
			nimpar + = 1
	
   print(npar)
	print(nimpar)
   print(size(vet))
	
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 6
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:51:51) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
   npar = 0
	nimpar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar + = 1 
		else:
			nimpar + = 1
   print(npar)
	print(nimpar)
   print(size(vet))
	
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 6
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:52:24) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
npar = 0
nimpar = 0
while (size(vet) > 1):
  
   for elemento in vet:
      if (elemento % 2 == 0):
         npar + = 1 
		else:
			nimpar + = 1
   print(npar)
	print(nimpar)
   print(size(vet))
	
   vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 9
    npar + = 1 
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:54:34) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
   nimpar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar + =1 
		else:
			nimpar + =1
   print(npar)
	print(nimpar)
   print(size(vet))
	
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 5
    nimpar = 0
             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:54:50) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
   while (size(vet) > 1):
	npar = 0
   nimpar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar + =1 
		else:
			nimpar + =1
   print(npar)
	print(nimpar)
   print(size(vet))
	
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 3
    while (size(vet) > 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:56:00) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
   while (size(vet) > 1):
	   npar = 0
      nimpar = 0
      for elemento in vet:
          if (elemento % 2 == 0):
               npar + =1 
		   else:
			      nimpar + =1
   print(npar)
	print(nimpar)
   print(size(vet))
	
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 3
    while (size(vet) > 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:56:08) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
    while (size(vet) > 1):
	   npar = 0
      nimpar = 0
      for elemento in vet:
          if (elemento % 2 == 0):
               npar + =1 
		   else:
			      nimpar + =1
   print(npar)
	print(nimpar)
   print(size(vet))
	
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 3
    while (size(vet) > 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:57:47) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
	npar = 0
   nimpar = 0
   for elemento in vet:
		if (elemento % 2 == 0):
               npar + =1 
		else:
		   nimpar + =1
   print(npar)
	print(nimpar)
   print(size(vet))
	
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 7
    nimpar = 0
             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 22:58:13) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) > 1):
npar = 0
nimpar = 0
   for elemento in vet:
		if (elemento % 2 == 0):
               npar + =1 
		else:
		   nimpar + =1
   print(npar)
	print(nimpar)
   print(size(vet))
	
vet = array(eval(input("Proximo vetor: ")))


-- ERROR:
File "XXXX", line 6
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:00:11) 
-- CODE:
from numpy import* 

vet = array(eval(input("Vetor: ")))

while(size(vet)>1):
	npar = 0
	nimpar = 0
	for elemento in vet:
		if (elemento%2==0):
			npar + = 1
		else:
			nimpar + = 1
	print(npar)

-- ERROR:
File "XXXX", line 10
    npar + = 1
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:00:38) 
-- CODE:
from numpy import* 

vet = array(eval(input("Vetor: ")))

while(size(vet)>1):
	npar = 0
	nimpar = 0
	for elemento in vet:
		if (elemento%2==0):
			npar + = 1
		else:
			nimpar + = 1
	print(npar)
	print(nimpar)

-- ERROR:
File "XXXX", line 10
    npar + = 1
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:01:01) 
-- CODE:
from numpy import* 

vet = array(eval(input("Vetor: ")))

while(size(vet)>1):
	npar = 0
	nimpar = 0
	for i in vet:
		if (i%2==0):
			npar + = 1
		else:
			nimpar + = 1
	print(npar)
	print(nimpar)

-- ERROR:
File "XXXX", line 10
    npar + = 1
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:01:11) 
-- CODE:
from numpy import* 

vet = array(eval(input("Vetor: ")))

while(size(vet)>1):
	npar = 0
	nimpar = 0
	for i in vet:
		if (i%2==0):
			npar+= 1
		else:
			nimpar + = 1
	print(npar)
	print(nimpar)

-- ERROR:
File "XXXX", line 12
    nimpar + = 1
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:01:18) 
-- CODE:
from numpy import* 

vet = array(eval(input("Vetor: ")))

while(size(vet)>1):
	npar = 0
	nimpar = 0
	for i in vet:
		if (i%2==0):
			npar = 1
		else:
			nimpar = 1
	print(npar)
	print(nimpar)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import* 
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:10:28) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) >= 1 ):
   npar = 0
	
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

print(npar)

print()

print(size(vet))

vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:10:56) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) >= 1 ):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

print(npar)

print()

print(size(vet))

vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:12:00) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) >= 1 ):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)

   print()

   print(size(vet))

vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 10
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:12:07) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) >= 1 ):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			
	print(npar)

   print()

   print(size(vet))

vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 11
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:12:45) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) >= 1 ):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			
	print(npar)

   print(size(vet))

   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 11
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:12:58) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor: ")))

while (size(vet) >= 1 ):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1		
	print(npar)

   print(size(vet))

   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 10
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:15:39) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
	print(npar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:17:01) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
	print(npar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:26:01) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
				
	print(npar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:26:34) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	nimpar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
		else:
			nimpar= nimpar + 1
	print(npar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:27:01) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	nimpar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
		else:
			nimpar= nimpar + 1
	print(npar)
	
	print(impar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-04 23:27:13) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	nimpar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
		else:
			nimpar= nimpar + 1
	print(npar)
	
	print(nimpar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-04 23:27:36) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	nimpar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
		else:
			nimpar= nimpar + 1
	print(npar)
	
	print(nimpar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- EXECUTION TIME:
0.886506
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
