== SUBMITION (2019-05-11 23:06:14) 
-- CODE:
x = int(input())

c = 0
qd = 0

while(c < x):
	if(x % c == 0):
		print(c)
		qd = qd + 1
	
	c = c + 1

print(qd, "divisores")
-- EXECUTION TIME:
0.193387
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1714/2525/main.py", line 7, in <module>
    if(x % c == 0):
ZeroDivisionError: integer division or modulo by zero

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 23:06:17) 
-- CODE:
x = int(input())

c = 0
qd = 0

while(c < x):
	if(x % c == 0):
		print(c)
		qd = qd + 1
	
	c = c + 1

print(qd, "divisores")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if(x % c == 0):
ZeroDivisionError: integer division or modulo by zero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 23:07:25) 
-- CODE:
x = int(input())

c = 1
qd = 0

while(c < x):
	if(x % c == 0):
		print(c)
		qd = qd + 1
	
	c = c + 1

print(qd, "divisores")
-- EXECUTION TIME:
0.159507
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
5 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
2 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
7 divisores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 23:07:27) 
-- CODE:
x = int(input())

c = 1
qd = 0

while(c < x):
	if(x % c == 0):
		print(c)
		qd = qd + 1
	
	c = c + 1

print(qd, "divisores")
-- OUTPUT:
1
2
3
4
6
5 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 23:08:38) 
-- CODE:
x = int(input())

c = 1
qd = 0

while(c <= x):
	if(x % c == 0):
		print(c)
		qd = qd + 1
	
	c = c + 1

print(qd, "divisores")
-- EXECUTION TIME:
0.170325
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
