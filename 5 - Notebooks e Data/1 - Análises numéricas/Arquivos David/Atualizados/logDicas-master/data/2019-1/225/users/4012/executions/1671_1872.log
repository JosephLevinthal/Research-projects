== SUBMITION (2019-04-24 14:04:27) 
-- CODE:
x = int(input("digite x: "))
y = int(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- EXECUTION TIME:
0.174961
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1872/main.py", line 1, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:04:28) 
-- CODE:
x = int(input("digite x: "))
y = int(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:05:03) 
-- CODE:
x = int(input("digite x: "))
y = int(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:05:20) 
-- CODE:
x = int(input("digite x: "))
y = int(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:05:49) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- OUTPUT:
Q4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:05:56) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- EXECUTION TIME:
0.130258
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Q4
---- user output:
Q4
-- TEST CASE 2:
---- input:
0.1
0
---- correct output:
Eixo X
---- user output:
Origem
-- TEST CASE 3:
---- input:
0.0
0.0
---- correct output:
Origem
---- user output:
Origem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:06:04) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- OUTPUT:
Q4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:06:16) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (y != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- EXECUTION TIME:
0.150202
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Q4
---- user output:
Q4
-- TEST CASE 2:
---- input:
0.1
0
---- correct output:
Eixo X
---- user output:
Origem
-- TEST CASE 3:
---- input:
0.0
0.0
---- correct output:
Origem
---- user output:
Origem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:07:28) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (x != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- OUTPUT:
Q4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:07:34) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (x != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- EXECUTION TIME:
0.158726
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Q4
---- user output:
Q4
-- TEST CASE 2:
---- input:
0.1
0
---- correct output:
Eixo X
---- user output:
Eixo x
-- TEST CASE 3:
---- input:
0.0
0.0
---- correct output:
Origem
---- user output:
Origem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:07:45) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (x != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- OUTPUT:
Q4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:07:52) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (x != 0)):
	print("Eixo x")
elif ((x == 0) and (y != 0)):
	print ("Eixo y")
else: 
	print("Origem")
-- EXECUTION TIME:
0.139316
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Q4
---- user output:
Q4
-- TEST CASE 2:
---- input:
0.1
0
---- correct output:
Eixo X
---- user output:
Eixo x
-- TEST CASE 3:
---- input:
0.0
0.0
---- correct output:
Origem
---- user output:
Origem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:34) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (x != 0)):
	print("Eixo X")
elif ((x == 0) and (y != 0)):
	print ("Eixo Y")
else: 
	print("Origem")
-- OUTPUT:
Q4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:08:42) 
-- CODE:
x = float(input("digite x: "))
y = float(input("digite y: "))

if ((x > 0) and (y  > 0)):
	print("Q1")
elif ((x < 0) and (y > 0)):
	print("Q2")
elif ((x < 0) and (y < 0)):
	print("Q3")
elif ((x > 0) and (y < 0)):
	print("Q4")
elif ((y == 0) and (x != 0)):
	print("Eixo X")
elif ((x == 0) and (y != 0)):
	print ("Eixo Y")
else: 
	print("Origem")
-- EXECUTION TIME:
0.17761
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Q4
---- user output:
Q4
-- TEST CASE 2:
---- input:
0.1
0
---- correct output:
Eixo X
---- user output:
Eixo X
-- TEST CASE 3:
---- input:
0.0
0.0
---- correct output:
Origem
---- user output:
Origem
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
