== TEST (2019-04-14 21:11:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("v0: "))
a = radians(float(input("a: ")))
d = float(input("d: "))
g = 9.8
r = (v0**2) * sin*(2*a) / g

if (abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
	
		 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r = (v0**2) * sin*(2*a) / g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:12:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("v0: "))
a = radians(float(input("a: ")))
d = float(input("d: "))
g = 9.8
r = (v0**2) * sin*(2*a) // g

if (abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
	
		 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r = (v0**2) * sin*(2*a) // g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:13:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("v0: "))
a = radians(float(input("a: ")))
d = float(input("d: "))
g = 9.8
r = (v0**2) * sin * (2*a) // g

if (abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
	
		 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r = (v0**2) * sin * (2*a) // g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:14:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("v0: "))
a = radians(float(input("a: ")))
d = float(input("d: "))
g = 9.8
r = (v0**2) * sin * (2*a) / g

if (abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
	
		 
-- EXECUTION TIME:
0.172504
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/1055/main.py", line 9, in <module>
    r = (v0**2) * sin * (2*a) / g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:14:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("v0: "))
a = radians(float(input("a: ")))
d = float(input("d: "))
g = 9.8
r = (v0**2) * (sin * (2*a)) / g

if (abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
	
		 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r = (v0**2) * (sin * (2*a)) / g
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:16:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("v0: "))
a = radians(float(input("a: ")))
d = float(input("d: "))
g = 9.8
r = ((v0**2)*sin(2*a)) / g

if (abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
	
		 
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:17:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0 = float(input("v0: "))
a = radians(float(input("a: ")))
d = float(input("d: "))
g = 9.8
r = ((v0**2)*sin(2*a)) / g

if (abs(d-r) <= 0.1):
	print("sim")
else:
	print("nao")
	
		 
-- EXECUTION TIME:
0.188674
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
