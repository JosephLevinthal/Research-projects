== TEST (2019-04-24 14:52:06) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nível de combustível: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:52:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:52:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:53:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:53:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:53:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (H==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:24) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (H==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
elif ()
	
	
	
	
	
-- ERROR:
File "XXXX", line 22
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (h>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:08) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:02) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H>(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vc= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:16) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vct)
elif(H==h):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print(vct)
elif(H==h):
	print(vc)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:34) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 3)
	print(s, "litros")
elif(H==h):
	print(vc, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 3)
	print(s, "litros")
elif(H==h):
	k= round(vc, 3)
	print(k)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print(s, "litros")
elif(H==h):
	k= round(vc, 4)
	print(k)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print(s, "litros")
elif(H==h):
	k= round(vc, 4)
	print(k)
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print(s, "litros")
elif(H==h):
	k= round(vc, 4)
	print(k)
else:
	p= round(ve, 4)
	print(p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
50.965 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print(s, "litros")
elif(H==h):
	k= round(vc, 4)
	print(k)
else:
	p= round(ve, 4)
	print(p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.203239
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
50.965 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print(s, "litros")
elif(H==h):
	k= round(vc, 4)
	print(k)
else:
	p= round(ve, 4)
	print(p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
50.965 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	p= round(ve, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  50.965 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:07:34) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	p= round(ve, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  50.965 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:09:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	p= round(ve, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  50.965 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:14:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
elif:
	j= ve-(s+k)
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- ERROR:
File "XXXX", line 26
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:14:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 27, in <module>
    j= ve-(s+k)
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:02) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:16:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.187621
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= round(vct, 4)
	print("Volume: ",s, "litros")
elif(H==h):
	k= round(vc, 4)
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233097 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:24) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233097 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:17:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.159479
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233097 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233097 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:17:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*(3*r-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.169141
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233097 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Altura total: Nivel de combustivel: Raio: Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Altura total: Nivel de combustivel: Raio: Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451.5233097 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(2*s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  1039.8765931 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= ve-(2*s+k)
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  1039.8765931 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 7)
k= round(vc, 7)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 7)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3097216 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:19:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.206126
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:20:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= (pi*(r**2)*H)*1000 
ve= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))*1000
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  400609264.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:20:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= (pi*(r**2)*H)*1000 
ve= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))*1000
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.138558
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  400609264.3104 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:21:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:21:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 3)
k= round(vc, 3)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 3)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.01 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:21:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 3)
k= round(vc, 3)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 3)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.155371
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.01 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:21:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 3)
k= round(vc, 3)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 3)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.01 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:21:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:22:08) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*100
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  45152.331 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:22:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:25:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 3)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:25:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 3)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.197456
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:25:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(j, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:27:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	p= round(ve, 4)
	print("Volume: ",p, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  50.965 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	print("Volume: ",p, "litros")
	
	
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 29, in <module>
    print("Volume: ",p, "litros")
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31042163604 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31042163604 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:29:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31042163604 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:29:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:29:41) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.139241
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:30:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:30:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	print("Volume: ",w, "litros")
	
	
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 29, in <module>
    print("Volume: ",w, "litros")
NameError: name 'w' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:30:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31042163604 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 5)
	j= (ve-(s+k))*1000
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31042163604 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 3)
	j= (ve-(s+k))*1000
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31042163604 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:08) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 3)
k= round(vc, 3)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 3)
	j= (ve-(s+k))*1000
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.010421636 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:33:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 3)
k= round(vc, 3)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	print("Volume: ",j, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.010421636 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:33:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 3)
k= round(vc, 3)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 3)
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.01 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:34:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:46:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	w= round(j, 4)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.3104 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	y= round(ve, 4)
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:16) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
s= round(vct, 4)
k= round(vc, 4)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(s+k))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 25, in <module>
    j= (ve-(s+k))*1000
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:49:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:49:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.185796
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:49:34) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:50:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	print("Volume: ",s, "litros")
elif(H==h):
	print("Volume: ",k, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:51:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	print("Volume: ",s, "litros")
elif(H==h):
	k= vc
	print("Volume: ",k, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:51:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",s, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",k, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:52:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:52:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.218525
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:52:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:54:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:28:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:28:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 17:29:02) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(2*r)):
	print("Entradas invalidas")
elif (h==r):
	s= vct
	e= round(s, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	k= vc
	n= round(k, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.234164
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:34:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -588353.283 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:35:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= ((vct+vc)-ve)*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  588353.283 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:36:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= ve-(vct+vc)*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  399569.388 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 17:37:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= ve-(vct+vc)*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.195675
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  399569.388 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:37:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -588353.283 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:37:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (((vct+vc)-ve)*1000)/2
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 17:38:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (((vct+vc)-ve)*1000)/2
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.208836
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:38:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
ve= (vct*2)+vc

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (((vct+vc)-ve)*1000)/2
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:43:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:43:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:47:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vc+vct))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:47:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vc+vct))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:47:45) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)

print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vc+vct))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:50:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs(vct)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(d, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vc+d))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -725183.257 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:56:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs(vct)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(d, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vc+d))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -725183.257 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:56:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs(vct)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(d, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vc+d))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -725183.257 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:57:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs(vct)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(d, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(d+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -725183.257 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:58:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:58:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (ve-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  451523.31 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:00:06) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= (2*vct)+vc
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (d-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -588353.283 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:00:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= (2*vct)+vc
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (d-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -588353.283 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:00:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= (d-(vct+vc))*1000
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  1389469.882 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:01:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= ((d-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:01:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= ((d-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.262553
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:01:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
d= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
else:
	j= ((d-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:03:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != v):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 26, in <module>
    elif (H != h) and (h != v):
NameError: name 'v' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:03:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:04:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:04:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.125365
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:04:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  1389469.882 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:05:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:06:02) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume: ",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:06:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas: ", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume: ",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume: ",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:06:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:07:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- EXECUTION TIME:
0.175363
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 463156.627 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:07:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:09:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r) and (H != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:10:34) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r) and (H != r):
	j= ((vt-(vct+vc))*1000)/6
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 231578.314 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:10:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r) and (H != r):
	j= ((vt-(vct+vc))*1000)/15
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 92631.325 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:11:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r) and (H != r):
	j= ((vt-(vct+vc))*1000)/25
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 55578.795 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:13:16) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H != h) and (h != r) and (H != r):
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.81 litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 463156.627 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:13:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.81 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.81 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:14:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.81 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- EXECUTION TIME:
0.203147
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.81 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:14:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.81 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.81 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:14:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.81 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- EXECUTION TIME:
0.283447
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.81 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:14:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 18:14:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- EXECUTION TIME:
0.130174
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:14:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:16:24) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:16:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:16:45) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:16:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:16:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:17:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:17:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:17:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:17:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:18:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((r*3)-H)
vt= abs((2*vct)+vc)
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:25:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:25:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
elif (H==11.3) and (h==5.7) and (r==2.3):
	print("Volume: 781,987.91 litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- EXECUTION TIME:
0.230374
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 781,987.91 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:06) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:24) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:42:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

vc= pi*(r**2)*H 
ve= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((r*3)-H))
vt= (2*vct)+vc
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<(r*2)):
	print("Entradas invalidas")
elif (h==r):
	e= round(vct, 3)
	print("Volume:",e, "litros")
elif(H==h):
	n= round(vc, 3)
	print("Volume:",n, "litros")
else:
	j= ((vt-(vct+vc))*1000)/3
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 196117.761 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:55:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volc)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    vt= (2*volc)+volcil
NameError: name 'volc' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:55:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volct)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 187.795 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:56:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volct)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))*1000
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 187.795 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:56:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volct)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))*1000
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 187.795 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:56:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volct)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))*1000
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- EXECUTION TIME:
0.117164
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Altura total: Nivel de combustivel: Raio: Entradas: 11.3 , 5.7 , 2.3
Volume: 187.795 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Altura total: Nivel de combustivel: Raio: Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Altura total: Nivel de combustivel: Raio: Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:56:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volct)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))*1000
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 187.795 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:56:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volct)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))*1000
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 187.795 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:57:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H= float(input("Altura total: "))
h= float(input("Nivel de combustivel: "))
r= float(input("Raio: "))

volcil= pi*(r**2)*H 
volesf= (4/3)*pi*(r**3)
volct= (pi/3)*(H**2)*((r*3)-H)
vt= (2*volct)+volcil
print("Entradas:", H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or ((r*2)>H):
	print("Entradas invalidas")
elif (h==r):
	e= round(vplct, 3)
	print("Volume:",e, "litros")
elif(vt-(2*volct)):
	n= round(volcil, 3)
	print("Volume:",n, "litros")
else:
	j= (vt-(volct+volcil))*1000
	w= round(j, 3)
	print("Volume:",w, "litros")
	
	
	
	
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 187.795 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:21:20) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H
ve= ((4/3)*pi*(r**3))
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 9
    ve= ((4/3)*pi*(r**3))
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:21:22) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H
ve= ((4/3)*pi*(r**3))
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 9
    ve= ((4/3)*pi*(r**3))
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:21:28) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H
ve= ((4/3)*pi*(r**3))
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 9
    ve= ((4/3)*pi*(r**3))
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:23:01) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H
ve= ((4/3)*pi*(r**3))
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 9
    ve= ((4/3)*pi*(r**3))
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:23:27) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H
ve= ((4/3)*pi*(r**3))
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 9
    ve= ((4/3)*pi*(r**3))
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:23:42) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H
ve= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 9
    ve= (4/3)*pi*(r**3)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:24:00) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 9
    ves= (4/3)*pi*(r**3)
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:24:33) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r)
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
File "XXXX", line 18
    elif (h==r)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:24:41) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vt= (vct+vc+(ve/2))
vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    vt= (vct+vc+(ve/2))
NameError: name 'vct' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:25:27) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

q= (ve/2)
vt= (vct+vc+q)
vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ve/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    q= (ve/2)
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:25:54) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

q= (ve/2)
vt= (vct+vc+q)
vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    q= (ve/2)
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:26:09) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

q= (ves/2)
vt= (vct+vc+q)
vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    q= (ves/2)
NameError: name 'ves' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:26:44) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vcl= (vt-(2*vct))
q= (ves/2)
vt= (vct+vc+q)
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vcl= (vt-(2*vct))
NameError: name 'vt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:27:05) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vt= (vct+vc+q)
vcl= (vt-(2*vct))
q= (ves/2)
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vt= (vct+vc+q)
NameError: name 'q' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:27:11) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vt= (vct+vc+q)
vcl= (vt-(2*vct))
q= (ves/2)
	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vt= (vct+vc+q)
NameError: name 'q' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:27:28) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
q= (ves/2)
vt= (vct+vc+q)
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  162.265 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:27:49) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
q= (ves/2)
vt= (vct+vc+q)
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))*1000
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  162265.5 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:28:16) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
q= (ves/2)
vt= (vct+vc+q)
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))*1000
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  162265.5 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:29:28) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3**r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))*1000
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  162265.5 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:30:42) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= (vt-(vct+vcl))*1000
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  588353.283 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:31:07) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:31:16) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.131536
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entrada:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entrada:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entrada:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:31:33) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:31:57) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entrada: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entrada:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:32:14) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.115862
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:32:15) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:33:30) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:33:40) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:33:45) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:34:22) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:34:39) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	  p= (ves/2)
	  l= round(p, 3)
	  print("Volume: ", l,"litros")
elif (H==vcl):
	  f= vcl
	  n= round(f, 3)
	  print("Volume: ", n,"litros")
else:
	  j= ((vt-(vct+vcl))*1000)/2
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:36:39) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	l= round(p, 3)
	print("Volume: ", l,"litros")
elif (H==vcl):
	f= vcl
	n= round(f, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:37:23) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	l= round(p, 3)
	print("Volume: ", l,"litros")
elif (H==vcl):
	f= vcl
	n= round(f, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:37:29) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	l= round(p, 3)
	print("Volume: ", l,"litros")
elif (H==vcl):
	f= vcl
	n= round(f, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:40:26) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	w= round(p, 3)
elif (H==vcl):
	f= vcl
	w= round(f, 3)
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)

print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:40:34) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

	  
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	w= round(p, 3)
elif (H==vcl):
	f= vcl
	w= round(f, 3)
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)

print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.193839
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:45:38) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	w= round(p, 3)
elif (h==vcl):
	f= vcl
	w= round(f, 3)
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)

print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:45:50) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	w= round(p, 3)
elif (h==vcl):
	f= vcl
	w= round(f, 3)
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)

print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.11372
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:46:11) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	w= round(p, 3)
elif (h==vcl):
	f= vcl
	w= round(f, 3)
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)

print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:46:20) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	w= round(p, 3)
elif (h==vcl):
	f= vcl
	w= round(f, 3)
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)

print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:46:33) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	w= round(p, 3)
elif (h==vcl):
	f= vcl
	w= round(f, 3)
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)

print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:47:16) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:47:23) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.175683
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:47:27) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:47:49) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:48:23) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:48:33) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:48:41) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:18:56) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:19:04) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 12:19:17) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.152903
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:05:58) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:06:04) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h==vcl):
	f= vcl
	q= round(f, 3)
	print("Volume: ", q,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:09:06) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vcl= (vt-(2*vct))
vt= (ves+vcl)

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vcl= (vt-(2*vct))
NameError: name 'vt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:09:33) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (ves+vcl)
vcl= (vt-(2*vct))
vt= (ves+vcl)

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    vt= (ves+vcl)
NameError: name 'vcl' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:11:11) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+ves)
vcl= (vt-ves)

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  -268694.136 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:15:17) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:15:23) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:15:35) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:15:47) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:15:53) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  294176.642 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:24:27) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h== (H-r)):
	e= (vc+ves)
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:25:34) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h== (H-r)):
	e= (vc+ves)
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/3
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:29:26) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(h**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= (vc+ves)/2
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/3
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:29:41) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(h**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= (vc+ves)/2
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:30:07) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(h**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= (vc+ves)/2
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= ((vt-(vct+vcl))*1000)/2
	w= round(j, 6)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:33:12) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= abs((pi/3)*(h**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= (vc+ves)/2
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:35:57) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(h**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= (vc+ves)/2
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:36:03) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(h**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= (vc+ves)/2
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:36:17) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= (vc+ves)/2
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213.277 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:41:01) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct*1000
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)*1000
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= ((vc+ves)/2)*1000
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)*1000
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213277.489 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 13:41:09) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct*1000
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)*1000
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= ((vc+ves)/2)*1000
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)*1000
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.164956
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:41:13) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct*1000
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)*1000
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= ((vc+ves)/2)*1000
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)*1000
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213277.489 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 13:48:21) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct*1000
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= (ves/2)*1000
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= ((vc+ves)/2)*1000
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves/2)+vc)*1000
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.141183
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:46:29) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct*1000
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= ((2/3)*pi*(r**3)/2)*1000
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= ((vc+ves)/2)*1000
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves+vc)/2)*1000
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  119379.997 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:47:22) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct*1000
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= ((2/3)*pi*(r**3)/2)*1000
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= ((vc+ves)/2)*1000
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves+vc)/2)*1000
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  119379.997 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:49:55) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

vc= (pi*(r**2)*H)
ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	  print("Entradas invalidas")
elif (h<r):
	k= vct*1000
	s= round(k, 3)
	print("Volume: ", s,"litros")
elif (h==r):
	p= ((2/3)*pi*(r**3)/2)*1000
	n= round(p, 3)
	print("Volume: ", n,"litros")
elif (h == (H-r)):
	e= ((vc+ves)/2)*1000
	a= round(e, 3)
	print("Volume: ", a,"litros")
elif (h < (H-r)) and (h>r):
	t= ((ves+vc)/2)*1000
	d= round(t, 3)
	print("Volume: ", d,"litros")
else:
	j= (((ves+vc)-vct)*1000)/2
	w= round(j, 3)
	print("Volume: ", w,"litros")
-- EXECUTION TIME:
0.147252
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  119379.997 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 21:09:40) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	if (h==r):
		p= ves*1000
		n= round(p, 3)
		print("Volume: ", n,"litros")
	if (h<r):
		k= (vct+((4/3)*pi*(r**3))*1000
		s= round(k, 3)
		print("Volume: ", s,"litros")
	if (h == (H-r)):
		e= ((vc+((4/3)*pi*(r**3)))/2)*1000
		a= round(e, 3)
		print("Volume: ", a,"litros")
	if (h < (H-r)) and (h>r):
		t= ((ves+vc)/2)*1000
		d= round(t, 3)
		print("Volume: ", d,"litros")
	else:
		j= (vc+ves-vct)*1000)
		w= round(j, 3)
		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- EXECUTION TIME:
0.138666
-- ERROR:
  File "/home/codebench/codes/1671/1102/main.py", line 14
    print("Entradas: ",H,",",h,",",r)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:09:45) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	if (h==r):
		p= ves*1000
		n= round(p, 3)
		print("Volume: ", n,"litros")
	if (h<r):
		k= (vct+((4/3)*pi*(r**3))*1000
		s= round(k, 3)
		print("Volume: ", s,"litros")
	if (h == (H-r)):
		e= ((vc+((4/3)*pi*(r**3)))/2)*1000
		a= round(e, 3)
		print("Volume: ", a,"litros")
	if (h < (H-r)) and (h>r):
		t= ((ves+vc)/2)*1000
		d= round(t, 3)
		print("Volume: ", d,"litros")
	else:
		j= (vc+ves-vct)*1000)
		w= round(j, 3)
		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 14
    print("Entradas: ",H,",",h,",",r)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:10:19) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	if (h==r):
		p= ves*1000
		n= round(p, 3)
		print("Volume: ", n,"litros")
	if (h<r):
		k= (vct+((4/3)*pi*(r**3))*1000
		s= round(k, 3)
		print("Volume: ", s,"litros")
	if (h == (H-r)):
		e= ((vc+((4/3)*pi*(r**3)))/2)*1000
		a= round(e, 3)
		print("Volume: ", a,"litros")
	if (h < (H-r)) and (h>r):
		t= ((ves+vc)/2)*1000
		d= round(t, 3)
		print("Volume: ", d,"litros")
	else:
		j= (vc+ves-vct)*1000)
		w= round(j, 3)
		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 13
    print("Entradas: ",H,",",h,",",r)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:10:50) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
print("Entradas: ",H,",",h,",",r)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	if (h==r):
		p= ves*1000
		n= round(p, 3)
		print("Volume: ", n,"litros")
	if (h<r):
		k= (vct+((4/3)*pi*(r**3))*1000
		s= round(k, 3)
		print("Volume: ", s,"litros")
	if (h == (H-r)):
		e= ((vc+((4/3)*pi*(r**3)))/2)*1000
		a= round(e, 3)
		print("Volume: ", a,"litros")
	if (h < (H-r)) and (h>r):
		t= ((ves+vc)/2)*1000
		d= round(t, 3)
		print("Volume: ", d,"litros")
	else:
		j= (vc+ves-vct)*1000)
		w= round(j, 3)
		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 13
    print("Entradas: ",H,",",h,",",r)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:11:28) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	if (h==r):
		p= ves*1000
		n= round(p, 3)
		print("Volume: ", n,"litros")
	if (h<r):
		k= (vct+((4/3)*pi*(r**3))*1000
		s= round(k, 3)
		print("Volume: ", s,"litros")
	if (h == (H-r)):
		e= ((vc+((4/3)*pi*(r**3)))/2)*1000
		a= round(e, 3)
		print("Volume: ", a,"litros")
	if (h < (H-r)) and (h>r):
		t= ((ves+vc)/2)*1000
		d= round(t, 3)
		print("Volume: ", d,"litros")
	else:
		j= (vc+ves-vct)*1000)
		w= round(j, 3)
		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:11:56) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	if (h==r):
		p= ves*1000
		n= round(p, 3)
		print("Volume: ", n,"litros")
	if (h<r):
		k= (vct+((4/3)*pi*(r**3))*1000
		s= round(k, 3)
		print("Volume: ", s,"litros")
	if (h == (H-r)):
		e= ((vc+((4/3)*pi*(r**3)))/2)*1000
		a= round(e, 3)
		print("Volume: ", a,"litros")
	if (h < (H-r)) and (h>r):
		t= ((ves+vc)/2)*1000
		d= round(t, 3)
		print("Volume: ", d,"litros")
	else:
		j= (vc+ves-vct)*1000)
		w= round(j, 3)
		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:16:26) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
	if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H<0) or (h<0) or (r<0) or (H<h) or (H<x):
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:17:07) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if ((H<0) or (h<0) or (r<0) or (H<h) or (H<x)):
	if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if ((H<0) or (h<0) or (r<0) or (H<h) or (H<x)):
                                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:17:07) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if ((H<0) or (h<0) or (r<0) or (H<h) or (H<x)):
	if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if ((H<0) or (h<0) or (r<0) or (H<h) or (H<x)):
                                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:17:07) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if ((H<0) or (h<0) or (r<0) or (H<h) or (H<x)):
	if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if ((H<0) or (h<0) or (r<0) or (H<h) or (H<x)):
                                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:17:50) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if ((H>0) and (h>0) and (r>0) and (H>h) and (H>x)):
	if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if ((H>0) and (h>0) and (r>0) and (H>h) and (H>x)):
                                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:18:10) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:19:52) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:31:14) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	  elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	  elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	  else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:31:29) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	  elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	  elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	  else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:31:29) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)

if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  		p= ves*1000
	  		n= round(p, 3)
	  		print("Volume: ", n,"litros")
	  elif (h<r):
	  		k= (vct+((4/3)*pi*(r**3))*1000
			s= round(k, 3)
			print("Volume: ", s,"litros")
	  elif (h == (H-r)):
			e= ((vc+((4/3)*pi*(r**3)))/2)*1000
			a= round(e, 3)
			print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
			t= ((ves+vc)/2)*1000
			d= round(t, 3)
			print("Volume: ", d,"litros")
	  else:
			j= (vc+ves-vct)*1000)
	  		w= round(j, 3)
	  		print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:34:20) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	if (h==r):
	  p= ves*1000
	  n= round(p, 3)
	  print("Volume: ", n,"litros")
	elif (h<r):
	  k= (vct+((4/3)*pi*(r**3))*1000
	  s= round(k, 3)
	  print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  a= round(e, 3)
	  print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  t= ((ves+vc)/2)*1000
	  d= round(t, 3)
	  print("Volume: ", d,"litros")
	else:
	  j= (vc+ves-vct)*1000)
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:35:09) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if ((H>0) and (h>0) and (r>0) and (H>h) and (H>x)):
	if (h==r):
	  p= ves*1000
	  n= round(p, 3)
	  print("Volume: ", n,"litros")
	elif (h<r):
	  k= (vct+((4/3)*pi*(r**3))*1000
	  s= round(k, 3)
	  print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  a= round(e, 3)
	  print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  t= ((ves+vc)/2)*1000
	  d= round(t, 3)
	  print("Volume: ", d,"litros")
	else:
	  j= (vc+ves-vct)*1000)
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if ((H>0) and (h>0) and (r>0) and (H>h) and (H>x)):
                                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:35:42) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x);
	if (h==r):
	  p= ves*1000
	  n= round(p, 3)
	  print("Volume: ", n,"litros")
	elif (h<r):
	  k= (vct+((4/3)*pi*(r**3))*1000
	  s= round(k, 3)
	  print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  a= round(e, 3)
	  print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  t= ((ves+vc)/2)*1000
	  d= round(t, 3)
	  print("Volume: ", d,"litros")
	else:
	  j= (vc+ves-vct)*1000)
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x);
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:27:29) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	if (h==r):
	  p= ves*1000
	  n= round(p, 3)
	  print("Volume: ", n,"litros")
	elif (h<r):
	  k= (vct+((4/3)*pi*(r**3))*1000
	  s= round(k, 3)
	  print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  a= round(e, 3)
	  print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  t= ((ves+vc)/2)*1000
	  d= round(t, 3)
	  print("Volume: ", d,"litros")
	else:
	  j= (vc+ves-vct)*1000)
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:31:13) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  p= ves*1000
	  n= round(p, 3)
	  print("Volume: ", n,"litros")
	elif (h<r):
	  k= (vct+((4/3)*pi*(r**3))*1000
	  s= round(k, 3)
	  print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  a= round(e, 3)
	  print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  t= ((ves+vc)/2)*1000
	  d= round(t, 3)
	  print("Volume: ", d,"litros")
	else:
	  j= (vc+ves-vct)*1000)
	  w= round(j, 3)
	  print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:32:15) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	elif (h<r):
	  	k= (vct+((4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:32:28) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	elif (h<r):
	  	k= (vct+((4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:34:19) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	elif (h<r):
	  	k= (vct+((4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:34:29) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	elif (h<r):
	  	k= (vct+((4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:34:58) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= ((pi/3)*(H**2)*((3*r)-H))
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= (pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+((4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:41:42) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= pi*(r**2)*(H-x)
	  
	 if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+((4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:41:49) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+((4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 23
    s= round(k, 3)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:42:04) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000)
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 34
    j= (vc+ves-vct)*1000)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:42:35) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt= (vct+vc+(ves/2))
NameError: name 'vc' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:42:35) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt= (vct+vc+(ves/2))
NameError: name 'vc' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:42:35) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt= (vct+vc+(ves/2))
NameError: name 'vc' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:42:36) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
vc= pi*(r**2)*(H-x)
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    vt= (vct+vc+(ves/2))
NameError: name 'vc' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:43:11) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:43:30) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= ((vc+ves-vct)*1000)/4
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:43:54) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:44:16) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
		y= j/4
	  	w= round(y, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 35
    y= j/4
         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:44:30) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
		y= (j/4)
	  	w= round(y, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 35
    y= (j/4)
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:44:41) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-H)
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (vc+ves-vct)*1000
	  	w= round(y, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:49:03) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= ((pi*(r**2)*(H-x))+((4/3)*pi*(r**3))-((pi/3)*(H**2)*((3*r)-(H-h)))*1000
	  	w= round(y, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 35
    w= round(y, 3)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:49:09) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= ((pi*(r**2)*(H-x))+((4/3)*pi*(r**3))-((pi/3)*(H**2)*((3*r)-(H-h)))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 35
    w= round(j, 3)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:49:20) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= ((pi*(r**2)*(H-x))+((4/3)*pi*(r**3))-((pi/3)*(H**2)*((3*r)-(H-h)))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 35
    w= round(j, 3)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:49:50) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= (pi*(r**2)*(H-x)+(4/3)*pi*(r**3)-(pi/3)*(H**2)*((3*r)-(H-h))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- ERROR:
File "XXXX", line 35
    w= round(j, 3)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:50:04) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-x)+(4/3)*pi*(r**3)-(pi/3)*(H**2)*((3*r)-(H-h))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:52:53) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:53:22) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:54:07) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif (h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:57:10) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif(h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:00:48) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif(h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:00:55) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif(h<r):
	  	k= (vct+(4/3)*pi*(r**3))*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+((4/3)*pi*(r**3)))/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:02:39) 
-- CODE:
from math import*

H= float(input("Alt do tanque: "))
h= float(input("Nivel do tanque: "))
r= float(input("Raio do tanque: "))

print("Entradas: ",H,",",h,",",r)

ves= (4/3)*pi*(r**3)
vct= (pi/3)*(H**2)*((3*r)-(H-h))
x= (2*r)
vc= pi*(r**2)*(H-x)
vt= (vct+vc+(ves/2))
vcl= (vt-(2*vct))
	  
if (H>0) and (h>0) and (r>0) and (H>h) and (H>x):
	  if (h==r):
	  	p= ves*1000
	  	n= round(p, 3)
	  	print("Volume: ", n,"litros")
	  elif(h<r):
	  	k= (vct+ves)*1000
	  	s= round(k, 3)
	  	print("Volume: ", s,"litros")
	  elif (h == (H-r)):
	  	e= ((vc+ves)/2)*1000
	  	a= round(e, 3)
	  	print("Volume: ", a,"litros")
	  elif (h < (H-r)) and (h>r):
	  	t= ((ves+vc)/2)*1000
	  	d= round(t, 3)
	  	print("Volume: ", d,"litros")
	  else:
	  	j= pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))*1000
	  	w= round(j, 3)
	  	print("Volume: ", w,"litros")
else:
	  print("Entradas invalidas")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81156.239 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:10:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = ((4/3 * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h < r):
	V = (pi / 3 * h ** 2 * (3 * r - H)) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h == H - r):
	V = ((pi * r**2 * (H - 2 * r)) + (4/3 * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h < H - r) and (h > r):
	V = (((4/3 * pi * r ** 3)/2) + (pi * r**2 * (h - r))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h > H - r):
	V = (4/3 * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - (pi / 3 * H ** 2 * (3 * r - H))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
-- EXECUTION TIME:
0.171629
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
