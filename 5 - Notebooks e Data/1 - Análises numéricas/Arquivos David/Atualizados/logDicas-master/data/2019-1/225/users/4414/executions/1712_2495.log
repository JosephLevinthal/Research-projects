== SUBMITION (2019-05-08 14:16:45) 
-- CODE:

# Primeiro input
num = int(input("Digite um numero: "))

# Laco de repeticao
while (CONDIÇÃO DO LAÇO):
	# Verifica se valor eh divisivel por 2
	if (num/2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	# Inputs seguintes
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.187969
-- ERROR:
  File "/home/codebench/codes/1712/2495/main.py", line 6
    while (CONDI\xc7\xc3O DO LA\xc7O):
                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:21:41) 
-- CODE:

num = int(input("Digite um numero: "))

# Laco de repeticao
while (num!=-1):
	# Verifica se valor eh divisivel por 2
	if (num/2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	# Inputs seguintes
	num = int(input("Digite um numero: "))

-- OUTPUT:
IMPAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:22:10) 
-- CODE:

num = int(input("Digite um numero: "))

# Laco de repeticao
while (num!=-1):
	# Verifica se valor eh divisivel por 2
	if (num/2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	# Inputs seguintes
	num = int(input("Digite um numero: "))

-- OUTPUT:
IMPAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:22:18) 
-- CODE:

num = int(input("Digite um numero: "))

# Laco de repeticao
while (num!=-1):
	# Verifica se valor eh divisivel por 2
	if (num/2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	# Inputs seguintes
	num = int(input("Digite um numero: "))

-- OUTPUT:
IMPAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:22:24) 
-- CODE:

num = int(input("Digite um numero: "))

# Laco de repeticao
while (num!=-1):
	# Verifica se valor eh divisivel por 2
	if (num/2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	# Inputs seguintes
	num = int(input("Digite um numero: "))

-- OUTPUT:
IMPAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:23:47) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=5):

	if (num/2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:23:53) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=5):

	if (num/2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:24:09) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=5):

	if (num//2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:24:21) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.177317
-- TEST CASE 1:
---- input:
0
22
44
-1
---- correct output:
PAR
PAR
PAR
---- user output:
IMPAR
PAR
PAR
-- TEST CASE 2:
---- input:
1
33
55
777
9999
-1
---- correct output:
IMPAR
IMPAR
IMPAR
IMPAR
IMPAR
---- user output:
IMPAR
PAR
PAR
PAR
PAR
-- TEST CASE 3:
---- input:
10528
4999
123
45
6
-1
---- correct output:
PAR
IMPAR
IMPAR
IMPAR
PAR
---- user output:
PAR
PAR
PAR
PAR
PAR
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:24:22) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- OUTPUT:
IMPAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:25:20) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2):
		mensagem = "PAR"
		print(mensagem)
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.152068
-- TEST CASE 1:
---- input:
0
22
44
-1
---- correct output:
PAR
PAR
PAR
---- user output:
IMPAR
PAR
PAR
PAR
PAR
-- TEST CASE 2:
---- input:
1
33
55
777
9999
-1
---- correct output:
IMPAR
IMPAR
IMPAR
IMPAR
IMPAR
---- user output:
IMPAR
PAR
PAR
PAR
PAR
PAR
PAR
PAR
PAR
-- TEST CASE 3:
---- input:
10528
4999
123
45
6
-1
---- correct output:
PAR
IMPAR
IMPAR
IMPAR
PAR
---- user output:
PAR
PAR
PAR
PAR
PAR
PAR
PAR
PAR
PAR
PAR
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:25:22) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2):
		mensagem = "PAR"
		print(mensagem)
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- OUTPUT:
IMPAR
PAR
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:25:59) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.203155
-- TEST CASE 1:
---- input:
0
22
44
-1
---- correct output:
PAR
PAR
PAR
---- user output:
Digite um numero: PAR
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero:
-- TEST CASE 2:
---- input:
1
33
55
777
9999
-1
---- correct output:
IMPAR
IMPAR
IMPAR
IMPAR
IMPAR
---- user output:
Digite um numero: PAR
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero:
-- TEST CASE 3:
---- input:
10528
4999
123
45
6
-1
---- correct output:
PAR
IMPAR
IMPAR
IMPAR
PAR
---- user output:
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero: IMPAR
Digite um numero:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:26:00) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- OUTPUT:
PAR
IMPAR
IMPAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:26:15) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	not if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.209499
-- ERROR:
  File "/home/codebench/codes/1712/2495/main.py", line 7
    not if (num//2==0):
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:26:17) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	not if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
File "XXXX", line 7
    not if (num//2==0):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:26:22) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	 if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
File "XXXX", line 8
    mensagem = "PAR"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:26:31) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	 if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
File "XXXX", line 8
    mensagem = "PAR"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:26:46) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- OUTPUT:
PAR
IMPAR
IMPAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:26:56) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- OUTPUT:
PAR
IMPAR
IMPAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:27:08) 
-- CODE:

num = int(input("Digite um numero: "))


while (num!=-1):

	if (num//2=0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
File "XXXX", line 7
    if (num//2=0):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:27:38) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x //2  == 0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:27:45) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x //2  == 0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:28:49) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x // 2  == (1)):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:28:59) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x // 2  == (0)):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:29:33) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x //2  == (0)):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:31:16) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x //2  == (0)):
	
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.176991
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1712/2495/main.py", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:31:18) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x //2  == (0)):
	
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:33:44) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2  == (0)):
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.125464
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1712/2495/main.py", line 13, in <module>
    num = int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:33:46) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2  == (0)):
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:34:02) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2 ==0):
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:34:40) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2 and //0):
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.125292
-- ERROR:
  File "/home/codebench/codes/1712/2495/main.py", line 7
    if (x%2 and //0):
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:34:41) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2 and //0):
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
File "XXXX", line 7
    if (x%2 and //0):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:35:25) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2==0):
		print("PAR")
	else:

	   print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:37:11) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2 = 0):
		print("PAR")
	else:
		print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
File "XXXX", line 7
    if (x%2 = 0):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:38:29) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2==0):
		print("PAR")
	else:
		print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:39:07) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2==0):
		print("PAR")
	else:
		print("IMPAR")
	
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-08 14:39:46) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2==0):
		print("PAR")
	else:
		print("IMPAR")
	
	x = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-08 14:40:01) 
-- CODE:

x = int(input("Digite um numero: "))


while (x !=-1):

	if (x%2==0):
		print("PAR")
	else:
		print("IMPAR")
	
	x = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.135278
-- TEST CASE 1:
---- input:
0
22
44
-1
---- correct output:
PAR
PAR
PAR
---- user output:
PAR
PAR
PAR
-- TEST CASE 2:
---- input:
1
33
55
777
9999
-1
---- correct output:
IMPAR
IMPAR
IMPAR
IMPAR
IMPAR
---- user output:
IMPAR
IMPAR
IMPAR
IMPAR
IMPAR
-- TEST CASE 3:
---- input:
10528
4999
123
45
6
-1
---- correct output:
PAR
IMPAR
IMPAR
IMPAR
PAR
---- user output:
PAR
IMPAR
IMPAR
IMPAR
PAR
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
