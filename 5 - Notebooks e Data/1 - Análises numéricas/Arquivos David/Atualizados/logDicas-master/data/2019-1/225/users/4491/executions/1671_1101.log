== TEST (2019-04-24 14:16:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", x e "tipo", t)	 
			 if ()
-- ERROR:
File "XXXX", line 6
    print("Entradas:", x e "tipo", t)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", x "e tipo", t)	 
			 if ()
-- ERROR:
File "XXXX", line 6
    print("Entradas:", x "e tipo", t)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", x "e tipo", t)	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", x "e tipo", t)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:20:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", x e tipo "t")	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", x e tipo "t")	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", x kWh)	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", x kWh)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:22:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", c kWh)	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", c kWh)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:22:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", c "kWh")	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", c "kWh")	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:22:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", c)	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", c)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
	print("Entradas:", c)	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", c)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
print("Entradas:", c)	 
			
-- ERROR:
File "XXXX", line 6
    print("Entradas:", c)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) "
			 
print("Entradas:", c)	 
			
-- ERROR:
File "XXXX", line 7
    print("Entradas:", c)	 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:25:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c)	 

-- OUTPUT:
Entradas: -56.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:28:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c kWh "," e "tipo")	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c kWh "," e "tipo")	 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:28:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c kWh "," e "tipo" t)	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c kWh "," e "tipo" t)	 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:28:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c "kWh"" "," e "tipo" t)	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c "kWh"" "," e "tipo" t)	 
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c "kWh"", e "tipo" t)	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c "kWh"", e "tipo" t)	 
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c "kWh"" , e "tipo" t)	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c "kWh"" , e "tipo" t)	 
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c "kWh" , e "tipo" t)	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c "kWh" , e "tipo" t)	 
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c "kWh", e "tipo" t)	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c "kWh", e "tipo" t)	 
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c kWh "," e "tipo: ", t )	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c kWh "," e "tipo: ", t )	 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:30:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c, kWh "," e "tipo: ", t )	 

-- ERROR:
File "XXXX", line 7
    print("Entradas:", c, kWh "," e "tipo: ", t )	 
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:30:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
c = float(input("c: "))
t = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c, "kWh e tipo: ", t )	 

-- OUTPUT:
Entradas: -56.0 kWh e tipo:  I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("c: "))
y = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c, "kWh e tipo: ", t )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("Entradas:", c, "kWh e tipo: ", t )	 
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("c: "))
y = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c, "kWh e tipo: ", t )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("Entradas:", c, "kWh e tipo: ", t )	 
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("c: "))
y = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", c, "kWh e tipo: ", t )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("Entradas:", c, "kWh e tipo: ", t )	 
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("c: "))
y = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo: ", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo:  I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("c: "))
y = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:04:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("c: "))
y = input("tipo de instalacao (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- EXECUTION TIME:
0.161181
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("c: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- EXECUTION TIME:
0.149204
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, kWh e tipo, y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- ERROR:
File "XXXX", line 7
    print("Entradas:", x, kWh e tipo, y )	 
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:07:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:08:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 

if (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:10:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 
if( x > 0):
	elif (y == "R") and (x <= 500):
	z = x*0.44
	print("Valor total: R$", round(z, 2))
	elif(y == "R" and x > 500):
	z = x*0.65
	print("Valor total: R$", round(z, 2))
		elif(y == "C") and (x <= 1000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
	elif(y == "C") and (x > 1000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
	elif(y == "I") and (x <= 5000):
	z = x*0.55
	print("Valor total: R$", round(z, 2))
	elif(y == "I") and (x > 5000):
	z = x*0.60
	print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- ERROR:
File "XXXX", line 9
    elif (y == "R") and (x <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:10:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 
if( x > 0):
	elif (y == "R") and (x <= 500):
		z = x*0.44
		print("Valor total: R$", round(z, 2))
	elif(y == "R" and x > 500):
		z = x*0.65
		print("Valor total: R$", round(z, 2))
		elif(y == "C") and (x <= 1000):
	z = x*0.55
		print("Valor total: R$", round(z, 2))
		elif(y == "C") and (x > 1000):
	z = x*0.60
		print("Valor total: R$", round(z, 2))
		elif(y == "I") and (x <= 5000):
	z = x*0.55
		print("Valor total: R$", round(z, 2))
		elif(y == "I") and (x > 5000):
	z = x*0.60
		print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- ERROR:
File "XXXX", line 9
    elif (y == "R") and (x <= 500):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:11:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
y = input("tipo de instalacao? (R/I/C) ")
			 
print("Entradas:", x, "kWh e tipo", y )	 
if( x > 0):
	if (y == "R") and (x <= 500):
		z = x*0.44
		print("Valor total: R$", round(z, 2))
	elif(y == "R" and x > 500):
		z = x*0.65
		print("Valor total: R$", round(z, 2))
	elif(y == "C") and (x <= 1000):
		z = x*0.55
		print("Valor total: R$", round(z, 2))
	elif(y == "C") and (x > 1000):
		z = x*0.60
		print("Valor total: R$", round(z, 2))
	elif(y == "I") and (x <= 5000):
		z = x*0.55
		print("Valor total: R$", round(z, 2))
	elif(y == "I") and (x > 5000):
		z = x*0.60
		print("Valor total: R$", round(z, 2))
else: 
	print("Dados invalidos")
	

-- EXECUTION TIME:
0.127296
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
