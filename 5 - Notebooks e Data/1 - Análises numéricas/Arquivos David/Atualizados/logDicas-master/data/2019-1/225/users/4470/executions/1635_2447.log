== TEST (2019-04-08 13:17:51) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento

if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(x, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(x, 2))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:18:00) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento

if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(x, 2))
-- EXECUTION TIME:
0.181622
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2447/main.py", line 11, in <module>
    print(round(x, 2))
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:19:22) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento

if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(X, 2))
-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:19:27) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento

if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(X, 2))
-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:21:08) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 0
if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(X, 2))
-- OUTPUT:
26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:22:17) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 0
if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:22:24) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 0
if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:23:24) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:23:29) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:23:46) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:23:54) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X "
	
else: 
	msg = "Troco de Y "
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:38) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 
if (preco>pagamento):
	msg = "Falta X " + X
	
else: 
	msg = "Troco de Y " + Y
	
print(round(msg, 2))
-- ERROR:
File "XXXX", line 4
    Y = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:39) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 
if (preco>pagamento):
	msg = "Falta X " + X
	
else: 
	msg = "Troco de Y " + Y
	
print(round(msg, 2))
-- ERROR:
File "XXXX", line 4
    Y = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:48) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " + X
	
else: 
	msg = "Troco de Y " + Y
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:26:05) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 0
if (preco>pagamento):
	msg = "Falta X " + X
	
else: 
	msg = "Troco de Y " + Y
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:26:51) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 0
if (preco>pagamento):
	msg = "Falta X " + X
	
else: 
	msg = "Troco de Y " + Y
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:27:03) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 0
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:27:11) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = 0
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:28:02) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco/pagamento
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(msg, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:30:34) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(msg)
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:30:42) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(msg)
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:30:44) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(msg)
-- EXECUTION TIME:
0.173707
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta X
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de Y
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de Y
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:30:49) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(msg)
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:30:50) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(msg)
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:31:09) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " 
	
else: 
	msg = "Troco de Y " 
	
print(msg)
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:31:45) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X " + Y
	
else: 
	msg = "Troco de Y " + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X " + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:32:05) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:10) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:55) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:57) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:57) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:57) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:58) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:58) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:58) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:58) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:59) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:59) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:35:59) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:00) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:00) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:00) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:01) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:01) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:01) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:01) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:02) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:02) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:02) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:03) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:03) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:03) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:03) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:04) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:04) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:36:46) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:37:09) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco == 0
if (preco>pagamento):
	msg = "Falta X" + Y
	
else: 
	msg = "Troco de Y" + X
	
print(round(msg, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta X" + Y
TypeError: must be str, not bool
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:46:12) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y", round(Y, 2))

-- OUTPUT:
Falta X 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:46:21) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y", round(Y, 2))

-- OUTPUT:
Falta X 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:46:26) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y", round(Y, 2))

-- OUTPUT:
Falta X 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:49:01) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y", round(Y, 2))

-- OUTPUT:
Falta X 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:49:03) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y", round(Y, 2))

-- EXECUTION TIME:
0.147089
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta X 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de Y 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de Y 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:49:15) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",(round(X, 2))
	
else: 
	print("Troco de Y", (round(Y, 2))

-- ERROR:
File "XXXX", line 8
    else: 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:49:34) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",(round(X, 2))
	
else: 
	print("Troco de Y",(round(Y, 2))

-- ERROR:
File "XXXX", line 8
    else: 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:49:44) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y",round(Y, 2))

-- OUTPUT:
Falta X 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:49:51) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y",round(Y, 2))

-- EXECUTION TIME:
0.150707
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta X 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de Y 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de Y 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:51:57) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta X",round(X, 2))
	
else: 
	print("Troco de Y",round(Y, 2))

-- OUTPUT:
Falta X 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:52:13) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta ",round(X, 2))
	
else: 
	print("Troco de ",round(Y, 2))

-- OUTPUT:
Falta  26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:52:22) 
-- CODE:
preco = float(input())
pagamento = float(input())
X = preco - pagamento
Y = pagamento - preco
if (preco>pagamento):
	print("Falta ",round(X, 2))
	
else: 
	print("Troco de ",round(Y, 2))

-- EXECUTION TIME:
0.190082
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta  26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de  28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de  0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
