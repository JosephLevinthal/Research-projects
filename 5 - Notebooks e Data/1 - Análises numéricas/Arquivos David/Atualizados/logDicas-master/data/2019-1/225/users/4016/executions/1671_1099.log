== TEST (2019-04-24 14:37:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))
if (())
-- ERROR:
File "XXXX", line 6
    if (())
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:38:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))
if (())
-- ERROR:
File "XXXX", line 6
    if (())
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))
if ((a>=b+a) or (b>=a+c) or (c>=b+a)):
	print("Entradas: ", A,",",B,",",C)
	print("Tipo de triangulo:")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if ((a>=b+a) or (b>=a+c) or (c>=b+a)):
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:09:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Entradas: ", A,",",B,",",C)
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("equilatero")
	else:
		if(A==B) or (B==C):
			print("isosceles")
			if((A!=B))
-- ERROR:
File "XXXX", line 16
    if((A!=B))
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:14:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Entradas: ", A,",",B,",",C)
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("equilatero")
	else:
		if(A==B) or (B==C):
			print("isosceles")
			if((A!=B) and (B!=C)):
				print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:14:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Entradas: ", A,",",B,",",C)
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("equilatero")
	else:
		if(A==B) or (B==C):
			print("isosceles")
			if((A!=B) and (B!=C)):
				print("escaleno")
-- EXECUTION TIME:
0.213465
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:17:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- EXECUTION TIME:
0.204726
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("lado A : "))
B= float(input("lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:18:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- EXECUTION TIME:
0.120189
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:20:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:20:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:20:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
			if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:21:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
		if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:21:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de Triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de Triangulo: isosceles")
		if((A!=B) and (B!=C)):
				print("Tipo de Triangulo: escaleno")
-- EXECUTION TIME:
0.153138
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de Triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de Triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:22:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de triangulo: isosceles")
		if((A!=B) and (B!=C)):
				print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:22:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de triangulo: isosceles")
		if((A!=B) and (B!=C)):
				print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:22:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A= float(input("Lado A : "))
B= float(input("Lado B : "))
C= float(input("Lado C : "))

print("Entradas: ", A,",",B,",",C) 

if ((A>=B+C) or (B>=A+C) or (C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B)and (B==C)and (C==A)) :
		print("Tipo de triangulo: equilatero")
	else:
		if(A==B) or (B==C):
			print("Tipo de triangulo: isosceles")
		if((A!=B) and (B!=C)):
				print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.1405
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
