== TEST (2019-04-08 14:21:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(int(input()))
D = float(input())
g = 9.8
R = (v0)2.sin(2*a)/g
if (abs(D-R)>0.1)
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 9
    R = (v0)2.sin(2*a)/g
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:21:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(int(input()))
D = float(input())
g = 9.8
R = (v0)**2.sin(2*a)/g
if (abs(D-R)>0.1)
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 9
    R = (v0)**2.sin(2*a)/g
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:22:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(int(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1)
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 10
    if (abs(D-R)>0.1)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:22:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(int(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1)
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 10
    if (abs(D-R)>0.1)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:22:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(int(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(int(input()))
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:22:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(int(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.162808
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/1055/main.py", line 6, in <module>
    a = radians(int(input()))
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:22:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(int(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(int(input()))
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:23:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (v0)**2*sin*(2*a)/g
NameError: name 'v0' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:25:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (vo)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (vo)**2*sin*(2*a)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = ((vo)**2*sin*(2*a))/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = ((vo)**2*sin*(2*a))/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:27:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = ((vo)**2*sin*(2*a))/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.212971
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/1055/main.py", line 9, in <module>
    R = ((vo)**2*sin*(2*a))/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (vo)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (vo)**2*sin*(2*a)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (vo)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (vo)**2*sin*(2*a)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (v0)**2*sin*(2*a)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:29:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = init(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = init(input())
NameError: name 'init' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:29:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = int(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:29:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = int(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:29:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = int(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = input()
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (v0)**2*sin*(2*a)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:31:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin*(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (v0)**2*sin*(2*a)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:31:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:31:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.141871
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:33:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin(2*a)/g
if (abs(D-R)>0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:33:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin(2*a)/g
if (abs(D-R)>0.1):
	print("nao")
else:
	print("sim")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:34:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0 = float(input())
a = radians(float(input()))
D = float(input())
g = 9.8
R = (v0)**2*sin(2*a)/g
if (abs(D-R)>0.1):
	print("nao")
else:
	print("sim")
-- EXECUTION TIME:
0.18105
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
