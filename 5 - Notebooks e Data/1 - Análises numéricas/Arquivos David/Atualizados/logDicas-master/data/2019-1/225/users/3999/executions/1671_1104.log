== TEST (2019-04-24 13:04:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c<d)):
	z="Entradas invalidas"


-- OUTPUT:
420.0 extras e 20.0 de falta
R$ 500.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:08:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c<d)):
	z="Entradas invalidas"
else:
	if(b>a)and(d>c):
		z="Ha intersecao"
	else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:08:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c<d)):
	z="Entradas invalidas"
else:
	if(b>a)and(d>c):
		z="Ha intersecao"
	else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- EXECUTION TIME:
0.160618
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 1.5 , 5.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: -1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:21:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif(a<c)and(b>d)or(a>c)and(b<d)or(a==c)and(b==d):
		z="Ha intersecao"
	else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- EXECUTION TIME:
0.274847
-- ERROR:
  File "/home/codebench/codes/1671/1104/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:21:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif(a<c)and(b>d)or(a>c)and(b<d)or(a==c)and(b==d):
		z="Ha intersecao"
	else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:22:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif(a<c)and(b>d)or(a>c)and(b<d)or(a==c)and(b==d):
		z="Ha intersecao"
	else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:22:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif(a<c)and(b>d)or(a>c)and(b<d)or(a==c)and(b==d):
		z="Ha intersecao"
else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- EXECUTION TIME:
0.166117
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 1.5 , 5.0
Entradas invalidas
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: -1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:22:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif(a<c)and(b>d)or(a>c)and(b<d)or(a==c)and(b==d):
		z="Ha intersecao"
else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:22:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif((a<c)and(b>d))or((a>c)and(b<d))or((a==c)and(b==d)):
		z="Ha intersecao"
else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- EXECUTION TIME:
0.154983
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 1.5 , 5.0
Entradas invalidas
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: -1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:22:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif((a<c)and(b>d))or((a>c)and(b<d))or((a==c)and(b==d)):
		z="Ha intersecao"
else:
		z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:23:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif((a<c)and(b>d))or((a>c)and(b<d))or((a==c)and(b==d)):
	z="Ha intersecao"
else:
	z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- EXECUTION TIME:
0.19222
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 1.5 , 5.0
Entradas invalidas
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: -1.0 , -3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:24:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif((a<c)and(b>d))or((a>c)and(b<d))or((a==c)and(b==d)):
	z="Ha intersecao"
else:
	z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",a,",",b)
print(z)

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 1.0 , 2.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:24:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif((a<c)and(b>d))or((a>c)and(b<d))or((a==c)and(b==d)):
	z="Ha intersecao"
else:
	z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
print(z)

-- EXECUTION TIME:
0.185973
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Entradas invalidas
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:24:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c>d)):
	z="Entradas invalidas"
elif((a<c)and(b>d))or((a>c)and(b<d))or((a==c)and(b==d)):
	z="Ha intersecao"
else:
	z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
print(z)

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:25:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input())
b=float(input())
c=float(input())
d=float(input())
if not((b>a)and(c<d)):
	z="Entradas invalidas"
elif((a<c)and(b>d))or((a>c)and(b<d))or((a==c)and(b==d)):
	z="Ha intersecao"
else:
	z="Nao ha intersecao"
print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)
print(z)

-- EXECUTION TIME:
0.154494
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
