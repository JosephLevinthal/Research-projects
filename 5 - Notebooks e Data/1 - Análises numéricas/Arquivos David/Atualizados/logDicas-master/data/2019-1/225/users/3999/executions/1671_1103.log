== TEST (2019-04-24 01:24:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,b)
elif(b<=a):
			print("Entradas",a,b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:25:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a",",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a",",b)
-- ERROR:
File "XXXX", line 10
    print("Entradas",a",",b,"invalidas")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:25:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a","b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a",",b)
-- ERROR:
File "XXXX", line 10
    print("Entradas",a","b,"invalidas")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:26:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a",",b)
-- ERROR:
File "XXXX", line 12
    print(x,"nao pertence ao intervalo",a",",b)
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:26:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a","b)
-- ERROR:
File "XXXX", line 12
    print(x,"nao pertence ao intervalo",a","b)
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:27:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 01:27:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,b)
-- EXECUTION TIME:
0.175955
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:27:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:28:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 01:28:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(x>=a)and(x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(b<=a):
			print("Entradas",a,"e",b,"invalidas")
else:
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.195649
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
