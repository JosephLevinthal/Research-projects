== TEST (2019-06-09 18:48:18) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
t = 0
# Verifica se o programa vai terminar
while (size(vet) > ???):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == ???):
         npar = npar + 1

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    while (size(vet) > ???):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:18:38) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (elemento % 2 == ???):
         npar = npar + 1

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    if (elemento % 2 == ???):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:18:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (elemento % 2 == ???):
         npar = npar + 1

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    if (elemento % 2 == ???):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:18:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (elemento % 2 == ???):
         npar = npar + 1

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    if (elemento % 2 == ???):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:22:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == vet[i]):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 20
    print(???)
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:23:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == vet[i]):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:29:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         npar = npar + 1
		elif(i % 2 != 0):
			nimpar = nimpar + 1 
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(ninpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:29:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         npar = npar + 1
		elif(i % 2 != 0):
			nimpar = nimpar + 1 
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(ninpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:29:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         npar = npar + 1
		elif(i % 2 != 0):
			nimpar = nimpar + 1 
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(ninpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    elif(i % 2 != 0):
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:31:14) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1
		elif(i % 2 != 0):
			n = n + 1 
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    elif(i % 2 != 0):
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:31:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1
		elif(i % 2 =! 0):
			n = n + 1 
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    elif(i % 2 =! 0):
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:32:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1 
		else:
			n = n + 1
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:33:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1 
		else:
			n = n + 1
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:33:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1 
		else:
			n = n + 1
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 19:35:31) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1 
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(size(vet)-n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-09 19:36:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1 
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(size(vet)-n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.05379
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
