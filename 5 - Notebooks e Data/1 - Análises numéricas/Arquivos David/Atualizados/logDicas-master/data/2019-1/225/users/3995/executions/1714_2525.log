== TEST (2019-05-14 12:52:03) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
if(t>1):
	print(t,"divisores")
else:
	print(t, "divisor")

-- OUTPUT:
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:52:10) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
if(t>1):
	print(t,"divisores")
else:
	print(t, "divisor")

-- OUTPUT:
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:52:12) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
if(t>1):
	print(t,"divisores")
else:
	print(t, "divisor")

-- OUTPUT:
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:54:17) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
if(t>1):
	msg="divisores"
else:
	msg="divisor"
print(t,msg)
-- OUTPUT:
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:54:21) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
if(t>1):
	msg="divisores"
else:
	msg="divisor"
print(t,msg)
-- OUTPUT:
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:54:25) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
if(t>1):
	msg="divisores"
else:
	msg="divisor"
print(t,msg)
-- OUTPUT:
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:54:57) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
	if(t>1):
		msg="divisores"
	else:
		msg="divisor"
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisores
3 divisores
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:55:09) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
	if(t>1):
		msg="divisores"
	else:
		msg="divisor"
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisores
3 divisores
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:55:12) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
	if(t>1):
		msg="divisores"
	else:
		msg="divisor"
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisores
3 divisores
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:55:14) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
	if(t>1):
		msg="divisores"
	else:
		msg="divisor"
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisores
3 divisores
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:55:31) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
	if(t>1):
		msg="divisores"
	else:
		msg="divisor"
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisores
3 divisores
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 12:55:53) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
	if(t>1):
		msg="divisores"
	else:
		msg="divisor"
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisores
3 divisores
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:00:38) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):

	x+=1
	if(n%x!=0):
		t=0
	elif(t>1):
		msg="divisores"
	else:
		msg="divisor"
	t+=1
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisor
3 divisores
1 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:00:47) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):

	x+=1
	if(n%x!=0):
		t=0
	elif(t>1):
		msg="divisores"
	else:
		msg="divisor"
	t+=1
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisor
3 divisores
1 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:00:53) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):

	x+=1
	if(n%x!=0):
		t=0
	elif(t>1):
		msg="divisores"
	else:
		msg="divisor"
	t+=1
	print(t,msg)
-- OUTPUT:
1 divisor
2 divisor
3 divisores
1 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:01:59) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
if(n%x!=0):
	t=0
elif(t>1):
	msg="divisores"
else:
	msg="divisor"
print(t,msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(t,msg)
NameError: name 'msg' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:02:19) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
	if(n%x!=0):
		t=0
	elif(t>1):
		msg="divisores"
	else:
		msg="divisor"
print(t,msg)
-- OUTPUT:
0 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:02:59) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
-- OUTPUT:
0 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:03:03) 
-- CODE:
n=int(input("numero:"))
t=0
x=1
while(x<=n and n%x==0):
	t+=1
	x+=1
-- OUTPUT:
0 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:06:49) 
-- CODE:
n=int(input("numero:"))
t=0  #qunatidade de divisores
x=1  #numero que esta dividindo
while(x<=n and n%x==0):
	t+=1
	x+=1
	
-- OUTPUT:
0 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:11:28) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n/2 ):
	x+=1
	if(n%x==0):
		t+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
4 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:12:28) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n/2 ):

	if(n%x==0):
		t+=1
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
5 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:13:55) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n ):

	if(n%x==0):
		t+=1
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:13:59) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n ):

	if(n%x==0):
		t+=1
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:14:08) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n ):

	if(n%x==0):
		t+=1
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:14:13) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n ):

	if(n%x==0):
		t+=1
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:14:40) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n ):
	print(x)
	if(n%x==0):
		t+=1
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
1
2
3
4
5
6
7
8
9
10
11
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 13:15:17) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n ):
	
	if(n%x==0):
		t+=1
		print(x)
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 13:15:29) 
-- CODE:
n=int(input("numero:"))
t=0  #quantidade de divisores
x=1  #numero que esta dividindo
while(x<=n ):
	
	if(n%x==0):
		t+=1
		print(x)
	x+=1
if(t==1):
	i="divisor"
else:
	i="divisores"
print(t,i)
-- EXECUTION TIME:
0.17291
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
