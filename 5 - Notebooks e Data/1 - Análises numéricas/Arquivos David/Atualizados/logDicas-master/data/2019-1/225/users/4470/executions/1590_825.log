== TEST (2019-03-29 23:44:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("Raio r")
a = input(r: A == pi* r**2)
v = input(r: V == 4/3* pi* r**3)
print(round(a, v))
-- ERROR:
File "XXXX", line 5
    a = input(r: A == pi* r**2)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:45:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
-- ERROR:
File "XXXX", line 5
    a = input(r: A == pi* r**2)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:45:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math7
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    import math7
ModuleNotFoundError: No module named 'math7'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:45:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    import math7
ModuleNotFoundError: No module named 'math7'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:48:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi R * R
V = math.pi R * R * 4/3
-- ERROR:
File "XXXX", line 7
    A = math.pi R * R
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:48:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi R * R
V = math.pi R * R * 4/3
-- ERROR:
File "XXXX", line 7
    A = math.pi R * R
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:48:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi R**2
V = math.pi R**3 4/3
-- ERROR:
File "XXXX", line 7
    A = math.pi R**2
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:51:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi R * R
V = math.pi R * R * R * 4/3
print(round(a, 3)(round(b, 3))
-- ERROR:
File "XXXX", line 7
    A = math.pi R * R
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:51:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi R * R
V = math.pi R * R * R * 4/3
print(round(a, 3)(round(b, 3)))
-- ERROR:
File "XXXX", line 7
    A = math.pi R * R
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:52:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi R * R
V = math.pi R * R * R * 4/3
print(round(a, 3),(round(b, 3)))
-- ERROR:
File "XXXX", line 7
    A = math.pi R * R
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:52:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(a, 3),(round(b, 3)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(a, 3),(round(b, 3)))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:52:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(a, 3),(round(b, 3)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(a, 3),(round(b, 3)))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:53:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(a, 3),(round(b, 3))
-- ERROR:
File "XXXX", line 10
    
                                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:54:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(a, 3)),(round(b, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(a, 3)),(round(b, 3))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:54:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(a, 3)),(round(b, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(a, 3)),(round(b, 3))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:55:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- OUTPUT:
63.617
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:55:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- OUTPUT:
63.617
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:55:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- EXECUTION TIME:
0.172911
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:55:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- OUTPUT:
63.617
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:55:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- EXECUTION TIME:
0.152776
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:55:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- OUTPUT:
63.617
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:55:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- EXECUTION TIME:
0.152731
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:56:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print((round(A, 3)),(round(V, 3))
-- ERROR:
File "XXXX", line 10
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:58:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- OUTPUT:
63.617
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:58:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3))
-- EXECUTION TIME:
0.137471
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:58:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3)
-- ERROR:
File "XXXX", line 10
    
                                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:58:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3)),(round(V, 3)
-- ERROR:
File "XXXX", line 10
    
                                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:59:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A, 3),(round(V, 3))
-- ERROR:
File "XXXX", line 10
    
                                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:59:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A,3),round(V,3))
-- OUTPUT:
63.617 381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:59:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
R = float(input("Digite o raio:"))

A = math.pi * R * R
V = math.pi * R * R * R * 4/3
print(round(A,3),round(V,3))
-- EXECUTION TIME:
0.119595
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617 381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388 7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
