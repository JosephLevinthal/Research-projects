== TEST (2019-03-21 16:24:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1//
print(var2)


-- ERROR:
File "XXXX", line 5
    var2=var1//
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:24:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
print(var2)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(var2)
NameError: name 'var2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:51:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numeros:"))
var2=var1//
print(var2)


-- ERROR:
File "XXXX", line 5
    var2=var1//
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 19:53:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numeros:"))
print(var1)


-- OUTPUT:
9173.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:01:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("digite o numero:"));
scanf("%d", &numero);
somatorio=0;
while(numero>0)
resto=numero%10
numero=(numero-resto)/10
somatorio+somatorio+resto
print("O somatorio é %d/n", somatorio)



-- ERROR:
File "XXXX", line 5
    scanf("%d", &numero);
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:01:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("digite o numero:"));
scanf=("%d", &numero);
somatorio=0;
while(numero>0)
resto=numero%10
numero=(numero-resto)/10
somatorio+somatorio+resto
print("O somatorio é %d/n", somatorio)



-- ERROR:
File "XXXX", line 5
    scanf=("%d", &numero);
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:02:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("digite o numero:"));
somatorio=0;
while(numero>0)
resto=numero%10
numero=(numero-resto)/10
somatorio+somatorio+resto
print("O somatorio é %d/n", somatorio)



-- ERROR:
File "XXXX", line 6
    while(numero>0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:02:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("digite o numero:"));
somatorio=0;
resto=numero%10
numero=(numero-resto)/10
somatorio+somatorio+resto
print("O somatorio é %d/n", somatorio)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    resto=numero%10
NameError: name 'numero' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:02:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("digite o numero:"));
somatorio=0;
numero=var1
resto=numero%10
numero=(numero-resto)/10
somatorio+somatorio+resto
print("O somatorio é %d/n", somatorio)



-- OUTPUT:
O somatorio é %d/n 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:15:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("digite o numero:"));
soma=0
while(n>0):
	resto=numero%10
	numero=(numero-resto)/10
	soma=soma+resto
print(" A soma dos numeros é:", numero)





-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    while(n>0):
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:16:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=int(input("digite o numero:"));
soma=0
while(numero>0):
	resto=numero%10
	numero=(numero-resto)/10
	soma=soma+resto
print(" A soma dos numeros é:", numero)





-- OUTPUT:
A soma dos numeros é: 0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:16:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=float(input("digite o numero:"));
soma=0
while(numero>0):
	resto=numero%10
	numero=(numero-resto)/10
	soma=soma+resto
print(" A soma dos numeros é:", numero)





-- OUTPUT:
A soma dos numeros é: 0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:18:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
numero=float(input("digite o numero:"));
soma=0
while(numero>0):
	resto=numero%10
	numero=numero//10
	soma=soma+resto
print(" A soma dos numeros é:", numero)





-- OUTPUT:
A soma dos numeros é: 0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:27:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1//10
var3=var1%10
soma=float(var2=var3)
print(soma)








-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma=float(var2=var3)
TypeError: 'var2' is an invalid keyword argument for this function
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:29:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1//%








-- ERROR:
File "XXXX", line 5
    var2=var1//%
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:31:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1%10
var3=var1//10
soma=var2+var3
print(soma)








-- OUTPUT:
920.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 20:31:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1%10
var3=var1//10
soma=var2+var3
print(soma)








-- EXECUTION TIME:
0.209037
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
920.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
101.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:35:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=int(var1%10)
var3=var1//10
soma=var2+var3
print(








-- ERROR:
File "XXXX", line 16
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:35:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=int(var1%10)
var3=var1//10
soma=var2+var3
print(soma)








-- OUTPUT:
920.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:36:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=(input("digite o numero:"))
var2=float(var1%10)
var3=var1//10
soma=var2+var3
print(soma)








-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2=float(var1%10)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:36:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=(input("digite o numero:"))
var2=(float(var1%10))
var3=var1//10
soma=var2+var3
print(soma)








-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2=(float(var1%10))
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:37:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1//10
var3=var1%10









-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2=(float(var1%10))
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:38:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1//10
var3=var1%10
print(var2+var3)









-- OUTPUT:
920.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 20:38:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input("digite o numero:"))
var2=var1//10
var3=var1%10
print(var2+var3)









-- EXECUTION TIME:
0.162434
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
920.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
101.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:59:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v=int(input("digite o numero:"))
soma=0
div=1000
while v!=0:
	x=v%div
	div=div/10
	print(soma)









-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x=v%div
ZeroDivisionError: float modulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 20:59:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v=int(input("digite o numero:"))
soma=0
div=1000
while v!=0:
	x=v%div
	div=div/10
	print(soma)









-- EXECUTION TIME:
0.14446
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 8, in <module>
    x=v%div
ZeroDivisionError: float modulo

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:59:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v=int(input("digite o numero:"))
soma=0
div=1000
while v!=0:
	x=v%div
	div=div/10
	print(soma)









-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x=v%div
ZeroDivisionError: float modulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 20:59:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v=int(input("digite o numero:"))
soma=0
div=1000
while v!=0:
	x=v%div
	div=div/10
	print(soma)









-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x=v%div
ZeroDivisionError: float modulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:01:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v % div
	div = div/10
print(soma)









-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x = v % div
ZeroDivisionError: float modulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:02:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v % div
	soma = soma + x
	v = v % div
	div = div/10
print(soma)









-- OUTPUT:
249.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:02:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v % div
	soma = soma + x
	v = v % div
	div = div/10
print(soma)









-- EXECUTION TIME:
0.185212
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
249.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
20.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:03:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v % div
	soma = soma + x
	v = v % div
	div = div/10
print(int(soma))









-- OUTPUT:
249
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:03:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v % div
	soma = soma + x
	v = v % div
	div = div/10
print(int(soma))









-- EXECUTION TIME:
0.17565
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
249
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
20
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:04:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v // div
	soma = soma + x
	v = v % div
	div = div/10
print(int(soma))









-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:04:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v // div
	soma = soma + x
	v = v % div
	div = div/10
print(int(soma))









-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:13:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
v = int(input("digite o numero:"))
soma = 0
div = 1000
while v != 0:
	x = v // div
	soma = soma + x
	v = v % div
	div = div/10
print(int(soma))









-- EXECUTION TIME:
0.131165
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:14:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite o numero:"))
a=(var1%10)
b=(var1//10)%10
c=(var1//10)//10%10
d=(var1//1000)
print(a+b+c+d)









-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:14:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite o numero:"))
a=(var1%10)
b=(var1//10)%10
c=(var1//10)//10%10
d=(var1//1000)
print(a+b+c+d)









-- EXECUTION TIME:
0.157312
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:15:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("digite o numero:"))
a=(var1%10)
b=(var1//10)%10
c=(var1//10)//10%10
d=(var1//1000)
print(a+b+c+d)









-- EXECUTION TIME:
0.0997138
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
