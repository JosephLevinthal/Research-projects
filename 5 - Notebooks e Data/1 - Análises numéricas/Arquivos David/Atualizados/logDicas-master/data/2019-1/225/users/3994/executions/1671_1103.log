== TEST (2019-04-22 21:17:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
x = float(input(" Digite x: "))
if(a=<x=<b):
	mensagem= "x pertence ao intervalo a, b"

-- ERROR:
File "XXXX", line 7
    if(a=<x=<b):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:18:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
x = float(input(" Digite x: "))
if("a"=<"x"=<"b"):
	mensagem= "x pertence ao intervalo a, b"

-- ERROR:
File "XXXX", line 7
    if("a"=<"x"=<"b"):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:18:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
x = float(input(" Digite x: "))
if("a=<x=<b"):
	mensagem= "x pertence ao intervalo a, b"

-- ERROR:
File "XXXX", line 7
    if("a"=<"x"=<"b"):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:20:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print("x", pertence ao intervalo,"a","b" )

-- ERROR:
File "XXXX", line 8
    print("x", pertence ao intervalo,"a","b" )
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:22:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print("x" pertence ao intervalo "a","b" )

-- ERROR:
File "XXXX", line 8
    print("x" pertence ao intervalo "a","b" )
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:22:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print("x" ,pertence ao intervalo, "a""b" )

-- ERROR:
File "XXXX", line 8
    print("x" ,pertence ao intervalo, "a""b" )
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:22:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print("x",pertence ao intervalo)

-- ERROR:
File "XXXX", line 8
    print("x",pertence ao intervalo)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:24:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print("x"pertence ao intervalo)

-- ERROR:
File "XXXX", line 8
    print("x"pertence ao intervalo)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:25:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print("x", "pertence ao intervalo", "a", "b")

-- OUTPUT:
x pertence ao intervalo a b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:28:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", "a", "b")

-- OUTPUT:
2.0 pertence ao intervalo a b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:28:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)

-- OUTPUT:
2.0 pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:32:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
		elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:32:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
		print(x, "nao pertence ao intervalo", a, b)
		elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:32:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
		print(x, "nao pertence ao intervalo", a, b)
	elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:32:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
		print(x, "nao pertence ao intervalo", a, b)
elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:32:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
		print(x, "nao pertence ao intervalo", a, b)
		elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:32:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
	elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:33:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:33:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
     elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:33:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
	elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:34:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
	elif(b=<a):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif(b=<a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:34:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(a=<x=<b):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
	elif(b=<a):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 7
    if(a=<x=<b):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:34:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
	elif(b=<a):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif(b=<a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:34:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
	elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 21:34:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if("a=<x=<b"):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:22:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(a<=x and x<=b):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
elif("b=<a"):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    elif("b=<a"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:23:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(a<=x and x<=b):
	print(x, "pertence ao intervalo", a, b)
elif:
	print(x, "nao pertence ao intervalo", a, b)
else(b<=a):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 9
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:23:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(a<=x and x<=b):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)
else(b<=a):
		print("Entradas", a e b, "invalidas")	
-- ERROR:
File "XXXX", line 11
    else(b<=a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:25:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(b<=a):
	print("Entradas", a e b, "invalidas")	
elif(a<=x and x<=b):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)

-- ERROR:
File "XXXX", line 8
    print("Entradas", a e b, "invalidas")	
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:25:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(b<=a):
	print("Entradas", a, "e", b, "invalidas")	
elif(a<=x and x<=b):
	print(x, "pertence ao intervalo", a, b)
else:
	print(x, "nao pertence ao intervalo", a, b)

-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:26:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(b<=a):
	print("Entradas", a, "e", b, "invalidas")	
elif(a<=x and x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:26:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(" Digite x: "))
a = float(input(" Digite a: "))
b = float(input(" Digite b: "))
if(b<=a):
	print("Entradas", a, "e", b, "invalidas")	
elif(a<=x and x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.246664
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
