== TEST (2019-04-22 15:38:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
Z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x<=Y)or(y<=z)and(z<=x)):
	print ("Invalido")
-- ERROR:
File "XXXX", line 15
    else((x<=Y)or(y<=z)and(z<=x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:38:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
Z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x<Y)or(y<z)and(z<x)):
	print ("Invalido")
-- ERROR:
File "XXXX", line 15
    else((x<Y)or(y<z)and(z<x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:39:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x<=y)or(y<=z)and(z<x)):
	print ("Invalido")
-- ERROR:
File "XXXX", line 15
    else((x<=y)or(y<=z)and(z<x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x<=y)or(y!=z)and(z<=x)):
	print ("Invalido")
-- ERROR:
File "XXXX", line 15
    else((x<=y)or(y!=z)and(z<=x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x<y)or(y<z)and(z<x)):
	print ("Invalido")
-- ERROR:
File "XXXX", line 15
    else((x<y)or(y<z)and(z<x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x<=y)or(y<=z)and(z<x)):
	print ("Invalido")
-- ERROR:
File "XXXX", line 15
    else((x<=y)or(y<=z)and(z<x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x<=y)or(y<=z)and(z<x)):
	print ("invalido")
-- ERROR:
File "XXXX", line 15
    else((x<=y)or(y<=z)and(z<x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:42:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x <= y)or(y <= z)and(z <= x)):
	print ("invalido")
-- ERROR:
File "XXXX", line 15
    else((x <= y)or(y <= z)and(z <= x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:42:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x==y)or(y==z)and(z==x)):
	print("equilatero")
elif((x==y)or(y==z)and(z!=x)):
	print("isosceles")
elif((x!=y)or(y!=z)and(z!=x)):
	print("escaleno")
else((x <= y) or (y <= z) and (z <= x)):
	print ("invalido")
-- ERROR:
File "XXXX", line 15
    else((x <= y) or (y <= z) and (z <= x)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:43:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:43:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:45:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:47:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x<=o)or(x + y = z)
	print ("invalido")
-- ERROR:
File "XXXX", line 16
    ((x<=o)or(x + y = z)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:14:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x<=o) or (y >= z) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:18:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x < o) or (y == z) or (z != 0) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:21:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x < 0) or (y > z + x) or (z < x) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:21:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x < 0) or (y > z + x) or (z < x) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:21:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x < 0) or (y > z + x) or (z < x) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x >= y + z) or (y >= z + x) or (z >= x + y) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)and(z == x)):
	print("equilatero")
elif((x == y)or(y == z)and(z!= x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x >= y + z) or (y >= z + x) or (z >= x + y) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:25:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x >= y + z) or (y >= z + x) or (z >= x + y) )
	print ("invalido")
-- ERROR:
File "XXXX", line 9
    if((x == y)or(y == z):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:25:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("escaleno")
else:
	((x >= y + z) or (y >= z + x) or (z >= x + y) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:26:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")
else:
	((x >= y + z) or (y >= z + x) or (z >= x + y) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:26:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")
else:
	((x >= y + z) or (y >= z + x) or (z >= x + y) )
	print ("invalido")
-- EXECUTION TIME:
0.212485
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
2.0 4.0 4.0
equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
3.3 4.4 5.5
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1.0 2.0 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:26:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")
else:
	((x >= y + z) or (y >= z + x) or (z >= x + y) )
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) )
	print ("invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- ERROR:
File "XXXX", line 9
    if ((x >= y + z) or (y >= z + x) or (z >= y + x) )
                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:43:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print(x, y, z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:44:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x, y, z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x, y, z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- EXECUTION TIME:
0.16782
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x, y, z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x",", y",", z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas:", x",", y",", z)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x "," , y "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas:", x "," , y "," , z)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , y , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:47:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:47:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- EXECUTION TIME:
0.176352
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:47:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: Invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:48:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:48:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- EXECUTION TIME:
0.149425
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:48:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:49:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:49:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:49:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- EXECUTION TIME:
0.166284
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:49:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:49:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:49:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y)or(y == z)and(z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:50:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:50:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:50:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:51:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:51:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)or(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:52:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)and(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:53:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)and(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- EXECUTION TIME:
0.137915
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:53:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z) or (y >= z + x) or (z >= y + x) ):
	print ("Tipo de triangulo: invalido")
elif((x == y)and(y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)or (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)or (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)or (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z != x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)or (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)or (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y)or(y == z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y)or(y != z)and(z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

	
	print ("invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:59:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

-- EXECUTION TIME:
0.135175
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:00:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

	print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

-- ERROR:
File "XXXX", line 7
    print("Entradas:", x , ",", y , "," , z)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x) and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) and (z != x)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z):
	print("Tipo de triangulo: escaleno")

-- ERROR:
File "XXXX", line 15
    elif((x != y) or (y != z):
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y) or (y >= z)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x == y) or (y <= z)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) or (z != x)):
	print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


elif((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) or (z != x)):
	print("Tipo de triangulo: escaleno")
else ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 10
    elif((x == y) and (y == z)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) or (z != x)):
	print("Tipo de triangulo: escaleno")
else ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	print ("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 16
    else ((x >= y + z)or (y >= z + x)and (z >= y + x)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:07:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y) or (y != z) or (z != x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:08:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y) or (y > z) or (z != x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:08:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y) or (y > z) or (z == x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:08:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y)or (y > z)or (z == x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:08:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y)or (y > z)or (z == x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.163424
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:08:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y)or (y > z)or (z == x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:08:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y)or (y > z)or (z == x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:09:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y)or (y > z)or (z == x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:09:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y)or (y > z)or (z > x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:09:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x > y)or (y > z)or (z > x)):
	print("Tipo de triangulo: escaleno")
else :
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:11:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x  y)or (y  z)or (z  x)):
	print("Tipo de triangulo: escaleno")
else :
	((x >= y + z)or (y >= z + x)and (z >= y + x))
	print ("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 14
    elif((x  y)or (y  z)or (z  x)):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:12:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)


if((x == y) and (y == z)):
	print("Tipo de triangulo: equilatero")
elif((x == y) or (y == z) or (z == x)):
	print("Tipo de triangulo: isosceles")
elif((x != y)or (y != z)or (z != x)):
	print("Tipo de triangulo: escaleno")
else :
	((x >= y + z)or (y >= z + x)and (z >= y + x))
	print ("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	if((x == y) and (y == z)):
		print("Tipo de triangulo: equilatero")
		if((x == y) or (y == z) or (z == x)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:19:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	if((x == y) and (y == z)):
		print("Tipo de triangulo: equilatero")
		if((x == y) or (y == z) or (z == x)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
-- EXECUTION TIME:
0.237124
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	if((x == y) and (y == z)):
		print("Tipo de triangulo: equilatero")
		if((x == y) or (y == z) or (z == x)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:20:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	if((x == y) and (y == z) and (z == x)):
		print("Tipo de triangulo: equilatero")
		if((x == y) or (y == z):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
-- ERROR:
File "XXXX", line 12
    if((x == y) or (y == z):
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:20:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if ((x >= y + z)or (y >= z + x)and (z >= y + x)):
	if((x == y) and (y == z) and (z == x)):
		print("Tipo de triangulo: equilatero")
		if((x == y) or (y == z)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:25:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if (abs(b-c)<a<(b+C)):
	if ((x == y) or (y == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if ((a == b) or (b == c)):
			print ("Tipo de triangulo:" , "isosceles")
		else:
			print ("Tipo de triangulo:" , "escaleno")
else:
	print ("Tipo de triangulo:" , "invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if (abs(b-c)<a<(b+C)):
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:25:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if(abs(b-c)<a<(b+C)):
	if ((x == y) or (y == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if ((a == b) or (b == c)):
			print ("Tipo de triangulo:" , "isosceles")
		else:
			print ("Tipo de triangulo:" , "escaleno")
else:
	print ("Tipo de triangulo:" , "invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if(abs(b-c)<a<(b+C)):
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:26:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if(abs(y-z)<x<(y+z)):
	if ((x == y) or (y == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if ((a == b) or (b == c)):
			print ("Tipo de triangulo:" , "isosceles")
		else:
			print ("Tipo de triangulo:" , "escaleno")
else:
	print ("Tipo de triangulo:" , "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:26:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if(abs(y-z)<x<(y+z)):
	if ((x == y) or (y == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if ((x == y) or (y == z)):
			print ("Tipo de triangulo:" , "isosceles")
		else:
			print ("Tipo de triangulo:" , "escaleno")
else:
	print ("Tipo de triangulo:" , "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:26:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if(abs(y-z)<x<(y+z)):
	if ((x == y) or (y == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if ((x == y) or (y == z)):
			print ("Tipo de triangulo:" , "isosceles")
		else:
			print ("Tipo de triangulo:" , "escaleno")
else:
	print ("Tipo de triangulo:" , "invalido")
-- EXECUTION TIME:
0.268359
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:26:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if(abs(y-z)<x<(y+z)):
	if ((x == y) or (y == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if ((x == y) or (y == z)):
			print ("Tipo de triangulo:" , "isosceles")
		else:
			print ("Tipo de triangulo:" , "escaleno")
else:
	print ("Tipo de triangulo:" , "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if(abs(y-z)<x<(y+z)):
	if((x == y) and (y == z) and (x == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if((x == y) or (y == z)):
			print("Tipo de triangulo:" , "isosceles")
		else:
			print("Tipo de triangulo:" , "escaleno")
else:
	print("Tipo de triangulo:" , "invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:28:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("Digite o lado A: "))
y = float(input("Digite o lado B: "))
z = float(input("Digite o lado C: "))

print("Entradas:", x , ",", y , "," , z)

if(abs(y-z)<x<(y+z)):
	if((x == y) and (y == z) and (x == z)):
		print ("Tipo de triangulo:" , "equilatero")
	else:
		if((x == y) or (y == z)):
			print("Tipo de triangulo:" , "isosceles")
		else:
			print("Tipo de triangulo:" , "escaleno")
else:
	print("Tipo de triangulo:" , "invalido")
-- EXECUTION TIME:
0.167194
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
