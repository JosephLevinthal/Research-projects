== TEST (2019-04-24 14:23:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = int(input("valor de a: "))
b = int(input("valor de b: "))
c = int(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero
	else: 
		if ((a == b) or (b == z) or (z == a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- ERROR:
File "XXXX", line 8
    msg = "invalido
                  ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = int(input("valor de a: "))
b = int(input("valor de b: "))
c = int(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero
	else: 
		if ((a == b) or (b == z) or (z == a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- ERROR:
File "XXXX", line 8
    msg = "invalido
                  ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = int(input("valor de a: "))
b = int(input("valor de b: "))
c = int(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero
	else: 
		if ((a == b) or (b == z) or (z == a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- ERROR:
File "XXXX", line 12
    msg = "equilatero
                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = int(input("valor de a: "))
b = int(input("valor de b: "))
c = int(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero
	else: 
		if ((a == b) or (b == z) or (z == a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- ERROR:
File "XXXX", line 12
    msg = "equilatero
                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = int(input("valor de a: "))
b = int(input("valor de b: "))
c = int(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == z) or (z == a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    if ((a == b) or (b == z) or (z == a)):
NameError: name 'z' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:24:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == z) or (z == a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    if ((a == b) or (b == z) or (z == a)):
NameError: name 'z' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:25:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == z) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    if ((a == b) or (b == z) or (c ==a)):
NameError: name 'z' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:25:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == c) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escalenoo"
print("tipo de triangulo: " and msg)
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:26:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == c) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escaleno"
print("tipo de triangulo: " + msg)
-- OUTPUT:
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:26:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == c) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escaleno"
print("tipo de triangulo: " + msg)
-- EXECUTION TIME:
0.160228
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:26:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == c) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escaleno"
print("tipo de triangulo: " + msg)
-- EXECUTION TIME:
0.129511
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:26:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == c) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escaleno"
print("tipo de triangulo: " + msg)
-- EXECUTION TIME:
0.119507
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:26:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == c) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escaleno"
print("tipo de triangulo: " + msg)
-- EXECUTION TIME:
0.170705
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:26:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if ((a > b+c) or (b > a+c) or (c > a+b)):
	msg = "invalido"
	
else: 
	if ((a == b) and (b ==c)):
		msg = "equilatero"
	else: 
		if ((a == b) or (b == c) or (c ==a)):
			msg = "isosceles"
		else:
			msg = "escaleno"
print("tipo de triangulo: " + msg)
-- EXECUTION TIME:
0.153501
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:40:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and < a+c) and (c < a+b):
	if (a != b) and (b != c) and (c != a):
	   msg = escaleno
	else:
		if((x != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido
print("Tipo de triangulo: " + msg
	

-- ERROR:
File "XXXX", line 7
    if (( a < b+c) and < a+c) and (c < a+b):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b):
	if (a != b) and (b != c) and (c != a):
	   msg = escaleno
	else:
		if((x != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido
print("Tipo de triangulo: " + msg
	

-- ERROR:
File "XXXX", line 7
    if (( a < b+c) and (b < a+c) and (c < a+b):
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = escaleno
	else:
		if((x != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido
print("Tipo de triangulo: " + msg
	

-- ERROR:
File "XXXX", line 19
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = escaleno
	else:
		if((x != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.207322
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.12176
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.133047
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.182418
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: inavlido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.168977
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.233539
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo: inavlido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.103962
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.142103
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.169023
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: inavlido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:42:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.182354
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavlido"
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:43:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavalido"
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.127736
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.1374
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.174841
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "inavalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.148818
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.143382
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.175401
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.218726
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.159467
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:43:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.178621
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.223538
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:43:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.197355
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.145218
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.190329
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.141588
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:43:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.142868
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:44:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.175992
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.188234
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.0909929
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.143227
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.130477
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.169651
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.144777
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.290733
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 11, in <module>
    if((x != b) or (b != c)):
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((x != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.258613
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.122437
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.130212
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.187143
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.185473
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.163103
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.1876
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.324228
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.156925
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.481752
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.422793
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + a + b + c)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.427572
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + a + b + c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:47:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
ent = a , b, c
if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + ent)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.260198
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + ent)
TypeError: Can't convert 'tuple' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:47:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
ent = a , b, c
if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + ent)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.140309
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + ent)
TypeError: Can't convert 'tuple' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:47:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
ent = a , b, c
if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + ent)
print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Entradas: " + ent)
TypeError: must be str, not tuple
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:47:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
ent = a , b, c
if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + ent)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.129656
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 17, in <module>
    print("Entradas: " + ent)
TypeError: Can't convert 'tuple' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:47:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
ent = a , b, c
if (( a < b+c) and (b < a+c) and (c < a+b)):
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"
print("Entradas: " + ent)
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.228972
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:53:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
	print("Entradas: "+ a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.156606
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 7, in <module>
    print("Entradas: "+ a , b, c)
TypeError: Can't convert 'float' object to str implicitly

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:53:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
	print("Entradas: "+ a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("Entradas: "+ a , b, c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: "+ a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.204042
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: "+ a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: "+ a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 7
    print("Entradas: "+ a , b, c)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: "+ a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.119441
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: "+ a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: "+ a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.145112
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: "+ a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: "+ a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.160937
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: "+ a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.129429
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.19844
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.192645
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.18024
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.425245
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.452633
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.37106
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.514706
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.534984
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:54:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
if (( a < b+c) and (b < a+c) and (c < a+b)):
print("Entradas: " and a , b, c)
	if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.510559
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: " and a , b, c)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.223855
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a ",", b "," , c )
                            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.149074
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a ",", b "," , c )
                            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 6
    print("Entradas: ", a ",", b "," , c )
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.156269
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a ",", b "," , c )
                            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.1657
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.146452
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.17127
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.264453
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.330439
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:58:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.479956
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:58:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas: ", a, ",", b "," , c )
if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.457085
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 6
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.152876
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.123377
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.136611
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.156683
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ", a, ",", b "," , c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a, ",", b "," , c )
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:59:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.180558
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:59:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.215215
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:59:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.198839
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:59:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		 if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.131903
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		 if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		 if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		 if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
	else:
		 if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:00:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
    else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.13545
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:00:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
    else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:00:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
    else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:01:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.265934
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:01:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.143758
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   
	else:
	   if((a != b) or (b != c)):
			msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:01:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   
	else:
	   if((a != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.148172
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   
	else:
	   if((a != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:02:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.196686
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
			msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:02:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
			 msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.215297
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
			 msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
			 msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
		msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
		msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:02:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
		msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.212907
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 13
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = escaleno
   else:
	    if((a != b) or (b != c)):
		msg = isoceles
		else:
			msg = equilatero
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    msg = isoceles
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:03:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	    if((a != b) or (b != c)):
		msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.198078
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 13
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	    if((a != b) or (b != c)):
		msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 13
    msg = "isoceles"
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:03:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.23206
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
		else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
		   else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
		   else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
		   else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:03:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.132131
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:03:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.126299
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles"
      else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
			else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 14
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.172433
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else:
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else:
			 msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else:
			 msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else:
			 msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.128452
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.149836
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.105536
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			 msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			 msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.226343
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			 msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 15
    msg = "equilatero"
                     ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.222313
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.108207
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.192036
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.295686
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.360065
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.589525
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.708829
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.772647
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.457831
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.451809
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.435878
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
valor de a: valor de b: valor de c: Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.507902
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.448049
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.52182
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.376229
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.520215
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c: Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.390774
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c: Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.451125
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c:
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.382674
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c:
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = invalido
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))


if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"
print("Entradas: ",a, ",", b, ",",c )
print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.217205
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.130422
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.130414
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.200169
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
valor de a: valor de b: valor de c: Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c: Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c: Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.398595
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
valor de a: valor de b: valor de c: Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c: Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c: Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.523849
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
valor de a: valor de b: valor de c: Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c: Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c: Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
   else:
	   if((a != b) or (b != c)):
		   msg = "isoceles" 
	   else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.588679
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
valor de a: valor de b: valor de c: Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
valor de a: valor de b: valor de c: Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:12:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:12:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.280723
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:12:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.158157
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:12:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.131728
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:12:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.118591
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:12:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.205196
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:12:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.285966
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:12:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )

if (( a < b+c) and (b < a+c) and (c < a+b)):
   if (a != b) and (b != c) and (c != a):
	   msg = "escaleno"
      else:
	      if((a != b) or (b != c)):
		   msg = "isoceles" 
	      else: 
			   msg = "equilatero"
else:
	  msg = "invalido"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.187501
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
			else:
				msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
			 else:
				msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 16
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
			 else:
				msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 16
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
			 else:
				   msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 16
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
			   else:
				   msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- ERROR:
File "XXXX", line 16
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:20:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.197099
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c != a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.181354
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c != a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.176199
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:53:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c != a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c != a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.133359
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
valor de a: valor de b: valor de c: Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a < b+c) or (b < a+c) or(c != a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.144093
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:53:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a < b+c) or (b < a+c) or(c != a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a < b+c) or (b < a+c) or(c != a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.174934
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:54:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a < b+c) or (b < a+c) or(c < a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.20502
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:54:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a < b+c) or (b < a+c) or(c < a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:54:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a < b+c) or (b < a+c) or(c < a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:54:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a < b+c) or (b < a+c) or(c < a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.148035
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 16:30:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 16:30:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

print("Entradas: ",a, ",", b, ",",c )
if (( a > b+c) or (b > a+c) or(c > a+b)):
	msg = "invalido"
else:
	if ((a == b) and (b == c)):
		msg = "equilatero"
	else:
		if (( a == b) or (b == c) or (c == a)):
			msg = "isosceles"
		else:
			msg = "escaleno"

print("Tipo de triangulo: " + msg)
	

-- EXECUTION TIME:
0.127396
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
