== TEST (2019-04-29 12:26:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
print(a,b,c)
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," b)
-- ERROR:
File "XXXX", line 9
    print(x , "pertence ao intervalo" , a,"," b)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:26:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
print(a,b,c)
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a,b,c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:29:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
print(a,b,c)
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( b <= a) :
	print("Entradas" ,a e b "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- ERROR:
File "XXXX", line 11
    print("Entradas" ,a e b "invalidas")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:29:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
print(a,b,c)
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( b <= a) :
	print("Entradas" ,a "e " ,b "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- ERROR:
File "XXXX", line 11
    print("Entradas" ,a "e " ,b "invalidas")
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:29:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
print(a,b,c)
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( b <= a) :
	print("Entradas" ,a "e " b "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- ERROR:
File "XXXX", line 11
    print("Entradas" ,a "e " b "invalidas")
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:29:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
print(a,b,c)
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( b <= a) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a,b,c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:31:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
print(a,b,c)
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a and x >= b ) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a,b,c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:31:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a and x >= b ) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:31:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a and x >= b ) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- EXECUTION TIME:
0.229215
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:34:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a) and (x >= b) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:34:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a) and (x >= b) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:34:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a) and (x >= b) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- EXECUTION TIME:
0.150883
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:34:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a)and(x >= b) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," , b)
-- EXECUTION TIME:
0.185666
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:34:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a <= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x >= a)and(x >= b) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," ,b)
-- EXECUTION TIME:
0.137658
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:36:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (b > a) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x > a)and(x > b) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," ,b)
-- EXECUTION TIME:
0.155232
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:39:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (b > a) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x <= a)and(b <= x) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," ,b)
-- EXECUTION TIME:
0.188386
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e  3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:39:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (b > a) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x <= a)and(b <= x) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," ,b)
-- OUTPUT:
2.0 pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:40:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (b > a) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif( x <= a)and(b <= x) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," ,b)
-- EXECUTION TIME:
0.195368
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e  3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:42:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a<= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif(b <= a) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," ,b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:43:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))
if (a<= x <= b) :
	print(x , "pertence ao intervalo" , a,"," ,b)
elif(b <= a) :
	print("Entradas" ,a, "e " ,b, "invalidas")
else :
	print(x , "nao pertence ao intervalo" , a, "," ,b)
-- EXECUTION TIME:
0.131642
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e  3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
