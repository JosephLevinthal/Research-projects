== TEST (2019-04-19 00:27:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:37:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
		elif: a == b and b == c:
				print("equilatero")
		elif:
-- ERROR:
File "XXXX", line 11
    elif: a == b and b == c:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:37:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	elif: a == b and b == c:
				print("equilatero")
		elif:
-- ERROR:
File "XXXX", line 11
    elif: a == b and b == c:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:37:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if: a == b and b == c:
				print("equilatero")
		elif:
-- ERROR:
File "XXXX", line 11
    if: a == b and b == c:
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:38:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	elif a == b and b == c:
				print("equilatero")
		elif:
-- ERROR:
File "XXXX", line 11
    elif a == b and b == c:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:38:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
				print("equilatero")
		elif:
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:39:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
			print("equilatero")
		elif a == b or a == c or b == c:
			print("isosceles")
		elif
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:41:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
			print("equilatero")
		elif a == b or a == c or b == c:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:41:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
			print("equilatero")
		elif a == b or a == c or b == c:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:42:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
			print("equilatero")
		elif a == b or a == c or b == c:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:42:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
			print("equilatero")
		if a == b or a == c or b == c:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:42:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
			print("equilatero")
		if a == b or a == c or b == c:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:43:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + c:
	  	if a == b and b == c:
			print("equilatero")
		if a == b or a == c or b == c:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 12
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:50:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 and b > 0 and c > 0:
	if a = b + c or b = a + c or c = a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
			
print("Tipo de triangulo: ", x)
-- ERROR:
File "XXXX", line 10
    if a = b + c or b = a + c or c = a + b:
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:50:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 and b > 0 and c > 0:
	if a < b + c or b < a + c or c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:51:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 and b > 0 and c > 0:
	if a > b + c or b > a + c or c > a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
			
print("Tipo de triangulo: ", x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo: ", x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:51:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 and b > 0 and c > 0:
	if a < b + c or b < a + c or c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:52:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 and b > 0 and c > 0:
	if a < b + c or b < a + c or c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
	else:
		x = "invalido"
else:
	x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:52:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 and b > 0 and c > 0:
	if a < b + c or b < a + c or c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
	else:
		x = "invalido"
else:
	x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:54:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a > b + c and b > a + c and c > a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
	else:
		x = "invalido"
else:
	x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:55:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a < b + c and b < a + c and c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "invalido"
	else:
		x = "invalido"
else:
	x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:56:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a < b + c and b < a + c and c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "equilatero"
	else:
		x = "invalido"
else:
	x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 00:56:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a < b + c and b < a + c and c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "escaleno"
	else:
		x = "invalido"
else:
	x = "invalido"
			
print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:56:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado ab: "))
b = float(input("lado bc: "))
c = float(input("lado ca: "))

print("Entradas: ", a,",", b,",", c)

if a > 0 or b > 0 or c > 0:
	if a < b + c and b < a + c and c < a + b:
		if a == b and b == c:
			x = "equilatero"
		elif a == b or a == c or b == c:
			x = "isosceles"
		else:
			x = "escaleno"
	else:
		x = "invalido"
else:
	x = "invalido"
			
print("Tipo de triangulo: ", x)
-- EXECUTION TIME:
0.204437
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
