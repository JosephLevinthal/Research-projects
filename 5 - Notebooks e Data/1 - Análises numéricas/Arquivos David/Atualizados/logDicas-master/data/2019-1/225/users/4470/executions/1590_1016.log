== TEST (2019-03-30 22:05:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5)
M = math.sqrt (s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:05:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5)
M = math.sqrt (s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:07:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5)
M = s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 6
    A = s(s-a) * (s-b) * (s-c) ** 0.5)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:07:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x = int(input("Comprimentos dos lados:"))
A = math.sqrt(s(s-a) * (s-b) * (s-c)))
M = s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 6
    A = math.sqrt(s(s-a) * (s-b) * (s-c)))
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:08:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5))
M = s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 6
    A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5))
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:08:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5))
M = s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 6
    A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5))
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:09:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import sqrt
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5))
M = s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 6
    A = s(s-a) * (s-b) * (s-c) ** 0.5))
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:10:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math.sqrt()
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5))
M = s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 4
    import math.sqrt()
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:10:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math.sqrt
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5))
M = s == a + b + c / 2)
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 6
    A = s(s-a) * (s-b) * (s-c) ** 0.5))
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:11:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math.sqrt
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5)
M = s == a + b + c / 2
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 6
    A = s(s-a) * (s-b) * (s-c) ** 0.5)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:11:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math.sqrt
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5
M = s == a + b + c / 2
print(round(A, 5)) * round(M, 5)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    import math.sqrt
ModuleNotFoundError: No module named 'math.sqrt'; 'math' is not a package
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:11:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math.sqrt
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5
M = s == a + b + c / 2
print(round(A, 5)) * round(M, 5)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    import math.sqrt
ModuleNotFoundError: No module named 'math.sqrt'; 'math' is not a package
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:11:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math sqrt
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5
M = s == a + b + c / 2
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 4
    import math sqrt
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:12:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math sqrt
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5
M = s == a + b + c / 2
print(round(A, 5)) * round(M, 5)
-- ERROR:
File "XXXX", line 4
    import math sqrt
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:13:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math 
math.strq
x = int(input("Comprimentos dos lados:"))
A = s(s-a) * (s-b) * (s-c) ** 0.5
M = s == a + b + c / 2
print(round(A, 5)) * round(M, 5)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    math.strq
AttributeError: module 'math' has no attribute 'strq'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:14:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:15:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:16:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
M = s == a + b + c / 2
A = math.sqrt (s(s-a) * (s-b) * (s-c))
print(round(A, 5)) * round(M, 5)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:19:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:20:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt (s(s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:20:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt(s(s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:20:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math(sqrt(s(s-a) * (s-b) * (s-c) ** 0.5))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:21:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt(s * (s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:24:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt(s * (s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:25:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = int(input("Comprimentos dos lados:"))
A = math.sqrt(s(s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 09:56:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = float(input("Comprimentos dos lados:"))
A = math.sqrt(s * (s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = math.sqrt(s * (s-a) * (s-b) * (s-c) ** 0.5)
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:05:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
# calculo da area de um triangulo : area == b * a / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c) ** 0.5)
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = math.sqrt(s * (s-a) * (s-b) * (s-c) ** 0.5)
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:07:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
# calculo da area de um triangulo : area == b * a / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = math.sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:08:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
# calculo da area de um triangulo : area == b * a / 2
A = Math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = Math.sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 'Math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:08:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
# calculo da area de um triangulo : area == b * a / 2
A = Math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = Math.sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 'Math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:11:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
s = a + b + c / 2
# calculo da area de um triangulo : area == b * a / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    s = a + b + c / 2
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:11:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
s = s == a + b + c / 2
# calculo da area de um triangulo : area == b * a / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    s = s == a + b + c / 2
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:11:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
s = a + b + c / 2
# calculo da area de um triangulo : area == b * a / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    s = a + b + c / 2
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:12:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
s = a + b + c / 2
# calculo da area de um triangulo : area == b * a / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    s = a + b + c / 2
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:12:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
s = a + b + c // 2
# calculo da area de um triangulo : area == b * a / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    s = a + b + c // 2
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:16:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
s = a + b + c / 2
a = 2.0
b = 8.0
c = 5.0
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    s = a + b + c / 2
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:18:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
y = s == a + b + c / 2
a = 2.0
b = 8.0
c = 5.0
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    y = s == a + b + c / 2
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:18:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
y = s == a + b + c / 2
a = 2.0
b = 8.0
c = 5.0
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    y = s == a + b + c / 2
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:18:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
a = 2.0
b = 8.0
c = 5.0
m = s == a + b + c / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    m = s == a + b + c / 2
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:18:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
x = float(input("Comprimentos dos lados:"))
a = 2.0
b = 8.0
c = 5.0
s = a + b + c / 2
A = math.sqrt(s * (s-a) * (s-b) * (s-c))
print(round(A, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    A = math.sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:59:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(" Digite a: ")
B = float("Digite b: ")
C = float("Digite c: ")
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float(" Digite a: ")
ValueError: could not convert string to float: ' Digite a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:59:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float("Digite a: ")
B = float("Digite b: ")
C = float("Digite c: ")
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("Digite a: ")
ValueError: could not convert string to float: 'Digite a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:59:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float("Digite a:")
B = float("Digite b:")
C = float("Digite c:")
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("Digite a:")
ValueError: could not convert string to float: 'Digite a:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:00:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float("Digite A:")
B = float("Digite B:")
C = float("Digite C:")
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("Digite A:")
ValueError: could not convert string to float: 'Digite A:'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:00:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- OUTPUT:
638.20837
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:00:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- EXECUTION TIME:
0.119712
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
638.20837
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
3909.36376
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
4627.14693
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:01:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- OUTPUT:
638.20837
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:01:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = A + B + C / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- EXECUTION TIME:
0.136181
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
638.20837
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
3909.36376
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
4627.14693
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:03:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = A + B + C / 2
AR = sqrt((S * (S-A) * (S-B) * (S-C)))
print(round(AR, 5))
-- OUTPUT:
638.20837
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:03:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = A + B + C / 2
AR = sqrt((S * (S-A) * (S-B) * (S-C)))
print(round(AR, 5))
-- EXECUTION TIME:
0.11815
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
638.20837
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
3909.36376
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
4627.14693
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:03:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = (A + B + C) * 1 / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:04:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = (A + B + C) * 1 / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:04:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = (A + B + C) * 1 / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:04:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
A = float(input("Digite A:"))
B = float(input("Digite B:"))
C = float(input("Digite C:"))
S = (A + B + C) * 1 / 2
AR = sqrt(S * (S-A) * (S-B) * (S-C))
print(round(AR, 5))
-- EXECUTION TIME:
0.160411
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
