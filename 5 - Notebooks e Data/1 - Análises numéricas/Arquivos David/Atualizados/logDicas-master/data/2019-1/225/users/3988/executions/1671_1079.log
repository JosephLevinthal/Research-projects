== TEST (2019-04-18 17:59:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) and (B>C):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A + B + C) / 2.0
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:01:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) and (B>C):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A + B + C) / 2.0
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:01:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	# Testa se medidas correspondem aas de um triangulo
elif (A >= B) and (B>C):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 14
    elif (A >= B) and (B>C):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:03:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) and (B>C):
		s = (A + B + C) / 2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A + B + C) / 2
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:04:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) and (B>C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:07:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0.0) and(B >=0.0) and(C >=0.0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) and (B>C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:07:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0.0) and(B >=0.0) and(C >=0.0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) and (B>C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:12:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0.0) and(B >=0.0) and(C >=0.0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) or (B>=A) and (B>=C) or (A>=C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 18:12:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0.0) and(B >=0.0) and(C >=0.0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) or (B>=A) and (B>=C) or (A>=C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.151377
-- ERROR:
  File "/home/codebench/codes/1671/1079/main.py", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:13:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0.0) and(B >=0.0) and(C >=0.0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) or (B>=A) and (B>=C) or (A>=C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:13:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0.0) and(B >=0.0) and(C >=0.0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) or (B>=A) and (B>=C) or (A>=C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:16:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	# Testa se medidas correspondem aas de um triangulo
   if (A >= B) or (B>=A) and (B>=C) or (A>=C):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (A+B+C)/2
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:24:43) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	if (A+B <= C) or (A+C <= B) or (B+C <= A):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	
	else:
		print("Area : invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:26:40) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
elif (A+B <= C) or (A+C <= B) or (B+C <= A):
	s = (A+B+C)/2
	area = sqrt(s * (s-A) * (s-B) * (s-C))
	a = round(area, 3)
	print("Area:" , a)

else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    elif (A+B <= C) or (A+C <= B) or (B+C <= A):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:26:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
elif (A+B <= C) or (A+C <= B) or (B+C <= A):
	s = (A+B+C)/2
	area = sqrt(s * (s-A) * (s-B) * (s-C))
	a = round(area, 3)
	print("Area:" , a)

else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    elif (A+B <= C) or (A+C <= B) or (B+C <= A):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:27:19) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	
elif (A+B <= C) or (A+C <= B) or (B+C <= A):
	s = (A+B+C)/2
	area = sqrt(s * (s-A) * (s-B) * (s-C))
	a = round(area, 3)
	print("Area:" , a)

else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 14
    elif (A+B <= C) or (A+C <= B) or (B+C <= A):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:29:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	if (A+B <= C) or (A+C <= B) or (B+C <= A):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area : invalida"
		print(msg)

else:
	print("Area: invalida")

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:31:07) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	s = (A+B+C)/2
	if (A+B <= C) or (A+C <= B) or (B+C <= A):
		s = (A+B+C)/2
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area : invalida"
		print(msg)

else:
	print("Area: invalida")

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:31:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	s = (A+B+C)/2
	if (A+B <= C) or (A+C <= B) or (B+C <= A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area : invalida"
		print(msg)

else:
	print("Area: invalida")

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:34:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area : invalida"
		print(msg)

else:
	print("Area: invalida")

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 18:35:07) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area : invalida"
		print(msg)

else:
	print("Area: invalida")

-- EXECUTION TIME:
0.127744
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Area : invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area : invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:35:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area : invalida"
		print(msg)


	

-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 18:35:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area : invalida"
		print(msg)


	

-- EXECUTION TIME:
0.210331
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Area : invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area : invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 18:36:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >0.0) and(B >0.0) and(C >0.0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
else:
	msg = "Area : invalida"
	print(msg)


	

-- EXECUTION TIME:
0.119164
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area : invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:

-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 18:36:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
else:
	msg = "Area : invalida"
	print(msg)


	

-- EXECUTION TIME:
0.155357
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area : invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:

-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:37:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
else:
	msg = "Area : invalida"
	print(msg)


	

-- OUTPUT:
Area : invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:38:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area invalida"
else:
	print(msg)


	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(msg)
NameError: name 'msg' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:38:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area invalida"
		print(msg)
else:
	print(msg)


	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 22, in <module>
    print(msg)
NameError: name 'msg' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:39:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 18:39:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) or (A+C < B) or (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- EXECUTION TIME:
0.270823
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Area invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:41:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) and (A+C < B) and (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 18:42:06) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) and (A+C < B) and (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- EXECUTION TIME:
0.25149
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Area invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 18:42:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))


# Testa se pelo menos uma das entradas eh negativa 
if (A >=0) and(B >=0) and(C >=0):
	s = (A+B+C)/2
	if (A+B < C) and (A+C < B) and (B+C < A):
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		a = round(area, 3)
		print("Area:" , a)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:36:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a+b < c) and (a+c < b) and (b+c < a)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:" , area)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:37:06) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a+b < c) and (a+c < b) and (b+c < a)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:" , area)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:37:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a+b < c) and (a+c < b) and (b+c < a)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:" , area)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- EXECUTION TIME:
0.144422
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: -11.0 , 22.0 , 33.0
Area invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
entradas: 1.61 , 2.4 , 2.89
Area invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: 11.0 , 22.0 , 33.0
Area invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:38:05) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a+b < c) and (a+c < b) and (b+c < a)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:38:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a+b < c) and (a+c < b) and (b+c < a)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:38:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a+b < c) and (a+c < b) and (b+c < a)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- EXECUTION TIME:
0.160001
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: -11.0 , 22.0 , 33.0
Area invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
entradas: 1.61 , 2.4 , 2.89
Area invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: 11.0 , 22.0 , 33.0
Area invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:38:42) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a+b < c) and (a+c < b) and (b+c < a)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- EXECUTION TIME:
0.203864
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: -11.0 , 22.0 , 33.0
Area invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
entradas: 1.61 , 2.4 , 2.89
Area invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: 11.0 , 22.0 , 33.0
Area invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:40:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- EXECUTION TIME:
0.166969
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Lado 1: Lado 2: Lado 3: entradas: -11.0 , 22.0 , 33.0
Area invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Lado 1: Lado 2: Lado 3: entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Lado 1: Lado 2: Lado 3: entradas: 11.0 , 22.0 , 33.0
Area invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:40:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:40:13) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = "Area invalida"
		print(msg)
else:
	msg = "Area invalida"
	print(msg)


	

-- EXECUTION TIME:
0.141132
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: -11.0 , 22.0 , 33.0
Area invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: 11.0 , 22.0 , 33.0
Area invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:41:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = ("Area: invalida")
		print(msg)
else:
	msg = ("Area: invalida")
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:41:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = ("Area: invalida")
		print(msg)
else:
	msg = ("Area: invalida")
	print(msg)


	

-- EXECUTION TIME:
0.15916
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:41:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = ("Area: invalida")
		print(msg)
else:
	msg = ("Area: invalida")
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:42:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a >0) or(b >0) or(c >0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		n = round(area, 3)
		print("Area:" , n)
	else:
		msg = ("Area: invalida")
		print(msg)
else:
	msg = ("Area: invalida")
	print(msg)


	

-- EXECUTION TIME:
0.160386
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:44:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a > 0) or(b > 0) or(c > 0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2.0)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:" , area)
	else:
		msg = ("Area: invalida")
		print(msg)
else:
	msg = ("Area: invalida")
	print(msg)


	

-- OUTPUT:
entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:44:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("entradas:", a, ",", b, ",", c)
# Testa se pelo menos uma das entradas eh negativa 
if ((a > 0) or(b > 0) or(c > 0)):
	s = (a+b+c)/2
	if ((a<b+c)and(b<a+b)and(c<a+b)):
		s = ((a+b+c)/2.0)
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:" , area)
	else:
		msg = ("Area: invalida")
		print(msg)
else:
	msg = ("Area: invalida")
	print(msg)


	

-- EXECUTION TIME:
0.202573
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:48:05) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.190226
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:07) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:48:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.115057
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:48:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.121757
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:48:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.111322
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:48:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.224998
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:49:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:49:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c > a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.198464
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:50:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) or (b>0) or (c>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((a <b + c) and (b< a + c) and (c < a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.137577
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
