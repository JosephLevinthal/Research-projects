== TEST (2019-04-28 14:43:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print("x pertence ao intervalo a, b ")
elif((x<=a<=b)or(a<=b<=x)):
	print("x nao pertence ao invervalo a, b ")
else:
	print("Entradas a e b invaludas ")
-- OUTPUT:
x nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:43:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print("x pertence ao intervalo a, b ")
elif((x<=a<=b)or(a<=b<=x)):
	print("x nao pertence ao invervalo a, b ")
else:
	print("Entradas a e b invalidas ")
-- EXECUTION TIME:
0.174982
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x nao pertence ao invervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
x pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:43:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print("x pertence ao intervalo a, b ")
elif((x<=a<=b)or(a<=b<=x)):
	print("x nao pertence ao invervalo a, b ")
else:
	print("Entradas a e b invalidas ")
-- OUTPUT:
x nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:44:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b ")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b ")
else:
	print("Entradas a e b invalidas ")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:44:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b ")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b ")
else:
	print("Entradas a e b invalidas ")
-- EXECUTION TIME:
0.140356
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao invervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:45:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b ")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b ")
else:
	print("Entradas a e b invalidas ")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:45:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:45:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:45:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.14791
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao invervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:46:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a<=b)or(a<=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:46:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a<=b)or(a<=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.132046
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao invervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:47:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a<=b)or(a<=b)or(x<=a)or(x>=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:47:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a<=b)or(a<=b)or(x<=a)or(x>=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.262785
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao invervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao invervalo a, b
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:55:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a)and(x>=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:55:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a)and(x>=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:55:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a)and(x>=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.204102
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao invervalo a, b
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:17:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)and(x>=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:18:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(x>=b)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:22:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(x>=b)or(a>=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 15:22:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(x>=b)or(a>=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.136092
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao invervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao invervalo a, b
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:23:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 15:23:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.294881
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao invervalo a, b
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:24:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:28:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:28:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:28:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:30:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x<=b)or(x<=a<=b)or(a<=b<=x)):
	print(x, "pertence ao intervalo a, b")
elif(b<a):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 pertence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 15:31:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x<=b)or(x<=a<=b)or(a<=b<=x)):
	print(x, "pertence ao intervalo a, b")
elif(b<a):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.193134
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pertence ao intervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao invervalo a, b
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo a, b
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:31:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x<=b)or(x<=a<=b)or(a<=b<=x)):
	print(x, "pertence ao intervalo a, b")
elif(b<a):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 pertence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:34:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 7
    if((a<=x<=b):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:34:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:34:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 15:35:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((x<=a<=b)or(a<=b<=x)):
	print(x, "nao pertence ao invervalo a, b")
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
2.0 nao pertence ao invervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 16:01:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((x>=a)and(x<=b)):
	print(x, "pertence ao intervalo a, b")
elif((b<=x)or(a>=x)):
	print("Entradas a e b invalidas")
else:
	print(x, "nao pertence ao intervalo a, b")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 16:03:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((x>=a)and(x<=b)):
	print(x, "pertence ao intervalo 1, 3")
elif((b<=x)or(a>=x)):
	print("Entradas 1 e 3 invalidas")
else:
	print(x, "nao pertence ao intervalo 1, 3")
-- OUTPUT:
Entradas 1 e 3 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 16:04:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((x>=a)and(x<=b)):
	print(x, "pertence ao intervalo 1.0, 3.0")
elif((b<=x)or(a>=x)):
	print("Entradas 1 e 3 invalidas")
else:
	print(x, "nao pertence ao intervalo 1.0, 3.0")
-- OUTPUT:
Entradas 1 e 3 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 16:05:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((x>=a)and(x<=b)):
	print(x, "pertence ao intervalo 1.0, 3.0")
elif((b<=x)or(a>=x)):
	print("Entradas 1 e 3 invalidas")
else:
	print(x, "nao pertence ao intervalo 1.0, 3.0")
-- EXECUTION TIME:
0.140155
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 1 e 3 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 1 e 3 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.0, 3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 16:36:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
x=2.0
a=1.0
b=3.0
if((b<=a)or(x>=b)or(x<=a)):
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas 1 e 3 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 16:36:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
x=2.0
a=1.0
b=3.0
if((b<=a)or(x>=b)or(x<=a)):
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas 1 e 3 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 16:37:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((b<=a)or(x>=b)or(x<=a)):
	print("Entradas 1.0 e 3.0 invalidas")
-- OUTPUT:
Entradas 1.0 e 3.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:01:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())

if(a<=x<=b):
	print(x, "pertence ao intervalo a, b")
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas a e b invalidas")
else:
	print(x, "nao pertence ao intervalo a, b")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:09:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())

if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas a e b invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:10:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())

if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:10:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())

if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 17:10:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())

if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.122633
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:11:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
print("Entradas:", x, ",", a, ",", b)
if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 17:11:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
print("Entradas:", x, ",", a, ",", b)
if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.127807
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas: 2.0 , 3.0 , 4.0
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas: 5.5 , 6.5 , 3.5
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas: 6.5 , 1.1 , 22.2
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:12:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
print("Entradas:", x, ",", a, ",", b)
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 17:12:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
print("Entradas:", x, ",", a, ",", b)
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.131762
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas: 2.0 , 3.0 , 4.0
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas: 5.5 , 6.5 , 3.5
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas: 6.5 , 1.1 , 22.2
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:13:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
print("Entradas:", x, ",", a, ",", b)
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:13:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
print("Entradas:", x, ",", a, ",", b)
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>=b)or(x<=a)or(x>=b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:15:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>b)or(x<a)or(x>b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:15:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>b)or(x<a)or(x>b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:15:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>b)or(x<a)or(x>b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:15:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>b)or(x<a)or(x>b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:15:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>b)or(x<a)or(x>b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:15:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>b)or(x<a)or(x>b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 17:17:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif((a>b)or(x<a)or(x>b)):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.24742
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:19:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:19:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)and(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:19:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)or(x<=b)):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
2.0 pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:20:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)or(x<=b)and(b>a)or(x>a)):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
2.0 pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 17:20:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if((a<=x)or(x<=b)and(b>a)or(x>a)):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.189556
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:24:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b)and(b>a)or(x>a):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 18:24:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b)and(b>a)or(x>a):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.215576
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:25:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 18:25:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo", a, ",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.147933
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:27:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo", a,",", b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:29:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo", a,",", b)
elif(b<=a):
	print("Entradas", a, "e", b)
else:
	print(x, "nao pertence ao intervalo", a, "," b)
-- ERROR:
File "XXXX", line 12
    print(x, "nao pertence ao intervalo", a, "," b)
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:30:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo", a,",", b)
elif(b<=a):
	print("Entradas", a, "e", b "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- ERROR:
File "XXXX", line 10
    print("Entradas", a, "e", b "invalidas")
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 18:31:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo", a,",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 18:31:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
a=float(input())
b=float(input())
if(a<=x<=b):
	print(x, "pertence ao intervalo", a,",", b)
elif(b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)
-- EXECUTION TIME:
0.139249
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
