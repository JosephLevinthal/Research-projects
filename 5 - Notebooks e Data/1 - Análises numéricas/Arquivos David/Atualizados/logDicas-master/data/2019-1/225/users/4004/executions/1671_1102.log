== TEST (2019-04-24 15:35:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio"))                   #raio dos bojos

print("Entradas: ",H,",",h,",",r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")

print("Volume: ",h ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  5.7 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:46:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (H ** 2)) * ((3 * r) - H)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < calota:
		
	
print("Volume: ",round(h, 3) ,"litros")
-- ERROR:
File "XXXX", line 24
    print("Volume: ",round(h, 3) ,"litros")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:46:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (H ** 2)) * ((3 * r) - H)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < calota:
		
	
print("Volume: ",round(h, 3) ,"litros")
-- ERROR:
File "XXXX", line 24
    print("Volume: ",round(h, 3) ,"litros")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:47:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (H ** 2)) * ((3 * r) - H)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < calota:
	print("Volume: ",round(h, 3) ,"litros")
-- ERROR:
File "XXXX", line 22
    print("Volume: ",round(h, 3) ,"litros")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:47:45) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (H ** 2)) * ((3 * r) - H)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < calota:
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:55:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (H ** 2)) * ((3 * r) - H)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < calota:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 22:06:41) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (H ** 2)) * ((3 * r) - H)
h_calota = 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < calota:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- ERROR:
File "XXXX", line 17
    h_calota = 
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:45:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (H ** 2)) * ((3 * r) - H)
h_calota = 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- ERROR:
File "XXXX", line 17
    h_calota = 
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:45:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (H ** 2)) * ((3 * r) - H) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:45:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (H ** 2)) * ((3 * r) - H) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:46:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (H ** 2)) * ((3 * r) - H) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = v_calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:46:08) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (H ** 2)) * ((3 * r) - H) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = v_calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- EXECUTION TIME:
0.129465
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:46:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (H ** 2)) * ((3 * r) - H) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = v_calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:48:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (h ** 2)) * ((3 * r) - h) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = v_calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:49:02) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (h ** 2)) * ((3 * r) - h) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = v_calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:49:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
v_calota = ((pi/3) * (h ** 2)) * ((3 * r) - h) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = v_calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:04:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (r ** 2)) * ((3 * r) - r) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
	elif h < H - r:
		V = (calota + cilindro) * 1000
		print("Volume: ",round(h, 3) ,"litros")
	else:
		V = ((2 * calota) + volume) * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  5.7 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:05:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (r ** 2)) * ((3 * r) - r) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
	elif h < H - r:
		V = (calota + cilindro) * 1000
		print("Volume: ",round(h, 3) ,"litros")
	else:
		V = ((2 * calota) + cilindro) * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  5.7 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:06:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (h ** 2)) * ((3 * h) - r) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
	elif h < H - r:
		V = (calota + cilindro) * 1000
		print("Volume: ",round(h, 3) ,"litros")
	else:
		V = ((2 * calota) + cilindro) * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  5.7 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:06:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (h ** 2)) * ((3 * h) - r) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(h, 3) ,"litros")
	elif h < H - r:
		V = (calota + cilindro) * 1000
		print("Volume: ",round(h, 3) ,"litros")
	else:
		V = ((2 * calota) + cilindro) * 1000
		print("Volume: ",round(h, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  5.7 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:07:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (h ** 2)) * ((3 * h) - r) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota + cilindro) * 1000
		print("Volume: ",round(V, 3) ,"litros")
	else:
		V = ((2 * calota) + cilindro) * 1000
		print("Volume: ",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  691342.021 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:07:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * H
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (r ** 2)) * ((3 * r) - r) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota + cilindro) * 1000
		print("Volume: ",round(V, 3) ,"litros")
	else:
		V = ((2 * calota) + cilindro) * 1000
		print("Volume: ",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  213277.489 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:09:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro = pi * (r ** 2) * h
esfera = (4*(pi *(r ** 3)))/3
calota = ((pi/3) * (h ** 2)) * ((3 * h) - r) 

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota * 1000
		print("Volume: ",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota + cilindro) * 1000
		print("Volume: ",round(V, 3) ,"litros")
	else:
		V = ((2 * calota) + cilindro) * 1000
		print("Volume: ",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  598275.48 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:17:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)


if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota_p * 1000
		print("Volume: ",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota_t + cilindro_p) * 1000
		print("Volume: ",round(V, 3) ,"litros")
	else:
		V = (((calota_p) + cilindro_t) + calota_t) * 1000
		print("Volume: ",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  43971.026 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:18:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)


if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota_p * 100
		print("Volume: ",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota_t + cilindro_p) * 100
		print("Volume: ",round(V, 3) ,"litros")
	else:
		V = (((calota_p) + cilindro_t) + calota_t) * 100
		print("Volume: ",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:18:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)


if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota_p * 100
		print("Volume: ",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota_t + cilindro_p) * 100
		print("Volume: ",round(V, 3) ,"litros")
	else:
		V = (((calota_p) + cilindro_t) + calota_t) * 100
		print("Volume: ",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.176658
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  4397.103 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:25:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota_p * 100
		print("Volume: ",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota_t + cilindro_p) * 100
		print("Volume: ",round(V, 3) ,"litros")
	else:
		V = (((calota_p) + cilindro_t) + calota_t) * 100
		print("Volume: ",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:25:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota_p * 100
		print("Volume:",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota_t + cilindro_p) * 100
		print("Volume:",round(V, 3) ,"litros")
	else:
		V = (((calota_p) + cilindro_t) + calota_t) * 100
		print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:25:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
else:
	if h < r:                         #Calota inferior
		V = calota_p * 100
		print("Volume:",round(V, 3) ,"litros")
	elif h < H - r:
		V = (calota_t + cilindro_p) * 100
		print("Volume:",round(V, 3) ,"litros")
	else:
		V = (((calota_p) + cilindro_t) + calota_t) * 100
		print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.211058
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:26:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.144488
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:39:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                        
	V = calota_t * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = (calota_t + cilindro_T) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_t) + cilindro_t) + calota_P) * 100
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.154953
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:39:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                        
	V = calota_t * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = (calota_t + cilindro_T) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_t) + cilindro_t) + calota_P) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:41:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")

elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:41:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:41:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:42:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:42:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:46:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                        #Calota inferior Completo
	V = calota_t * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:                     #Cilindro 
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:                     #Cilindro Completo
	V = (calota_t + cilindro_t) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:47:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:48:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = (calota_t + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (((calota_p) + cilindro_t) + calota_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:51:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < r:                         #Calota inferior Completa
	V = (esfera / 2) * 100
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 100
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 100
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (esfera + cilindro_t) * 100
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 4397.103 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:51:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = (esfera + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:52:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:52:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:53:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H 
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- ERROR:
File "XXXX", line 34
    elif h < H 
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:54:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:54:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.297558
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:27:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 21:27:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.214453
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:30:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 21:30:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*(pi *(r ** 3)))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * ((H - (2 * r)) ** 2) * r) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * h) - r)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.155335
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 43971.026 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:38:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (H - (2 * r)) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- ERROR:
File "XXXX", line 18
    calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:38:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (H - (2 * r))) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 31829.311 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 21:38:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (H - (2 * r))) / 100) * h
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.190009
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 31829.311 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:44:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (h-r)
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- ERROR:
File "XXXX", line 18
    calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 21:44:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (h-r)
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.18231
-- ERROR:
  File "/home/codebench/codes/1671/1102/main.py", line 18
    calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:44:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (h-r))
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- ERROR:
File "XXXX", line 18
    calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 21:44:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (h-r)))
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 21:44:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

H = float(input("altura: "))               #altura total do tanque
h = float(input("nivel de combustivel: ")) #nivel de combsutivel
r = float(input("raio: "))                 #raio dos bojos

print("Entradas: ",H,",",h,",",r)

cilindro_t = pi * (r ** 2) * (H - (r * 2))
esfera = (4*pi *(r ** 3))/3
calota_t = ((pi/3) * (r ** 2)) * ((3 * r) - r) 
cilindro_p = ((pi * (r ** 2) * (h-r)))
calota_p = ((pi/3) * (h ** 2)) * ((3 * r) - h)

if ((H < 0) or (h < 0) or (r < 0)) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif h < r:                         #Calota inferior
	V = calota_p * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == r:                         #Calota inferior Completa
	V = (esfera / 2) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H - r:
	V = ((esfera / 2) + cilindro_p) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h == H - r:
	V = ((esfera / 2) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
elif h < H:
	V = ((esfera / 2) + (calota_p) + cilindro_t) * 1000
	print("Volume:",round(V, 3) ,"litros")
else:
	V = ((esfera) + (cilindro_t)-(calota_p)) * 1000
	print("Volume:",round(V, 3) ,"litros")
-- EXECUTION TIME:
0.182946
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
