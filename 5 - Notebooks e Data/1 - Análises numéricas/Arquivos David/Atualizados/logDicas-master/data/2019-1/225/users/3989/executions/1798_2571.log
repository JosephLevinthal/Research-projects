== SUBMITION (2019-06-10 18:43:24) 
-- CODE:
string = raw_input()

for i in string:
	if(i != "a" or i != "A"):
		novaString += i

print(novaString)
-- EXECUTION TIME:
0.788348
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2571/main.py", line 1, in <module>
    string = raw_input()
NameError: name 'raw_input' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:43:29) 
-- CODE:
string = raw_input()

for i in string:
	if(i != "a" or i != "A"):
		novaString += i

print(novaString)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    string = raw_input()
NameError: name 'raw_input' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 18:45:17) 
-- CODE:
string = input()

for i in string:
	if(i != "a" or i != "A"):
		novaString += i

print(novaString)
-- EXECUTION TIME:
0.898846
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2571/main.py", line 5, in <module>
    novaString += i
NameError: name 'novaString' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:45:20) 
-- CODE:
string = input()

for i in string:
	if(i != "a" or i != "A"):
		novaString += i

print(novaString)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    novaString += i
NameError: name 'novaString' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 18:45:38) 
-- CODE:
string = input()
novaString = []

for i in string:
	if(i != "a" or i != "A"):
		novaString += i

print(novaString)
-- EXECUTION TIME:
0.922752
-- TEST CASE 1:
---- input:
Instituto_de_Computacao-ICOMP-UFAM
---- correct output:
Instituto_de_Computco-ICOMP-UFM
---- user output:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
-- TEST CASE 2:
---- input:
a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-aa-a-a-a-a-a-a-a-a-a-a
---- correct output:
-----------------------------
---- user output:
['a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a']
-- TEST CASE 3:
---- input:
.aaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb.aaaaaaaaaaaaaaaaa.
---- correct output:
..bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb..
---- user output:
['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.']
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:45:43) 
-- CODE:
string = input()
novaString = []

for i in string:
	if(i != "a" or i != "A"):
		novaString += i

print(novaString)
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:46:29) 
-- CODE:
string = input()
novaString = []

for i in string:
	if(i != "a" or i != "A"):
		novaString.append(i)

print(novaString)
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:46:43) 
-- CODE:
string = input()
novaString = []

for i in string:
	print(i)
	if(i != "a" or i != "A"):
		novaString.append(i)

print(novaString)
-- OUTPUT:
I
n
s
t
i
t
u
t
o
_
d
e
_
C
o
m
p
u
t
a
c
a
o
-
I
C
O
M
P
-
U
F
A
M
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 18:47:11) 
-- CODE:
string = input()
novaString = []

for i in string:
	print(i)
	if(i != 'a' or i != 'A'):
		novaString.append(i)

print(novaString)
-- EXECUTION TIME:
0.849483
-- TEST CASE 1:
---- input:
Instituto_de_Computacao-ICOMP-UFAM
---- correct output:
Instituto_de_Computco-ICOMP-UFM
---- user output:
I
n
s
t
i
t
u
t
o
_
d
e
_
C
o
m
p
u
t
a
c
a
o
-
I
C
O
M
P
-
U
F
A
M
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
-- TEST CASE 2:
---- input:
a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-aa-a-a-a-a-a-a-a-a-a-a
---- correct output:
-----------------------------
---- user output:
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
-
a
['a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a', '-', 'a']
-- TEST CASE 3:
---- input:
.aaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb.aaaaaaaaaaaaaaaaa.
---- correct output:
..bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb..
---- user output:
.
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
.
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
.
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
.
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
.
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
.
['.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', '.']
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:47:14) 
-- CODE:
string = input()
novaString = []

for i in string:
	print(i)
	if(i != 'a' or i != 'A'):
		novaString.append(i)

print(novaString)
-- OUTPUT:
I
n
s
t
i
t
u
t
o
_
d
e
_
C
o
m
p
u
t
a
c
a
o
-
I
C
O
M
P
-
U
F
A
M
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:47:19) 
-- CODE:
string = input()
novaString = []

for i in string:
	print(i)
	if(i != 'a' or i != 'A'):
		novaString.append(i)

print(novaString)
-- OUTPUT:
I
n
s
t
i
t
u
t
o
_
d
e
_
C
o
m
p
u
t
a
c
a
o
-
I
C
O
M
P
-
U
F
A
M
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:47:36) 
-- CODE:
string = input()
novaString = []

for i in string:
	
	if(i != 'a' or i != 'A'):
		novaString.append(i)

print(novaString)
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:49:56) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != 'a') or (i != 'A')):
		novaString.append(i)

print(novaString)
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'a', 'c', 'a', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'A', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:50:05) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != 'a') and (i != 'A')):
		novaString.append(i)

print(novaString)
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'c', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 18:50:11) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != 'a') and (i != 'A')):
		novaString.append(i)

print(novaString)
-- EXECUTION TIME:
1.04601
-- TEST CASE 1:
---- input:
Instituto_de_Computacao-ICOMP-UFAM
---- correct output:
Instituto_de_Computco-ICOMP-UFM
---- user output:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'c', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'M']
-- TEST CASE 2:
---- input:
a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-aa-a-a-a-a-a-a-a-a-a-a
---- correct output:
-----------------------------
---- user output:
['-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
-- TEST CASE 3:
---- input:
.aaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb.aaaaaaaaaaaaaaaaa.
---- correct output:
..bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb..
---- user output:
['.', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', '.', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', '.', '.']
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:50:37) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != 'a') and (i != 'A')):
		novaString.append(i)

novaString
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'c', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:51:26) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != 'a') and (i != 'A')):
		novaString.append(i)

novaString
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'c', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 18:51:47) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != 'a') and (i != 'A')):
		novaString.append(i)

print(novaString)
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'c', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 20:11:07) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != 'a') and (i != 'A')):
		novaString.append(i)

print(novaString)
-- OUTPUT:
['I', 'n', 's', 't', 'i', 't', 'u', 't', 'o', '_', 'd', 'e', '_', 'C', 'o', 'm', 'p', 'u', 't', 'c', 'o', '-', 'I', 'C', 'O', 'M', 'P', '-', 'U', 'F', 'M']
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 07:08:11) 
-- CODE:
string = input()
novaString = []

for i in string:
	if((i != a) and (i = A)):
		novaString.append(i)

print(novaString)
-- ERROR:
File "XXXX", line 5
    if((i != a) and (i = A)):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 11:30:53) 
-- CODE:
x = input("q: ")
j = " "
for i in range(len(x)):
	if(x[i].upper()!="A"):
		j = j + x[i]
	elif(x[i].upper()=="A"):
		j = j
print(j)
-- EXECUTION TIME:
0.828625
-- TEST CASE 1:
---- input:
Instituto_de_Computacao-ICOMP-UFAM
---- correct output:
Instituto_de_Computco-ICOMP-UFM
---- user output:
Instituto_de_Computco-ICOMP-UFM
-- TEST CASE 2:
---- input:
a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-aa-a-a-a-a-a-a-a-a-a-a
---- correct output:
-----------------------------
---- user output:
-----------------------------
-- TEST CASE 3:
---- input:
.aaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb.aaaaaaaaaaaaaaaaa.
---- correct output:
..bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb..
---- user output:
..bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb..
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
