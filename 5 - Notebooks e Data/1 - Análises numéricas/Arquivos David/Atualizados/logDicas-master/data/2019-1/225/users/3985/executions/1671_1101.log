== TEST (2019-04-23 12:30:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)")

print(x,"kwh,e tipo",v)
if ((v=="R")=<500):
	g= (x*0.44)
elif ((v=="R")>500):
	g= (x*0.65)
elif ()
	
-- ERROR:
File "XXXX", line 8
    if ((v=="R")=<500):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:30:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)")

print(x,"kwh,e tipo",v)
if ((v==R)=<500):
	g= (x*0.44)
elif ((v=="R")>500):
	g= (x*0.65)
elif ()
	
-- ERROR:
File "XXXX", line 8
    if ((v==R)=<500):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:31:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v==R=<500):
	g= (x*0.44)
elif ((v=="R")>500):
	g= (x*0.65)
elif ()
	
-- ERROR:
File "XXXX", line 9
    if (v==R=<500):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:31:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v==R):
	g= (x*0.44)
elif ((v=="R")>500):
	g= (x*0.65)
elif ()
	
-- ERROR:
File "XXXX", line 13
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:35:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")
	
print("R$", g)
-- OUTPUT:
-56.0 kwh,e tipo I
R$ -30.800000000000004
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:36:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")
	
print(round(("R$", g),2)
-- ERROR:
File "XXXX", line 25
    
                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:36:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")
	
print(round("R$", g),2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    print(round("R$", g),2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:36:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("R$", f)
-- OUTPUT:
-56.0 kwh,e tipo I
R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:37:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("R$", f)
-- OUTPUT:
-56.0 kwh,e tipo I
R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:37:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("R$", f)
-- EXECUTION TIME:
0.193541
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
-56.0 kwh,e tipo I
R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
955.5 kwh,e tipo R
R$ 420.42
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:37:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kwh,e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("R$", f)
-- OUTPUT:
-56.0 kwh,e tipo I
R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:37:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("R$", f)
-- EXECUTION TIME:
0.151063
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
-56.0 kWh e tipo I
R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
955.5 kWh e tipo R
R$ 420.42
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:37:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("R$", f)
-- OUTPUT:
-56.0 kWh e tipo I
R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:38:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("Valor total: R$", f)
-- OUTPUT:
-56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:38:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("Valor total: R$", f)
-- EXECUTION TIME:
0.138882
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
-56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
955.5 kWh e tipo R
Valor total: R$ 420.42
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:38:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)

if (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)
else:
	print("Dados Invalidos")

f= round(g, 2)
print("Valor total: R$", f)
-- OUTPUT:
-56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:41:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v== R,I,C):
	g= "Dados Invalidos"
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:42:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v== "R","I","C"):
	g= "Dados Invalidos"
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:43:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v== "R","I","C"):
	g= "Dados Invalidos"
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:44:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v== "R","I","C"):
	g= "Dados Invalidos"
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

print("Valor total: R$"(round(g, 2))
-- ERROR:
File "XXXX", line 24
    
                                        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:44:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v== "R","I","C"):
	g= "Dados Invalidos"
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:45:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	g= "Dados Invalidos"
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:45:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:46:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print(x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round("g", 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round("g", 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:48:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: "x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round("g", 2)
print("Valor total: R$", f)
-- ERROR:
File "XXXX", line 7
    print("Entradas: "x,"kWh e tipo",v)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:48:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round("g", 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round("g", 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:48:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R"):
	g= (x*0.44)
elif (v=="R"):
	g= (x*0.65)
elif (v=="I"):
	g= (x*0.55)
elif (v=="I"):
	g= (x*0.60)
elif (v=="C"):
	g= (x*0.55)
elif (v=="C"):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:51:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R") and (x=<500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x=<1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x=<5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
File "XXXX", line 10
    elif (v=="R") and (x=<500):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:51:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)
if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 23, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:52:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:53:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:53:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:53:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- EXECUTION TIME:
0.17451
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1101/main.py", line 24, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:53:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R","I","C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:54:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != R) and (v != I) and (v != C):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if (x<0) and (v != R) and (v != I) and (v != C):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:54:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != R) and (v != I) and (v != C):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if (x<0) and (v != R) and (v != I) and (v != C):
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:55:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != R) or (v != I) or (v != C):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:55:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R") or (v != "I") or (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    f= round(g, 2)
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:57:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R") and (v != "I") and (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:57:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R") and (v != "I") and (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
elif (v=="R") and (x>500):
	g= (x*0.65)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
elif (v=="I") and (x>1000):
	g= (x*0.60)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
elif (v=="C") and (x>5000):
	g= (x*0.60)

f= round(g, 2)
print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:58:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R") and (v != "I") and (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:58:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R") and (v != "I") and (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:59:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R") or (v != "I") or (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Dados Invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:59:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R") or (v != "I") or (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- EXECUTION TIME:
0.163929
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kWh e tipo I
Dados Invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kWh e tipo R
Dados Invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:59:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R") or (v != "I") or (v != "C"):
	print("Dados Invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Dados Invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:59:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R") or (v != "I") or (v != "C"):
	print("Dados invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- EXECUTION TIME:
0.157348
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Consumo de energia: Tipo de instalacao: (R,I,C)?Entradas:  -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Consumo de energia: Tipo de instalacao: (R,I,C)?Entradas:  955.5 kWh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:59:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R") or (v != "I") or (v != "C"):
	print("Dados invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 13:00:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) or (v != "R","I","C"):
	print("Dados invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 13:01:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R","I","C"):
	print("Dados invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- OUTPUT:
Entradas:  -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 13:02:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= float(input("Consumo de energia: "))
v= input("Tipo de instalacao: (R,I,C)?")

print("Entradas: ", x,"kWh e tipo",v)

if (x<0) and (v != "R","I","C"):
	print("Dados invalidos")
elif (v=="R") and (x<=500):
	g= (x*0.44)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="R") and (x>500):
	g= (x*0.65)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x<=1000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="I") and (x>1000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x<=5000):
	g= (x*0.55)
	f= round(g, 2)
	print("Valor total: R$", f)
elif (v=="C") and (x>5000):
	g= (x*0.60)
	f= round(g, 2)
	print("Valor total: R$", f)
-- EXECUTION TIME:
0.133071
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
