== SUBMITION (2019-04-28 20:33:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		vol=((4/3)*pi*(r**3))/2
		print("Volume:",(round((vol*1000),3)),"litros")
	elif(h<r):
		vol=(pi/3)*(h**2)*(3*r-h)
		print("Volume: ",(vol*1000), "litros")
	elif(h<H-r and h>r):
		vol = pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("Volume:",(round((vol*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.266879
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:34:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		vol = pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.140466
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
digite altura: digite o raio: digite o nivel de combustivel: Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
digite altura: digite o raio: digite o nivel de combustivel: Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
digite altura: digite o raio: digite o nivel de combustivel: Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:34:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		vol = pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:35:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		vol = pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:35:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		vol = pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.125612
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:35:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("Volume:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.139406
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:36:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:38:41) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),litros"")
		
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 25
    print("V:",(round((v*1000),3)),litros"")
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:39:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.148645
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
V: 98985.301 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:39:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:39:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.198111
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
V: 98985.301 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:44:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3*)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 21
    v=round(((pi*(r**2)*(H-2*r))+(2/3*)*pi*(r**3)),3)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:44:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3*)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.129083
-- ERROR:
  File "/home/codebench/codes/1671/1102/main.py", line 21
    v=round(((pi*(r**2)*(H-2*r))+(2/3*)*pi*(r**3)),3)
                                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:44:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:44:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.160259
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
V: 98985.301 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:45:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:45:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.155786
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
V: 98985.301 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:47:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 20:48:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:49:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if (h>0 and H>0 and r>0 and h>H and H>2*r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.11977
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
V: 98985.301 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 21:00:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if ( h < 0 and H < 0 and r < 0 and h > H and H > 2 * r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 21:00:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if ( h < 0 and H < 0 and r < 0 and h > H and H > 2 * r):
	if(h==r):
		v=((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h)
		print("V:",(vol*1000), "litros")
	elif(h==H-r):
		v=round(((pi*(r**2)*(H-2*r))+(2/3)*pi*(r**3)),3)
		print("V:",(v*1000),"litros")
	elif(h<H-r and h>r):
		v= pi*(r**2)*(h-r)+((4/3)*pi*(r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v=pi*(r**2)*(H-2*r)+4/3*pi*(r**3)-(pi/3)*((H-h)**2)*(3*r-(H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.14675
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 21:04:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if ( h < 0 and H < 0 and r < 0 and h > H and H > 2 * r):
	if ( h == r ):
		v = ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif( h < r):
		v = (pi/3) * (h**2) * (3*r-h)
		print("V:",(vol*1000), "litros")
	elif( h == H - r ):
		v = round(((pi * (r**2) * (H-2*r)) + (2/3) * pi * (r**3)),3)
		print("V:",(v*1000),"litros")
	elif( h < H - r and h > r):
		v = pi * (r**2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v = pi * (r**2) * (H-2*r) + 4/3 * pi * (r**3) - (pi/3) * ((H-h)**2) * (3 * r - (H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.167609
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:26:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if ( h < 0 and H < 0 and r < 0 and h > H and H > 2 * r):
	if ( h == r ):
		v = ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif( h < r):
		v = (pi/3) * (h**2) * (3*r-h)
		print("V:",(vol*1000), "litros")
	elif( h == H - r ):
		v = round(((pi * (r**2) * (H-2*r)) + (2/3) * pi * (r**3)),3)
		print("V:",(v*1000),"litros")
	elif( h < H - r and h > r):
		v = pi * (r**2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v = pi * (r**2) * (H-2*r) + 4/3 * pi * (r**3) - (pi/3) * ((H-h)**2) * (3 * r - (H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:26:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if ( h < 0 and H < 0 and r < 0 and h > H and H > 2 * r):
	if ( h == r ):
		v = ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif( h < r):
		v = (pi/3) * (h**2) * (3*r-h)
		print("V:",(vol*1000), "litros")
	elif( h == H - r ):
		v = round(((pi * (r**2) * (H-2*r)) + (2/3) * pi * (r**3)),3)
		print("V:",(v*1000),"litros")
	elif( h < H - r and h > r):
		v = pi * (r**2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v = pi * (r**2) * (H-2*r) + 4/3 * pi * (r**3) - (pi/3) * ((H-h)**2) * (3 * r - (H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.147993
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 21:56:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

from math import*
H = float(input("digite altura: "))
h = float(input("digite o raio: "))
r = float(input("digite o nivel de combustivel: ")) 
print("Entradas:", H, ",",h,",",r)

if ( h < 0 and H < 0 and r < 0 and h > H and H > 2 * r):
	if ( h == r ):
		v = ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	elif( h < r):
		v = (pi/3) * (h**2) * (3*r-h)
		print("V:",(vol*1000), "litros")
	elif( h == H - r ):
		v = round(((pi * (r**2) * (H-2*r)) + (2/3) * pi * (r**3)),3)
		print("V:",(v*1000),"litros")
	elif( h < H - r and h > r):
		v = pi * (r**2) * (h - r) + ((4/3) * pi * (r**3))/2
		print("V:",(round((v*1000),3)),"litros")
	else:
		v = pi * (r**2) * (H-2*r) + 4/3 * pi * (r**3) - (pi/3) * ((H-h)**2) * (3 * r - (H-h))
		print("V:",(round((v*1000),3)),"litros")
		
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.194291
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
