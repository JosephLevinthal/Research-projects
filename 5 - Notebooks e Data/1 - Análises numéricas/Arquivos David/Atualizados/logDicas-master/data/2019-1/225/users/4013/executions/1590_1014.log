== TEST (2019-03-23 20:01:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (30 / 100)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:01:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (30 / 100)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:02:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (30 / 100)
print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:02:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (30 / 100)
print(round(y , 2))
-- EXECUTION TIME:
0.128233
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:02:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (3 / 100)
print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:02:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (3 / 100)
print(round(y , 2))
-- EXECUTION TIME:
0.170552
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:03:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (0.3 / 100)
print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:03:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = x * (0.3 / 100)
print(round(y , 2))
-- EXECUTION TIME:
0.122168
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:04:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input(x * (30 /100)))
print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:04:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input(x * (30 /100)))
print(round(y , 2))
-- EXECUTION TIME:
0.199059
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:05:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input(x * (0.3 /100)))
print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:05:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input(x * (0.3 /100)))
print(round(y , 2))
-- EXECUTION TIME:
0.121636
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:07:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = x * (y / 100)
print(round(r , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:07:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = x * (y / 100)
print(round(r , 2))
-- EXECUTION TIME:
0.125489
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:08:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = (y / 100) * x
print(round(r , 2))
-- EXECUTION TIME:
0.126283
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:08:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = (y / 100) * x
print(round(r , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:09:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:100"))
y = int(input("lucro:"))
r = (y / 100) * x
print(round(r , 2))
-- EXECUTION TIME:
0.112169
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:10:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = 0.3 / 100
r = int(input("y"))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:10:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = 0.3 / 100
r = int(input("y"))


-- EXECUTION TIME:
0.195677
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:11:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = 0.3 / 100
r = int(input("y"))
s = x * r
print(round(s , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:11:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = 0.3 / 100
r = int(input("y"))
s = x * r
print(round(s , 2))

-- EXECUTION TIME:
0.193935
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:16:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = (x * y) / 100
print(round(r , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:16:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = (x * y) / 100
print(round(r , 2))
-- EXECUTION TIME:
0.118574
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:18:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = x * (y // 100)
print(round(r , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:18:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
r = x * (y // 100)
print(round(r , 2))
-- EXECUTION TIME:
0.140994
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:18:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round( , 2))
-- EXECUTION TIME:
0.117178
-- ERROR:
  File "/home/codebench/codes/1590/1014/main.py", line 7
    print(round( , 2))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:18:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- EXECUTION TIME:
0.182012
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:18:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:19:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:20:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:21:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:21:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- EXECUTION TIME:
0.122012
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:21:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:21:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:23:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:23:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(y , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:24:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:28:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) / 100
q = x * y
print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:28:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) / 100
q = x * y
print(q)

-- EXECUTION TIME:
0.179262
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:28:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 
q = x * y
print(q)

-- EXECUTION TIME:
0.123582
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:28:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 
q = x * y
print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:28:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 
q = x * y
print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:28:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 
q = x * y
print(q)

-- EXECUTION TIME:
0.126383
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:28:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 
q = x * y
print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:31:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:500"))
y = int(input("lucro:")) 
q = x * y

print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:31:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:55"))
y = int(input("lucro:")) 
q = x * y

print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:31:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:55"))
y = int(input("lucro:")) 
q = x * y

print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:31:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 
q = x * y

print(q)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:32:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:32:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:")) 


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:35:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(x * (y / 100) , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:35:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))

print(round(x * (y / 100) , 2))


-- EXECUTION TIME:
0.157673
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:36:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = int(input(x * (y / 100)))
print(round(q , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:36:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = int(input(x * (y / 100)))
print(round(q , 2))


-- EXECUTION TIME:
0.171526
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:36:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = int(input(x * (y / 100)))

print(round(q , 2))


-- EXECUTION TIME:
0.114915
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:36:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = int(input(x * (y / 100)))

print(round(q , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:36:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = int(input(x * (y / 100)))

print(round(q , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:37:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = input(x * (y / 100))

print(round(q , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:37:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = input(x * (y / 100))

print(round(q , 2))


-- EXECUTION TIME:
0.212635
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:37:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = input(x * (y / 100))

print(round(q , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:38:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(round(q , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:38:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(round(q , 2))


-- EXECUTION TIME:
0.188781
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:38:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(round(q , 2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:38:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(q)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:38:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(q)


-- EXECUTION TIME:
0.136771
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:38:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(q)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:39:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(q)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:39:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input("lucro:")
q = x * y

print(q)


-- EXECUTION TIME:
0.155733
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:42:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = y / 100
total = x * q
print(total)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:42:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = y / 100
total = x * q
print(total)



-- EXECUTION TIME:
0.197328
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:42:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = y // 100
total = x * q
print(total)



-- EXECUTION TIME:
0.126728
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:42:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = y // 100
total = x * q
print(total)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:43:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = y / 100
total = x * q
print(total)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:45:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = y / 100
total = x * q
print(total)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:45:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = int(input("lucro:"))
q = y / 100
total = x * q
print(total)



-- EXECUTION TIME:
0.150822
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:45:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = 




-- ERROR:
File "XXXX", line 5
    y = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:47:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input((30 / 100) * x)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:47:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input((30 / 100) * x)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:47:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input((30 / 100) * x)
print(round(y , 2))



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:47:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("total de vendas:"))
y = input((30 / 100) * x)
print(round(y , 2))



-- EXECUTION TIME:
0.211093
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 4, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '700.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:03:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input())#Valor de vendas
y=x*30/100
print(y)



-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:03:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input("valor total:"))#Valor de vendas
y=x*30/100
print(y)




-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:04:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input("valor total:"))#Valor de vendas
y=x*30/100
print(y)




-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:04:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input("valor total:"))#Valor de vendas
y=x*30/100
print(y)




-- EXECUTION TIME:
0.144356
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
