== TEST (2019-04-29 14:17:29) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
   print = round(z, 4)
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print = round(z,4)
else:
	print("entrada invalida")

			 
-- ERROR:
File "XXXX", line 4
    print = round(z, 4)
                      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:17:48) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print = round(z, 4)
elif(x>2 or x<=1000):
	z = 1/(x-2)
print = round(z,4)
else:
	print("entrada invalida")

			 
-- ERROR:
File "XXXX", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:17:52) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print = round(z, 4)
elif(x>2 or x<=1000):
	z = 1/(x-2)
print = round(z,4)
else:
print("entrada invalida")

			 
-- ERROR:
File "XXXX", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:17:53) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print = round(z, 4)
elif(x>2 or x<=1000):
	z = 1/(x-2)
print = round(z,4)
else:
print("entrada invalida")

			 
-- ERROR:
File "XXXX", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:19:16) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print = round(z, 4)
elif(x>2 or x<=1000):
	z = 1/(x-2)
print = round(z, 4)
else:
print("entrada invalida")

			 
-- ERROR:
File "XXXX", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:19:46) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
   print = round(z, 4)
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print = round(z, 4)
else:
	print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 4
    print = round(z, 4)
                      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:15) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
   print(round(z, 4))
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print(round(z, 4))
else:
	print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 4
    print(round(z, 4))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:22:17) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
   print(round(z, 4))
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print(round(z, 4))
else:
	print("entrada invalida")


			 
-- EXECUTION TIME:
0.201375
-- ERROR:
  File "/home/codebench/codes/1708/3041/main.py", line 4
    print(round(z, 4))
                     ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:18) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
   print(round(z, 4))
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print(round(z, 4))
else:
	print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 4
    print(round(z, 4))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:25) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print(round(z, 4))
elif(x>2 or x<=1000):
	z = 1/(x-2)
print(round(z, 4))
else:
	print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:26) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print(round(z, 4))
elif(x>2 or x<=1000):
	z = 1/(x-2)
print(round(z, 4))
else:
	print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:22:27) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print(round(z, 4))
elif(x>2 or x<=1000):
	z = 1/(x-2)
print(round(z, 4))
else:
	print("entrada invalida")


			 
-- EXECUTION TIME:
0.150705
-- ERROR:
  File "/home/codebench/codes/1708/3041/main.py", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:28) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
print(round(z, 4))
elif(x>2 or x<=1000):
	z = 1/(x-2)
print(round(z, 4))
else:
	print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 5
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:23:48) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
print(round(z, 4))
else:
	print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:24:31) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
print(round(z, 4))
	else:
		print("entrada invalida")


			 
-- ERROR:
File "XXXX", line 9
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:24:56) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print(round(z, 4))
else:
	print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 8
    print(round(z, 4))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:25:53) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print(round(z, 4))
else:
	print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 8
    print(round(z, 4))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:26:17) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print(round(z, 4))
else:
	print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 8
    print(round(z, 4))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:26:51) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
	elif(x>2 or x<=1000):
		z = 1/(x-2)
   	print(round(z, 4))
else:
	print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 6
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:26:59) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
	elif(x>2 or x<=1000):
		z = 1/(x-2)
   	print(round(z, 4))
	else:
		print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 6
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:27:01) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
	elif(x>2 or x<=1000):
		z = 1/(x-2)
   	print(round(z, 4))
	else:
		print("entrada invalida")



			 
-- EXECUTION TIME:
0.143548
-- ERROR:
  File "/home/codebench/codes/1708/3041/main.py", line 6
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:27:02) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
	elif(x>2 or x<=1000):
		z = 1/(x-2)
   	print(round(z, 4))
	else:
		print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 6
    elif(x>2 or x<=1000):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:27:08) 
-- CODE:
x = float(input("Valor de x: "))
	if(x>=-1000 or x<-2):
		z = -1/(x+2)
		print(round(z, 4))
	
	elif(x>2 or x<=1000):
		z = 1/(x-2)
   	print(round(z, 4))
	else:
		print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 2
    if(x>=-1000 or x<-2):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:35:17) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
   print(round(z, 4))
else:
	print("entrada invalida")



			 
-- ERROR:
File "XXXX", line 8
    print(round(z, 4))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:35:50) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print("entrada invalida")



			 
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:35:57) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print("entrada invalida")



			 
-- EXECUTION TIME:
0.196476
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
-0.2857
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:36:05) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print("entrada invalida")



			 
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:36:21) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print("entrada invalida")



			 
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:36:23) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print("entrada invalida")



			 
-- EXECUTION TIME:
0.272223
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
-0.2857
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:36:47) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print('entrada invalida')



			 
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:36:48) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print('entrada invalida')



			 
-- EXECUTION TIME:
0.21013
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
-0.2857
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:36:55) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print('entrada invalida')



			 
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:36:58) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print('entrada invalida')



			 
-- EXECUTION TIME:
0.243204
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
-0.2857
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:37:13) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 or x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 or x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print('entrada invalida')



			 
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:37:40) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 and x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 and x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print('entrada invalida')



			 
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:37:49) 
-- CODE:
x = float(input("Valor de x: "))
if(x>=-1000 and x<-2):
	z = -1/(x+2)
	print(round(z, 4))
	
elif(x>2 and x<=1000):
	z = 1/(x-2)
	print(round(z, 4))
else:
	print('entrada invalida')



			 
-- EXECUTION TIME:
0.0956891
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
entrada invalida
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
