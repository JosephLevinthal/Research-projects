== TEST (2019-04-08 14:43:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input())
h = int(input())
num = float(input())
Ve = (4*h*r**3)/3
Vec = (h*x**2)*(3*r-x)/3 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    h = int(input())
ValueError: invalid literal for int() with base 10: '0.95'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:59:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = int(input())
num = float(input())#1 ou 2
Ve = (4*pi*r**3)/3
Vec = (pi*x**2)*(3*r-x)/3 

if (num == Ve):
	print(round(Ve, 4))
	
else:
	print(round(Vec, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '0.95'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:59:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = int(input())
num = float(input())#1 ou 2
Ve = (4*pi*r**3)/3
Vec = (pi*x**2)*(3*r-x)/3 

if (num == Ve):
	print(round(Ve, 4))
	
else:
	print(round(Vec, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '0.95'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:59:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = int(input())
num = float(input())#1 ou 2
Ve = (4*pi*r**3)/3
Vec = (pi*x**2)*(3*r-x)/3 

if (num == Ve):
	print(round(Ve, 4))
	
else:
	print(round(Vec, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x = int(input())
ValueError: invalid literal for int() with base 10: '0.95'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:59:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
Ve = (4*pi*r**3)/3
Vec = (pi*x**2)*(3*r-x)/3 

if (num == Ve):
	print(round(Ve, 4))
	
else:
	print(round(Vec, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:59:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
Ve = (4*pi*r**3)*1/3
Vec = (pi*x**2)*(3*r-x)/3 

if (num == Ve):
	print(round(Ve, 4))
	
else:
	print(round(Vec, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:00:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
Ve = (4*pi*r**3)*1/3
Vec = (pi*x**2)*(3*r-x)/3 

if (num == Ve):
	print(round(Ve, 4))
	
else:
	print(round(Vec, 4))
-- EXECUTION TIME:
0.0961599
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:02:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(Ve, 4))
	
else:
	print(round(Vec, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(round(Vec, 4))
NameError: name 'Vec' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:03:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:03:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:03:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:04:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V-Ve, 4))
	
else:
	print(round(Ve-V, 4))
-- OUTPUT:
-170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:05:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V-Ve, 4))
	
else:
	print(round(Ve-V, 4))
-- EXECUTION TIME:
0.272077
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
-170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
-290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:05:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V-Ve, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:05:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V-Ve, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:05:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(V-Ve, 4))
	
else:
	print(round(V-Ve, 4))
-- EXECUTION TIME:
0.125426
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:05:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:05:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:05:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == "V"):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- EXECUTION TIME:
0.149573
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:06:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == V):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:06:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == V):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- EXECUTION TIME:
0.176343
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:06:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == V):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:06:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == V):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:06:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == V):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:12:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)*1/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == V):
	print(round(Ve-V, 4))
	
else:
	print(round(V-Ve, 4))
-- EXECUTION TIME:
0.192557
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:15:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 2):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:15:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:15:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- EXECUTION TIME:
0.118173
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:15:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 2):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:16:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = float(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 2):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- EXECUTION TIME:
0.12063
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:16:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 2):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:16:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 2):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- EXECUTION TIME:
0.164041
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:17:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:17:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(V, 4))
	
else:
	print(round(Ve, 4))
-- EXECUTION TIME:
0.145356
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:17:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:17:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(V, 4))
	
else:
	print(round(V-Ve, 4))
-- EXECUTION TIME:
0.134243
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:17:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(V, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:18:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(Ve, 4))
	
else:
	print(round(V-Ve, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:18:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input())
x = float(input())
num = int(input())#1 ou 2
V = (4*pi*r**3)/3
Ve = (pi*x**2)*(3*r-x)/3 

if (num == 1):
	print(round(Ve, 4))
	
else:
	print(round(V-Ve, 4))
-- EXECUTION TIME:
0.147714
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
