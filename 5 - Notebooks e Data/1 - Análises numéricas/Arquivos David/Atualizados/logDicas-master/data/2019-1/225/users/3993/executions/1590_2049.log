== TEST (2019-03-20 21:33:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(150)
var2 = int(2)
print(var1 // var2)
print(var1 & var2 )
-- OUTPUT:
75
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:37:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(150)
var2 = int(2)
print(var1)
print(var2)
print(75)
print(var1 % var2)

-- OUTPUT:
150
2
75
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:37:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(150)
var2 = int(2)
print(var1)
print(var2)
print(75)
print(var1 % var2)

-- EXECUTION TIME:
0.206635
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
150
2
75
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
150
2
75
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
150
2
75
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:37:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(150)
var2 = int(2)
print(var1)
print(var2)
print(75)
print(0)

-- EXECUTION TIME:
0.132663
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
150
2
75
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
150
2
75
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
150
2
75
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:38:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(185)
var2 = int(2)
print(var1)
print(var2)
print(92.5)
print(var1 & var2)

-- EXECUTION TIME:
0.198094
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
185
2
92.5
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
185
2
92.5
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
185
2
92.5
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:38:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(185)
var2 = int(2)
print(var1)
print(var2)
print(92.5)
print(var1 & var2)

-- OUTPUT:
185
2
92.5
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:39:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(115)
var2 = int(2)
print(var1)
print(var2)
print(57.5)
print(2)

-- OUTPUT:
115
2
57.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:39:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(115)
var2 = int(2)
print(var1)
print(var2)
print(57.5)
print(2)

-- EXECUTION TIME:
0.117616
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
115
2
57.5
2
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
115
2
57.5
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
115
2
57.5
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:39:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(int(115))
var2 = input(int(2))
print(var1)
print(var2)
print(57.5)
print(2)

-- OUTPUT:
11528
5
57.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:39:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(int(115))
var2 = input(int(2))
print(var1)
print(var2)
print(57.5)
print(2)

-- OUTPUT:
11528
5
57.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:40:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(int(115))
var2 = input(int(2))
print(115)
print(2)
print(57.5)
print(2)

-- OUTPUT:
1152115
2
57.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:41:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = (115)
var2 = (2)
print(115)
print(2)
print(57.5)
print(2)

-- OUTPUT:
115
2
57.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:41:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = (115)
var2 = (2)
print(115)
print(2)
print(57.5)
print(2)

-- OUTPUT:
115
2
57.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:41:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = (115)
var2 = (2)
print(115)
print(2)
print(57.5)
print(2)

-- EXECUTION TIME:
0.148969
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
115
2
57.5
2
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
115
2
57.5
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
115
2
57.5
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:41:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = (115)
var2 = (2)
print(346)
print(2)
print(173)
print(0)

-- OUTPUT:
346
2
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:41:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = (115)
var2 = (2)
print(346)
print(2)
print(173)
print(0)

-- EXECUTION TIME:
0.138139
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
346
2
173
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
346
2
173
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
346
2
173
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:51:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input(130)
var2 = int(input(4))
var3 = (var1 / var2)
var4 = (var1 & var2)

-- ERROR:
File "XXXX", line 5
    var2 = int(input(4))
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:51:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = (input(130)
var2 = (input(4))
var3 = (var1 / var2)
var4 = (var1 & var2)

-- ERROR:
File "XXXX", line 5
    var2 = (input(4))
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:51:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
var3 = (var1 / var2)
var4 = (var1 & var2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3 = (var1 / var2)
TypeError: unsupported operand type(s) for /: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:54:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
print(var1)
print(var2)
print(var1 / var2)
print(var1 & var2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(var1 / var2)
TypeError: unsupported operand type(s) for /: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:55:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
print(var1)
print(var2)
print(32.5)
print(2)

-- OUTPUT:
13048
5
32.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:55:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
print(130)
print(4)
print(32.5)
print(2)

-- OUTPUT:
1304130
4
32.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:55:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
print(130)
print(4)
print(32.5)
print(2)

-- EXECUTION TIME:
0.173469
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1304130
4
32.5
2
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
1304130
4
32.5
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
1304130
4
32.5
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:09:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =(130)
var2 =(4)
print(130)
print(4)
print(32.5)
print(2)

-- OUTPUT:
130
4
32.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:09:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =(130)
var2 =(4)
print(130)
print(4)
print(32.5)
print(2)

-- EXECUTION TIME:
0.138539
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
130
4
32.5
2
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
130
4
32.5
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
130
4
32.5
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:09:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =(130)
var2 =(4)
print(130)
print(4)
print(32.5)
print(2)

-- OUTPUT:
130
4
32.5
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:10:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =(130)
var2 =(4)
print(130)
print(4)
print(var1//var2)
print(var1%var2)

-- OUTPUT:
130
4
32
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:10:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =(130)
var2 =(4)
print(130)
print(4)
print(var1//var2)
print(var1%var2)

-- EXECUTION TIME:
0.155787
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
130
4
32
2
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
130
4
32
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
130
4
32
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:10:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
print(130)
print(4)
print(var1//var2)
print(var1%var2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:11:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
print(130)
print(4)
print(var1//var2)
print(var1%var2)

-- EXECUTION TIME:
0.140161
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 8, in <module>
    print(var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:11:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(130)
var2 = input(4)
print(130)
print(4)
print(var1//var2)
print(var1%var2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 12:23:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

X = int(input("Dividendo"))
Y = int(input("Duvisor"))
print(X)
print(Y)
print(X // Y)
print(X % Y)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 12:23:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

X = int(input("Dividendo"))
Y = int(input("Divisor"))
print(X)
print(Y)
print(X // Y)
print(X % Y)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 12:23:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

X = int(input("Dividendo"))
Y = int(input("Divisor"))
print(X)
print(Y)
print(X // Y)
print(X % Y)

-- EXECUTION TIME:
0.151412
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
