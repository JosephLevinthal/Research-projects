== SUBMITION (2019-04-24 12:56:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if(((a > 0) and (b > 0) and (c > 0)) and ((a < b + c) and (b < a + c) and (c < b + c))):
	if((a == b) and (b == c)):
		print("equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.155076
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:57:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if(((a > 0) and (b > 0) and (c > 0)) and ((a < b + c) and (b < a + c) and (c < a + b))):
	if((a == b) and (b == c 
		print("equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.194326
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 11
    print("equilatero")
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:57:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if(((a > 0) and (b > 0) and (c > 0)) and ((a < b + c) and (b < a + c) and (c < a + b))):
	if((a == b) and (b == c)):
		print("equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.184301
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:58:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if(((a > 0) and (b > 0) and (c > 0)) and ((a < b + c) and (b < a + c) and (c < a + b))):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.141993
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:03:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if(((a > 0) and (b > 0) and (c > 0)) and ((a < b + c) and (b < a + c) and (c < a + b))):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.206474
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:08:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0) and (b > 0) and (c > 0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.128136
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:09:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0) and (b > 0) and (c > 0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:10:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0) and (b > 0) and (c > 0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.110502
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:11:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.166851
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:41:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.125972
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:00:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:00:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:08:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.113877
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:08:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: " + str(a) + ", " + str(b) + ", " + str(c))

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.163037
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0, 4.0, 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3, 4.4, 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0, 2.0, 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:15:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: ", a, ", ", b, ", ",c)

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:15:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input())
b = float(input())
c = float(input())

print("Entradas: ", a, ", ", b, ", ",c)

if((a > 0.0) and (b > 0.0) and (c > 0.0) and (a < b + c) and (b < a + c) and (c < a + b)):
	if((a == b) and (b == c)):
		print("Tipo de triangulo: equilatero")
	elif((a == b) or (b == c) or (c == a)):
		print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.176943
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 ,  4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 ,  5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 ,  7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
