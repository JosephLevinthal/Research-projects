== TEST (2019-04-08 14:18:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4*pi*(r**3)/3
Var=pi*(x**2)*(3*r-x)/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:18:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4*pi*(r**3)/3
Var=pi*(x**2)*(3*r-x)/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- EXECUTION TIME:
0.151568
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:18:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4*pi*(r**3)/3
Var=pi*(x**2)*(3*r-x)/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:19:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4*pi*r**3/3
Var=pi*(x**2)*(3*r-x)/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:19:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=(4*pi*r**3)/3
Var=(pi*(x**2)*(3*r-x))/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:20:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=(4*pi*r*r*r)/3
Var=(pi*(x**2)*(3*r-x))/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:21:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=(4*pi*r*r*r)/3
Var=(pi*(x**2)*(3*r-x))/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:22:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=(4*pi*r*r*r)*1/3
Var=(pi*(x**2)*(3*r-x))*1/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:23:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4/3*pi*r**3
Var=pi*x*x*(3*r-x)*1/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:24:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4/3*pi*r**2*r
Var=pi*x*x*(3*r-x)*1/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:26:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4/3*pi*r**2*r
Var=pi*x*x*(3*r-x)*1/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V-Var,4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:26:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio:"))
x=float(input("altura da coluna de ar:"))
num=input("1 ou 2?")
V=4/3*pi*r**2*r
Var=pi*x*x*(3*r-x)*1/3
if(num=="1"):
	print(round(Var,4))
else:
	print(round(V-Var,4))
	
-- EXECUTION TIME:
0.1491
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
