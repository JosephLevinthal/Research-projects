== TEST (2019-04-24 15:35:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (a <= x <= b):
   print(x "pertence ao intervalo" a "," b)
else:
	print(x "nao pertence ao intervalo" a "," b)
elif (b <= a):
	print("Entradas a e b invalidas")
else:
	print("Entradas a e b validas")

-- ERROR:
File "XXXX", line 8
    print(x "pertence ao intervalo" a "," b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:36:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (a <= x <= b):
   print(x " " "pertence ao intervalo" " " a "," b)
else:
	print(x "nao pertence ao intervalo" a "," b)
elif (b <= a):
	print("Entradas a e b invalidas")
else:
	print("Entradas a e b validas")

-- ERROR:
File "XXXX", line 8
    print(x " " "pertence ao intervalo" " " a "," b)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:37:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
   print(x " " "pertence ao intervalo" " " a "," b)
else:
	print(x "nao pertence ao intervalo" a "," b)
elif (b <= a):
	print("Entradas a e b invalidas")
else:
	print("Entradas a e b validas")

-- ERROR:
File "XXXX", line 9
    print(x " " "pertence ao intervalo" " " a "," b)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:37:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
   print(x "pertence ao intervalo" a "," b)
else:
	print(x "nao pertence ao intervalo" a "," b)
elif (b <= a):
	print("Entradas a e b invalidas")
else:
	print("Entradas a e b validas")

-- ERROR:
File "XXXX", line 9
    print(x "pertence ao intervalo" a "," b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:38:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
   print(x, "pertence ao intervalo" a, "," b,)
else:
	print(x "nao pertence ao intervalo" a "," b)
elif (b <= a):
	print("Entradas a e b invalidas")
else:
	print("Entradas a e b validas")

-- ERROR:
File "XXXX", line 9
    print(x, "pertence ao intervalo" a, "," b,)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
   print(x "pertence ao intervalo" a "," b)
elif (a >= x >= b):
	print(x "nao pertence ao intervalo" a "," b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 9
    print(x "pertence ao intervalo" a "," b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
   print(x "pertence ao intervalo" a "," b)
elif (a >= x >= b):
	print(x "nao pertence ao intervalo" a,b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 9
    print(x "pertence ao intervalo" a "," b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
   print(x "pertence ao intervalo" a,b)
elif (a >= x >= b):
	print(x "nao pertence ao intervalo" a,b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 9
    print(x "pertence ao intervalo" a,b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:42:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
   print(x "pertence ao intervalo" a , b)
elif (a >= x >= b):
	print(x "nao pertence ao intervalo" a,b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 9
    print(x "pertence ao intervalo" a , b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:44:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b <= a):
   if (a <= x <= b):
      print(x "pertence ao intervalo" a , b)
   else:
	   print(x "nao pertence ao intervalo" a,b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 10
    print(x "pertence ao intervalo" a , b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:46:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b <= a):
   if (a <= x <= b):
      print(x, " " "pertence ao intervalo" a, "," b)
   else:
	   print(x "nao pertence ao intervalo" a,b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 10
    print(x, " " "pertence ao intervalo" a, "," b)
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:46:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b <= a):
   if (a <= x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x "nao pertence ao intervalo" a,b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 12
    print(x "nao pertence ao intervalo" a,b)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:47:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b <= a):
   if (a <= x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b >= a):
   if (a <= x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
2.0 , nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:49:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b >= a):
   if (a <= x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- EXECUTION TIME:
0.208278
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas: 2.0 , 3.0 , 4.0
2.0 , nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas: 5.5 , 6.5 , 3.5
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas: 6.5 , 1.1 , 22.2
6.5 , pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:50:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (a <= x <= b):
	if (b <= a):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 10
    print(x, ",", "pertence ao intervalo", a, ",", b)
                                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:53:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b > a):
   if (a <= x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
2.0 , nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b > a):
   if (a <= x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- EXECUTION TIME:
0.14665
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas: 2.0 , 3.0 , 4.0
2.0 , nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas: 5.5 , 6.5 , 3.5
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas: 6.5 , 1.1 , 22.2
6.5 , pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:53:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b > a):
   if (a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- OUTPUT:
Entradas: 2.0 , 3.0 , 4.0
2.0 , nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
print("Entradas:", x, ",", a, ",", b)
if (b > a):
   if (a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- EXECUTION TIME:
0.223773
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas: 2.0 , 3.0 , 4.0
2.0 , nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas: 5.5 , 6.5 , 3.5
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas: 6.5 , 1.1 , 22.2
6.5 , pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:55:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if (b > a):
   if (a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas a e b invalidas")


-- OUTPUT:
2.0 , nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:55:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if (b > a):
   if (a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- OUTPUT:
2.0 , nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:56:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if (b > a):
   if (a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- EXECUTION TIME:
0.18586
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 , nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 , pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:23:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if (b > a):
   elif (a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 9
    elif (a <= x) and (x <= b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:23:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if (b > a):
   elif(a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 9
    elif(a <= x) and (x <= b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:23:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (b > a):
   elif(a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 8
    elif(a <= x) and (x <= b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:24:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (b > a):
   if(a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- OUTPUT:
2.0 , nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:24:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (b > a):
   if(a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
	   print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- EXECUTION TIME:
0.117544
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 , nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 , pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:25:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (b > a):
elif(a <= x) and (x <= b):
   print(x, ",", "pertence ao intervalo", a, ",", b)
else:
	print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 8
    elif(a <= x) and (x <= b):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:25:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (b > a):
   elif(a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
   	print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 8
    elif(a <= x) and (x <= b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:26:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if (b > a):
   elif(a <= x) and (x <= b):
      print(x, ",", "pertence ao intervalo", a, ",", b)
   else:
   	print(x, ",", "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 8
    elif(a <= x) and (x <= b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:33:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if(a <= x) and (x <= b):
   print(x, ",", "pertence ao intervalo", a, ",", b)
else:
	if(a >= a) and (x >= b):
      print(x, ",", "nao pertence ao intervalo", a, ",", b)
   else:
   	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 11
    print(x, ",", "nao pertence ao intervalo", a, ",", b)
                                                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:34:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))
if(a <= x) and (x <= b):
   print(x, ",", "pertence ao intervalo", a, ",", b)
else:
	elif(a >= a) and (x >= b):
      print(x, ",", "nao pertence ao intervalo", a, ",", b)
   else:
   	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    elif(a >= a) and (x >= b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:52:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x, "pertence ao intervalo", a, ",", b)
	else:
   	print(x, "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x, "pertence ao intervalo", a, ",", b)
                                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:52:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x , "pertence ao intervalo", a, ",", b)
	else:
   	print(x , "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x , "pertence ao intervalo", a, ",", b)
                                                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:53:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x , "pertence ao intervalo", a, ",", b)
	else:
   	print(x , "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x , "pertence ao intervalo", a, ",", b)
                                                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:53:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x , "pertence ao intervalo", a, ",", b)
	else:
   	print(x , "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x , "pertence ao intervalo", a, ",", b)
                                                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:54:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x , " pertence ao intervalo ", a, ",", b)
	else:
   	print(x , " nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x , " pertence ao intervalo ", a, ",", b)
                                                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:54:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x ," pertence ao intervalo ", a, ",", b)
	else:
   	print(x ," nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo ", a, ",", b)
                                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:54:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x ,"pertence ao intervalo", a, ",", b)
	else:
   	print(x ,"nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ,"pertence ao intervalo", a, ",", b)
                                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:55:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if(a <= x) and (x <= b):
   	print(x ," pertence ao intervalo ", a, ",", b)
	else:
   	print(x ," nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo ", a, ",", b)
                                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:55:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
   	print(x ," pertence ao intervalo ", a, ",", b)
	else:
   	print(x ," nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo ", a, ",", b)
                                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:56:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
   	print(x ," pertence ao intervalo ", a, ",", b)
	else:
   	print(x ," nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo ", a, ",", b)
                                                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:56:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
   	print(x ," pertence ao intervalo", a, ",", b)
	else:
   	print(x ," nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo", a, ",", b)
                                                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:57:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
   	print(x ," pertence ao intervalo", a,",", b)
	else:
   	print(x ," nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo", a,",", b)
                                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:57:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
   	print(x ," pertence ao intervalo", a,",", b)
	else:
   	print(x ," nao pertence ao intervalo ", a, ",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo", a,",", b)
                                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:59:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
   	print(x ," pertence ao intervalo", a,",", b)
	else:
   	print(x ," nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo", a,",", b)
                                               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:59:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
      print(x," pertence ao intervalo", a,",", b)
	else:
   	print(x," nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x," pertence ao intervalo", a,",", b)
                                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:59:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
      print(x,"pertence ao intervalo", a,",", b)
	else:
   	print(x,"nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x,"pertence ao intervalo", a,",", b)
                                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:22:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b > a):
	if (a <= x) and (x <= b):
      print(x ," pertence ao intervalo", a,",", b)
	else:
   	print(x ," nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a , "e", b, "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x ," pertence ao intervalo", a,",", b)
                                               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 13:24:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b < a):
	print("Entradas", a , "e", b, "invalidas")
elif(a <= x) and (x <= b):
	print(x ," pertence ao intervalo", a,",", b)
else:
	print(x ," nao pertence ao intervalo", a,",", b)



-- OUTPUT:
2.0  nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:24:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x:"))
a = float(input("a:"))
b = float(input("b:"))

if(b < a):
	print("Entradas", a , "e", b, "invalidas")
elif(a <= x) and (x <= b):
	print(x ," pertence ao intervalo", a,",", b)
else:
	print(x ," nao pertence ao intervalo", a,",", b)



-- EXECUTION TIME:
0.242124
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0  nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
