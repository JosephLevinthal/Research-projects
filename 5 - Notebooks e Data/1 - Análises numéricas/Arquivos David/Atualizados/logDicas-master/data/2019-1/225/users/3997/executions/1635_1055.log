== TEST (2019-04-10 17:20:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vi = input("Digite vi":)
alpha = radians(float(input("Digite o alpha" :)))
D = float(input("Digite uma distancia":))

g = 9.8
R = (vi ** 2 * sin (2 * alpha)) / g

if (abs(D - R) < 0.1):
	print("sim")
else: 
	print("nao")


-- ERROR:
File "XXXX", line 5
    vi = input("Digite vi":)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:20:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vi = float(input("Digite vi":))
alpha = radians(float(input("Digite o alpha" :)))
D = float(input("Digite uma distancia":))

g = 9.8
R = (vi ** 2 * sin (2 * alpha)) / g

if (abs(D - R) < 0.1):
	print("sim")
else: 
	print("nao")


-- ERROR:
File "XXXX", line 5
    vi = float(input("Digite vi":))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
Vo = float(input("Digite Vo":))
alpha = radians(float(input("Digite o alpha" :)))
D = float(input("Digite uma distancia":))

g = 9.8
R = (Vo ** 2 * sin (2 * alpha)) / g

if (abs(D - R) < 0.1):
	print("sim")
else: 
	print("nao")


-- ERROR:
File "XXXX", line 5
    Vo = float(input("Digite Vo":))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:23:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
Vo = float(input("digite Vo:"))
alpha = radians(float(input("Digite o alpha" :)))
D = float(input("Digite uma distancia":))

g = 9.8
R = (Vo ** 2 * sin (2 * alpha)) / g

if (abs(D - R) < 0.1):
	print("sim")
else: 
	print("nao")


-- ERROR:
File "XXXX", line 6
    alpha = radians(float(input("Digite o alpha" :)))
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:23:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
Vo = float(input("digite Vo:"))
alpha = radians(float(input("Digite o alpha: ")))
D = float(input("Digite uma distancia: "))

g = 9.8
R = (Vo ** 2 * sin (2 * alpha)) / g

if (abs(D - R) < 0.1):
	print("sim")
else: 
	print("nao")


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:23:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
Vo = float(input("digite Vo:"))
alpha = radians(float(input("Digite o alpha: ")))
D = float(input("Digite uma distancia: "))

g = 9.8
R = (Vo ** 2 * sin (2 * alpha)) / g

if (abs(D - R) < 0.1):
	print("sim")
else: 
	print("nao")


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:24:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
Vo = float(input("digite Vo:"))
alpha = radians(float(input("Digite o alpha: ")))
D = float(input("Digite uma distancia: "))

g = 9.8
R = (Vo ** 2 * sin (2 * alpha)) / g

if (abs(D - R) < 0.1):
	print("sim")
else: 
	print("nao")


-- EXECUTION TIME:
0.2137
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
