== TEST (2019-03-27 14:50:24) 
-- CODE:
frase: "Depois da chuva vem o sol"
	
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
95
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:50:32) 
-- CODE:
frase:"Depois da chuva vem o sol"
	
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
95
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:51:18) 
-- CODE:
frase:"Depois da chuva vem o sol."
	
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
95
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:52:24) 
-- CODE:
frase:"Depois da chuva vem o sol."
print(frase.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(frase.upper())
NameError: name 'frase' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:53:20) 
-- CODE:
frase:"Selina Kyle"
print(frase.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(frase.upper())
NameError: name 'frase' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:53:56) 
-- CODE:
frase = "Selina Kyle"
print(frase.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:54:04) 
-- CODE:
frase = "Selina Kyle"
print(frase.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 14:54:05) 
-- CODE:
frase = "Selina Kyle"
print(frase.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.136973
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
SELINA KYLE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:54:42) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:54:59) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:54:59) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:54:59) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:55:00) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 14:55:01) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.182009
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
SELINA KYLE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:55:01) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 14:55:02) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.137085
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
SELINA KYLE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:56:52) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:56:54) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:56:54) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:56:54) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 14:56:56) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.168718
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
GUIDO VAN ROSSUM CRIOU O PYTHON
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:06) 
-- CODE:
texto = Guido van Rossum criou o Python
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
File "XXXX", line 1
    texto = Guido van Rossum criou o Python
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:18) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:58:23) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:58:24) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:58:43) 
-- CODE:
texto = "Guido van Rossum criou o Python."
print(texto.upper())
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:58:57) 
-- CODE:
texto = "Guido van Rossum criou o Python"
print(texto.upper())


-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:59:21) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())


-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:03:42) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())


-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:06:04) 
-- CODE:
texto = "Selina Kyle"
print(texto.upper())


-- OUTPUT:
SELINA KYLE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:06:20) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- OUTPUT:
CODEBENCH
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:22) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- EXECUTION TIME:
0.205468
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
CODEBENCH
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:22) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- EXECUTION TIME:
0.146059
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
CODEBENCH
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:22) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- EXECUTION TIME:
0.102807
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
CODEBENCH
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:23) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- EXECUTION TIME:
0.13946
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
CODEBENCH
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:23) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- EXECUTION TIME:
0.101987
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
CODEBENCH
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:23) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- EXECUTION TIME:
0.119972
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
CODEBENCH
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:23) 
-- CODE:
texto = "Codebench"
print(texto.upper())


-- EXECUTION TIME:
0.110259
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
CODEBENCH
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:06:48) 
-- CODE:
texto = "ate amanha"
print(texto.upper())


-- OUTPUT:
ATE AMANHA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:06:51) 
-- CODE:
texto = "ate amanha"
print(texto.upper())


-- EXECUTION TIME:
0.188946
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
ATE AMANHA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:06:51) 
-- CODE:
texto = "ate amanha"
print(texto.upper())


-- OUTPUT:
ATE AMANHA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:51:31) 
-- CODE:
texto = "ate amanha"
print(texto.upper())


-- OUTPUT:
ATE AMANHA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 22:51:54) 
-- CODE:
texto = "ate amanha"
print(texto.upper())


-- EXECUTION TIME:
0.204526
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
ATE AMANHA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:29:19) 
-- CODE:
texto = "ola mundo"
print(texto.upper())


-- OUTPUT:
OLA MUNDO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:29:50) 
-- CODE:
texto = "ola mundo"
print(texto.upper())


-- EXECUTION TIME:
0.208001
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
OLA MUNDO
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:30:00) 
-- CODE:
texto = "ola mundo"
print(texto.upper())


-- OUTPUT:
OLA MUNDO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:30:49) 
-- CODE:
texto = "ola mundo"
print(texto.upper())


-- OUTPUT:
OLA MUNDO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:31:05) 
-- CODE:
texto = "ola mundo"
print(texto.upper())


-- OUTPUT:
OLA MUNDO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:35:40) 
-- CODE:
texto = input("digite uma frase: ")
print(texto.upper())


-- OUTPUT:
PRIMEIRO_CASO_DE_TESTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:35:41) 
-- CODE:
texto = input("digite uma frase: ")
print(texto.upper())


-- EXECUTION TIME:
0.196425
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
PRIMEIRO_CASO_DE_TESTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
