== TEST (2019-04-27 21:18:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if li > (l2 + l3) or l2 > (l1 + l3) or l3 > (l1 + l2):
	print "Não pode ser um triangulo"
elif l1 == l2 == l3:
	print "Equilatero"
elif l1 == l2 or l1 == l3 or l2 == l3:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 8
    print "Não pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Não pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:19:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if li > (l2 + l3) or l2 > (l1 + l3) or l3 > (l1 + l2):
	print "Nao pode ser um triangulo"
elif l1 == l2 == l3:
	print "Equilatero"
elif l1 == l2 or l1 == l3 or l2 == l3:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 8
    print "Nao pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Nao pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:19:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if li > (l2 + l3) or l2 > (l1 + l3) or l3 > (l1 + l2):
	print "Nao pode ser um triangulo"
elif l1 == l2 == l3:
	print "Equilatero"
elif l1 == l2 or l1 == l3 or l2 == l3:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 8
    print "Nao pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Nao pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:20:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if (li > (l2 + l3) or l2 > (l1 + l3) or l3 > (l1 + l2)):
	print ("Nao pode ser um triangulo")
elif (l1 == l2 == l3):
	print ("Equilatero")
elif (l1 == l2 or l1 == l3 or l2 == l3):
	print ("Isósceles")
else:
	print ("Escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (li > (l2 + l3) or l2 > (l1 + l3) or l3 > (l1 + l2)):
NameError: name 'li' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:20:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if (l1 > (l2 + l3) or l2 > (l1 + l3) or l3 > (l1 + l2)):
	print ("Nao pode ser um triangulo")
elif (l1 == l2 == l3):
	print ("Equilatero")
elif (l1 == l2 or l1 == l3 or l2 == l3):
	print ("Isósceles")
else:
	print ("Escaleno")
-- OUTPUT:
Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:20:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if (l1 > (l2 + l3) or l2 > (l1 + l3) or l3 > (l1 + l2)):
	print ("Nao pode ser um triangulo")
elif (l1 == l2 == l3):
	print ("Equilatero")
elif (l1 == l2 or l1 == l3 or l2 == l3):
	print ("Isósceles")
else:
	print ("Escaleno")
-- EXECUTION TIME:
0.170636
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 12, in <module>
    print ("Is\xf3sceles")
UnicodeEncodeError: 'ascii' codec can't encode character '\xf3' in position 2: ordinal not in range(128)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:28:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if (l1 < (l2 + l3) or l2 < (l1 + l3) or l3 < (l1 + l2)):
	print ("Nao pode ser um triangulo")
elif (l1 == l2 == l3):
	print ("Equilatero")
elif (l1 == l2 or l1 == l3 or l2 == l3):
	print ("Isósceles")
else:
	print ("Escaleno")
-- OUTPUT:
Nao pode ser um triangulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:28:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if (l1 < (l2 + l3) or l2 < (l1 + l3) or l3 < (l1 + l2)):
	print ("Nao pode ser um triangulo")
elif (l1 == l2 == l3):
	print ("Equilatero")
elif (l1 == l2 or l1 == l3 or l2 == l3):
	print ("Isósceles")
else:
	print ("Escaleno")
-- EXECUTION TIME:
0.20093
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Nao pode ser um triangulo
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao pode ser um triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:28:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if (l1 < (l2 + l3) or l2 < (l1 + l3) or l3 < (l1 + l2)):
	print ("Nao pode ser um triangulo")
elif (l1 == l2 == l3):
	print ("Equilatero")
elif (l1 == l2 or l1 == l3 or l2 == l3):
	print ("Isosceles")
else:
	print ("Escaleno")
-- OUTPUT:
Nao pode ser um triangulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:28:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
l1 = int(input("Lado 1: "))
l2 = int(input("Lado 2: "))
l3 = int(input("Lado 3: "))

if (l1 < (l2 + l3) or l2 < (l1 + l3) or l3 < (l1 + l2)):
	print ("Nao pode ser um triangulo")
elif (l1 == l2 == l3):
	print ("Equilatero")
elif (l1 == l2 or l1 == l3 or l2 == l3):
	print ("Isosceles")
else:
	print ("Escaleno")
-- EXECUTION TIME:
0.133893
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Nao pode ser um triangulo
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao pode ser um triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:33:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
print "\n\n\n"

a=0
b=0
c=0

a=raw_input('Primeiro lado: ')
b=raw_input('Segundo lado: ')
c=raw_input('Terceiro lado: ')
int(a)
int(b)
int(c)

if not (a+b)>c and (a+c)>b and (b+c)>a:
   print '\n\nOs lados fornecidos não formam um triângulo\n\n'
elif a==b and a==c:
   print '\n\nO triângulo é equilátero\n\n'
elif a!=b and a!=c and b!=c:
   print '\n\nO triângulo é escaleno\n\n'
else:
   print '\n\nO triângulo é isósceles\n\n'
-- EXECUTION TIME:
0.139537
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 3
    print "\n\n\n"
                 ^
SyntaxError: Missing parentheses in call to 'print'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:33:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
print "\n\n\n"

a=0
b=0
c=0

a=raw_input('Primeiro lado: ')
b=raw_input('Segundo lado: ')
c=raw_input('Terceiro lado: ')
int(a)
int(b)
int(c)

if not (a+b)>c and (a+c)>b and (b+c)>a:
   print '\n\nOs lados fornecidos não formam um triângulo\n\n'
elif a==b and a==c:
   print '\n\nO triângulo é equilátero\n\n'
elif a!=b and a!=c and b!=c:
   print '\n\nO triângulo é escaleno\n\n'
else:
   print '\n\nO triângulo é isósceles\n\n'
-- ERROR:
File "XXXX", line 3
    print "\n\n\n"
                 ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("\n\n\n")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:35:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))

except ValueError:

   print("Digite somente numeros para as medidas 1, 2 e 3.")
   sys.exit(1)

if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()

if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

else:
   print("Triangulo escaleno.")
-- EXECUTION TIME:
0.136314
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Digite valores nao-nulos e positivos.
Triangulo isosceles.
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Digite valores nao-nulos e positivos.
Triangulo escaleno.
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Digite valores nao-nulos e positivos.
Triangulo inexistente.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:35:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))



   print("Digite somente numeros para as medidas 1, 2 e 3.")
   

if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()

if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

else:
   print("Triangulo escaleno.")
-- EXECUTION TIME:
0.234171
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 19
    if a<=0 or b<=0 or c<=0 :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:40:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   elif a+b > c and a+c > b and b+c > a :quit()

if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 14
    if a<=0 or b<=0 or c<=0 :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:41:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if a<=0 and b<=0 and c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   elif a+b > c and a+c > b and b+c > a :quit()

if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.188639
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    if a<=0 and b<=0 and c<=0 :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:26:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.269272
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    if a>=b+c or b>=c+a or c>=a+b :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:26:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 14
    if a>=b+c or b>=c+a or c>=a+b :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:27:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if ((a>=b+c) or (b>=c+a) or (c>=a+b)):
   print("Triangulo inexistente.")
   quit()

if (a==b and b==c) :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.202268
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    if ((a>=b+c) or (b>=c+a) or (c>=a+b)):
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:27:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if ((a>=b+c) or (b>=c+a) or (c>=a+b)):
   print("Triangulo inexistente.")
   quit()

if (a==b and b==c) :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 14
    if ((a>=b+c) or (b>=c+a) or (c>=a+b)):
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:27:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if (a>=b+c or b>=c+a or c>=a+b):
   print("Triangulo inexistente.")
   quit()

if (a==b and b==c) :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.114764
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    if (a>=b+c or b>=c+a or c>=a+b):
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:27:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(raw_input("Entre com a medida do lado 1 do triangulo: "))
   b = float(raw_input("Entre com a medida do lado 2 do triangulo: "))
   c = float(raw_input("Entre com a medida do lado 3 do triangulo: "))   

if (a>=b+c or b>=c+a or c>=a+b):
   print("Triangulo inexistente.")
   quit()

if (a==b and b==c) :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

elif: a!=b and b!=c and a!=c:
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 14
    if (a>=b+c or b>=c+a or c>=a+b):
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:33:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   

if ((a<b+c) and (b<a+c) and (c<a+b)) :
   print("estes valores formam um triangulo")
   

if (a>=b+c and b>=c+a and c>=a+b) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.173521
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    if ((a<b+c) and (b<a+c) and (c<a+b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:33:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   

if ((a<b+c) and (b<a+c) and (c<a+b)) :
   print("estes valores formam um triangulo")
   

if (a>=b+c and b>=c+a and c>=a+b) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 14
    if ((a<b+c) and (b<a+c) and (c<a+b)) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:33:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if (a>=b+c and b>=c+a and c>=a+b) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.119536
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if (a>=b+c and b>=c+a and c>=a+b) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:33:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if (a>=b+c and b>=c+a and c>=a+b) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 15
    if (a>=b+c and b>=c+a and c>=a+b) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:34:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>=b+c) and (b>=c+a) and (c>=a+b)) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.161245
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if ((a>=b+c) and (b>=c+a) and (c>=a+b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:34:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>=b+c) and (b>=c+a) and (c>=a+b)) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 15
    if ((a>=b+c) and (b>=c+a) and (c>=a+b)) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:34:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>b+c) and (b>c+a) and (c>a+b)) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.163406
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if ((a>b+c) and (b>c+a) and (c>a+b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:34:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>b+c) and (b>c+a) and (c>a+b)) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 15
    if ((a>b+c) and (b>c+a) and (c>a+b)) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:34:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>b+c) or (b>c+a) or (c>a+b)) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.181906
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if ((a>b+c) or (b>c+a) or (c>a+b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:34:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>b+c) or (b>c+a) or (c>a+b)) :
   print("Triangulo inexistente.")
  

if ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

elif ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

elif ((a!=b) and (b!=c) and (a!=c)):
   print("Triangulo escaleno.")
	
else:
	print"nao forma um triangulo"
-- ERROR:
File "XXXX", line 15
    if ((a>b+c) or (b>c+a) or (c>a+b)) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:37:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>=b+c) or (b=>c+a) or (c>=a+b)) :
   print("Triangulo inexistente.")
  
	else ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

	else ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

	else ((a==b) or (b==c) or (a==c)):
   print("Triangulo escaleno.")
	
	else:
	print"nao forma um triangulo"
-- EXECUTION TIME:
0.149563
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if ((a>=b+c) or (b=>c+a) or (c>=a+b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:37:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>=b+c) or (b=>c+a) or (c>=a+b)) :
   print("Triangulo inexistente.")
  
	else ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

	else ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

	else ((a==b) or (b==c) or (a==c)):
   print("Triangulo escaleno.")
	
	else:
	print("nao forma um triangulo")
-- EXECUTION TIME:
0.264432
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if ((a>=b+c) or (b=>c+a) or (c>=a+b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:37:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a>=b+c) or (b=>c+a) or (c>=a+b)) :
   print("Triangulo inexistente.")
  
	else ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

	else ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

	else ((a==b) or (b==c) or (a==c)):
   print("Triangulo escaleno.")
	
	else:
	print("nao forma um triangulo")
-- ERROR:
File "XXXX", line 15
    if ((a>=b+c) or (b=>c+a) or (c>=a+b)) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:37:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if (a>=b+c) or (b=>c+a) or (c>=a+b) :
   print("Triangulo inexistente.")
  
	else ((a==b) and (b==c)) :
   print("Triangulo equilatero.")

	else ((a==b) or (b==c) or (c==a)) :
   print("Triangulo isosceles.")

	else ((a==b) or (b==c) or (a==c)):
   print("Triangulo escaleno.")
	
	else:
	print("nao forma um triangulo")
-- ERROR:
File "XXXX", line 15
    if (a>=b+c) or (b=>c+a) or (c>=a+b) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:42:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a >= b + c) or (b >= c + a) or (c >= a + b)) :
   print("Triangulo inexistente")
  
else: 
	if ((a == b) and (b == c)) :
   	print("Triangulo equilatero")

else:
 	if ((a==b) or (b==c) or (c==a)) :
   	print("Triangulo isosceles")
	else:
		print("Triangulo escaleno")


-- EXECUTION TIME:
0.197792
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if ((a >= b + c) or (b >= c + a) or (c >= a + b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:42:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a >= b + c) or (b >= c + a) or (c >= a + b)) :
   print("Triangulo inexistente")
  
else: 
	if ((a == b) and (b == c)) :
   	print("Triangulo equilatero")

else:
 	if ((a==b) or (b==c) or (c==a)) :
   	print("Triangulo isosceles")
	else:
		print("Triangulo escaleno")


-- ERROR:
File "XXXX", line 15
    if ((a >= b + c) or (b >= c + a) or (c >= a + b)) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:46:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 15
    if ((a < b + c) and (b < c + a) and (c < a + b)) :
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:46:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

import sys

print("Digite valores nao-nulos e positivos.")

try: 

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.114593
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    if ((a < b + c) and (b < c + a) and (c < a + b)) :
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:47:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

   a = float(input("Entre com a medida do lado 1 do triangulo: "))
   b = float(input("Entre com a medida do lado 2 do triangulo: "))
   c = float(input("Entre com a medida do lado 3 do triangulo: "))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 6
    a = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:47:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

   a = float(input("triangulo 1:"))
   b = float(input("triangulo 2:"))
   c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 6
    a = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:48:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 13
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:48:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.140602
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 13
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:48:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 13
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:48:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 13
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:49:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		
   	print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.230107
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:49:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		
   	print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.161103
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 14
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:49:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		
   	print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 14
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:49:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 13
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:50:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
   	print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
File "XXXX", line 13
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:50:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.12488
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:50:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.165528
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:50:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.2167
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
nao eh triangulo
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:50:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:50:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.147148
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:50:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:50:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("nao eh triangulo")

-- EXECUTION TIME:
0.183428
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:50:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("invalido")

-- EXECUTION TIME:
0.174228
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:50:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("invalido")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:51:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
			
		else:
			print("equilatero")

else:
	print("invalido")

-- EXECUTION TIME:
0.187042
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:51:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("invalido")

-- EXECUTION TIME:
0.121263
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:51:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("invalido")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:51:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a != b) and (b != c) and (c != a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("invalido")

-- EXECUTION TIME:
0.184388
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 16, in <module>
    if ((x != y) or (y != z)) :
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 10:28:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a>0 and b>0 and c>0)
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a == b) and (b == c) and (c == a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("invalido")

-- EXECUTION TIME:
0.205227
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 11
    if (a>0 and b>0 and c>0)
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:28:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a>0 and b>0 and c>0)
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
	if ((a == b) and (b == c) and (c == a)) :
		print("escaleno")
		
	else:
		if ((x != y) or (y != z)) :
			print("isoceles")
		else:
			print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 11
    if (a>0 and b>0 and c>0)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 10:31:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0)
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c) and (c == a)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	 else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.123798
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 11
    if (a > 0 and b > 0 and c > 0)
                                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:31:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0)
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c) and (c == a)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	 else:
		print("invalido")
else:
	print("invalido")

-- ERROR:
File "XXXX", line 11
    if (a > 0 and b > 0 and c > 0)
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 10:31:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c) and (c == a)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	 else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.153899
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 19
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:31:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c) and (c == a)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	 else:
		print("invalido")
else:
	print("invalido")

-- ERROR:
File "XXXX", line 19
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 10:32:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c) and (c == a)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.196047
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:32:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c) and (c == a)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 10:32:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c) and (c == a)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.198872
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:33:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 10:33:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)) :
			if ((a == b) and (b == c)) :
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.188206
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 10:34:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   


if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c)):
				print("equilatero")
			elif(a == b or b == c or a == c):
					print("isoceles")
			else:
					print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.151713
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:15:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c) and (c==a)):
				print("tipo de triangulo: equilatero")
			elif((a == b) or (b == c)):
					print("tipo de triangulo: isoceles")
			elif((a != b))
			else:
					print("escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.130706
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 16
    elif((a != b))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:15:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c) and (c==a)):
				print("tipo de triangulo: equilatero")
			elif((a == b) or (b == c)):
					print("tipo de triangulo: isoceles")
			elif((a != b))
			else:
					print("escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- ERROR:
File "XXXX", line 16
    elif((a != b))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:20:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c) and (c==a)):
				print("tipo de triangulo: equilatero")
			elif((a == b) or (b == c)):
				print("tipo de triangulo: isoceles")
			elif((a != b) or (b != c) or (c != a))
				print("tipo de triangulo: escaleno")
			else:
					print("tipo de triangulo: invalido")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.142147
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 16
    elif((a != b) or (b != c) or (c != a))
                                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:20:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c) and (c==a)):
				print("tipo de triangulo: equilatero")
			elif((a == b) or (b == c)):
				print("tipo de triangulo: isoceles")
			elif((a != b) or (b != c) or (c != a))
				print("tipo de triangulo: escaleno")
			else:
					print("tipo de triangulo: invalido")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- ERROR:
File "XXXX", line 16
    elif((a != b) or (b != c) or (c != a))
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:21:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c) and (c==a)):
				print("tipo de triangulo: equilatero")
			elif((a == b) or (b == c)):
				print("tipo de triangulo: isoceles")
			elif((a != b) or (b != c) or (c != a)):
				print("tipo de triangulo: escaleno")
			else:
					print("tipo de triangulo: invalido")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.180856
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:21:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c) and (c==a)):
				print("tipo de triangulo: equilatero")
			elif((a == b) or (b == c)):
				print("tipo de triangulo: isoceles")
			elif((a != b) or (b != c) or (c != a)):
				print("tipo de triangulo: escaleno")
			else:
					print("tipo de triangulo: invalido")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- OUTPUT:
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:21:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if (a > 0 and b > 0 and c > 0):
	if ((a < b + c) and (b < c + a) and (c < a + b)):
			if ((a == b) and (b == c) and (c==a)):
				print("tipo de triangulo: equilatero")
			elif((a == b) or (b == c)):
				print("tipo de triangulo: isoceles")
			elif((a != b) or (b != c) or (c != a)):
				print("tipo de triangulo: escaleno")
			else:
					print("tipo de triangulo: invalido")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.134622
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:22:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((a < b + c) and (b < c + a) and (c < a + b)):
	if ((a == b) and (b == c) and (c==a)):
		print("tipo de triangulo: equilatero")
	elif((a == b) or (b == c)):
		print("tipo de triangulo: isoceles")
	elif((a != b) or (b != c) or (c != a)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.162875
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:22:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((a < b + c) and (b < c + a) and (c < a + b)):
	if ((a == b) and (b == c) and (c==a)):
		print("tipo de triangulo: equilatero")
	elif((a == b) or (b == c)):
		print("tipo de triangulo: isoceles")
	elif((a != b) or (b != c) or (c != a)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- OUTPUT:
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:22:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((a < b + c) and (b < c + a) and (c < a + b)):
	if ((a == b) and (b == c) and (c==a)):
		print("tipo de triangulo: equilatero")
	elif((a == b) or (b == c)):
		print("tipo de triangulo: isoceles")
	elif((a != b) or (b != c) or (c != a)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.16735
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:22:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((a < b + c) and (b < c + a) and (c < a + b)):
	elif ((a == b) and (b == c) and (c==a)):
		print("tipo de triangulo: equilatero")
	elif((a == b) or (b == c)):
		print("tipo de triangulo: isoceles")
	elif((a != b) or (b != c) or (c != a)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.127273
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 11
    elif ((a == b) and (b == c) and (c==a)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:22:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((a < b + c) and (b < c + a) and (c < a + b)):
	elif ((a == b) and (b == c) and (c==a)):
		print("tipo de triangulo: equilatero")
	elif((a == b) or (b == c)):
		print("tipo de triangulo: isoceles")
	elif((a != b) or (b != c) or (c != a)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- ERROR:
File "XXXX", line 11
    elif ((a == b) and (b == c) and (c==a)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:22:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((a < b + c) and (b < c + a) and (c < a + b)):
	if ((a == b) and (b == c) and (c==a)):
		print("tipo de triangulo: equilatero")
	elif((a == b) or (b == c)):
		print("tipo de triangulo: isoceles")
	elif((a != b) or (b != c) or (c != a)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- OUTPUT:
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:22:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((a < b + c) and (b < c + a) and (c < a + b)):
	if ((a == b) and (b == c) and (c==a)):
		print("tipo de triangulo: equilatero")
	elif((a == b) or (b == c)):
		print("tipo de triangulo: isoceles")
	elif((a != b) or (b != c) or (c != a)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.212707
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:35:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((A < B + C) and (B < C + A) and (C < A + B)):
	if ((A == B) and (B == C) and (C == A)):
		print("tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.135521
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 10, in <module>
    if ((A < B + C) and (B < C + A) and (C < A + B)):
NameError: name 'A' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:35:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input("triangulo 1:"))
b = float(input("triangulo 2:"))
c = float(input("triangulo 3:"))   

if ((A < B + C) and (B < C + A) and (C < A + B)):
	if ((A == B) and (B == C) and (C == A)):
		print("tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if ((A < B + C) and (B < C + A) and (C < A + B)):
NameError: name 'A' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:35:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("triangulo 1:"))
B = float(input("triangulo 2:"))
C = float(input("triangulo 3:"))   

if ((A < B + C) and (B < C + A) and (C < A + B)):
	if ((A == B) and (B == C) and (C == A)):
		print("tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- OUTPUT:
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:36:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("triangulo 1:"))
B = float(input("triangulo 2:"))
C = float(input("triangulo 3:"))   

if ((A < B + C) and (B < C + A) and (C < A + B)):
	if ((A == B) and (B == C) and (C == A)):
		print("tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.166577
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:40:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *;

A = float(input("triangulo 1:"));
B = float(input("triangulo 2:"));
C = float(input("triangulo 3:")) ;  

if ((A < B + C) and (B < C + A) and (C < A + B)):
	if ((A == B) and (B == C) and (C == A)):
		print("tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.208167
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:44:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *;

A = float(input("triangulo 1:"));
B = float(input("triangulo 2:"));
C = float(input("triangulo 3:")) ;

print("Entradas: " + A + ", " + B + ", " + C)

if A < (B + C) and B < (C + A) and C < (A + B):
	if ((A == B) and (B == C) and (C == A)):
		print("Tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("Tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print("Entradas: " + A + ", " + B + ", " + C)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 19:44:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *;

A = float(input("triangulo 1:"));
B = float(input("triangulo 2:"));
C = float(input("triangulo 3:")) ;

print("Entradas:", A, ",", B, ",", C)

if A < (B + C) and B < (C + A) and C < (A + B):
	if ((A == B) and (B == C) and (C == A)):
		print("Tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("Tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:45:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *;

A = float(input("triangulo 1:"));
B = float(input("triangulo 2:"));
C = float(input("triangulo 3:")) ;

print("Entradas:", A, ",", B, ",", C)

if A < (B + C) and B < (C + A) and C < (A + B):
	if ((A == B) and (B == C) and (C == A)):
		print("Tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("Tipo de triangulo: isoceles")
	elif((A != B) or (B != C) or (C != A)):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.197758
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 19:47:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *;

A = float(input("Lado A: "));
B = float(input("Lado B: "));
C = float(input("Lado C: "));

print("Entradas:", A, ",", B, ",", C)

if A < 0 or B < 0 or C < 0 or (A < (B + C) and B < (C + A) and C < (A + B)):
	if ((A == B) and (B == C) and (C == A)):
		print("Tipo de triangulo: equilatero")
	elif((A == B) or (B == C)):
		print("Tipo de triangulo: isosceles")
	elif((A != B) or (B != C) or (C != A)):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.168047
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
