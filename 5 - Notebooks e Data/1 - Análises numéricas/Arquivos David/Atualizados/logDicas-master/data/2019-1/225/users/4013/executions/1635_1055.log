== TEST (2019-04-11 13:23:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("velocidade inicial:"))
alpha = float(input("angulo:"))
d =float(input("distancia do bird ao porco:"))
from math import*
r = abs((vo)**2 * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 13:24:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("velocidade inicial:"))
alpha = float(input("angulo:"))
d =float(input("distancia do bird ao porco:"))
from math import*
r = abs((vo)**2 * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- EXECUTION TIME:
0.155602
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 13:24:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("velocidade inicial:"))
alpha = float(input("angulo:"))
d =float(input("distancia do bird ao porco:"))
from math import*
r = abs((vo)**2 * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 13:25:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("velocidade inicial:"))
alpha = float(input("angulo:"))
d =float(input("distancia do bird ao porco:"))
from math import*
r = abs((vo)**2 * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- EXECUTION TIME:
0.138341
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 13:26:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))
from math import*
r = abs((vo)**2 * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    alpha = radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 13:27:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = abs((vo)**2 * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 13:27:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = abs((vo)**2 * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- EXECUTION TIME:
0.135502
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 13:30:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = abs(((vo)**2) * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 13:30:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = abs(((vo)**2) * sin(2*alpha)/ 9.8)
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- EXECUTION TIME:
0.226277
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 13:34:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 13:34:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 13:34:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- EXECUTION TIME:
0.158975
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 13:39:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 13:39:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8
if(r == d):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- EXECUTION TIME:
0.170539
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:29:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8

if(abs(d - r) < 0.1):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:29:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8

if(abs(d - r) <= 0.1):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:29:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo = float(input("velocidade inicial:"))
alpha = radians(float(input("angulo:")))
d =float(input("distancia do bird ao porco:"))

r = (((vo)**2) * sin(2*alpha))/ 9.8

if(abs(d - r) <= 0.1):
	msg = "sim"
else:
	msg = "nao"
print(msg)
-- EXECUTION TIME:
0.124365
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
