== TEST (2019-04-19 21:56:59) 
-- CODE:
from math import *

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < ((ve - vce) / 2)):
		print("Volume: " + str(round((((ve - vce) / 2) - (((ve - vce) / 2) - h)) * 1000, 3)) + " litros")
	elif(h == ((ve - vce) / 2)):
		print("Volume: " + str(round(((ve - vce) / 2) * 1000, 3)) + " litros")
	else:
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    vc = math.pi * (r ** 2) * H
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:57:35) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < ((ve - vce) / 2)):
		print("Volume: " + str(round((((ve - vce) / 2) - (((ve - vce) / 2) - h)) * 1000, 3)) + " litros")
	elif(h == ((ve - vce) / 2)):
		print("Volume: " + str(round(((ve - vce) / 2) * 1000, 3)) + " litros")
	else:
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 5700.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 22:02:49) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < ((ve - vce) / 2)):
		print("Volume: " + str(round((((ve - vce) / 2) - (((ve - vce) / 2) - h)) * 1000, 3)) + " litros")
	elif(h == ((ve - vce) / 2)):
		print("Volume: " + str(round(((ve - vce) / 2) * 1000, 3)) + " litros")
	else:
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 5700.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 22:04:03) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < ((ve - vce) / 2)):
		print("Volume: " + str(round((((ve - vce) / 2) - (((ve - vce) / 2) - h)) * 1000, 3)) + " litros")
	elif(h == ((ve - vce) / 2)):
		print("Volume: " + str(round(((ve - vce) / 2) * 1000, 3)) + " litros")
	else:
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 5700.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 22:06:39) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < ((ve - vce) / 2)):
		print("Volume: " + str(round((((ve - vce) / 2) - (((ve - vce) / 2) - h)) * 1000, 3)) + " litros")
	elif(h == ((ve - vce) / 2)):
		print("Volume: " + str(round(((ve - vce) / 2) * 1000, 3)) + " litros")
	else:
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.188663
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 5700.0 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 23:30:59) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= H / 3):
		print("Volume: " + str(round(ve * 1000, 3)) + " litros")
	elif((h > H / 3) and (h < H * (2 / 3))):
		print("Volume: " + str(round(vc * 1000, 3)) + " litros")
	else:
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 187794.984 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:54:48) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.18963
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 1364501.551 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:55:05) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 1364501.551 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:59:42) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * h
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.292056
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 1271435.01 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:59:58) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * h
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (h ** 2) * ((3 * r) - h)
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.186809
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 13072.167 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:59:59) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * h
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (h ** 2) * ((3 * r) - h)
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.176596
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 13072.167 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 16:00:08) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * h
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (h ** 2) * ((3 * r) - h)
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 13072.167 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 16:04:59) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * (H - 2 * (H - h))
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * ((H - h) ** 2) * ((3 * r) - (H - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.132652
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: -83722.397 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 16:06:09) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * (H - 2 * (H - h))
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * ((H - h) ** 2) * ((3 * r) - (H - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: -83722.397 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 16:07:57) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * (H - 2 * (H - h))
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * ((H - h) ** 2) * ((3 * r) - (H - h))
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: -83722.397 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 16:09:31) 
-- CODE:
import math

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 1364501.551 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:20:32) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = math.pi * (r ** 2) * H
	ve = (4 / 3) * math.pi * (r ** 3)
	vce = (math.pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    vc = math.pi * (r ** 2) * H
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:21:06) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((ve - vc - vce) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc - (2 * vce)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 1364501.551 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:31) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((vce / 2) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc + (vce / 2)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: -106381.658 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:31:36) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((vce / 2) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc + (vce / 2)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((vc + ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.167278
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: -106381.658 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:38) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((vce / 2) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc + (vce / 2)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((vc + ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: -106381.658 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:42) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((vce / 2) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc + (vce / 2)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((vc + ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: -106381.658 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:44) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - H)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((vce / 2) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc + (vce / 2)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((vc + ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: -106381.658 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:35:27) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - h)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((vce / 2) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc + (vce / 2)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((vc + ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.197261
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 268024.977 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:35:28) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * H
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * (H ** 2) * ((3 * r) - h)
	
	if(h <= r): # semiesfera inferior
		print("Volume: " + str(round((vce / 2) * 1000, 3)) + " litros")
	elif((h > r) and (h <= (H - r))): # cilindro intermedi치rio
		print("Volume: " + str(round((vc + (vce / 2)) * 1000, 3)) + " litros")
	else: # semiesfera superior
		print("Volume: " + str(round((vc + ve - vce) * 1000, 3)) + " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 268024.977 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:07:43) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h => r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	else: # semiesfera superior
		print("Volume: ", round((vc + ve - vce) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.148819
-- ERROR:
  File "/home/codebench/codes/1671/1102/main.py", line 16
    elif((h => r) and (h < (H - r))): # cilindro intermedi\xe1rio
            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:07:47) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h => r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	else: # semiesfera superior
		print("Volume: ", round((vc + ve - vce) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 16
    elif((h => r) and (h < (H - r))): # cilindro intermedi치rio
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:08:15) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	else: # semiesfera superior
		print("Volume: ", round((vc + ve - vce) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.132248
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:08:17) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	else: # semiesfera superior
		print("Volume: ", round((vc + ve - vce) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:09:50) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	else: # semiesfera superior
		print("Volume: ", round((vc + ve - vce) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:13:18) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.164708
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:13:19) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:13:24) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:13:30) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:13:45) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.162458
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:13:45) 
-- CODE:
from math import*

H = float(input())
h = float(input())
r = float(input())

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:17:54) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.209628
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:17:54) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:19:21) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume: ", round((vce / 2) * 1000, 3), " litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume: ", round((vc + (vce / 2)) * 1000, 3), " litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume: ", round((vc + ve - vce / 2) * 1000, 3), " litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume:  116415.905  litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:20:06) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.156778
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:20:07) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.195518
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3, 5.7, 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5, 9.5, 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0, 4.0, 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:20:07) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + ", " + str(h) + ", " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3, 5.7, 2.3
Volume: 116415.905 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:20:46) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas:" + str(H) + "," + str(h) + "," + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:11.3,5.7,2.3
Volume: 116415.905 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:21:19) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas:" + str(H) + " ," + str(h) + " ," + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas:11.3 ,5.7 ,2.3
Volume: 116415.905 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:21:46) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:21:55) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.224197
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:22:00) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:22:01) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

if(((H > 0.0) and (h > 0.0) and (r > 0.0)) and (H > h) and (H > (2 * r))):
	vc = pi * (r ** 2) * (H - 2 * r)
	ve = (4 / 3) * pi * (r ** 3)
	vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))
	
	if(h < r): # semiesfera inferior
		print("Volume:", round((vce / 2) * 1000, 3), "litros")
	elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
		print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
	elif(h >= H - 2 * r and h <= H): # semiesfera superior
		print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.162165
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:45) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.181626
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:46) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.160781
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:47) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.17452
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:47) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.218528
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:47) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.396192
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:47) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.439405
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:48) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.335605
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:48) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.423403
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:25:48) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:48) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.59747
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:48) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.43636
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:49) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.366954
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1102/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:49) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.526898
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:49) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.523805
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:25:49) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas: " + str(H) + " , " + str(h) + " , " + str(r))

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.295579
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:26:37) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas:",H,",",h,",",r)

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.19552
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 16:26:38) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas:",H,",",h,",",r)

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 16:26:38) 
-- CODE:
from math import*

H = float(input("H: "))
h = float(input("h: "))
r = float(input("r: "))

print("Entradas:",H,",",h,",",r)

vc = pi * (r ** 2) * (H - 2 * r)
ve = (4 / 3) * pi * (r ** 3)
vce = (pi / 3) * ((2 * r - h) ** 2) * ((3 * r) - (2 * r - h))

if(H <= 0 or h <= 0 or r <= 0 or H <= h or H < 2*r):
	print("Entradas invalidas")

elif(h < r): # semiesfera inferior
	print("Volume:", round((vce / 2) * 1000, 3), "litros")
elif((h >= r) and (h < (H - r))): # cilindro intermedi치rio
	print("Volume:", round((vc + (vce / 2)) * 1000, 3), "litros")
elif(h >= H - 2 * r and h <= H): # semiesfera superior
	print("Volume:", round((vc + ve - vce / 2) * 1000, 3), "litros")
-- EXECUTION TIME:
0.141206
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 116415.905 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
H: h: r: Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
