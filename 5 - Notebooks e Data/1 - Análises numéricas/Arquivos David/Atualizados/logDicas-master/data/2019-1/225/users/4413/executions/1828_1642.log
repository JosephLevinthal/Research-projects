== TEST (2019-06-12 14:08:49) 
-- CODE:
from numpy import*
x= array(eval(input("quantidade de alunos: ")))
i=0
for(i=x//5):
	i=i+0
	msg=(x/5)
print(msg)

-- ERROR:
File "XXXX", line 4
    for(i=x//5):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:09:00) 
-- CODE:
from numpy import*
x= array(eval(input("quantidade de alunos: ")))
i=0
while(i=x//5):
	i=i+0
	msg=(x/5)
print(msg)

-- ERROR:
File "XXXX", line 4
    while(i=x//5):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:09:09) 
-- CODE:
from numpy import*
x= array(eval(input("quantidade de alunos: ")))
i=0
while(i=x/5):
	i=i+0
	msg=(x/5)
print(msg)

-- ERROR:
File "XXXX", line 4
    while(i=x/5):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:09:30) 
-- CODE:
from numpy import*
x= array(eval(input("quantidade de alunos: ")))
i=0
while(i = 5):
	i=i+0
	msg=(x/5)
print(msg)

-- ERROR:
File "XXXX", line 4
    while(i = 5):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 14:10:36) 
-- CODE:
from numpy import*
x= array(eval(input("quantidade de alunos: ")))
msg=x
print(msg)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 14:10:54) 
-- CODE:
from numpy import*
x= array(eval(input("quantidade de alunos: ")))
msg=x
print(msg)

-- EXECUTION TIME:
1.06417
-- TEST CASE 1:
---- input:
[10,20,31,1,13,15,20,33,36,63,25,10,2]
---- correct output:
6
[ 0  1  5  6 10 11]
---- user output:
[10 20 31  1 13 15 20 33 36 63 25 10  2]
-- TEST CASE 2:
---- input:
[10,20,31,15,36,63,25,10,2]
---- correct output:
5
[0 1 3 6 7]

---- user output:
[10 20 31 15 36 63 25 10  2]
-- TEST CASE 3:
---- input:
[10,20,31,15,36,63,26,10,2]
---- correct output:
4
[0 1 3 7]
---- user output:
[10 20 31 15 36 63 26 10  2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
