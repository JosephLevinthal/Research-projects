== TEST (2019-03-29 14:31:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

float(input("valor: "))

A = r * r * 3,1416             #Aréa
Vdom = r * r * r * 4 * 3,1416  #Dominador do Volume
Vt = Vdom/3                    #Volume total

print(round(A, 3))
print(round(Vt, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = r * r * 3,1416             #Aréa
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:32:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

float(input("raio: "))

A = r * r * 3,1416             # Aréa
Vdom = r * r * r * 4 * 3,1416  # Dominador do Volume
Vt = Vdom/3                    # volume total

print(round(A, 3))
print(round(Vt, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = r * r * 3,1416             # Aréa
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:32:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

float(input("raio: "))

A = r * r * 3,1416             # Area
Vdom = r * r * r * 4 * 3,1416  # Dominador do Volume
Vt = Vdom/3                    # volume total

print(round(A, 3))
print(round(Vt, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    A = r * r * 3,1416             # Area
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:33:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r = float(input("raio: "))

A = r * r * 3,1416             # Area
Vdom = r * r * r * 4 * 3,1416  # Dominador do Volume
Vt = Vdom/3                    # volume total

print(round(A, 3))
print(round(Vt, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    Vt = Vdom/3                    # volume total
TypeError: unsupported operand type(s) for /: 'tuple' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:34:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r = float(input("raio: "))

A = r * r * 3,1416             # Area
Vdom = r * r * r * 4 * 3,1416 / 3  # Dominador do Volume

print(round(A, 3))
print(round(Vt, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(A, 3))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:34:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r = float(input("raio: "))

A = r * r * 3,1416             # Area
Vt = r * r * r * 4 * 3,1416 / 3  # Dominador do Volume

print(round(A, 3))
print(round(Vt, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(A, 3))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:36:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3,1416             # Area
var2 = var0 ** 3 * 4 * 3,1416 / 3  # Dominador do Volume

print(round(A, 3))
print(round(Vt, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(A, 3))
NameError: name 'A' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:36:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3,1416             # Area
var2 = var0 ** 3 * 4 * 3,1416 / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(var1, 3))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:45:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3,1416             # Area
var2 = var0 ** 3 * 4 * 3,1416 / 3  # Dominador do Volume

round(print(var1) 3)
round(print(var2), 3)

-- ERROR:
File "XXXX", line 10
    round(print(var1) 3)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:45:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3,1416             # Area
var2 = var0 ** 3 * 4 * 3,1416 / 3  # Dominador do Volume

round(print(var1), 3)
round(print(var2), 3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    round(print(var1), 3)
TypeError: type NoneType doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:46:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3,1416             # Area
var2 = var0 ** 3 * 4 * 3,1416 / 3  # Dominador do Volume

print(var1)
print(var2)

-- OUTPUT:
(60.75, 1416)
(1093.5, 472.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:47:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3.1416             # Area
var2 = var0 ** 3 * 4 * 3.1416 / 3  # Dominador do Volume

print(var1)
print(var2)

-- OUTPUT:
63.617399999999996
381.7044
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:48:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3.1416             # Area
var2 = var0 ** 3 * 4 * 3.1416 / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 14:48:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var0 = float(input("raio: "))

var1 = var0 ** 2 * 3.1416             # Area
var2 = var0 ** 3 * 4 * 3.1416 / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- EXECUTION TIME:
0.121515
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.389
7871.094
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:53:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import

var0 = float(input("raio: "))

var1 = var0 ** 2 * pi             # Area
var2 = var0 ** 3 * 4 * pi / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:54:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from <math> import

var0 = float(input("raio: "))

var1 = var0 ** 2 * pi             # Area
var2 = var0 ** 3 * 4 * pi / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- ERROR:
File "XXXX", line 4
    from <math> import
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:55:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from <math> import *

var0 = float(input("raio: "))

var1 = var0 ** 2 * pi             # Area
var2 = var0 ** 3 * 4 * pi / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- ERROR:
File "XXXX", line 4
    from <math> import *
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:55:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from < math > import *

var0 = float(input("raio: "))

var1 = var0 ** 2 * pi             # Area
var2 = var0 ** 3 * 4 * pi / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- ERROR:
File "XXXX", line 4
    from < math > import *
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:55:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

var0 = float(input("raio: "))

var1 = var0 ** 2 * pi             # Area
var2 = var0 ** 3 * 4 * pi / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 14:55:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

var0 = float(input("raio: "))

var1 = var0 ** 2 * pi             # Area
var2 = var0 ** 3 * 4 * pi / 3  # Dominador do Volume

print(round(var1, 3))
print(round(var2, 3))

-- EXECUTION TIME:
0.192384
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
