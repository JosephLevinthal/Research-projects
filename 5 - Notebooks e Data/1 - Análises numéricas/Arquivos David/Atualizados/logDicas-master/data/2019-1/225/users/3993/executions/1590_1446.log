== TEST (2019-03-20 21:24:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
litros = float(input(3))
michael = 0.333
print(round(michael, 3))
-- OUTPUT:
30.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:25:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
litros = float(input(3))
michael = 0.333
print(round(michael, 3))
-- EXECUTION TIME:
0.146668
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
30.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
30.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
30.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:25:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
litros = float(input(3))
michael = 0.333
print(round(michael, 3))
-- OUTPUT:
30.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:26:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
litros = float(input(3 - 0.333))
michael = 0.333
print(round(michael, 3))
-- OUTPUT:
2.6670.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:26:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
litros = float(input(3 - 0.333))
michael = 0.333
print(round(michael, 3))
-- EXECUTION TIME:
0.14142
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.6670.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.6670.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.6670.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:27:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = input(3 - 2/3)
print(1/3)
-- OUTPUT:
2.33333333333333350.3333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:27:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = input(3 - 2/3)
print(var)
-- OUTPUT:
2.33333333333333357
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:27:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = input(3 - 2/3)
print(var)
-- EXECUTION TIME:
0.169838
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.33333333333333357
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.333333333333333520.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.333333333333333515
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:29:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = input(3 - 2/3)
litros = 0.3333333333333333
print(round(litros, 3))
-- OUTPUT:
2.33333333333333350.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:29:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = input(3 - 2/3)
litros = 0.3333333333333333
print(round(litros, 3))
-- EXECUTION TIME:
0.16141
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.33333333333333350.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.33333333333333350.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.33333333333333350.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:29:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = input(3 - 2/3)
litros = 0.3333333333333333
print(round(litros, 2))
-- OUTPUT:
2.33333333333333350.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:30:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = input(3 - 2/3)
litros = 0.333
print(round(litros, 2))
-- OUTPUT:
2.33333333333333350.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:30:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = float(input(3 - 2/3))
litros = 0.333
print(round(litros, 2))
-- OUTPUT:
2.33333333333333350.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:30:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = float(input(3 - 2/3))
litros = 0.333
print(round(litros, 2))
-- EXECUTION TIME:
0.174853
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.33333333333333350.33
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.33333333333333350.33
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.33333333333333350.33
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:30:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = float(input(3 - 2/3))
litros = 0.333
print(round(litros, 2))
-- OUTPUT:
2.33333333333333350.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 21:30:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = int(input(3 - 2/3))
litros = 0.333
print(round(litros, 2))
-- OUTPUT:
2.33333333333333350.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 21:31:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
var = int(input(3 - 2/3))
litros = 0.333
print(round(litros, 2))
-- EXECUTION TIME:
0.213883
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.33333333333333350.33
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.3333333333333335
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.33333333333333350.33
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:11:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = input("Quantos litros michel comprou?")
var2 = input("Quantos litros ele doou?")
var3 = (var1 - var2)
print(var1 + var2, 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var2 = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:11:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = input("Quantos litros michel comprou?")
var2 = input("Quantos litros ele doou?")
var3 = (var1 - var2)
print(var1 + var2, 3)


-- EXECUTION TIME:
0.218862
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 8, in <module>
    var2 = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:13:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = int(input("Quantos litros michel comprou?"))
var2 = int(input("Quantos litros ele doou?"))
var3 = (var1 - var2)
print(int(var3, 3))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:14:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = int(input("Quantos litros michel comprou?"))
var2 = int(input("Quantos litros ele doou?"))
var3 = (var1 - var2)
print(int(var3, 3))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:14:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = int(input("Quantos litros michel comprou?"))
var2 = int(input("Quantos litros ele doou?"))
var3 = (var1 - var2)
print(int(var3, 3))


-- EXECUTION TIME:
0.198605
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 8, in <module>
    var2 = int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:14:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = int(input("Quantos litros michel comprou?"))
var2 = int(input("Quantos litros ele doou?"))
var3 = (var1 - var2)
print(var3, 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:14:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = int(input("Quantos litros michel comprou?"))
var2 = int(input("Quantos litros ele doou?"))
var3 = (2 / 3) - (1 / 3)
print(var3, 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:14:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = int(input("Quantos litros michel comprou?"))
var2 = int(input("Quantos litros ele doou?"))
var3 = (2 / 3) - (1 / 3)
print(var3, 3)


-- EXECUTION TIME:
0.193058
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 8, in <module>
    var2 = int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:17:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = float(input("Quantos litros michel comprou?"))
var2 = float(input("Quantos litros ele doou?"))
var3 = (2 / 3) - (1 / 3)
print(var3, 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var2 = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:17:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = float(input("Quantos litros michel comprou?"))
var2 = float(input("Quantos litros ele doou?"))
var3 = (2 / 3) - (1 / 3)
print(var3, 3)


-- EXECUTION TIME:
0.148286
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 8, in <module>
    var2 = float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:17:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = float(input("Quantos litros michel comprou?"))
var2 = float(input("Quantos litros ele doou?"))
var3 = (2 / 3 - 1 / 3)
print(var3, 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var2 = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:22:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var1 = input(int("Quantos litros michel comprou?"))
var2 =(input(int("Quantos litros ele doou?"))
var3 = (2 / 3 - 1 / 3)
print(int(var3, 3))


-- ERROR:
File "XXXX", line 9
    var3 = (2 / 3 - 1 / 3)
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 09:48:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel
A = float(input("valor de A: ")
			 print(round(A/3,3))


-- ERROR:
File "XXXX", line 7
    print(round(A/3,3))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 09:48:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel
A = float(input("valor de A: ")
print(round(A/3,3))


-- ERROR:
File "XXXX", line 7
    print(round(A/3,3))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 09:48:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel
A = float(input("valor de A: ")
print(round(A/3 ,3))


-- ERROR:
File "XXXX", line 7
    print(round(A/3 ,3))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 12:01:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com michel

var = float(input("litros comprados"))
var2 = float(input(" litros doados"))
print(float(round( var1 - var2, 3)(var - var2))


-- ERROR:
File "XXXX", line 11
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 12:12:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com mi
Comprados = float(input("Litros comprados"))
Doados = (2 / 3 * Comprados)
Ficados = (1 /3 * Comprados)


-- ERROR:
File "XXXX", line 11
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 12:13:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com mi
Comprados = float(input("Litros comprados"))
Doados = (2 / 3 * Comprados)
Ficados = (1 /3 * Comprados)


-- EXECUTION TIME:
0.142548
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:

-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 12:16:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com mi

Comprados = float(input("Litros Comprados"))
Doados = (2 / 3 * Comprados)
Ficados = (1 / 3 * Comprados)
print(Ficados)
		
						


-- OUTPUT:
2.333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 12:16:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com mi

Comprados = float(input("Litros Comprados"))
Doados = (2 / 3 * Comprados)
Ficados = (1 / 3 * Comprados)
print(Ficados)
		
						


-- EXECUTION TIME:
0.13368
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333333333333333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.666666666666666
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 12:17:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com mi

Comprados = float(input("Litros Comprados"))
Doados = (2 / 3 * Comprados)
Ficados = (1 / 3 * Comprados)
print(round(Ficados, 3))
		
						


-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 12:17:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
#entrada = litros comprados
#saida = quantidade que fica com mi

Comprados = float(input("Litros Comprados"))
Doados = (2 / 3 * Comprados)
Ficados = (1 / 3 * Comprados)
print(round(Ficados, 3))
		
						


-- EXECUTION TIME:
0.141662
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
