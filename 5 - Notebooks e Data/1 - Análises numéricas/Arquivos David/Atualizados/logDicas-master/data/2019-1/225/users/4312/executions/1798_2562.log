== TEST (2019-06-05 14:36:54) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:37:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
npar = 0
nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:37:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
npar = 0
nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:37:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:38:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:39:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 16
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:40:03) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:40:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:40:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:41:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:41:40) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    if (elemento % 2 == 0):
                          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:41:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    npar = npar + 1
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:42:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 20
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:42:17) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 23
    print(nimpar)
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:42:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 26
    print(size(vet))
                   ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:42:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 29
    vet = array(eval(input()))
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:42:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:42:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.21297
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.57006
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:43:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
3.97186
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.87993
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.70844
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:10) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
8.90458
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
8.68523
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
7.25141
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.80849
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.93487
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.42826
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2562/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.32488
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > i):
NameError: name 'i' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:43:38) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:43:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.82541
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > npar):
NameError: name 'npar' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:43:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
2.77078
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > npar):
NameError: name 'npar' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:45:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
			i = i + 1
		else:
			nimpar = nimpar + 1
			i = i + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:45:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
			i = i + 1
		else:
			nimpar = nimpar + 1
			i = i + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.20503
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
6
5
11
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
7
6
13
9
8
17
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
9
9
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:45:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (elemento % 2 == 0):
			npar = npar + 1
			i = i + 1
		else:
			nimpar = nimpar + 1
			i = i + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:46:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			i = i + 1
		else:
			nimpar = nimpar + 1
			i = i + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:46:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			i = i + 1
		else:
			nimpar = nimpar + 1
			i = i + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.945498
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 14, in <module>
    if (vet[i] % 2 == 0):
IndexError: index 11 is out of bounds for axis 0 with size 11

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:47:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			i = i + 1
		else:
			nimpar = nimpar + 1
			i = i + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:48:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			i = i + 1
		else:
			nimpar = nimpar + 1
			i = i + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:49:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:50:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:51:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = i + 1
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
i = i +1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 21
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:51:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = i + 1
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
		i = i +1
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:53:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
			
		i = i +1	
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:53:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:53:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:53:31) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.55508
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
12
13
Proximo vetor: 16
1
17
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
18
Proximo vetor:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:53:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
3.72525
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
Primeiro vetor: 4
4
8
Proximo vetor:
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
12
13
Proximo vetor: 16
1
17
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
18
Proximo vetor:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:53:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
		else:
			nimpar = nimpar + 1
			
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
3.50367
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2562/main.py", line 7, in <module>
    while (size(vet) > vet[i]):
IndexError: index 16 is out of bounds for axis 0 with size 10

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:53:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > vet[i]):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			i = i +1
			
		else:
			nimpar = nimpar + 1 		
			i = i +1
		
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:54:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
# Verifica se o programa vai terminar
while (size(vet) > i ):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			i = i +1
			
		else:
			nimpar = nimpar + 1 		
			i = i +1
		
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:02:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1 ):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1 	
		
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 15:04:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1 ):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1 	
		
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.297
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
