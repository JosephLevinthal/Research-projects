== TEST (2019-04-22 14:31:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a >= b + c) or (b >= c + a) or (c >= a + c)):
	mensagem = "nao e triangulo"
else:
	if((a==b) and (b==c):
		mensagem = "equilatero"
		else:
		if((a==b) or (a==b) or (c==a)
			mensagem = "isosceles"
			else:  mensagem = "escaleno"
else:
			mensagem = "nao e triangulo"
print(mensagem)			
-- ERROR:
File "XXXX", line 13
    if((a==b) and (b==c):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:31:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a >= b + c) or (b >= c + a) or (c >= a + c)):
	mensagem = "nao e triangulo"
else:
	if((a==b) and (b==c)):
		mensagem = "equilatero"
		else:
		if((a==b) or (a==b) or (c==a)
			mensagem = "isosceles"
			else:  mensagem = "escaleno"
else:
			mensagem = "nao e triangulo"
print(mensagem)			
-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:31:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a >= b + c) or (b >= c + a) or (c >= a + c)):
	mensagem = "nao e triangulo"
else:
	if((a==b) and (b==c)):
		mensagem = "equilatero"
		else:
			
		if((a==b) or (a==b) or (c==a)
			mensagem = "isosceles"
			else:  mensagem = "escaleno"
else:
			mensagem = "nao e triangulo"
print(mensagem)			
-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:31:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a >= b + c) or (b >= c + a) or (c >= a + c)):
	mensagem = "nao e triangulo"
else:
	if((a==b) and (b==c)):
		mensagem = "equilatero"
		else:
			
		   if((a==b) or (a==b) or (c==a)
			mensagem = "isosceles"
			   else:  mensagem = "escaleno"
else:
			mensagem = "nao e triangulo"
print(mensagem)			
-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:32:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a >= b + c) or (b >= c + a) or (c >= a + c)):
	mensagem = "nao e triangulo"
else:
	if((a==b) and (b==c)):
		mensagem = "equilatero"
		else:	
		   if((a==b) or (a==b) or (c==a)
			mensagem = "isosceles"
			   else:  mensagem = "escaleno"
else:
			mensagem = "nao e triangulo"
print(mensagem)			
-- ERROR:
File "XXXX", line 15
    else:	
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:33:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a >= b + c) or (b >= c + a) or (c >= a + c)):
	mensagem = "nao e triangulo"
   else:
	   if((a==b) and (b==c)):
		mensagem = "equilatero"
		  else:	
		      if((a==b) or (a==b) or (c==a)
		mensagem = "isosceles"
			      else:  mensagem = "escaleno"
				
print(mensagem)			
-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:34:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a >= b + c) or (b >= c + a) or (c >= a + c)):
	mensagem = "nao e triangulo"
	   if((a==b) and (b==c)):
		mensagem = "equilatero"
		  else:	
		      if((a==b) or (a==b) or (c==a)
		mensagem = "isosceles"
			      else:  mensagem = "escaleno"
				
print(mensagem)			
-- ERROR:
File "XXXX", line 12
    if((a==b) and (b==c)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:39:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
		else:
			if((a==b)or(b==c)or(a==c)):
				print("isosceles")
				else:
					print("escaleno")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:39:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
		else:
				if((a==b)or(b==c)or(a==c)):
				print("isosceles")
				else:
					print("escaleno")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:41:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:42:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			print("escaleno")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:47:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a >= b + c) or (b >= c + a) or (c >= a + c)):
			print("invalido")
			else:
				print("escaleno")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 18
    print("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:47:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a >= b + c) or (b >= c + a) or (c >= a + c)):
				print("invalido")
			else:
				print("escaleno")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:55:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a >= b + c) or (b >= c + a) or (c >= a + c) and (abs(b-c)<a<(b+c))):
				print("invalido")
			else:
				print("escaleno")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:01:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a < b + c) or (b < c + a) or (c < a + c))
				print(escaleno)
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 17
    if((a!=b) and (b!=c) and (c!=a) and (a < b + c) or (b < c + a) or (c < a + c))
                                                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:01:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a < b + c) or (b < c + a) or (c < a + c)):
				print(escaleno)
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:01:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a < b + c) or (b < c + a) or (c < a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:02:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 17
    if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
                                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:02:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- EXECUTION TIME:
0.124391
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 17
    if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
                                                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:02:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 17
    if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
                                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:02:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 17
    if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
                                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:03:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 17
    if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b => c + a) or (c => a + c)):
                                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:03:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b >= c + a) or (c => a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 17
    if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b >= c + a) or (c => a + c)):
                                                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:03:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b >= c + a) or (c >= a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:03:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b >= c + a) or (c >= a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- EXECUTION TIME:
0.206221
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
2.0
4.0
4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
3.3
4.4
5.5
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1.0
2.0
7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:03:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a >= b + c) or (b >= c + a) or (c >= a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:04:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			if((a!=b) and (b!=c) and (c!=a) and (a < b + c) or (b < c + a) or (c < a + c)):
				print("escaleno")
			else:
				print("invalido")
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:05:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			print("escaleno")		
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:05:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)and (a < b + c) or (b < c + a) or (c < a + c)):
			print("isosceles")
		else:
			print("escaleno")		
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:06:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c) and:
			print("isosceles")
		else:
			print("escaleno")		
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 14
    if((a==b)or(b==c)or(a==c) and:
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:06:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c):
			print("isosceles")
		else:
			print("escaleno")		
else:
	print("invalido")
				
			
-- ERROR:
File "XXXX", line 14
    if((a==b)or(b==c)or(a==c):
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:06:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado: a"))
b = float(input("lado: b"))
c = float(input("lado: c"))
print(a)
print(b)
print(c)

if((a < b + c) or (b < c + a) or (c < a + c)):
	if ((a==b)and(b==c)):
		print("equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("isosceles")
		else:
			print("escaleno")		
else:
	print("invalido")
				
			
-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:20:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
			
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:20:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
			
-- EXECUTION TIME:
0.178516
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:21:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo:invalido")
			
-- EXECUTION TIME:
0.12612
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:21:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo:invalido")
			
-- EXECUTION TIME:
0.133367
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:21:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo:invalido")
			
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:21:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo:invalido")
			
-- EXECUTION TIME:
0.143877
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:21:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo:invalido")
			
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:21:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:22:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))


if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.215562
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:24:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entradas" a , b , c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 7
    print("Entradas" a , b , c) 
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:24:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print ("Entradas:"+ a , b , c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("escaleno")
	else:
		if ((a != b) or (b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print ("Entradas:"+ a , b , c) 
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:25:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print ("Entradas:" a "," b "," c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 7
    print ("Entradas:" a "," b "," c) 
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:25:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entradas:" a "," b "," c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 7
    print("Entradas:" a "," b "," c) 
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:25:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entradas:", a "," b "," c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 7
    print("Entradas:", a "," b "," c) 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:27:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entradas: ", a"," , b"," , c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a"," , b"," , c) 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:27:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entradas: ", a"," , b "," , c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a"," , b "," , c) 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:27:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entradas: ", a"," , b "," , c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", a"," , b "," , c) 
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:28:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))
print("Entrada"a, b, c) 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 6
    print("Entrada"a, b, c) 
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:28:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))
 
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:29:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.159819
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a != b) and (b != c) and (c != a)):
		print("Tipo de triangulo: escaleno")
	else:
		if ((a != b) or (b != c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:30:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (c == a)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.170807
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Lado a: Lado b: Lado c: Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Lado a: Lado b: Lado c: Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado a: Lado b: Lado c: Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:30:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (c == a)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.20271
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.158711
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.143565
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:31:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.184822
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:31:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Lado a: "))
b= float(input("Lado b: "))
c= float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.215638
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.137967
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.108509
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.131202
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:31:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)
if ((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.201828
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:32:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: equilatero")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.144496
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:32:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.141437
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:33:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.150332
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:33:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:33:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entrada", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:33:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.198272
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:33:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas: ", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if ((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.23535
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
