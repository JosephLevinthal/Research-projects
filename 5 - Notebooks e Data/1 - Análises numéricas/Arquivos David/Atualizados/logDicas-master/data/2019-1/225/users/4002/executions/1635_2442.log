== TEST (2019-04-08 19:32:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 19:32:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.126002
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:42:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:42:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 3 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 3 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:42:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:44:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 19:44:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.143268
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num % 2 = 0)
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:24:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:24:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.270821
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num % 2 = 0)
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:24:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:26:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:27:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:27:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:27:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.14194
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:28:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2.lower == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2.lower == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:31:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0).lower
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:31:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0).lower
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:31:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.139155
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num % 2 = 0).lower
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num//2 = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num//2 = 0).lower
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:32:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num//2 = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.210605
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num//2 = 0).lower
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:32:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num / 2 = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num / 2 = 0).lower
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:32:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num / 2 = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.190791
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num / 2 = 0).lower
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:32:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if ((num % 2) = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if ((num % 2) = 0).lower
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:32:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if ((num % 2) = 0).lower
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.199245
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if ((num % 2) = 0).lower
                  ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:35:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0).lower:
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0).lower:
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:35:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0).lower:
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0).lower:
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:35:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:35:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.170243
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num % 2 = 0):
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:46:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num.lower() % 2 = 0):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:46:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.201043
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num.lower() % 2 = 0):
                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:46:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num.lower() % 2 = 0):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:48:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 = 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num.lower() % 2 = 0):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:48:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 = 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- EXECUTION TIME:
0.22787
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num.lower() % 2 = 0):
                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:48:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 = 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num.lower() % 2 = 0):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 21:48:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 21:48:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- EXECUTION TIME:
0.139979
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:38:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:38:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:38:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:38:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:38:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:38:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:39:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:40:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 22:41:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- EXECUTION TIME:
0.142339
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:51:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:51:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:51:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 22:51:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- EXECUTION TIME:
0.19802
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:51:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:01:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:02:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:02:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:02:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:02:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:02:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:02:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem("Par")
else:
	mensagem("Impar")

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:04:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:05:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem = "Par"
	print(mensagem)
else:
	mensagem = "Impar"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 11:05:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem = "Par"
	print(mensagem)
else:
	mensagem = "Impar"
	print(mensagem)
-- EXECUTION TIME:
0.111671
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:05:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem = "Par"
	print(mensagem)
else:
	mensagem = "Impar"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:05:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem = "Par"
	print(mensagem)
else:
	mensagem = "Impar"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 11:06:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num.lower() % 2 == 0):
	mensagem = "par"
	print(mensagem)
else:
	mensagem = "impar"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num.lower() % 2 == 0):
AttributeError: 'float' object has no attribute 'lower'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 11:07:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = float(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
	print(mensagem)
else:
	mensagem = "impar"
	print(mensagem)
-- EXECUTION TIME:
0.161603
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
