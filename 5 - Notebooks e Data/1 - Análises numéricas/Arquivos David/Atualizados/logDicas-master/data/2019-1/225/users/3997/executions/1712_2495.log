== TEST (2019-05-08 15:22:33) 
-- CODE:
# Introducao a Programacao de Computadores
# Criado em 15 / 05 / 2015
# @author: IComp / UFAM

# Primeiro input
num = int(input("Digite um numero: "))

x = 20 
# Laco de repeticao
while (x >= -1):
	# Verifica se valor eh divisivel por 2
	if (x%2):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	# Inputs seguintes
	num = int(input("Digite um numero: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 20, in <module>
    num = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-09 08:22:52) 
-- CODE:

x = int(input("Digite um numero: "))

while (x! = -1):

	if (x % 2==0)
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	
	x = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.284971
-- ERROR:
  File "/home/codebench/codes/1712/2495/main.py", line 4
    while (x! = -1):
            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:22:54) 
-- CODE:

x = int(input("Digite um numero: "))

while (x! = -1):

	if (x % 2==0)
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	
	
	x = int(input("Digite um numero: "))

-- ERROR:
File "XXXX", line 4
    while (x! = -1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:24:13) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:24:18) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:25:09) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:25:10) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:25:10) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:25:31) 
-- CODE:
nmr = float(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:25:38) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = "PAR"
	else:
		mensagem = "IMPAR"
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:27:39) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:28:02) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:28:40) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:29:00) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:29:17) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:29:18) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 08:33:42) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- OUTPUT:
PAR
PAR
PAR
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-09 08:34:08) 
-- CODE:
nmr = int(input("Digite um numero: "))

while (nmr!=-1):
	if (nmr % 2==0):
		mensagem = ("PAR")
	else:
		mensagem = ("IMPAR")
	
	print(mensagem)
	nmr = int(input("Digite um numero: "))

-- EXECUTION TIME:
0.153129
-- TEST CASE 1:
---- input:
0
22
44
-1
---- correct output:
PAR
PAR
PAR
---- user output:
PAR
PAR
PAR
-- TEST CASE 2:
---- input:
1
33
55
777
9999
-1
---- correct output:
IMPAR
IMPAR
IMPAR
IMPAR
IMPAR
---- user output:
IMPAR
IMPAR
IMPAR
IMPAR
IMPAR
-- TEST CASE 3:
---- input:
10528
4999
123
45
6
-1
---- correct output:
PAR
IMPAR
IMPAR
IMPAR
PAR
---- user output:
PAR
IMPAR
IMPAR
IMPAR
PAR
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
