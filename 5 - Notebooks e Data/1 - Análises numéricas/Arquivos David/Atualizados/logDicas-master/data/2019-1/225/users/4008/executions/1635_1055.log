== TEST (2019-04-10 14:26:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
DH = float(input("distancia: "))
from math import*
R =((Vo)**2)*(radians(sin(2*angulo)))
if(abs((DH - R)=0,1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if(abs((DH - R)=0,1):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:26:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
DH = float(input("distancia: "))
from math import*
R =((Vo)**2)*(radians(sin(2*angulo)))
if(abs(DH - R)=0,1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if(abs(DH - R)=0,1):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:26:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
DH = float(input("distancia: "))
from math import*
R =((Vo)**2)*(radians(sin(2*angulo)))
if(abs(DH - R=0,1)):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if(abs(DH - R=0,1)):
          ^
SyntaxError: keyword can't be an expression
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:28:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
DH = float(input("distancia: "))
from math import *
R =((Vo)**2)*(radians(sin(2*angulo)))
if(abs(0,1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if(abs(0,1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:29:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
DH = float(input("distancia: "))
from math import *
R =((Vo)**2)*(radians(sin(2*angulo)))
if(abs(R):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if(abs(R):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:17:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
R =((Vo)**2)*(sin(radians(2*angulo)))
if(abs(D - R < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 9
    if(abs(D - R < 0.1):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:18:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
R =((Vo)**2)*(sin(radians(2*angulo)))
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:18:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
R =((Vo)**2)*(sin(radians(2*angulo)))
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 11:18:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
R =((Vo)**2)*(sin(radians(2*angulo)))
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- EXECUTION TIME:
0.143241
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:20:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
R =((Vo)**2)*(radians(sin(2*angulo)))
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 11:20:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
R =((Vo)**2)*(radians(sin(2*angulo)))
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- EXECUTION TIME:
0.136938
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:30:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =((Vo)**2)*(radians(sin(2*angulo)))/g
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R =((Vo)**2)*(radians(sin(2*angulo)))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:31:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(radians(sin(2*angulo))))/g
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R =(((Vo)**2)*(radians(sin(2*angulo))))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:31:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(sin(radians((2*angulo))))/g
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 10
    if(abs(D - R) < 0.1):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:32:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(sin(radians((2*angulo))))/(g)
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 10
    if(abs(D - R) < 0.1):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:32:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(sin(radians((2*angulo))))/(g)
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 10
    if(abs(D - R) < 0.1):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:33:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8m/s**2
R =(((Vo)**2)*(sin(radians((2*angulo))))/(g)
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 8
    g = 9,8m/s**2
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:33:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(sin(radians((2*angulo))))/(g)
if(abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 10
    if(abs(D - R) < 0.1):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:33:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(sin(radians((2*angulo))))/(g)
if (abs(D - R) < 0.1):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)

-- ERROR:
File "XXXX", line 10
    if (abs(D - R) < 0.1):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:33:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(sin(radians((2*angulo))))/(g)
if (abs(D - R) < 0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao")
print(mensagem)

-- ERROR:
File "XXXX", line 10
    if (abs(D - R) < 0.1):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:34:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R =(((Vo)**2)*(sin(radians((2*angulo))))/(g)
if (abs(D - R)< 0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao")
print(mensagem)

-- ERROR:
File "XXXX", line 10
    if (abs(D - R)< 0.1):
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:35:51) 
-- CODE:
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R = ((Vo)**2)*radians*sin*(2*angulo)/g
if (abs(D - R)< 0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao")
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    R = ((Vo)**2)*radians*sin*(2*angulo)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:36:18) 
-- CODE:
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R = ((Vo)**2)*radians*(sin*(2*angulo))/g
if (abs(D - R)< 0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao")
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    R = ((Vo)**2)*radians*(sin*(2*angulo))/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:36:36) 
-- CODE:
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R = ((Vo)**2)*radians(sin*(2*angulo))/g
if (abs(D - R)< 0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao")
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    R = ((Vo)**2)*radians(sin*(2*angulo))/g
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:37:45) 
-- CODE:
Vo = float(input("velocidade: "))
angulo = float(input("angulo: "))
D = float(input("distancia: "))
from math import *
g = 9,8
R = ((Vo)**2)*sin(radians(2*angulo))/g
if (abs(D - R)< 0.1):
	mensagem = ("sim")
else:
	mensagem = ("nao")
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    R = ((Vo)**2)*sin(radians(2*angulo))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:44:28) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = float(input("digite o valor do angulo: "))
D = float(input("digite a distancia horizontal: "))
R = (((Vo)**2)*sin(radians(2*alpha)))/g
g = 9,8
if (abs(D - R)<= 0.1):
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    R = (((Vo)**2)*sin(radians(2*alpha)))/g
NameError: name 'g' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:44:59) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = float(input("digite o valor do angulo: "))
D = float(input("digite a distancia horizontal: "))
g = 9,8
R = (((Vo)**2)*sin(radians(2*alpha)))/g
if (abs(D - R)<= 0.1):
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    R = (((Vo)**2)*sin(radians(2*alpha)))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:45:39) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = float(input("digite o valor do angulo: "))
D = float(input("digite a distancia horizontal: "))
g = 9,8
R = (((Vo)**2)*sin(radians*(2*alpha)))/g
if (abs(D - R)<= 0.1):
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    R = (((Vo)**2)*sin(radians*(2*alpha)))/g
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:46:16) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = float(input("digite o valor do angulo: "))
D = float(input("digite a distancia horizontal: "))
g = 9,8
R = (((Vo)**2)*(radians(sin*(2*alpha)))/g
if (abs(D - R)<= 0.1):
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- ERROR:
File "XXXX", line 7
    if (abs(D - R)<= 0.1):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:46:22) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = float(input("digite o valor do angulo: "))
D = float(input("digite a distancia horizontal: "))
g = 9,8
R = (((Vo)**2)*(radians(sin*(2*alpha)))/g
if (abs(D - R) <= 0.1):
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- ERROR:
File "XXXX", line 7
    if (abs(D - R) <= 0.1):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:46:59) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = float(input("digite o valor do angulo: "))
D = float(input("digite a distancia horizontal: "))
g = 9,8
R = (((Vo)**2)*(radians(sin*(2*alpha)))/g
x = D - R
if (abs(x) <= 0.1):
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- ERROR:
File "XXXX", line 7
    x = D - R
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:00:08) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = (radians(float(input("digite o valor do angulo: "))))
D = float(input("digite a distancia horizontal: "))
g = 9,8
R = (((Vo)**2)*(radians(sin*(2*alpha)))/g
x = D - R
if (abs(x) <= 0.1):
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- ERROR:
File "XXXX", line 7
    x = D - R
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:01:52) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = (radians(float(input("digite o valor do angulo: "))))
D = float(input("digite a distancia horizontal: "))
R = (Vo**2 * sin(2*alpha))
if abs(D - R) <= 0.1:
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:02:05) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = (radians(float(input("digite o valor do angulo: "))))
D = float(input("digite a distancia horizontal: "))
R = (Vo**2 * sin(2*alpha))
if abs(D - R) <= 0.1:
	mensagem =("sim")
else:
	mensagem =("nao")
print(mensagem)
-- EXECUTION TIME:
0.123674
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:02:32) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = (radians(float(input("digite o valor do angulo: "))))
D = float(input("digite a distancia horizontal: "))
R = (Vo**2 * sin(2*alpha))
if abs(D - R) <= 0.1:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:02:41) 
-- CODE:
from math import*
Vo = float(input("digite a velocidade: "))
alpha = (radians(float(input("digite o valor do angulo: "))))
D = float(input("digite a distancia horizontal: "))
R = (Vo**2 * sin(2*alpha))
if abs(D - R) <= 0.1:
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.122771
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:03:39) 
-- CODE:
from math import*
Vo = float(input("velocidade inicial: "))
alpha = (radians(float(input("angulo em graus: "))))
D = float(input("distancia entre o passaro e o porco: "))
R = (Vo**2 * sin(2*alpha)) / 9.8
if abs(D - R) <= 0.1:
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:03:53) 
-- CODE:
from math import*
Vo = float(input("velocidade inicial: "))
alpha = (radians(float(input("angulo em graus: "))))
D = float(input("distancia entre o passaro e o porco: "))
R = (Vo**2 * sin(2*alpha)) / 9.8
if abs(D - R) <= 0.1:
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.136103
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:04:48) 
-- CODE:
from math import*
vo = float(input("velocidade incial: "))
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:06:00) 
-- CODE:
from math import*
vo = float(input("velocidade incial: "))
alpha = radians(float(input("angulo em graus: ")))
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:07:04) 
-- CODE:
from math import*
vo = float(input("velocidade incial: "))
alpha = radians(float(input("angulo em graus: ")))
d = float(input("distancia entre o porco e o passaro: "))

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:08:59) 
-- CODE:
from math import*
vo = float(input("velocidade incial: "))
alpha = radians(float(input("angulo em graus: ")))
d = float(input("distancia entre o porco e o passaro: "))
r = (vo**2 * sin(2*alpha)) / 9.8
if abs(d - r) <= 0.1:
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:09:11) 
-- CODE:
from math import*
vo = float(input("velocidade incial: "))
alpha = radians(float(input("angulo em graus: ")))
d = float(input("distancia entre o porco e o passaro: "))
r = (vo**2 * sin(2*alpha)) / 9.8
if abs(d - r) <= 0.1:
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.209093
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
