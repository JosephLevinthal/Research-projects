== TEST (2019-04-24 15:23:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(": "))
a = float(input(": "))
b = float(input(": "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a, b)
elif:
	print( x +"nao pertence ao intervalo"+ a, b)
else(b <= s):
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 10
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:24:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(": "))
a = float(input(": "))
b = float(input(": "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a, b)
elif:
	print( x +"nao pertence ao intervalo"+ a, b)
else(b <= s):
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 10
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:27:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(": "))
a = float(input(": "))
b = float(input(": "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a, b)
elif(b <= a):
	print( x +"nao pertence ao intervalo"+ a, b)
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.174439
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:

-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:27:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(": "))
a = float(input(": "))
b = float(input(": "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a, b)
elif(b <= a):
	print( x +"nao pertence ao intervalo"+ a, b)
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a "," b)
elif(b <= a):
	print( x +"nao pertence ao intervalo"+ a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x +" pertence ao intervalo "+ a "," b)
                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a "," b)
elif(b <= a):
	print( x +"nao pertence ao intervalo"+ a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x +" pertence ao intervalo "+ a "," b)
                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a "," b)
elif(b <= a):
	print( x +"nao pertence ao intervalo"+ a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x +" pertence ao intervalo "+ a "," b)
                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:29:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo "+ a "," b)
elif(b < a):
	print( x +"nao pertence ao intervalo"+ a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x +" pertence ao intervalo "+ a "," b)
                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo " + a "," b)
elif(b < a):
	print( x +"nao pertence ao intervalo" + a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x +" pertence ao intervalo " + a "," b)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo " + a "," b)
elif(x > b):
	print( x +"nao pertence ao intervalo" + a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x +" pertence ao intervalo " + a "," b)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:33:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x +" pertence ao intervalo " + a "," b)
elif(x > b) or (x > a):
	print( x +"nao pertence ao intervalo" + a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x +" pertence ao intervalo " + a "," b)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:33:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x " pertence ao intervalo "  a "," b)
elif(x > b) or (x > a):
	print( x "nao pertence ao intervalo"  a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x " pertence ao intervalo "  a "," b)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:33:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x " pertence ao intervalo "  a "," b)
elif(x > b) or (x > a):
	print( x "nao pertence ao intervalo"  a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x " pertence ao intervalo "  a "," b)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:34:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( x " pertence ao intervalo "  a "," b)
elif(x > b) or (x > a):
	print( x "nao pertence ao intervalo"  a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( x " pertence ao intervalo "  a "," b)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:34:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( str(x) + " pertence ao intervalo " str(a) "," str(b))
elif(x > b) or (x > a):
	print( x "nao pertence ao intervalo"  a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 9
    print( str(x) + " pertence ao intervalo " str(a) "," str(b))
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:38:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( str(x) + " pertence ao intervalo " + str(a) +","+ str(b))
elif(x > b) or (x > a):
	print( x "nao pertence ao intervalo"  a "," b)
else:
	print("Entradas a e b invalidas")
-- ERROR:
File "XXXX", line 11
    print( x "nao pertence ao intervalo"  a "," b)
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:40:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( str(x) + " pertence ao intervalo " + str(a) +","+ str(b))
elif(x > b) or (x > a):
	print( str(x) + "nao pertence ao intervalo"+ str(a)+ "," + str(b))
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:40:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <= x <=b ):
	print( str(x) + " pertence ao intervalo " + str(a) +","+ str(b))
elif(x > b) or (x > a):
	print( str(x) + "nao pertence ao intervalo"+ str(a)+ "," + str(b))
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.198586
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5nao pertence ao intervalo6.5,3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1,22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x)and (x<=b):
	print( str(x) + " pertence ao intervalo " + str(a) +","+ str(b))
elif(x > b) or (x > a):
	print( str(x) + "nao pertence ao intervalo"+ str(a)+ "," + str(b))
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.15356
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5nao pertence ao intervalo6.5,3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1,22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x)and (x<=b):
	print( str(x) + " pertence ao intervalo " + str(a) +","+ str(b))
elif(x > b) or (x > a):
	print( str(x) + "nao pertence ao intervalo"+ str(a)+ "," + str(b))
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x)and (x<=b):
	print( str(x) + " pertence ao intervalo " + str(a) +","+ str(b))
elif(x > b) or (x > a):
	print( str(x) + "nao pertence ao intervalo"+ str(a)+ "," + str(b))
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.126804
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5nao pertence ao intervalo6.5,3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1,22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a +",",b)
elif(x > b) or (x > a):
	print( str(x) + "nao pertence ao intervalo"+ str(a)+ "," + str(b))
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print( str(x) + "nao pertence ao intervalo"+ str(a)+ "," + str(b))
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:43:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:43:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas a e b invalidas")
-- EXECUTION TIME:
0.198344
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:43:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas a e b invalidas")
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:43:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e",b "invalidas")
-- EXECUTION TIME:
0.128013
-- ERROR:
  File "/home/codebench/codes/1671/1103/main.py", line 13
    print("Entradas",a, "e",b "invalidas")
                                        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:43:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e",b "invalidas")
-- ERROR:
File "XXXX", line 13
    print("Entradas",a, "e",b "invalidas")
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:43:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e",b, "invalidas")
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:43:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e",b, "invalidas")
-- EXECUTION TIME:
0.106249
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:43:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e",b, "invalidas")
-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:44:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b>=a):
	print("Entradas a e b invalidas")
elif(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.120067
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas a e b invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:44:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b>=a):
	print("Entradas a e b invalidas")
elif(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:45:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b>a):
	print("Entradas a e b invalidas")
elif(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:45:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b>a):
	print("Entradas a e b invalidas")
elif(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.172605
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas a e b invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas a e b invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:45:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b>a):
	print("Entradas a e b invalidas")
elif(a <=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:45:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b<a):
	print("Entradas a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:45:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b<a):
	print("Entradas a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.145301
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:45:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b<a):
	print("Entradas a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.175994
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:45:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b<a):
	print("Entradas a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:46:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b>a):
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entrada a e b invalidas")
-- EXECUTION TIME:
0.15861
-- ERROR:
  File "/home/codebench/codes/1671/1103/main.py", line 9
    elif(a<=x) and (x<=b):
       ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:48:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
		print("Entrada a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.16591
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entrada a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
		print("Entrada a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
		print("Entrada a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entrada a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:48:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entrada a e b invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:49:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entrada",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.193369
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entrada 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:49:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entrada",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:50:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entradas",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.198215
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:50:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entradas",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo ",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.219447
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:50:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entradas",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x," pertence ao intervalo",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.149463
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:50:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entradas",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.142551
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:50:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	print("Entradas",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:51:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	
	elif(a<=x) and (x<=b):
		print(x,"pertence ao intervalo",a,",",b)
	elif(x > b) or (x > a):
		print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e" ,b, "invalidas")
-- EXECUTION TIME:
0.311557
-- ERROR:
  File "/home/codebench/codes/1671/1103/main.py", line 10
    elif(a<=x) and (x<=b):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:51:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	
	elif(a<=x) and (x<=b):
		print(x,"pertence ao intervalo",a,",",b)
	elif(x > b) or (x > a):
		print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e" ,b, "invalidas")
-- ERROR:
File "XXXX", line 10
    elif(a<=x) and (x<=b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:51:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>=b):
	elif(a<=x) and (x<=b):
		print(x,"pertence ao intervalo",a,",",b)
	elif(x > b) or (x > a):
		print(x,"nao pertence ao intervalo",a,",",b)
else:
	print("Entradas",a, "e" ,b, "invalidas")
-- ERROR:
File "XXXX", line 9
    elif(a<=x) and (x<=b):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:52:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(a>b):
	print("Entradas",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x,"pertence ao intervalo",a,",",b)
elif(x > b) or (x > a):
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.159364
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if(b<=a):
	print("Entradas",a, "e" ,b, "invalidas")
elif(a<=x) and (x<=b):
	print(x,"pertence ao intervalo",a,",",b)
else:
	print(x,"nao pertence ao intervalo",a,",",b)
-- EXECUTION TIME:
0.213278
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
