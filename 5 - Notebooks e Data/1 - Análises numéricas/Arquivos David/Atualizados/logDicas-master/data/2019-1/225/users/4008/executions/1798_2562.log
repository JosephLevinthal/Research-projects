== TEST (2019-06-05 13:47:13) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:47:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:48:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
npar = 0
nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:48:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
npar = 0
nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:48:37) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
npar = 0
nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:48:52) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
npar = 0
nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 13:49:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
npar = 0
nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.729629
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 9
    npar = 0
       ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:52:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif:
			nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 13
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:52:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
	npar = 0
	nimpar = 0

   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1
	elif:
		nimpar = nimpar + 1
			

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 16
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:53:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
	npar = 0

   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1: 
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    npar = npar + 1: 
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:53:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
	npar = 0

   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1: 
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    npar = npar + 1: 
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:59:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar = 0
nimpar = 0
for i in range(size(vet):
	if (vet[i] % 2 == 0):
		npar = npar + 1
	if(vet[i] % 2 == 1):
		nimpar = nimpar + 1
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    for i in range(size(vet):
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:11:54) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
npar = 0
nimpar = 0
for i in vet:
	if(vet[i] % 2 == 0):
		npar = npar + 1
	else:
		nimpar = nimpar + 1
		
print(npar)
print(nimpar)
print(size(vet))

vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:12:53) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
npar = 0
nimpar = 0
for i in vet:
	if(i % 2 == 0):
		npar = npar + 1
	else:
		nimpar = nimpar + 1
		
print(npar)
print(nimpar)
print(size(vet))

vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:14:30) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 0):
	npar = 0
	nimpar = 0
	for i in vet:
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:19:32) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 0):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:20:00) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 0):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:21:45) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:22:01) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.2285
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:23:11) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	#for i in range(size(vet)):
		#if(vet[i] % 2 == 0):
	for i in vet:
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:23:18) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	#for i in range(size(vet)):
		#if(vet[i] % 2 == 0):
	for i in vet
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.897058
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 9
    for i in vet
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:23:23) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	#for i in range(size(vet)):
		#if(vet[i] % 2 == 0):
	for i in vet
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.25279
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 9
    for i in vet
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:23:25) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	#for i in range(size(vet)):
		#if(vet[i] % 2 == 0):
	for i in vet
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.44249
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 9
    for i in vet
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:23:25) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	#for i in range(size(vet)):
		#if(vet[i] % 2 == 0):
	for i in vet
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
2.09946
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2562/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:23:26) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	#for i in range(size(vet)):
		#if(vet[i] % 2 == 0):
	for i in vet
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
3.01113
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 9
    for i in vet
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:23:27) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	#for i in range(size(vet)):
		#if(vet[i] % 2 == 0):
	for i in vet:
		if(i % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
2.80456
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
8
10
18
2
2
4
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:

-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:23:57) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:24:13) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.06858
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:25:49) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:26:18) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))

while(size(vet) > 1):
	npar = 0
	nimpar = 0
	for i in range(size(vet)):
		if(vet[i] % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

	print(npar)
	print(nimpar)
	print(size(vet))

	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.09397
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
