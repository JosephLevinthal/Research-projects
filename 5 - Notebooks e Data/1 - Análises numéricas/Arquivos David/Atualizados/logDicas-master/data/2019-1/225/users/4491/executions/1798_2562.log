== TEST (2019-06-05 12:26:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
	#contador de impares
	nimpar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else: 
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:27:18) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else: 
			nimpar = nimpar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
	
	

-- ERROR:
File "XXXX", line 14
    else: 
         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:27:37) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:31:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
	nimpar = 0
	
	#conta dos impares
	for elemento in vet:
		if(elemento % 2 == 1):
			nimpar = nimpar + 1
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:31:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
	nimpar = 0
	
	#conta dos impares
	for elemento in vet:
		if(elemento % 2 == 1):
			nimpar = nimpar + 1
		# No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 35
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:31:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
	nimpar = 0
	
	#conta dos impares
	for elemento in vet:
		if(elemento % 2 == 1):
			nimpar = nimpar + 1
		# No. de elementos pares
   print(nimpar)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 35
    print(nimpar)
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:32:13) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
	nimpar = 0
	
	#conta dos impares
	for elemento in vet:
		if(elemento % 2 == 1):
			nimpar = nimpar + 1
		# No. de elementos pares
   	print(nimpar)

   # No. de elementos impares
   	print(npar)

   # No. total de elementos
   	print(size(vet))
	

-- ERROR:
File "XXXX", line 35
    print(nimpar)
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:32:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
	nimpar = 0
	
	#conta dos impares
	for elemento in vet:
		if(elemento % 2 == 1):
			nimpar = nimpar + 1
		# No. de elementos pares
   		print(nimpar)

   # No. de elementos impares
   		print(npar)

   # No. total de elementos
   		print(size(vet))
	

-- ERROR:
File "XXXX", line 35
    print(nimpar)
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:32:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
	nimpar = 0
	
	#conta dos impares
	for elemento in vet:
		if(elemento % 2 == 1):
			nimpar = nimpar + 1
		# No. de elementos pares
   print(nimpar)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 35
    print(nimpar)
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:33:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
	while(size(vet) > 0):
	#contador impar
		nimpar = 0
	
	#conta dos impares
		for elemento in vet:
			if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
  		print(nimpar)

   # No. de elementos impares
   	print(npar)

   # No. total de elementos
   	print(size(vet))
	

-- ERROR:
File "XXXX", line 26
    while(size(vet) > 0):
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:33:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
		nimpar = 0
	
	#conta dos impares
	for elemento in vet:
		if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
  	print(nimpar)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 31
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:34:17) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
		nimpar = 0
	
	#conta dos impares
		for elemento in vet:
			if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
  	print(nimpar)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 35
    print(nimpar)
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:34:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
		nimpar = 0
	
	#conta dos impares
		for elemento in vet:
			if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
  		print(nimpar)

   # No. de elementos impares
   	print(npar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 35
    print(nimpar)
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:34:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
		nimpar = 0
	
	#conta dos impares
		for elemento in vet:
			if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
print(nimpar)

   # No. de elementos impares
   	print(npar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 38
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:34:49) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
		nimpar = 0
	
	#conta dos impares
		for elemento in vet:
			if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
print(nimpar)

   # No. de elementos impares
print(npar)

   # No. total de elementos
   print(size(vet))
	

-- ERROR:
File "XXXX", line 41
    print(size(vet))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:34:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
while(size(vet) > 0):
	#contador impar
		nimpar = 0
	
	#conta dos impares
		for elemento in vet:
			if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
print(nimpar)

   # No. de elementos impares
print(npar)

   # No. total de elementos
print(size(vet))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:36:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	#contador impar
		nimpar = 0
	
	#conta dos impares
		for elemento in vet:
			if(elemento % 2 == 1):
				nimpar = nimpar + 1
		# No. de elementos pares
print(nimpar)

   # No. de elementos impares
print(npar)

   # No. total de elementos
print(size(vet))
	

-- ERROR:
File "XXXX", line 27
    nimpar = 0
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:04:52) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
   # No. total de elemento
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:05:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:06:17) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 15:07:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- EXECUTION TIME:
84.9702
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:11:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:14:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:33:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:33:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:33:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:33:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:33:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:33:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:34:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 15:36:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- EXECUTION TIME:
1182.61
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 15:36:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- EXECUTION TIME:
1181.51
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
8
4
4
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:

-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:14) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:17) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 15:36:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) -npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
