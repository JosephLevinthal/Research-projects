== SUBMITION (2019-03-25 14:24:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input("escreva um numero inteiro de quatro digitos:")

b = a//1000


-- EXECUTION TIME:
0.223807
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 6, in <module>
    b = a//1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:24:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input("escreva um numero inteiro de quatro digitos:")

b = a//1000


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = a//1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:25:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input("escreva um numero inteiro de quatro digitos:")

b = a//1000
print(b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = a//1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:25:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input("escreva um numero inteiro de quatro digitos:")

b = float(a//1000)
print(b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = float(a//1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:26:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input("escreva um numero inteiro de quatro digitos:")

b = a // 1000
print(b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = a // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:27:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input("escreva um numero inteiro de quatro digitos:")
a = 5236
b = a // 1000

print(b)

-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:27:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 
a = 5236
b = a // 1000

print(b)

-- ERROR:
File "XXXX", line 4
    a = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:27:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = a // 1000

print(b)

-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:28:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = a // 1000
c = a // 100
d = a // 10
e = a // 1

print(b)
print(c)
print(d)
print(e)

-- EXECUTION TIME:
0.146568
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
5
52
523
5236
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
5
52
523
5236
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:28:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = a // 1000
c = a // 100
d = a // 10
e = a // 1

print(b)
print(c)
print(d)
print(e)

-- OUTPUT:
5
52
523
5236
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:29:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = a // 1000
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- OUTPUT:
5816
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:29:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = a // 1000
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- EXECUTION TIME:
0.134603
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
5816
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
5816
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:29:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = a // 1000
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- OUTPUT:
5816
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:29:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero")
b = a // 1000
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = a // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:31:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero")
b = int(a // 1000)
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = int(a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:32:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input(int("numero"))
b = int(a // 1000)
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = input(int("numero"))
ValueError: invalid literal for int() with base 10: 'numero'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:32:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero: ")
b = int(a // 1000)
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = int(a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:34:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero: ")
b = int(a // 1000)
b1 = a%1000
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = int(a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:34:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero: ")
b = int(a // 100)
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = int(a // 100)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:36:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = int(a // 1000)
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- OUTPUT:
5816
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:36:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = int(a // 1000)
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- EXECUTION TIME:
0.160723
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
5816
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
5816
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:36:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = int(a // 1000)
c = int(a // 100)
d = int(a // 10)
e = int(a // 1)
soma = b+c+d+e
print(soma)


-- OUTPUT:
5816
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:38:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = int(a // 1000)
c = 236
d = int(c // 100)
e = 36
f = int(a // 10)
g = 6
h = int(a // 1)
soma = b + d + f + h
print(soma)


-- OUTPUT:
5766
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:38:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = int(a // 1000)
c = 236
d = int(c // 100)
e = 36
f = int(a // 10)
g = 6
h = int(a // 1)
soma = b + d + f + h
print(soma)


-- EXECUTION TIME:
0.131961
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
5766
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
5766
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:38:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = 5236
b = int(a // 1000)
c = 236
d = int(c // 100)
e = 36
f = int(a // 10)
g = 6
h = int(a // 1)
soma = b + d + f + h
print(soma)


-- OUTPUT:
5766
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:39:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero")
b = int(a // 1000)
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = int(a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:39:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero:")
b = int(a // 1000)
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = int(a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:39:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero:")
b = (a // 1000)
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = (a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:39:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero:")
b = (a // 1000)
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = (a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:53:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = input("numero:")
b = (a // 1000)
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = (a // 1000)
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:54:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("numero:"))
b = a // 1000
c = a // 100
d = a // 10
e = a // 1
soma = b+c+d+e
print(soma)


-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:59:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("numero:"))
b = a // 1000
c = a%1000
d = c // 100
e = c%100
f = e // 10
g = e%10
h = g // 1
i = g%1
soma = b+d+f+h

print(soma)


-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:00:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("numero:"))
b = a // 1000
c = a%1000
d = c // 100
e = c%100
f = e // 10
g = e%10
h = g // 1

soma = b+d+f+h

print(soma)


-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:03:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("numero:"))
b = a // 1000
c = a%1000
d = c // 100
e = c%100
f = e // 10
g = e%10
h = g // 1

soma = b+d+f+h

print(soma)


-- EXECUTION TIME:
0.165456
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
