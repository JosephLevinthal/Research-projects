== TEST (2019-03-22 18:31:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t1 = radians(float(input("Latitude de P1: ")))
d
=
R
.
arccos
(
s
e
n
(
t
1
)
.
s
e
n
(
t
2
)
+
cos
(
t
1
)
.
cos
(
t
2
)
.
cos
(
g
1
−
g
2
)
)

-- ERROR:
File "XXXX", line 7
    =
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:31:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t1 = radians(float(input("Latitude de P1: ")))
d
=
R
.
arccos
(
s
e
n
(
t
1
)
.
s
e
n
(
t
2
)
+
cos
(
t
1
)
.
cos
(
t
2
)
.
cos
(
g
1
−
g
2
)
)

-- ERROR:
File "XXXX", line 7
    =
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:34:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sen
cos

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:34:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sen,cos


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen,cos
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:34:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sen,cos
print(sen,cos)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen,cos
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:35:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sen,cos =
print(sen,cos)


-- ERROR:
File "XXXX", line 5
    sen,cos =
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:35:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sen =
print(sen,cos)


-- ERROR:
File "XXXX", line 5
    sen =
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:35:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sen
print(sen)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:35:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sin
print(sen)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(sen)
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:35:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
sin
print(sin)


-- OUTPUT:
<built-in function sin>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:56:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
R = 6371,01 km 
d= R*acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2))
print(d)


-- ERROR:
File "XXXX", line 5
    R = 6371,01 km 
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:36:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

t1=float(input("latp1:"))
g1=float(input("logp1:"))
t2=float(input("latp2:"))
g2=float(input("logp2:"))
R = 6371,01 km 
d= R*acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 10
    R = 6371,01 km 
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:37:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

t1=float(input("latp1:"))
g1=float(input("logp1:"))
t2=float(input("latp2:"))
g2=float(input("logp2:"))
R = 6371,01 
d= R*acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 10
    R = 6371,01 
              ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:37:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

t1=float(input("latp1:"))
g1=float(input("logp1:"))
t2=float(input("latp2:"))
g2=float(input("logp2:"))
R = 6371.01
d= R*acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2))

print(round(d,2))


-- OUTPUT:
2884.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:42:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

t1=radians(float(input("latp1:")))
g1=radians(float(input("logp1:")))
t2=radians(float(input("latp2:")))
g2=radians(float(input("logp2:")))
R = 6371.01
d= R*acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2))

print(round(d,2))


-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 11:43:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

t1=radians(float(input("latp1:")))
g1=radians(float(input("logp1:")))
t2=radians(float(input("latp2:")))
g2=radians(float(input("logp2:")))
R = 6371.01
d= R*acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2))

print(round(d,2))


-- EXECUTION TIME:
0.15894
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:09:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *

t1=radians(float(input("latp1:")))
g1=radians(float(input("logp1:")))
t2=radians(float(input("latp2:")))
g2=radians(float(input("logp2:")))
R = 6371.01
d= R*acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2))

print(round(d,2))


-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
