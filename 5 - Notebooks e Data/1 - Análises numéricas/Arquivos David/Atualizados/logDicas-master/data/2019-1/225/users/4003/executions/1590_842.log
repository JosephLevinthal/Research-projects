== TEST (2019-03-31 23:39:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
express達o = 3 + 1 + 4 + 1
intup("expressao:")
print("intup")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    intup("expressao:")
NameError: name 'intup' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:39:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
express達o = 3 + 1 + 4 + 1
intup("expressao:")
print("intup")
-- EXECUTION TIME:
0.127525
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 5, in <module>
    intup("expressao:")
NameError: name 'intup' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:39:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
express達o = 3 + 1 + 4 + 1
intup(9)
print("intup")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    intup(9)
NameError: name 'intup' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:39:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
express達o = 3 + 1 + 4 + 1
intup(9)
print("intup")
-- EXECUTION TIME:
0.215713
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 5, in <module>
    intup(9)
NameError: name 'intup' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:40:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
expressao = 3 + 1 + 4 + 1
intup("expressao")
print("intup")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    intup("expressao")
NameError: name 'intup' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:40:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
expressao = 3 + 1 + 4 + 1
intup("expressao")
print("intup")
-- EXECUTION TIME:
0.146139
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 5, in <module>
    intup("expressao")
NameError: name 'intup' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:40:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
expressao = 3 + 1 + 4 + 1
valor = expressao
print("valor")
-- OUTPUT:
valor
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:40:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
expressao = 3 + 1 + 4 + 1
valor = expressao
print("valor")
-- EXECUTION TIME:
0.144024
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
valor
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
valor
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:40:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
expressao = 3 + 1 + 4 + 1
valor = expressao
print("valor")
-- OUTPUT:
valor
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 23:40:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
expressao = 3 + 1 + 4 + 1
valor = expressao
print("valor")
-- OUTPUT:
valor
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 23:41:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
expressao = 3 + 1 + 4 + 1
valor = expressao
print("valor")
-- EXECUTION TIME:
0.21723
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
valor
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
valor
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:23:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
x = a + b + c + d
a = 3//1000
b = 1//100
c = 4//10
d = 1//1
print("x")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = a + b + c + d
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:23:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
x = a + b + c + d
a = 3//1000
b = 1//100
c = 4//10
d = 1//1
print("x")
-- EXECUTION TIME:
0.145343
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 4, in <module>
    x = a + b + c + d
NameError: name 'a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:27:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
a = int(input("digite o numero"))
b = a//1000
c = a%1000
d = c//100
e = c%100
f = e//10
g = e%10
h = g//1
soma = b + d + f + h
print("soma")
-- OUTPUT:
soma
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:27:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
a = int(input("digite o numero"))
b = a//1000
c = a%1000
d = c//100
e = c%100
f = e//10
g = e%10
h = g//1
soma = b + d + f + h
print("soma")
-- EXECUTION TIME:
0.205539
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
soma
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
soma
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:28:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
a = int(input("digite o numero"))
b = a//1000
c = a%1000
d = c//100
e = c%100
f = e//10
g = e%10
h = g//1
soma = b + d + f + h
print("soma")
-- OUTPUT:
soma
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:31:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
a = int(input("digite o numero"))
b = a//1000
c = a%1000
d = c//100
e = c%100
f = e//10
g = e%10
h = g//1
soma = b + d + f + h
print("soma")
-- OUTPUT:
soma
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:43:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
a = int(input("digite o numero"))
b = a//1000
c = a%1000
d = c//100
e = c%100
f = e//10
g = e%10
h = g//1
soma = b + d + f + h
print("soma")
-- OUTPUT:
soma
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:47:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100#centena
c= v//10#dezena
d= v//1#unidade
print(a+b+c+d)
-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:47:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100#centena
c= v//10#dezena
d= v//1#unidade
print(a+b+c+d)
-- EXECUTION TIME:
0.223821
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10190
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1122
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:47:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100#centena
c= v//10#dezena
d= v//1#unidade
print(a+b+c+d)
-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:48:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100#centena
c= v//10#dezena
d= v//1#unidade
print(a+b+c+d)
-- EXECUTION TIME:
0.168198
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10190
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1122
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:48:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100#centena
c= v//10#dezena
d= v//1#unidade
print(a+b+c+d)
-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:48:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100#centena
c= v//10#dezena
d= v//1#unidade
print(a+b+c+d)
-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:49:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100#centena
c= v//10#dezena
d= v//1#unidade
print(a+b+c+d)
-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:52:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
print(a)
b= v//100#centena
print(b)
c= v//10#dezena
print(c)
d= v1#unidade
print(d)
#print(a+b+c+d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    d= v1#unidade
NameError: name 'v1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:53:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
print(a)
b= v//100#centena
print(b)
c= v//10#dezena
print(c)
d= v//1#unidade
print(d)
#print(a+b+c+d)
-- OUTPUT:
9
91
917
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:54:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
print(a)
b= v//100#centena
print(b%10)
c= v//10#dezena
print(c)
d= v//1#unidade
print(d)
#print(a+b+c+d)
-- OUTPUT:
9
1
917
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:54:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
print(a)
b= v//100#centena
print(b%10)
c= v//10#dezena
print(c)
d= v//1#unidade
print(d)
#print(a+b+c+d)
-- OUTPUT:
9
1
917
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:56:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100%10#centena
c= v//10%100#dezena
d= v//1%1000#unidade
print(a+b+c+d)
-- OUTPUT:
200
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:56:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100%10#centena
c= v//10%100#dezena
d= v//1%1000#unidade
print(a+b+c+d)
-- EXECUTION TIME:
0.13498
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
200
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
12
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:56:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100%10#centena
c= v//10%10#dezena
d= v//1%10#unidade
print(a+b+c+d)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:56:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.valor =
v = int(input("digite o numero"))
a= v//1000#Milhar
b= v//100%10#centena
c= v//10%10#dezena
d= v//1%10#unidade
print(a+b+c+d)
-- EXECUTION TIME:
0.158465
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
