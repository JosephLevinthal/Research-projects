== TEST (2019-05-28 19:53:17) 
-- CODE:
n1= int(input("Digite: "))
n2= int(input("Digite: "))

for i in range(n1,n2+1):
	if (i%6==0):
		print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    n1= int(input())
ValueError: invalid literal for int() with base 10: 'ACARARAJADADAJARARACA'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-28 19:53:20) 
-- CODE:
n1= int(input("Digite: "))
n2= int(input("Digite: "))

for i in range(n1,n2+1):
	if (i%6==0):
		print(i)
-- EXECUTION TIME:
0.150432
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1756/1189/main.py", line 1, in <module>
    n1= int(input())
ValueError: invalid literal for int() with base 10: 'ACARARAJADADAJARARACA'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 19:53:35) 
-- CODE:
n1= int(input("Digite: "))
n2= int(input("Digite: "))

for i in range(n1,n2+1):
	if (i%6==0):
		print(i)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    n1= int(input())
ValueError: invalid literal for int() with base 10: 'ACARARAJADADAJARARACA'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-28 19:57:37) 
-- CODE:
n1= int(input("Digite: "))
n2= int(input("Digite: "))

for i in range(n1,n2+1):
	if (i%6==0):
		print(i)
-- EXECUTION TIME:
0.191876
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1756/1189/main.py", line 1, in <module>
    n1= int(input())
ValueError: invalid literal for int() with base 10: 'ACARARAJADADAJARARACA'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-28 23:02:12) 
-- CODE:
from numpy import *

bolsonaro = input("hcsdchsv: ").upper()
bolsonaro = bolsonaro.replace('','')

hdtv= (".")
cont= -1
haddadnao= 1
ustra= 0

while (cont >= -len(bolsonaro)):
	hdtv = hdtv + bolsonaro[cont]
	if(bolsonaro[ustra]) != (bolsonaro[cont]):
		haddadnao= 0 
	ustra = ustra + 1
	cont= cont - 1
	
print(bolsonaro)
print(haddadnao)
-- EXECUTION TIME:
0.43343
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
