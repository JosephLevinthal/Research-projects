== TEST (2019-04-22 15:11:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:22:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)
if((a +c >= b) and (b + c >= a) and (b + a >= a)) :
	print("tipo de triangulo: equilatero")
	else :
	if (a == b) or (b == a) or (c == a) :
		print("tipo de triangulo : isosceles")
	else :
	if ( a != b) or (b =! a) or (c =! a) :
		print("tipo de triangulo : escaleno")
-- ERROR:
File "XXXX", line 10
    else :
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:23:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)
if((a +c >= b) and (b + c >= a) and (b + a >= a)) :
	print("tipo de triangulo: equilatero")
	else :
		if (a == b) or (b == a) or (c == a) :
			print("tipo de triangulo : isosceles")
	else :
		if ( a != b) or (b =! a) or (c =! a) :
			print("tipo de triangulo : escaleno")
-- ERROR:
File "XXXX", line 10
    else :
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:31:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (c == a)) :
		print("Tipo de triangulo : equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
			print("Tipo de triangulo : isosceles")
		else :
			print("Tipo de triangulo : escaleno")
			
else :
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo : escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (c == a)) :
		print("Tipo de triangulo : equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
			print("Tipo de triangulo : isosceles")
		else :
			print("Tipo de triangulo : escaleno")
			
else :
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.171598
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo : escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo : escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:32:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo : equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
			print("Tipo de triangulo : isosceles")
		else :
			print("Tipo de triangulo : escaleno")
			
else :
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.146523
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo : escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo : escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:33:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo : equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
		print("Tipo de triangulo : isosceles")
		else :
			print("Tipo de triangulo : escaleno")
			
else :
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.141639
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    print("Tipo de triangulo : isosceles")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:33:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo : equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
		print("Tipo de triangulo : isosceles")
		else :
			print("Tipo de triangulo : escaleno")
			
else :
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo : isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:33:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo: equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
			print("Tipo de triangulo: isosceles")
		else :
			print("Tipo de triangulo: escaleno")
			
else :
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.161182
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:33:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo: equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
			print("Tipo de triangulo: isosceles")
		else :
			print("Tipo de triangulo: escaleno")
			
else :
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:35:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo: equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
			print("Tipo de triangulo: isosceles")
		else :
			print("Tipo de triangulo: escaleno")
			
else :
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.237678
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:35:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo: equilatero")
	else :
		if (( a == b) or (b == a) or (c == a)) :
			print("Tipo de triangulo: isosceles")
		else :
			print("Tipo de triangulo: escaleno")
			
else :
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:36:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < c + a ) and (c < a + b)) :
	
	if ((a == b) and (b == c) and (a == c)) :
		print("Tipo de triangulo: equilatero")
	else :
		if (( a == b) or (b == c) or (c == a)) :
			print("Tipo de triangulo: isosceles")
		else :
			print("Tipo de triangulo: escaleno")
			
else :
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.159992
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
