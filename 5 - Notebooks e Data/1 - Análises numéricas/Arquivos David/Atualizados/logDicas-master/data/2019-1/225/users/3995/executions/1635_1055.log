== TEST (2019-04-07 23:21:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:",m/s))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:", m))
g=9.8
from math import*
R=((V0**2)*(radians(sen(2*a))))/g
if():
-- ERROR:
File "XXXX", line 11
    
         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:31:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:",m/s))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:", m))
g=9.8
from math import*
R=((V0**2)*(radians(sen(2*a))))/g
h=abs(D-R)
if((R-h)==D==(R+h)):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    V0=float(input("velocidade inicial:",m/s))
NameError: name 'm' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:31:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sen(2*a))))/g
h=abs(D-R)
if((R-h)==D==(R+h)):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R=((V0**2)*(radians(sen(2*a))))/g
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:31:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if((R-h)==D==(R+h)):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:32:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if((R-h)==D==(R+h)):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.232846
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:38:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:38:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.134852
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:41:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h=0.1):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 11
    if(h=0.1):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:41:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h==0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.181555
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:41:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h==0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.172961
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:41:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h==0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:42:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h==0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.166349
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:42:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.132313
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:42:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:42:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:42:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
g=9.8
from math import*
R=((V0**2)*(radians(sin(2*a))))/g
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.178768
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:44:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.117322
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:45:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:46:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:46:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:46:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:49:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<=0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.139084
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:49:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<=0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:49:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<=0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.164295
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:01:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h>=0.1):
	print("nao")
else:
	print("sim")
-- EXECUTION TIME:
0.128294
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:01:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h>=0.1):
	print("nao")
else:
	print("sim")
-- EXECUTION TIME:
0.111129
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:31:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<=0.1):
	print("nao")
else:
	print("sim")
-- EXECUTION TIME:
0.231508
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:31:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
a=float(input("angulo de lancamento:"))
D=float(input("distancia:"))
from math import*
R=((V0**2)*(radians(sin(2*a))))/9.8
h=abs(D-R)
if(h<=0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.209263
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:33:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
V0=float(input("velocidade inicial:"))
from math import*
a=radians(float(input("angulo de lancamento:")))
D=float(input("distancia:"))
R=((V0**2)*(sin(2*a)))/9.8
h=abs(D-R)
if(h<=0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.134199
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
