== TEST (2019-04-01 18:38:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3,14
var = area,raio:real
	r = input("raio da cincurferencia:")
	area = 3,14 * (r * r)
	a = ("area da circunferencia:", (area))
-- ERROR:
File "XXXX", line 5
    var = area,raio:real
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:38:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3,14
var = area,raio:real
	r = input("raio da cincurferencia:")
	area = 3,14 * (r * r)
	a = ("area da circunferencia:", (area))
-- ERROR:
File "XXXX", line 5
    var = area,raio:real
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:39:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3,14
var = area,raio:real
	r = input("raio da cincurferencia:")
	area = 3,14 * (r * r)
	a = ("area da circunferencia:", (area))
	print(round(x, 3))
-- ERROR:
File "XXXX", line 5
    var = area,raio:real
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:42:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3,14
var = area,raio:real
	r = float(input("raio da cincurferencia:"))
	area = pi * (r * r)
	a = ("area da circunferencia:", (area))
	print(round(r, 3))
-- ERROR:
File "XXXX", line 5
    var = area,raio:real
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:42:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3,14
	r = float(input("raio da cincurferencia:"))
	area = pi * (r * r)
	a = ("area da circunferencia:", (area))
	print(round(r, 3))
-- ERROR:
File "XXXX", line 5
    r = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:43:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
	r = float(input("raio da cincurferencia:"))
	area = 3,14 * (r * r)
	a = ("area da circunferencia:", (area))
	print(round(r, 3))
-- ERROR:
File "XXXX", line 4
    r = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:43:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
	r = float(input(" raio da cincurferencia: "))
	area = 3,14 * (r * r)
	a = ("area da circunferencia:", (area))
	print(round(r, 3))
-- ERROR:
File "XXXX", line 4
    r = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:44:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
	r = input(float(" raio da cincurferencia: "))
	area = 3,14 * (r * r)
	a = ("area da circunferencia:", (area))
	print(round(r, 3))
-- ERROR:
File "XXXX", line 4
    r = input(float(" raio da cincurferencia: "))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:48:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3,14
def main()
	r = input("raio da cincurferencia:")
	
	
-- ERROR:
File "XXXX", line 5
    def main()
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:53:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input(“Digite a área do Circulo em metros:  ”)
a =  pi * (r * r)
print ‘A área do circulo é’,a,’m²’
	
	
-- ERROR:
File "XXXX", line 5
    r  = input(“Digite a área do Circulo em metros:  ”)
                     ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:54:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite a área do Circulo em metros: ")
a =  pi * (r * r)
print("A área do circulo é ',a,'m²'")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a =  pi * (r * r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:54:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite a área do Circulo em metros: ")
a =  pi * (r * r)
print("A área do circulo é ',a,'m²'")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a =  pi * (r * r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:54:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite a área do Circulo em metros: ")
a =  pi * (r * r)
print("A área do circulo é 'a,'m²'")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a =  pi * (r * r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:55:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite a área do Circulo em metros: ")
a =  pi * (r * r)
print("A área do circulo é: ")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a =  pi * (r * r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:59:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite o valor do raio: ")
print "area da esfera e: %.3f" %((4*pi)*(raio**2))
print "o volume da esfera e: %.3f" % (((4/3)*pi)*(raio**3))

-- ERROR:
File "XXXX", line 6
    print "area da esfera e: %.3f" %((4*pi)*(raio**2))
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:59:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite o valor do raio: ")
print ("area da esfera e: %.3f" %((4*pi)*(raio**2)))
print ("o volume da esfera e: %.3f" % (((4/3)*pi)*(raio**3)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print ("area da esfera e: %.3f" %((4*pi)*(raio**2)))
NameError: name 'raio' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 18:59:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite o valor do raio: ")
print ("area da esfera e: %.3f" %((4*pi)*(r**2)))
print ("o volume da esfera e: %.3f" % (((4/3)*pi)*(r**3)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print ("area da esfera e: %.3f" %((4*pi)*(r**2)))
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:00:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite o valor do raio: ")
print(int("area da esfera e: %.3f" %((4*pi)*(r**2))))
print(int("o volume da esfera e: %.3f" % (((4/3)*pi)*(r**3))))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(int("area da esfera e: %.3f" %((4*pi)*(r**2))))
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:01:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite o valor do raio: ")
print(math("area da esfera e: %.3f" %((4*pi)*(r**2))))
print(math("o volume da esfera e: %.3f" % (((4/3)*pi)*(r**3))))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(math("area da esfera e: %.3f" %((4*pi)*(r**2))))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:01:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14                       
r  = input("Digite o valor do raio: ")
print(("area da esfera e: %.3f" %((4*pi)*(r**2))))
print(("o volume da esfera e: %.3f" % (((4/3)*pi)*(r**3))))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(("area da esfera e: %.3f" %((4*pi)*(r**2))))
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:02:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14 
r = int
r  = input("Digite o valor do raio: ")
print("area da esfera e: %.3f" %((4*pi)*(r**2))))
print("o volume da esfera e: %.3f" % (((4/3)*pi)*(r**3))))

-- ERROR:
File "XXXX", line 7
    print("area da esfera e: %.3f" %((4*pi)*(r**2))))
                                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:02:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14 
r = int
r  = input("Digite o valor do raio: ")
print("area da esfera e: %.3f" %((4*pi)*(r**2)))
print("o volume da esfera e: %.3f" % (((4/3)*pi)*(r**3)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("area da esfera e: %.3f" %((4*pi)*(r**2)))
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:04:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input("valor do raio: "))
from math import*
r  = input("Digite o valor do raio: ")
print("area da esfera e: %.3f" %((4*pi)*(r**2)))
print("o volume da esfera e: %.3f" %(((4/3)*pi)*(r**3)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r  = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:04:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x=float(input("valor do raio: "))
print("area da esfera e: %.3f" %((4*pi)*(x**2)))
print("o volume da esfera e: %.3f" %(((4/3)*pi)*(x**3)))

-- OUTPUT:
area da esfera e: 254.469
o volume da esfera e: 381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:04:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x=float(input("valor do raio: "))
print("area da esfera e: %.3f" %((4*pi)*(x**2)))
print("o volume da esfera e: %.3f" %(((4/3)*pi)*(x**3)))

-- EXECUTION TIME:
0.181065
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
area da esfera e: 254.469
o volume da esfera e: 381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
area da esfera e: 1913.552
o volume da esfera e: 7871.076
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:05:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x=float(input("valor do raio: "))
print("area da esfera e: %.3f" %((4*pi)*(x**2)))
print("o volume da esfera e: %.3f" %(((4/3)*pi)*(x**3)))

-- OUTPUT:
area da esfera e: 254.469
o volume da esfera e: 381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:05:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x=float(input("valor do raio: "))
print("area da esfera e: " %((4*pi)*(x**2)))
print("o volume da esfera e: " %(((4/3)*pi)*(x**3)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("area da esfera e: " %((4*pi)*(x**2)))
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 19:07:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x=float(input("valor do raio: "))
a = x**2*pi
v = pi*(x**3)*4/3
print(round(a, 3))
print(round(v, 3))

-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 19:07:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
x=float(input("valor do raio: "))
a = x**2*pi
v = pi*(x**3)*4/3
print(round(a, 3))
print(round(v, 3))

-- EXECUTION TIME:
0.147719
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
