== TEST (2019-03-25 15:27:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
print(min(x,y,z))
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:27:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
print(min(x,y,z))
-- EXECUTION TIME:
0.184243
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:27:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
print(min(x,y,z))
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:28:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
print(min(x,y,z))
print(max(x,y,z))

-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:28:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
print(min(x,y,z))
print(max(x,y,z))

-- EXECUTION TIME:
0.154994
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:29:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
print(min(x,y,z))
print(max(x,y,z))

-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))

print(min(x,y,z))

print(max(x,y,z))

-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:34:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
print(min(x,y,z))
s = (x+y+z)
v = int(max+min-s)
print(max(x,y,z))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    v = int(max+min-s)
TypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:38:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
u = (x+y+z-min-max)
print(u)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    u = (x+y+z-min-max)
TypeError: unsupported operand type(s) for -: 'int' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:40:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
u = (x+y+z-a-b)
a = min(x,y,z)
b = max(x,y,z)
print(u)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    u = (x+y+z-a-b)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:40:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
u = (x+y+z+a-b)
a = min(x,y,z)
b = max(x,y,z)
print(a)
print(u)
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    u = (x+y+z+a-b)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:41:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
u = (x+y+z+a-b)
b = min(x,y,z)
a = max(x,y,z)
print(a)
print(u)
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    u = (x+y+z+a-b)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:42:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
u = (x+y+z-a-b)
b = min(x,y,z)
a = max(x,y,z)
print(a)
print(u)
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    u = (x+y+z-a-b)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:43:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
u = int(input(x+y+z-a-b))
b = min(x,y,z)
a = max(x,y,z)
print(a)
print(u)
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    u = int(input(x+y+z-a-b))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:43:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
u = int(x+y+z-a-b)

b = min(x,y,z)
a = max(x,y,z)
print(a)
print(u)
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    u = int(x+y+z-a-b)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:43:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
b = min(x,y,z)
a = max(x,y,z)
u = int(x+y+z-a-b)
print(a)
print(u)
print(b)
-- OUTPUT:
10
0
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:44:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
b = min(x,y,z)
a = max(x,y,z)
u = (x+y+z-a-b)
print(a)
print(u)
print(b)
-- OUTPUT:
10
0
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:44:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
b = min(x,y,z)
a = max(x,y,z)
u = (x+y+z-a-b)
print(a)
print(u)
print(b)
-- EXECUTION TIME:
0.169906
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
0
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:44:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
b = min(x,y,z)
a = max(x,y,z)
u = (x+y+z-a-b)
print(a)
print(u)
print(b)
-- OUTPUT:
10
0
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:45:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
b = min(x,y,z)
a = max(x,y,z)
u = (x+y+z-a-b)
print(b)
print(u)
print(a)
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:45:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("n1"))
y = int(input("n2"))
z = int(input("n3"))
b = min(x,y,z)
a = max(x,y,z)
u = (x+y+z-a-b)
print(b)
print(u)
print(a)
-- EXECUTION TIME:
0.216982
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
