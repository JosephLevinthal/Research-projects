== TEST (2019-04-28 23:02:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if a<= x <= b :
	print("x pertence ao intervalo a,b")
elif b<= a :
	print("Entradas a e b invalidas")
else:
	print("x nao pertence ao intervalo a,b")

-- OUTPUT:
x nao pertence ao intervalo a,b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:02:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if a<= x <= b :
	print("x pertence ao intervalo a,b")
elif b<= a :
	print("Entradas a e b invalidas")
else:
	print("x nao pertence ao intervalo a,b")

-- OUTPUT:
x nao pertence ao intervalo a,b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:07:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if a<= x <= b :
	print( x "pertence ao intervalo" a "," b)
elif b<= a :
	print("Entradas" a e b "invalidas")
else:
	print(x, "nao pertence ao intervalo", a "," b)

-- ERROR:
File "XXXX", line 9
    print( x "pertence ao intervalo" a "," b)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:08:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if (a<=x)  (b>=x):
	print( x,"pertence ao intervalo" a,",",b)
elif b<= a :
	print("Entradas",a,e b,"invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- ERROR:
File "XXXX", line 9
    print( x,"pertence ao intervalo" a,",",b)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:09:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) (b>=x)):
	print( x,"pertence ao intervalo" a,",",b)
elif b<= a :
	print("Entradas",a,e b,"invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- ERROR:
File "XXXX", line 9
    print( x,"pertence ao intervalo" a,",",b)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:09:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) (b>=x)):
	print( x,"pertence ao intervalo",a,",",b)
elif b<= a :
	print("Entradas",a,e b,"invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- ERROR:
File "XXXX", line 11
    print("Entradas",a,e b,"invalidas")
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:10:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) (b>=x)):
	print( x,"pertence ao intervalo",a,",",b)
elif b<= a :
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    if ((a<=x) (b>=x)):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:11:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif b<= a :
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:12:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif b<= a :
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 23:12:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif b<= a :
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- EXECUTION TIME:
0.179304
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:12:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif (<= a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- ERROR:
File "XXXX", line 10
    elif (<= a):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:13:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:13:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:13:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 23:13:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print( x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- EXECUTION TIME:
0.149549
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:14:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:14:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:14:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:14:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:14:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 23:14:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- EXECUTION TIME:
0.114328
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Digite um nmr: Digite um nmr: Digite um nmr: 4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Digite um nmr: Digite um nmr: Digite um nmr: 3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Digite um nmr: Digite um nmr: Digite um nmr: Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:14:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:14:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x,"pertence ao intervalo",a,",",b)
elif (b<=a):
	print("Entradas",a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 23:15:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x, "pertence ao intervalo",a, ",", b)
elif (b<=a):
	print("Entradas", a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 23:15:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print(x, "pertence ao intervalo",a, ",", b)
elif (b<=a):
	print("Entradas", a,"e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)

-- EXECUTION TIME:
0.157097
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:28:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if (a<=x) and (x<=b) :
	print (x, "pertence ao intervalo" a, ",",b)
elif (b<= a) :
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a "," b)

-- ERROR:
File "XXXX", line 9
    print (x, "pertence ao intervalo" a, ",",b)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:29:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if (a<=x) and (x<=b) :
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<= a) :
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a "," b)

-- ERROR:
File "XXXX", line 13
    print(x, "nao pertence ao intervalo", a "," b)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:29:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if (a<=x) and (x<=b) :
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<= a) :
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 00:30:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if (a<=x) and (x<=b) :
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<= a) :
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.189639
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:31:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:31:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:31:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:31:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 00:32:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo", a, ",",b)
elif (b<=a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.185999
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:37:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 00:37:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.121022
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:38:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 00:39:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.13799
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 11:56:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 11:57:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<x) and (x<b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 11:57:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<x) and (x<b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.159938
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 11:57:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))
x = float(input("Digite um nmr: "))

if ((a<x) and (x<b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.144907
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Digite um nmr: Digite um nmr: Digite um nmr: Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 11:58:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite um nmr: "))
a = float(input("Digite um nmr: "))
b = float(input("Digite um nmr: "))

if ((a<=x) and (x<=b)):
	print (x, "pertence ao intervalo",a, ",",b)
elif (b<=a):
	print("Entradas", a, "e",b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a, ",", b)

-- EXECUTION TIME:
0.158092
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
