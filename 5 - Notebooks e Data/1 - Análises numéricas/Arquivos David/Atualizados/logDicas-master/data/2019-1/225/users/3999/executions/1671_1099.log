== TEST (2019-04-23 23:36:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,B,C)


-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:37:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,B,C)


-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:39:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",",",A,",",",",B,",",C)


-- OUTPUT:
Entradas: , 2.0 , , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:40:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",",",B,",",C)



-- OUTPUT:
Entradas: 2.0 , , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:40:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",","B,",",C)



-- ERROR:
File "XXXX", line 6
    print("Entradas:",A,",",","B,",",C)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:40:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",",",B,",",C)



-- OUTPUT:
Entradas: 2.0 , , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:41:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:43:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A=B=C):
	print("equilatero")



-- ERROR:
File "XXXX", line 7
    if(A=B=C):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:44:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	print("equilatero")



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:50:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	print("equilatero")
elif(A>=B+C)or(B>=A+C)or(C>=A+B):
	print("invalido")
elif(A==B)or(C==B):
	print("isosceles")
else:
	print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 23:50:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	print("equilatero")
elif(A>=B+C)or(B>=A+C)or(C>=A+B):
	print("invalido")
elif(A==B)or(C==B):
	print("isosceles")
else:
	print("escaleno")
-- EXECUTION TIME:
0.152568
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 23:52:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	x="equilatero"
elif(A>=B+C)or(B>=A+C)or(C>=A+B):
	x="invalido"
elif(A==B)or(C==B):
	x="isosceles"
else:
	x="escaleno"
print(x)	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 23:52:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	x="equilatero"
elif(A>=B+C)or(B>=A+C)or(C>=A+B):
	x="invalido"
elif(A==B)or(C==B):
	x="isosceles"
else:
	x="escaleno"
print(x)	
-- EXECUTION TIME:
0.158337
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 23:52:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	x="equilatero"
elif(A>=B+C)or(B>=A+C)or(C>=A+B):
	x="invalido"
elif(A==B)or(C==B):
	x="isosceles"
else:
	x="escaleno"
print(x)	
-- EXECUTION TIME:
0.138892
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 23:52:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	X="equilatero"
elif(A>=B+C)or(B>=A+C)or(C>=A+B):
	X="invalido"
elif(A==B)or(C==B):
	X="isosceles"
else:
	X="escaleno"
print(X)	
-- EXECUTION TIME:
0.170963
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 23:55:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("lado A :"))
B=float(input("Lado B: "))
C=float(input("Lado C: "))
print("Entradas:",A,",",B,",",C)
if(A==B==C):
	X="equilatero"
elif(A>=B+C)or(B>=A+C)or(C>=A+B):
	X="invalido"
elif(A==B)or(C==B):
	X="isosceles"
else:
	X="escaleno"
print("Tipo de triangulo: ",X)	
-- EXECUTION TIME:
0.187607
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
