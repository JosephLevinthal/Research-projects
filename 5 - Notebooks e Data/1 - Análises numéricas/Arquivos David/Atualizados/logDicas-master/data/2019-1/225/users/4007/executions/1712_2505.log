== TEST (2019-05-12 19:04:23) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:05:23) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:07:39) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n and i < x):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:08:08) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while ( n < x):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:09:28) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:10:46) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3
   soma = i + 1

termos = soma
print(termos)
-- ERROR:
File "XXXX", line 8
    soma = i + 1
               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:10:57) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3
   i = i + 1

termos = soma
print(termos)
-- ERROR:
File "XXXX", line 8
    i = i + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:11:42) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3
  	 i = i + 1

termos = soma
print(termos)
-- ERROR:
File "XXXX", line 8
    i = i + 1
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:12:30) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3
	
  	 

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:12:44) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (2 * i + 1)**3
	i = i + 1
	
  	 

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:14:54) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (factorial(i))
	i = i + 1
	
  	 

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:15:47) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:16:30) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-x)**(2 * i + 1)/ (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(termos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:18:32) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
while (i < n):
	soma = soma + (-x)**(2 * i + 1)/ (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:23:10) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0
sinal = -1
while (i < n):
	soma = soma + (x *sinal)**(2 * i + 1)/ (factorial(2*i +1))
   sinal = - sinal
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
File "XXXX", line 9
    sinal = - sinal
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:24:57) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (factorial(2*i +1))
   i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
File "XXXX", line 9
    i = i + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:25:12) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i < n):
	soma = soma + (-1)**(2 * i + 1)/ (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:25:51) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i < n):
	soma = soma + ((-x)**(2 * i + 1))/ (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:26:25) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i < n):
	soma = soma + x - ((-x)**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:27:06) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i < n):
	soma = soma + (x - ((-x)**(2 * i + 1))) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 19:27:44) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i < n):
	soma = soma + (x - (x)**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:34:16) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i <  n):
	soma = soma + ((-x)**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:34:30) 
-- CODE:
from math import*
n = int(input("q. termos: "))
x = eval(input("angulo: "))
soma = 0
i = 0

while (i <  n):
	soma = soma + ((-x)**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:34:47) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + ((-x)**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
-2.3012952459
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:37:15) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + ((-x)**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
-2.3012952459
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:38:16) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + ((x)**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
2.3012952459
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:38:54) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + (x**2 * i + 1) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
1.6290539259
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 12:39:51) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + ((x**2 * i + 1) / (factorial(2*i +1)))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
1.6290539259
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:11:35) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + (- x)**(2 * i + 1) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
-2.3012952459
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:12:50) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + (- pi)**(2 * i + 1) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
-11.5408798894
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:13:30) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0

while (i <  n):
	soma = soma + (- x**(2 * i + 1)) / (factorial(2*i +1))
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
-2.3012952459
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:19:04) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0
sinal = + x
while (i <  n):
	soma = soma + sinal**(2 * i + 1) / factorial(2*i +1)
	sinal = - sinal
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 13:19:21) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0
sinal = + x
while (i <  n):
	soma = soma + sinal**(2 * i + 1) / factorial(2*i +1)
	sinal = - sinal
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- EXECUTION TIME:
0.175509
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:21:24) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0
sinal = + x
while (i <  n):
	soma = soma + sinal**(2 * i + 1) / factorial(2*i +1)
	sinal = - sinal
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:21:38) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0
sinal = + x
while (i <  n):
	soma = soma + sinal**(2 * i + 1) / factorial(2*i +1)
	sinal = - sinal
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 14:51:09) 
-- CODE:
from math import*
x = eval(input("angulo: "))
n = int(input("q. termos: "))

soma = 0
i = 0
sinal = + x
while (i <  n):
	soma = soma + sinal**(2 * i + 1) / factorial(2*i +1)
	sinal = - sinal
	i = i + 1
	
  	 

termos = soma
print(round(termos, 10))
-- EXECUTION TIME:
0.186035
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
