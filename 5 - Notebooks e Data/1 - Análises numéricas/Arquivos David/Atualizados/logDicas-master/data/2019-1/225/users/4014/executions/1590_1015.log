== TEST (2019-03-25 15:10:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("ordem crescente"))
var2=min("a,b,c")
var3=max("a,b,c")
print(var1)
print(var2)
-- OUTPUT:
10
,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:11:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("ordem crescente"))
var2=min("a,b,c")
var3=max("a,b,c")
print(var1)
print(var2)
-- OUTPUT:
10
,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("ordem crescente"))
var2=min("a,b,c")
var3=max("a,b,c")
print(var1)
print(var2)
-- OUTPUT:
10
,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("ordem crescente"))
var2=min("a,b,c")
var3=max("a,b,c")
print(var1)
print(var2)
-- OUTPUT:
10
,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("ordem crescente"))
var2=min("a,b,c")
var3=max("a,b,c")
print(var1)
print(var2)
-- OUTPUT:
10
,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:15:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("ordem crescente"))
a = 6
b = 2
c = 4
var2=min("a,b,c")
var3=max("a,b,c")
print(var1)
print(var2)
-- OUTPUT:
10
,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:19:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("a"))
b=int(input("b"))
c=int(input("c"))
var1=min("a,b,c")
var2=max("a,b,c")
var3=a+b+c-(var1+var2)
print(var1)
print(var2)
print(var3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    var3=a+b+c-(var1+var2)
TypeError: unsupported operand type(s) for -: 'int' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:20:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("a"))
b=int(input("b"))
c=int(input("c"))
var1=min("a,b,c")
var2=max("a,b,c")
var3=a+b+c-var1-var2
print(var1)
print(var2)
print(var3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    var3=a+b+c-var1-var2
TypeError: unsupported operand type(s) for -: 'int' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:21:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("a"))
b=int(input("b"))
c=int(input("c"))
var1=min("a,b,c")
var2=max("a,b,c")
var3=(a+b+c)-(var1+var2)
print(var1)
print(var2)
print(var3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    var3=(a+b+c)-(var1+var2)
TypeError: unsupported operand type(s) for -: 'int' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:23:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("a"))
b=int(input("b"))
c=int(input("c"))
var1=min(a,b,c)
var2=max(a,b,c)
z=var1+var2
var3=a+b+c-z
print(var1)
print(var2)
print(var3)
-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:23:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("a"))
b=int(input("b"))
c=int(input("c"))
var1=min(a,b,c)
var2=max(a,b,c)
z=var1+var2
var3=a+b+c-z
print(var1)
print(var2)
print(var3)
-- EXECUTION TIME:
0.156292
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:24:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("a"))
b=int(input("b"))
c=int(input("c"))
var1=min(a,b,c)
var2=max(a,b,c)
z=var1+var2
var3=a+b+c-z
print(var1)
print(var3)
print(var2)
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:24:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("a"))
b=int(input("b"))
c=int(input("c"))
var1=min(a,b,c)
var2=max(a,b,c)
z=var1+var2
var3=a+b+c-z
print(var1)
print(var3)
print(var2)
-- EXECUTION TIME:
0.180687
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
