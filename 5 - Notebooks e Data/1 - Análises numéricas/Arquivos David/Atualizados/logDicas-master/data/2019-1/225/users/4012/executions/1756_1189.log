== TEST (2019-05-21 17:30:28) 
-- CODE:
polindromo = input("Sequencia polindromo: ").lower()

polindromo = polindromo.replace(" " , "")

normal = frase[0:numero_de_letras]

inverso = frase[numero_de_letras::-1]

if normal == inverso :
    print ('Essa frase é um polindromo')
else:
    print ('Essa frase não é um polidromo')
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    normal = frase[0:numero_de_letras]
NameError: name 'frase' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-21 17:31:31) 
-- CODE:
polindromo = input("Sequencia polindromo: ").lower()

polindromo = polindromo.replace(" " , "")

normal = frase[0:numero_de_letras]

inverso = frase[numero_de_letras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    normal = frase[0:numero_de_letras]
NameError: name 'frase' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-21 17:32:16) 
-- CODE:
normal = input("Sequencia polindromo: ").lower()

normal = normal.replace(" " , "")

normal = frase[0:numero_de_letras]

inverso = frase[numero_de_letras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    normal = frase[0:numero_de_letras]
NameError: name 'frase' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-21 17:33:16) 
-- CODE:
normal = input("Sequencia polindromo: ").lower()
normal = frase[0:numero_de_letras]
inverso = frase[numero_de_letras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    normal = frase[0:numero_de_letras]
NameError: name 'frase' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-21 18:46:12) 
-- CODE:
from numpy import *
normal = input("Sequencia polindromo: ").lower()
normal = frase[0:numero_de_letras]
inverso = frase[numero_de_letras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:12:26) 
-- CODE:
from numpy import *
frase = input("Sequencia polindromo: ")
frase = replace(frase)

cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] =! frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
File "XXXX", line 8
    if frase[cont] =! frase[cont2]:
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:12:38) 
-- CODE:
from numpy import *
frase = input("Sequencia polindromo: ")
frase = replace(frase)

cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] =! frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
File "XXXX", line 8
    if frase[cont] =! frase[cont2]:
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:13:01) 
-- CODE:
from numpy import *
frase = input("Sequencia polindromo: ")
frase = replace(frase)

print(frase.lower())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:13:33) 
-- CODE:
from numpy import *
frase = input("Sequencia polindromo: ")
frase = frase.replace()

print(frase.lower())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:14:28) 
-- CODE:
from numpy import *
frase = input("Sequencia polindromo: ")
frase = frase.replace(frase)

print(frase.lower())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:14:56) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace()

print(frase.lower())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:15:50) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.lower())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:16:32) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:16:44) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-26 18:16:48) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- EXECUTION TIME:
0.475632
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:16:51) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while cont < size(frase)/2 or y == "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:17:49) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while != "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
File "XXXX", line 8
    while != "erro":
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:17:58) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while y != "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:18:20) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
y = "certo"
while y != "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:18:30) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
y = "certo"
while y != "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-26 18:18:35) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
y = "certo"
while y != "erro":
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- EXECUTION TIME:
0.596864
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1756/1189/main.py", line 10, in <module>
    if frase[cont] != frase[cont2]:
IndexError: string index out of range

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-26 18:18:47) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while cont < size(frase)/2:
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-26 18:18:55) 
-- CODE:
from numpy import *
fra = input("Sequencia polindromo: ")
frase = fra.replace(" ","")

print(frase.upper())
cont = 0
cont2 = -1
while cont < size(frase)/2:
	if frase[cont] != frase[cont2]:
		y = "erro"
	else:
		y = "certo"
	cont = cont + 1
	cont2 = cont2 - 1
if y == "erro":
	print(0)
elif y == "certo":
	print(1)
-- EXECUTION TIME:
0.556447
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
