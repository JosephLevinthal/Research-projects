== TEST (2019-04-12 23:42:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
p = (x,y)
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:45:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
reta = (2 * x) + y 
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:49:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
reta = (2*x) + y
else (reta = 3):
	msg = "ponto pertence a reta"
if:
	msg = "ponto nao pertence a reta"
	
print(msg.lower())
-- ERROR:
File "XXXX", line 7
    else (reta = 3):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:50:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
reta = (2*x) + y
else (reta == 3):
	msg = "ponto pertence a reta"
if:
	msg = "ponto nao pertence a reta"
	
print(msg.lower())
-- ERROR:
File "XXXX", line 7
    else (reta == 3):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:51:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
reta = (2*x) + y
if (reta = 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg.lower())
-- ERROR:
File "XXXX", line 7
    if (reta = 3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:51:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
reta = (2*x) + y
if (reta == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg.lower())
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:51:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
reta = (2*x) + y
if (reta == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg.lower())
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 23:51:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite o valor de x: "))
y = float(input("digite o valor de y: "))
reta = (2*x) + y
if (reta == 3):
	msg = "ponto pertence a reta"
else:
	msg = "ponto nao pertence a reta"
	
print(msg.lower())
-- EXECUTION TIME:
0.135463
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
