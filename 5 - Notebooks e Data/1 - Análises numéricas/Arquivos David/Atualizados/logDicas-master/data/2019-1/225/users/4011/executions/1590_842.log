== TEST (2019-03-25 15:21:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))
b = a//1000%1000
c = a//100%100
d = a//10%10
e = a//1%1
print(b + c + d + e)
-- OUTPUT:
107.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:31:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))
b = a//1000%1000
c = a//100%100
d = a//10%10
e = a//1%1
print(b + c + d + e)
-- EXECUTION TIME:
0.135104
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
107.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
12.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:31:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))
b = a//1000%1000
c = a//100%100
d = a//10%10
e = a//1%1
print(b + c + d + e)
-- OUTPUT:
107.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:31:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))
b = a//1000%1000
c = a//100%100
d = a//10%10
e = a//1%1
print(b + c + d + e)
-- EXECUTION TIME:
0.20367
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
107.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
12.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:33:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000 * 1000
c = a//100 * 100
d = a//10 * 10
e = a//1 * 1

print(b + c + d + e)
-- OUTPUT:
36443.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:33:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000 * 1000
c = a//100 * 100
d = a//10 * 10
e = a//1 * 1

print(b + c + d + e)
-- EXECUTION TIME:
0.230377
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
36443.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4020.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:33:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000 * a%1000
c = a//100 * a%100
d = a//10 * a%10
e = a//1 * a%1

print(b + c + d + e)
-- OUTPUT:
601.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:33:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000 * a%1000
c = a//100 * a%100
d = a//10 * a%10
e = a//1 * a%1

print(b + c + d + e)
-- EXECUTION TIME:
0.202207
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
601.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
10.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:34:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000
c = a//100 
d = a//10 
e = a//1 

print(b + c + d + e)
-- OUTPUT:
10190.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:34:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000
c = a//100 
d = a//10 
e = a//1 

print(b + c + d + e)
-- EXECUTION TIME:
0.148597
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10190.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
Numero1122.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:34:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000
c = a//100 
d = a//10 
e = a//1 

print(b + c + d + e)
-- OUTPUT:
10190.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:34:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a//1000
c = a//100 
d = a//10 
e = a//1 

print(b + c + d + e)
-- EXECUTION TIME:
0.157512
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
10190.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1122.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:35:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a%1000
c = a%100 
d = a%10 
e = a%1 

print(b + c + d + e)
-- OUTPUT:
249.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:36:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))

b = a%1000
c = a%100 
d = a%10 
e = a%1 

print(b + c + d + e)
-- EXECUTION TIME:
0.157935
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
249.0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
20.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:38:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("Numero"))
a = 3141
b = a//1000
x = a%1000
c = x//100 



print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(b + c + d + e)
NameError: name 'd' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:38:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 



print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(b + c + d + e)
NameError: name 'd' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:38:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(b + c + d + e)
NameError: name 'd' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:39:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 

print(a)
-- OUTPUT:
3141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:39:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 

print(x)
-- OUTPUT:
141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:39:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 

print(c)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:40:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 

print(b)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:41:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 

print(x)
-- OUTPUT:
141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:41:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 

print(c)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:42:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
d = x//10

print(d)
-- OUTPUT:
14
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:42:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
d = x%10

print(d)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:43:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
d = x%100

print(d)
-- OUTPUT:
41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:43:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
d = x%

print(c)
-- ERROR:
File "XXXX", line 10
    d = x%
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:43:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 

print(c)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:46:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x//100

print(c)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:46:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x//100

print(y)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:47:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100

print(y)
-- OUTPUT:
41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:47:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
print(d)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:48:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10

print(y)
-- OUTPUT:
41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:48:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10

print(c)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:48:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10

print(b)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:49:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10

print(a)
-- OUTPUT:
3141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:49:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10

print(d)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:49:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
print(z)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(c)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(d)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(e)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//10
print(e)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//10
print(e)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//10
print(e)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:51:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(e)
-- OUTPUT:
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:52:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//4
print(e)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:52:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//4
print(b + c + d + e)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:52:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//4
print(b + c + d + e)
-- EXECUTION TIME:
0.117062
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:52:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//4
print(b + c + d + e)
-- EXECUTION TIME:
0.196422
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:52:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//4
print(b + c + d + e)
-- EXECUTION TIME:
0.136717
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:53:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:54:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

a = 3141
b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:54:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = a//1000
x = a%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    b = a//1000
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:55:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- EXECUTION TIME:
0.116014
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:55:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- EXECUTION TIME:
0.168487
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = p//1000
x = p%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    b = p//1000
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P//1000
x = P%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
24
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:55:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P//1000
x = P%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- EXECUTION TIME:
0.168235
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
24
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P//1000
x = P%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
24
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P//1000
x = P%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
24
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:55:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P//1000
x = P%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
24
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:56:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P//1000
x = P%1000
c = x//100 
y = x%100
d = y//10
z = d%10
e = z//1
print(b + c + d + e)
-- OUTPUT:
24
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:56:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P // 1000
x = P % 1000
c = x // 100 
y = x % 100
d = y // 10
z = y % 10
e = z//1
print(b + c + d + e)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:56:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

P = int(input("numero"))

b = P // 1000
x = P % 1000
c = x // 100 
y = x % 100
d = y // 10
z = y % 10
e = z//1
print(b + c + d + e)
-- EXECUTION TIME:
0.150896
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
