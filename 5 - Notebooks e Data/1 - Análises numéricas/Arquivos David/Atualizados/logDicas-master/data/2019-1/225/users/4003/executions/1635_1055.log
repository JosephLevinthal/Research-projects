== TEST (2019-04-14 22:54:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(d==r3);
print(1)
elif(d+0.001==r3):
	print(1)
	elif(d-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 12
    if(d==r3);
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:55:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(d==r3);
print(1)
elif(d+0.001==r3):
	print(1)
	elif(d-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 12
    if(d==r3);
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 22:55:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(d==r3);
print(1)
elif(d+0.001==r3):
	print(1)
	elif(d-0.01==r3):
		print(1)
else:
	print(0)

-- EXECUTION TIME:
0.154749
-- ERROR:
  File "/home/codebench/codes/1635/1055/main.py", line 12
    if(d==r3);
             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:56:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3);
print(1)
elif(D+0.001==r3):
	print(1)
	elif(D-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 12
    if(D==r3);
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:56:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3);
print(1)
elif(D+0.001==r3):
	print(1)
	elif(D-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 12
    if(D==r3);
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:56:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3);
print(1)
elif(D+0.001==r3):
	print(1)
	elif(D-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 12
    if(D==r3);
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:56:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if("D==r3");
print(1)
elif(D+0.001==r3):
	print(1)
	elif(D-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 12
    if("D==r3");
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:56:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if("D==r3");
print(1)
elif(D+0.001==r3):
	print(1)
	elif(D-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 12
    if("D==r3");
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:57:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=int(input("angulo(em graus):"))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3):
print(1)
elif(D+0.001==r3):
	print(1)
	elif(D-0.01==r3):
		print(1)
else:
	print(0)

-- ERROR:
File "XXXX", line 13
    print(1)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:29:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=radians(int(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3):
print(1)


-- ERROR:
File "XXXX", line 13
    print(1)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:29:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=radians(int(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3):
print(1)

-- ERROR:
File "XXXX", line 13
    print(1)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:29:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=radians(int(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3):


-- ERROR:
File "XXXX", line 14
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:29:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=radians(int(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3):


-- EXECUTION TIME:
0.18061
-- ERROR:
  File "/home/codebench/codes/1635/1055/main.py", line 14
    
    ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:29:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vi=float(input("velocidade inicial:"))
angulo=radians(int(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8
r1=vi**2
angulo2=pi*angulo/180
r2=sin(2*angulo)
r3=round((r1*r2)/g,2)
if(D==r3):
-- ERROR:
File "XXXX", line 13
    
              ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:38:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
angulo=radians(float(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8

r=(vi**2*sin(2*angulo))/g

if(abs(D-r)>=0.1):
	print("sim")

else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:38:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
angulo=radians(float(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8

r=(vi**2*sin(2*angulo))/g

if(abs(D-r)>=0.1):
	print("sim")

else:
	print("nao")
-- EXECUTION TIME:
0.205955
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:38:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
angulo=radians(float(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8

r=(vi**2)*sin(2*angulo)/g

if(abs(D-r)>=0.1):
	print("sim")

else:
	print("nao")
-- EXECUTION TIME:
0.140539
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:39:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
angulo=radians(float(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8

r=(vi**2)*sin(2*angulo)/g

if(abs(D-r)>=0.1):
	print("sim")

else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:39:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
angulo=radians(float(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8

r=(vi**2)*sin(2*angulo)/g

if(abs(D-r)>=0.1):
	print("sim")

else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:39:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
angulo=radians(float(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8

r=(vi**2)*sin(2*angulo)/g

if(abs(D-r)<=0.1):
	print("sim")

else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:39:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
angulo=radians(float(input("angulo(em graus):")))
D=float(input("Distancia:"))
g=9.8

r=(vi**2)*sin(2*angulo)/g

if(abs(D-r)<=0.1):
	print("sim")

else:
	print("nao")
-- EXECUTION TIME:
0.216016
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
