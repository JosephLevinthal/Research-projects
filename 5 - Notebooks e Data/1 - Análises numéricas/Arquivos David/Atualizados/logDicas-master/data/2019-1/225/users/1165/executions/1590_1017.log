== TEST (2019-04-01 13:41:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de p1: ")))
g1 = radians(float(input("Longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) * cos(t2) * cos(g1 - g2))
 print(round(d, 2))
-- ERROR:
File "XXXX", line 13
    print(round(d, 2))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:41:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de p1: ")))
g1 = radians(float(input("Longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- OUTPUT:
99989.55
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:42:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de p1: ")))
g1 = radians(float(input("Longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- EXECUTION TIME:
0.206839
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
99989.55
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:42:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de p1: ")))
g1 = radians(float(input("Longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- OUTPUT:
99989.55
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:42:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de p1: ")))
g1 = radians(float(input("Longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- EXECUTION TIME:
0.225689
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
99989.55
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:43:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("latitude de p1: ")))
g1 = radians(float(input("longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- EXECUTION TIME:
0.159522
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
504.86
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:43:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("latitude de p1: ")))
g1 = radians(float(input("longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- OUTPUT:
504.86
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:44:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("latitude de p1: ")))
g1 = radians(float(input("longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- OUTPUT:
504.86
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:44:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("latitude de p1: ")))
g1 = radians(float(input("longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))
r = 63771.01

d = r * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- EXECUTION TIME:
0.150021
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
504.86
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:44:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("latitude de p1: ")))
g1 = radians(float(input("longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))

r = 63771.01

d = r * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- EXECUTION TIME:
0.166152
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
504.86
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:44:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("latitude de p1: ")))
g1 = radians(float(input("longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))

r = 63771.01

d = r * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- OUTPUT:
504.86
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:44:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("latitude de p1: ")))
g1 = radians(float(input("longitude de p1: ")))
t2 = radians(float(input("latitude de p2: ")))
g2 = radians(float(input("longitute de p2: ")))

r = 6371.01

d = r * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(d, 2))
-- EXECUTION TIME:
0.154376
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
