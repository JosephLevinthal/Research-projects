== TEST (2019-03-25 15:07:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo."
print(texto.upper)

-- OUTPUT:
<built-in method upper of str object at 0x7f5992daf730>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:08:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = spring(":")
print(texto.upper())

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    texto = spring(":")
NameError: name 'spring' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:09:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = string(":")
print(texto.upper())

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    texto = string(":")
NameError: name 'string' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:11:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python"
print(texto.upper())

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:11:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python"
print(texto.upper())

-- EXECUTION TIME:
0.137714
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
GUIDO VAN ROSSUM CRIOU O PYTHON
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:11:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python"
print(texto.upper())

-- EXECUTION TIME:
0.128554
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
GUIDO VAN ROSSUM CRIOU O PYTHON
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python."
print(texto.upper())

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:12:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python."
print(texto.upper())

-- EXECUTION TIME:
0.173843
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
GUIDO VAN ROSSUM CRIOU O PYTHON.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:12:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python."
print(texto.upper())

-- EXECUTION TIME:
0.140458
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
GUIDO VAN ROSSUM CRIOU O PYTHON.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:12:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python."
print(texto.upper())

-- EXECUTION TIME:
0.133154
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
GUIDO VAN ROSSUM CRIOU O PYTHON.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:13:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = "Guido van Rossum criou o Python."
print(texto.upper())

-- OUTPUT:
GUIDO VAN ROSSUM CRIOU O PYTHON.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:14:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = input(":")
print(texto.upper())

-- OUTPUT:
PRIMEIRO_CASO_DE_TESTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:15:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = input(":")
print(texto.upper())

-- OUTPUT:
PRIMEIRO_CASO_DE_TESTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:15:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
texto = input(":")
print(texto.upper())

-- EXECUTION TIME:
0.148499
-- TEST CASE 1:
---- input:
Primeiro_caso_de_teste
---- correct output:
PRIMEIRO_CASO_DE_TESTE
---- user output:
PRIMEIRO_CASO_DE_TESTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
