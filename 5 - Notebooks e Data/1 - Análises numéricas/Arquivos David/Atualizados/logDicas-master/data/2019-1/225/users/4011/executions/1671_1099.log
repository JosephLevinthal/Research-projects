== TEST (2019-04-22 02:31:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:" a"," b"," c)
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a"," b"," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 02:31:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:" a"," b"," c)
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a"," b"," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 02:32:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:" a"," b  "," c)
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a"," b  "," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 02:32:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:" a "," b  "," c)
-- ERROR:
File "XXXX", line 8
    print("Entradas:" a "," b  "," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 02:33:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas: " a "," b  "," c)
-- EXECUTION TIME:
0.114599
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 8
    print("Entradas: " a "," b  "," c)
                       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 02:33:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas: " a "," b  "," c)
-- ERROR:
File "XXXX", line 8
    print("Entradas: " a "," b  "," c)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 02:34:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado a: "))
b = float(input("Lado b: "))
c = float(input("Lado c: "))

print("Entradas:", a ",", b ",", c)
-- ERROR:
File "XXXX", line 8
    print("Entradas:", a ",", b ",", c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 02:35:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 02:35:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 03:02:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C):
		print("Tipo de triangulo: equilatero")
	else:
		 if( A == B ) or ( B == C ) or ( A == C):
		 	print("Tipo detriangulo: isosceles")
		 else:
		 	print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- ERROR:
File "XXXX", line 11
    if (( A == B ) and ( B == C):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 03:02:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		 if( A == B ) or ( B == C ) or ( A == C):
		 	print("Tipo detriangulo: isosceles")
		 else:
		 	print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo detriangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 03:03:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		 if( A == B ) or ( B == C ) or ( A == C):
		 	print("Tipo detriangulo: isosceles")
			else:
		 	print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- EXECUTION TIME:
0.119486
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 16
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 03:03:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		 if( A == B ) or ( B == C ) or ( A == C):
		 	print("Tipo detriangulo: isosceles")
			else:
		 	print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- ERROR:
File "XXXX", line 16
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 03:03:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		 if( A == B ) or ( B == C ) or ( A == C):
		 	print("Tipo detriangulo: isosceles")
		else:
		 	print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:24:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		 if( A == B ) or ( B == C ) or ( A == C):
		 	print("Tipo detriangulo: isosceles")
		else:
		 	print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- ERROR:
File "XXXX", line 16
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:25:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		if( A == B ) or ( B == C ) or ( A == C):
			print("Tipo detriangulo: isosceles")
		else:
			print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- EXECUTION TIME:
0.138191
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo detriangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:25:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		if( A == B ) or ( B == C ) or ( A == C):
			print("Tipo detriangulo: isosceles")
		else:
			print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo detriangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:25:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		if( A == B ) or ( B == C ) or ( A == C):
			print("Tipo detriangulo: isosceles")
		else:
			print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo detriangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:28:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A < B + C) or (B < A + C) or (C < A + B) ):
	if (( A == B ) and ( B == C)):
		print("Tipo de triangulo: equilatero")
	else:
		if( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:39:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) or (B < A + C) or (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:39:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) or (B < A + C) or (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:47:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:48:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- EXECUTION TIME:
0.12704
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:28:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if( A == B ) or ( B == C ) or ( A == C):
				print("Tipo de triangulo: isosceles")
			else:
				print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:29:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- EXECUTION TIME:
0.149744
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:37:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:37:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:37:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:38:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:38:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:42:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- EXECUTION TIME:
0.141805
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:38:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A= float(input("Lado a: "))
B= float(input("Lado b: "))
C= float(input("Lado c: "))

print("Entradas:", A, ",", B, ",", C)

if( (A > 0) or (B > 0) or (C > 0) ):
	if( (A < B + C) and (B < A + C) and (C < A + B) ):
		if (( A == B ) and ( B == C)):
			print("Tipo de triangulo: equilatero")
		elif( A == B ) or ( B == C ) or ( A == C):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido" )
else:
	print("Tipo de triangulo: invalido" )
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
