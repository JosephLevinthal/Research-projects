== TEST (2019-05-14 23:20:49) 
-- CODE:
nA=int(input("numero de habitantes da cidade A:"))
nB=int(input("numero de habitantes da cidade B:"))
cpA= float(input("crescimento populacional ds cidade A:"))
cpB= float(input("crescimento populacional ds cidade B:"))
t=0
xA=nA
xB=nB
while(xA<=xB) and (cpA>cpB):
	xA=xA+(xA*(cpA/100))
	xB=xB+(xB*(cpB/100))
	t=t+1
	print(t)
-- OUTPUT:
1
2
3
4
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 23:20:49) 
-- CODE:
nA=int(input("numero de habitantes da cidade A:"))
nB=int(input("numero de habitantes da cidade B:"))
cpA= float(input("crescimento populacional ds cidade A:"))
cpB= float(input("crescimento populacional ds cidade B:"))
t=0
xA=nA
xB=nB
while(xA<=xB) and (cpA>cpB):
	xA=xA+(xA*(cpA/100))
	xB=xB+(xB*(cpB/100))
	t=t+1
	print(t)
-- EXECUTION TIME:
0.142943
-- TEST CASE 1:
---- input:
250150
580000
35.5
10.5
---- correct output:
5
---- user output:
1
2
3
4
5
-- TEST CASE 2:
---- input:
180250
1200000
10.25
5.7
---- correct output:
45
---- user output:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
-- TEST CASE 3:
---- input:
1000000
1650000
12.75
3.2
---- correct output:
6
---- user output:
1
2
3
4
5
6
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 23:21:19) 
-- CODE:
nA=int(input("numero de habitantes da cidade A:"))
nB=int(input("numero de habitantes da cidade B:"))
cpA= float(input("crescimento populacional ds cidade A:"))
cpB= float(input("crescimento populacional ds cidade B:"))
t=0
xA=nA
xB=nB
while(xA<=xB) and (cpA>cpB):
	xA=xA+(xA*(cpA/100))
	xB=xB+(xB*(cpB/100))
	t=t+1
	print(t)
-- OUTPUT:
1
2
3
4
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 23:21:48) 
-- CODE:
nA=int(input("numero de habitantes da cidade A:"))
nB=int(input("numero de habitantes da cidade B:"))
cpA= float(input("crescimento populacional ds cidade A:"))
cpB= float(input("crescimento populacional ds cidade B:"))
t=0
xA=nA
xB=nB
while(xA<=xB) and (cpA>cpB):
	xA=xA+(xA*(cpA/100))
	xB=xB+(xB*(cpB/100))
	t=t+1
	print(t)
-- EXECUTION TIME:
0.200089
-- TEST CASE 1:
---- input:
250150
580000
35.5
10.5
---- correct output:
5
---- user output:
1
2
3
4
5
-- TEST CASE 2:
---- input:
180250
1200000
10.25
5.7
---- correct output:
45
---- user output:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
-- TEST CASE 3:
---- input:
1000000
1650000
12.75
3.2
---- correct output:
6
---- user output:
1
2
3
4
5
6
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 23:21:59) 
-- CODE:
nA=int(input("numero de habitantes da cidade A:"))
nB=int(input("numero de habitantes da cidade B:"))
cpA= float(input("crescimento populacional ds cidade A:"))
cpB= float(input("crescimento populacional ds cidade B:"))
t=0
xA=nA
xB=nB
while(xA<=xB) and (cpA>cpB):
	xA=xA+(xA*(cpA/100))
	xB=xB+(xB*(cpB/100))
	t=t+1
print(t)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 23:22:05) 
-- CODE:
nA=int(input("numero de habitantes da cidade A:"))
nB=int(input("numero de habitantes da cidade B:"))
cpA= float(input("crescimento populacional ds cidade A:"))
cpB= float(input("crescimento populacional ds cidade B:"))
t=0
xA=nA
xB=nB
while(xA<=xB) and (cpA>cpB):
	xA=xA+(xA*(cpA/100))
	xB=xB+(xB*(cpB/100))
	t=t+1
print(t)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 23:22:30) 
-- CODE:
nA=int(input("numero de habitantes da cidade A:"))
nB=int(input("numero de habitantes da cidade B:"))
cpA= float(input("crescimento populacional ds cidade A:"))
cpB= float(input("crescimento populacional ds cidade B:"))
t=0
xA=nA
xB=nB
while(xA<=xB) and (cpA>cpB):
	xA=xA+(xA*(cpA/100))
	xB=xB+(xB*(cpB/100))
	t=t+1
print(t)
-- EXECUTION TIME:
0.176271
-- TEST CASE 1:
---- input:
250150
580000
35.5
10.5
---- correct output:
5
---- user output:
5
-- TEST CASE 2:
---- input:
180250
1200000
10.25
5.7
---- correct output:
45
---- user output:
45
-- TEST CASE 3:
---- input:
1000000
1650000
12.75
3.2
---- correct output:
6
---- user output:
6
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
