== TEST (2019-03-20 15:05:21) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(?????, *8)
-- ERROR:
File "XXXX", line 11
    print(?????, *8)
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:05:24) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(?????, *8)
-- EXECUTION TIME:
0.173899
-- ERROR:
  File "/home/codebench/codes/1590/2894/main.py", line 11
    print(?????, *8)
          ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:05:34) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(total
		, *8)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    , *8)
TypeError: print() argument after * must be an iterable, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:05:34) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(total
		, *8)
-- EXECUTION TIME:
0.119246
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2894/main.py", line 12, in <module>
    , *8)
TypeError: print() argument after * must be a sequence, not int

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:05:42) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(total, *8)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(total, *8)
TypeError: print() argument after * must be an iterable, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:05:47) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(total, *8)
-- EXECUTION TIME:
0.20578
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2894/main.py", line 11, in <module>
    print(total, *8)
TypeError: print() argument after * must be a sequence, not int

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:07:31) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(93, *8)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(93, *8)
TypeError: print() argument after * must be an iterable, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:07:33) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print(93, *8)
-- EXECUTION TIME:
0.157405
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2894/main.py", line 11, in <module>
    print(93, *8)
TypeError: print() argument after * must be a sequence, not int

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:12:58) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print((int(abs(max(93, *8)))))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print((int(abs(max(93, *8)))))
TypeError: max() argument after * must be an iterable, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:13:04) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print((int(abs(max(93, *8)))))
-- EXECUTION TIME:
0.207234
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2894/main.py", line 11, in <module>
    print((int(abs(max(93, *8)))))
TypeError: max() argument after * must be a sequence, not int

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:14:22) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print((int(93, *8)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print((int(93, *8)))
TypeError: type object argument after * must be an iterable, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:14:25) 
-- CODE:
# jogos = 8
# j = 8

# Leitura das entradas e conversao para float:
var = float(input(48))

# Calculo do valor a ser pago, incluindo o frete:
total = 93

# Impressao do valor total:
print((int(93, *8)))
-- EXECUTION TIME:
0.189415
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2894/main.py", line 11, in <module>
    print((int(93, *8)))
TypeError: type object argument after * must be a sequence, not int

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:25:36) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("Qual valor unitario do jogo?"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print("total")
-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:25:39) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("Qual valor unitario do jogo?"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print("total")
-- EXECUTION TIME:
0.114537
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
total
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
total
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
total
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:25:39) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("Qual valor unitario do jogo?"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print("total")
-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:26:02) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("100"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print("total")
-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:26:05) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("100"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print("total")
-- EXECUTION TIME:
0.185702
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
total
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
total
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
total
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:26:21) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("Qual valor unitario do jogo?"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print("total")
-- OUTPUT:
total
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:27:05) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("Qual valor unitario do jogo?"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print(total)
-- OUTPUT:
54.84
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:27:20) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("Qual valor unitario do jogo?"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print(total)
-- OUTPUT:
54.84
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:27:22) 
-- CODE:
# Este código é apenas um ESBOÇO da solução.
# Modifique-o para atender as especificações do enunciado.

# Leitura das entradas e conversao para float:
valor = float(input("Qual valor unitario do jogo?"))

# Calculo do valor a ser pago, incluindo o frete:
total = (valor * 8) + 45

# Impressao do valor total:
print(total)
-- EXECUTION TIME:
0.145923
-- TEST CASE 1:
---- input:
1.23
---- correct output:
54.84
---- user output:
54.84
-- TEST CASE 2:
---- input:
356
---- correct output:
2893.0
---- user output:
2893.0
-- TEST CASE 3:
---- input:
123987.0
---- correct output:
991941.0
---- user output:
991941.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
