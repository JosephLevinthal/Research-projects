== SUBMITION (2019-05-13 15:11:42) 
-- CODE:
from math import*

x= int(input("k:"))
k= int(input("k:"))
c=0
e=0

while(k>c):
	e=e+ (1/factorial(c))
	c=c+1
	
print(round(e,10))
-- EXECUTION TIME:
0.152434
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1712/2505/main.py", line 3, in <module>
    x= int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:05:55) 
-- CODE:
from math import*

x= eval(input("k:"))
k= int(input("k:"))
c=0
d=1
e=0
aux=1

while(k>c):
	e=e+(aux*((x**d)/factorial(d)))
	if(aux==1):
		aux=-1
	else:
		aux=1
		
	c=c+1
	d=d+1
	
	
print(round(e,10))
-- EXECUTION TIME:
0.175839
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
0.8090829925
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-3.7041304823
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.6902829652
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:06:00) 
-- CODE:
from math import*

x= eval(input("k:"))
k= int(input("k:"))
c=0
d=1
e=0
aux=1

while(k>c):
	e=e+(aux*((x**d)/factorial(d)))
	if(aux==1):
		aux=-1
	else:
		aux=1
		
	c=c+1
	d=d+1
	
	
print(round(e,10))
-- OUTPUT:
0.8090829925
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:06:22) 
-- CODE:
from math import*

x= eval(input("x:"))
k= int(input("k:"))
c=0
d=1
e=0
aux=1

while(k>c):
	e=e+(aux*((x**d)/factorial(d)))
	if(aux==1):
		aux=-1
	else:
		aux=1
		
	c=c+1
	d=d+1
	
	
print(round(e,10))
-- OUTPUT:
0.8090829925
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:07:27) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e=e+(aux*((x**d)/factorial(d)))
	if(aux == 1):
		aux = -1
	else:
		aux=1
		
	c=c+1
	d=d+1
	
	
print(round(e,10))
-- EXECUTION TIME:
0.167564
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
0.8090829925
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-3.7041304823
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.6902829652
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:07:30) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e=e+(aux*((x**d)/factorial(d)))
	if(aux == 1):
		aux = -1
	else:
		aux=1
		
	c=c+1
	d=d+1
	
	
print(round(e,10))
-- OUTPUT:
0.8090829925
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:09:13) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
		aux = 1
		
	   c=c+1
	   d=d+1
	
	
print(round(e,10))
-- ERROR:
File "XXXX", line 18
    c=c+1
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:09:29) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
		aux = 1
		
c=c+1
d=d+1
	
	
print(round(e,10))
-- ERROR:
File "XXXX", line 18
    c=c+1
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:10:26) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1
		
   c=c+1
   d=d+1
	
print(round(e,10))
-- EXECUTION TIME:
0.330149
-- ERROR:
  File "/home/codebench/codes/1712/2505/main.py", line 18
    c=c+1
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:10:28) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1
		
   c=c+1
   d=d+1
	
print(round(e,10))
-- ERROR:
File "XXXX", line 18
    c=c+1
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:10:57) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	
      c = c+1
      d = d+1
	
print(round(e,10))
-- ERROR:
File "XXXX", line 17
    c = c+1
          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:11:09) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	
   c = c+1
   d = d+1
	
print(round(e,10))
-- ERROR:
File "XXXX", line 17
    c = c+1
          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:11:18) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	
c = c+1
d = d+1
	
print(round(e,10))
-- ERROR:
File "XXXX", line 17
    c = c+1
          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:11:30) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	
c = c+1
d = d+1
	
print(round(e,10))
-- ERROR:
File "XXXX", line 17
    c = c+1
          ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:12:25) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	aux = 1	
   c = c + 1
   d = d + 1
	
print(round(e,10))
-- ERROR:
File "XXXX", line 16
    aux = 1	
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:12:46) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
   c = c + 1
   d = d + 1
	
print(round(e,10))
-- EXECUTION TIME:
0.484718
-- ERROR:
  File "/home/codebench/codes/1712/2505/main.py", line 18
    c = c + 1
            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:12:49) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
   c = c + 1
   d = d + 1
	
print(round(e,10))
-- ERROR:
File "XXXX", line 18
    c = c + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:14:22) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
   c = c + 1
   d = d + 2
	
print(round(e,10))
-- EXECUTION TIME:
0.405946
-- ERROR:
  File "/home/codebench/codes/1712/2505/main.py", line 18
    c = c + 1
            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:14:45) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
c = c + 1
d = d + 2
	
print(round(e,10))
-- ERROR:
File "XXXX", line 18
    c = c + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:15:09) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
       c = c + 1
         d = d + 2
	
print(round(e,10))
-- EXECUTION TIME:
1.15631
-- ERROR:
  File "/home/codebench/codes/1712/2505/main.py", line 18
    c = c + 1
            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:15:10) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
       c = c + 1
         d = d + 2
	
print(round(e,10))
-- ERROR:
File "XXXX", line 18
    c = c + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:15:43) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
   c = c + 1
   d = d + 2
	
print(round(e,10))
-- ERROR:
File "XXXX", line 18
    c = c + 1
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:16:23) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
	c = c+1
	d = d+2
	
print(round(e,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:16:33) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
	c = c+1
	d = d+2
	
print(round(e,10))
-- EXECUTION TIME:
0.39646
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:26:13) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	
c = c+1
d = d+1
	
print(round(e,10))
-- EXECUTION TIME:
890.095
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:

-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:26:13) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
c = c + 1
d = d + 2
	
print(round(e,10))
-- EXECUTION TIME:
691.25
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:

-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:26:13) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
c = c + 1
d = d + 2
	
print(round(e,10))
-- EXECUTION TIME:
702.602
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:

-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:26:13) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
		aux = 1
		
c=c+1
d=d+1
	
	
print(round(e,10))
-- EXECUTION TIME:
993.476
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:

-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:

-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:50:31) 
-- CODE:
from math import*

x = eval(input("x:"))
k = int(input("k:"))

c = 0
d = 1
e = 0
aux = 1

while(k>c):
	e = e + (aux*((x**d) / factorial(d)))
	if(aux == 1):
		aux = -1
	else:
	   aux = 1	 
		
	c = c+1
	d = d+2
	
print(round(e,10))
-- EXECUTION TIME:
0.156205
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
