== TEST (2019-04-22 14:16:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:07:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print = "escaleno"
	else:
		if ((a != b) or(b != c)):
			print = "isosceles"
		else:
			print = "equilatero"
else:
	print = "Tipo de triangulo invalido"

	
 

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:07:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print = "escaleno"
	else:
		if ((a != b) or(b != c)):
			print = "isosceles"
		else:
			print = "equilatero"
else:
	print = "Tipo de triangulo invalido"

	
 

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:09:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print = "escaleno"
	else:
		if ((a != b) or(b != c)):
			print = "isosceles"
		else:
			print = "equilatero"
else:
	print = "Tipo de triangulo invalido"

	
 

-- EXECUTION TIME:
0.190749
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:15:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print = "escaleno"
	else:
		if ((a != b) or(b != c)):
			print = "isosceles"
		else:
			print = "equilatero"
else:
	print = "Tipo de triangulo invalido"

	
 

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:21:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print "escaleno"
	else:
		if ((a != b) or(b != c)):
			print "isosceles"
		else:
			print  "equilatero"
else:
	print "Tipo de triangulo invalido"

	
 

-- EXECUTION TIME:
0.113986
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    print "escaleno"
                   ^
SyntaxError: Missing parentheses in call to 'print'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:22:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
	else:
		if ((a != b) or(b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo invalido")

	
 

-- EXECUTION TIME:
0.142066
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:22:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: ")
print(a)
print(b)
print(c)			 
			 

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
	else:
		if ((a != b) or(b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo invalido")

	
 

-- ERROR:
File "XXXX", line 6
    print(a)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:23:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print(a)
print(b)
print(c)			 
			 

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
	else:
		if ((a != b) or(b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo invalido")

	
 

-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:23:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print(a)
print(b)
print(c)			 
			 

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
	else:
		if ((a != b) or(b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo invalido")

	
 

-- OUTPUT:
2.0
4.0
4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:23:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print(a)
print(b)
print(c)			 
			 

if((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
	else:
		if ((a != b) or(b != c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo invalido")

	
 

-- EXECUTION TIME:
0.177131
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
2.0
4.0
4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
3.3
4.4
5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1.0
2.0
7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a"))
b = float(input("lado b"))
c = float(input("lado c"))
print("Entradas:", A, ",", B, ",", C)

		
	
 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Entradas:", A, ",", B, ",", C)
NameError: name 'A' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a"))
B = float(input("lado b"))
C = float(input("lado c"))
print("Entradas:", A, ",", B, ",", C)

		
	
 

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a"))
B = float(input("lado b"))
C = float(input("lado c"))
print("Entradas:", A, ",", B, ",", C)
if ((A >= B + C) or(B >= C + A) or(C >= A + B)):
	print("Tipo de triangulo: invalido")
	else:
		if ((A == B) and (B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if ((A == B) or(B == C) or(C == A)):
				print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
		
	


		
	
 

-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a"))
B = float(input("lado b"))
C = float(input("lado c"))
print("Entradas:", A, ",", B, ",", C)
if ((A >= B + C) or(B >= C + A) or(C >= A + B)):
	print("Tipo de triangulo: invalido")
else:
		if ((A == B) and (B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if ((A == B) or(B == C) or(C == A)):
				print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
		
	


		
	
 

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a"))
B = float(input("lado b"))
C = float(input("lado c"))
print("Entradas:", A, ",", B, ",", C)
if ((A >= B + C) or(B >= C + A) or(C >= A + B)):
	print("Tipo de triangulo: invalido")
else:
		if ((A == B) and (B == C)):
			print("Tipo de triangulo: equilatero")
		else:
			if ((A == B) or(B == C) or(C == A)):
				print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
		
	


		
	
 

-- EXECUTION TIME:
0.215258
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
