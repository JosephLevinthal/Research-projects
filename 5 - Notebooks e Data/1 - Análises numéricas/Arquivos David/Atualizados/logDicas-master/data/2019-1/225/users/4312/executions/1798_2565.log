== TEST (2019-06-10 13:51:07) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and x >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(x[i] < 75):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:39:45) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	fr = (x[i]/c_h) * 100
	if(media[i] >= 5 and fr >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(fr < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:40:16) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	fr = (x[i]/c_h) * 100
	if(media[i] >= 5 and fr >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(fr < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.03438
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:40:22) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	fr = (x[i]/c_h) * 100
	if(media[i] >= 5 and fr >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(fr < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:40:41) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	fr = (x[i]/c_h) * 100
	if(media[i] >= 5 and fr >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(fr < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.967529
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:41:42) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:02) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.70691
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:42:02) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:03) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.22559
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:04) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.77419
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:05) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.42886
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:05) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.07558
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:05) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.49191
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.23823
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and (x[i]/c_h) * 100 >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif((x[i]/c_h) * 100 < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.63213
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:42:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:42:49) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.09052
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:51:53) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:52:16) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.0848
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:56:16) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) =>75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(media[i] <= 5 and ((x[i]/c_h)*100) =>75):
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:56:35) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:01) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.918297
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:25) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) == 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.90128
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:29) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) == 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.24001
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:30) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) == 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.74072
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:32) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) == 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.66072
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) == 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.94868
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:34) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) == 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.37019
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:45) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.60539
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:49) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.26943
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:50) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.55214
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:52) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.72581
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:53) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.80685
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:57:54) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.71681
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:04) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.21278
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.40551
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:10) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.23774
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.33254
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:13) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.42473
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:14) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.38337
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:24) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.52327
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:28) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.15002
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:29) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.91722
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:32) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.09901
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.27804
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:34) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.20646
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:38) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.58257
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:40) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.87033
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:40) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.74529
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:41) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.90574
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:58:41) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(media[i] <= 5 and ((x[i]/c_h)*100) >= 75):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.03262
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:59:18) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:59:30) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:59:46) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.980725
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:02:15) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.37457
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:02:17) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.06006
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:02:18) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.3989
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:02:18) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.99999
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:02:18) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.61671
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:02:18) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.38286
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:02:20) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.91435
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:16:54) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:17:11) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.14165
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:35) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:35) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:35) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 11
    elif(((x[i]/c_h)*100) => 75 and media[i] <= 5):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:17:42) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) >= 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:17:55) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) >= 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.2482
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:21:50) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:04) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.22878
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:10) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.45237
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.33664
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:13) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.64715
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:14) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.69229
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:14) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
9.66235
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:19) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.27867
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:20) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.52837
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:22:20) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.22515
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:33:59) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.73188
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:00) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.02288
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:01) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.96675
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:02) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.7513
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:03) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.74834
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:04) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.81271
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:11) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.45625
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.44396
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.28457
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.69976
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:34:29) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.19919
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:38:00) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:38:24) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.07787
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:40:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:40:39) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((x[i]/c_h) * 100) >= 75):
		vet[0] = vet[0] + 1
	elif(((x[i]/c_h)*100) == 75 and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((x[i]/c_h) * 100) < 75 ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:56:30) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:56:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.98394
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:56:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.1634
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:57:00) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.88052
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:57:01) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.81883
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:57:01) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.63207
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[3 0 0]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:57:13) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.15118
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:57:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:57:35) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.90905
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:57:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.14276
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:57:51) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.1881
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:58:34) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:53) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.68865
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:54) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.08833
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:55) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.89121
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:57) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.83635
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:57) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.74606
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:57) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.75187
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[3 0 0]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:59:01) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.20256
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:59:01) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.1858
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:59:41) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.949856
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:04:06) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.18506
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:04:10) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.45914
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:04:11) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.74764
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[3 0 0]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:04:11) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.57445
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[3 0 0]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:15:50) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:15:53) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.13
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:15:59) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:16:02) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.70645
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:16:04) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.3561
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:16:04) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.58754
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [3 0 0]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:16:07) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.86398
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:16:07) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:16:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:16:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:16:28) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.07331
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 08:17:43) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((75*c_h)/100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((75*c_h)/100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((75*c_h) / 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.944729
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[3 0 0]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 08:19:30) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((vet[i]/size(x))*100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((vet[i]/size(x))*100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((vet[i]/size(x))* 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.11988
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[0 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[0 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[0 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 08:19:34) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((vet[i]/size(x))*100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((vet[i]/size(x))*100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((vet[i]/size(x))* 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.40824
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[0 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [0 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 08:19:35) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((vet[i]/size(x))*100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((vet[i]/size(x))*100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((vet[i]/size(x))* 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.43387
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [0 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [0 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 08:19:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((vet[i]/size(x))*100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((vet[i]/size(x))*100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((vet[i]/size(x))* 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.47697
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [0 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [0 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 08:19:53) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((vet[i]/size(x))*100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((vet[i]/size(x))*100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((vet[i]/size(x))* 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 08:20:37) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5 and ((vet[i]/size(x))*100) >= x[i]):
		vet[0] = vet[0] + 1
	elif(((vet[i]/size(x))*100) == x[i] and media[i] <= 5):
		vet[1] = vet[1] + 1
	elif(((vet[i]/size(x))* 100) < x[i] ):
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:47:50) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5 and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5 and x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[3] = vet[3] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 9
    if(media[i] >= 5 and (x[i] >= 0.75*c_h):
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:48:14) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5 and x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[3] = vet[3] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:48:20) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5 and x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[3] = vet[3] + 1
print(vet)
		
-- EXECUTION TIME:
0.946268
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 14, in <module>
    vet[3] = vet[3] + 1
IndexError: index 3 is out of bounds for axis 0 with size 3

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:48:24) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5 and x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[3] = vet[3] + 1
print(vet)
		
-- EXECUTION TIME:
0.907914
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 14, in <module>
    vet[3] = vet[3] + 1
IndexError: index 3 is out of bounds for axis 0 with size 3

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:48:32) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[3] = vet[3] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:48:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[3] = vet[3] + 1
print(vet)
		
-- EXECUTION TIME:
1.16697
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 14, in <module>
    vet[3] = vet[3] + 1
IndexError: index 3 is out of bounds for axis 0 with size 3

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:48:45) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:48:48) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.00177
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:48:50) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.0603
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:49:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:49:25) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] >= 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.906851
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:49:58) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:50:02) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.941372
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:50:47) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:50:57) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.09745
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:50:58) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.70204
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:50:58) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.73908
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:50:58) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.7757
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:51:36) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.895388
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:51:38) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range(0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.26745
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:51:50) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:51:54) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.948007
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:51:56) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.59616
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:11) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.57717
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:13) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.35946
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:14) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.98169
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:15) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.75985
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:56:26) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:31) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.20169
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:56:32) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:56:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:38) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.16044
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:39) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.92852
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:41) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.16432
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:41) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.39652
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:20) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.73903
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:21) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.97623
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:23) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.6116
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:25) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = array(eval(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.98783
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:13:05) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:10) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.772304
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:15) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.2154
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:15) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.29573
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:17) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.29395
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:17) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.623
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:17) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.4956
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:17) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.77114
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:19) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.45078
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = int(input()))
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:13:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:39) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.872923
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input("Carga horaria da disciplina: ")))
                                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:43) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.97616
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.03712
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.4492
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.1395
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.38704
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:45) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.83534
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:13:46) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.962955
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:14:24) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:14:25) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:14:25) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:14:26) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
File "XXXX", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:27) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.608937
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:29) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.25136
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input("Carga horaria da disciplina: ")))
                                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:29) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.7495
-- ERROR:
  File "/home/codebench/codes/1798/2565/main.py", line 4
    c_h = input()))
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:48) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.53827
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:14:48) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:14:48) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:14:48) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:51) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.03739
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:52) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.10536
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:53) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.99514
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:14:54) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.23637
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:03) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.63909
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:08) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.49811
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:10) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.22234
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:11) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.41177
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.5445
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:12) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.89116
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:15) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.11975
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[1 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 1]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:16) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.0655
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:17) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.529
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:21) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (0, size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.08961
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:37) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.40383
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
Medias finais de cada alunos Numero de horas de presenca de cada alunos: Carga horaria da disciplina: [2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:15:37) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:15:38) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:41) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.43502
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:42) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.02154
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[1 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:43) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.35349
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:46) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.73174
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 1]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:47) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = int(input("Carga horaria da disciplina: "))

vet = zeros(3, dtype=int)

for i in range (size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
9.09209
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[1 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:15:57) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.09334
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:15:58) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:00) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.84444
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:01) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.73376
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:02) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.64686
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:04) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.33866
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:05) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.4985
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:16:05) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:15) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.14834
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:18) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.42411
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:19) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.45376
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:19) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.31008
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:20) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.69782
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:20) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.59922
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:17:26) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:17:27) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:17:27) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:17:43) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.153
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:17:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.1317
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:17:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.35999
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:17:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.57914
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:17:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
7.85078
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:17:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)

for i in range(size(vet)):
	if(media[i] >= 5) and (x[i] >= 0.75*c_h):
		vet[0] = vet[0] + 1
	elif(media[i] < 5) and (x[i] == 0.75*c_h):
		vet[1] = vet[1] + 1
	else:
		vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.34372
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 9, in <module>
    if(media[i] >= 5) and (x[i] >= 0.75*c_h):
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:12:40) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		elif(media[i] < 5):
			vet[1] = vet[1] + 1
		elif(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.15031
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:12:44) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		elif(media[i] < 5):
			vet[1] = vet[1] + 1
		elif(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
0.846445
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:12:50) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:07) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.90748
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:08) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
2.2451
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
4.06751
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.92318
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.15866
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:09) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
11.3052
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:32) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
1.64807
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
3.16579
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:33) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
5.89295
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:34) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
6.64693
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:34) 
-- CODE:
from numpy import*
media = array(eval(input("Medias finais de cada alunos ")))
x = array(eval(input("Numero de horas de presenca de cada alunos: ")))
c_h = input("Carga horaria da disciplina: ")

vet = zeros(3, dtype=int)
lm = c_h/4

for i in range(size(vet)):
	if(media[i] >= 0 and media[i] <= 10 and c_h > 0 and x[i] >= 0 and x[i] <= c_h):
		if(media[i] >= 5 and c_h - x[i]<= lm):
			vet[0] = vet[0] + 1
		if(media[i] < 5):
			vet[1] = vet[1] + 1
		if(c_h - x[i] > lm):
			vet[2] = vet[2] + 1
print(vet)
		
-- EXECUTION TIME:
8.7485
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2565/main.py", line 7, in <module>
    lm = c_h/4
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:13:35) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:54) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
1.83932
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:55) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
2.16861
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:55) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
5.30384
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:55) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.95096
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:55) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
8.65059
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:13:55) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
9.3248
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:13:56) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if notas[i]>=5 and car-pre[i]<=lm:# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:13:56) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:13:56) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:14:12) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:32) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
1.43871
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:33) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
5.19507
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:34) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.78913
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:35) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
8.68884
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:36) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
9.69489
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:37) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
10.9104
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:52) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.69838
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:53) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.67864
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:55) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.66497
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:56) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.8298
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:57) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.61735
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:14:58) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.52476
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:13) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.92947
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:15) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.83188
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:16) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.95808
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:17) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.19068
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:18) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.11602
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:19) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.11851
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:34) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.20877
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:36) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.89202
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:37) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.91987
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:38) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.9376
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:39) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.99717
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:40) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.0329
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:55) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.67904
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:56) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.59386
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:57) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.04082
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:15:59) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.30317
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:00) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.27788
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:16:00) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:01) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.43791
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:11) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
5.43144
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Notas: Presencas: Carga horaria: [5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Notas: Presencas: Carga horaria: [5 1 4]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:14) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
4.4342
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Notas: Presencas: Carga horaria: [5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Notas: Presencas: Carga horaria: [5 1 4]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:15) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
2.94235
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
Notas: Presencas: Carga horaria: [5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Notas: Presencas: Carga horaria: [5 1 4]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:16) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
2.60747
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:58) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
1.11718
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:16:58) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:16:59) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:02) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
2.68933
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:06) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
4.57809
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:08) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.73602
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:10) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
8.29924
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:11) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
9.37023
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:17:11) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:16) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.49428
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:23) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.60471
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:26) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
5.614
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:28) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
4.428
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[2 0 3]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:30) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
4.00165
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:32) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
8.18207
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:33) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
8.51288
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:35) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.18227
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 1 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:17:35) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
4.30355
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:

-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:21:14) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:27) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
1.73135
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:32) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
2.61017
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
Notas: Presencas: Carga horaria: [2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:34) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
5.19025
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 0 2]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:36) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
5.87708
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:37) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
7.74528
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:38) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if car-pre[i]>lm: # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
11.3362
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:39) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if (car-pre[i]>lm): # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
6.61399
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[5 1 4]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[2 0 3]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 2]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:42) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if (car-pre[i]>lm): # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
3.92265
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:21:43) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if (car-pre[i]>lm): # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
2.91648
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2565/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:23:25) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if (car-pre[i]>lm): # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:23:28) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if (car-pre[i]>lm): # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
1.79053
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Notas: Presencas: Carga horaria: [5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:23:28) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if (car-pre[i]>lm): # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
2.8331
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
Notas: Presencas: Carga horaria: [5 1 4]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:23:54) 
-- CODE:
# Contar ocorrencias; Aprovação em disciplina
from numpy import*
notas=array(eval(input("Notas: ")))# Vetor de nota dos alunos
pre=array(eval(input("Presencas: ")))# Vetor com as presenças na disciplina
car=float(input("Carga horaria: "))# Carga horária da disciplina
v=zeros(3, dtype=int)# Vetor acumulador
lm=car/4#Limite de Faltas
for i in range(size(notas)):
	if(notas[i]>=0 and notas[i]<=10 and car>0 and pre[i]>=0 and pre[i]<=car):# Condições que devem ser atendidas inicialmente
		if (notas[i]>=5 and car-pre[i]<=lm):# Alunos Aprovados
			v[0]=v[0]+1
		if(notas[i]<5):# Reprovados por nota
			v[1]=v[1]+1
		if (car-pre[i]>lm): # Reprovados por frequência
			v[2]=v[2]+1
print(v)
		
-- EXECUTION TIME:
1.27904
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
