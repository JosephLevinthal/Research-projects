== TEST (2019-04-24 15:43:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = input("a: ")
b = input("b: ")
c = input("c: ")
d = input("d: ")

print("Intervalo 1:", a",", b)
print("Intervalo 2:", c",", d)
if (b > a) and (d >c):
	if(a == b) or (c == d): 
		print("ha intersecao")
	else: 
		print("nao ha intersecao")
else: 

-- ERROR:
File "XXXX", line 9
    print("Intervalo 1:", a",", b)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:44:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = input("a: ")
b = input("b: ")
c = input("c: ")
d = input("d: ")

print("Intervalo 1:", a",", b)
print("Intervalo 2:", c",", d)
if (b > a) and (d >c):
	if(a == b) or (c == d): 
		print("ha intersecao")
	else: 
		print("nao ha intersecao")
else: 
	print("entradas invalidas")

-- ERROR:
File "XXXX", line 9
    print("Intervalo 1:", a",", b)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:44:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = input("a: ")
b = input("b: ")
c = input("c: ")
d = input("d: ")

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(a == b) or (c == d): 
		print("ha intersecao")
	else: 
		print("nao ha intersecao")
else: 
	print("entradas invalidas")

-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:45:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = input("a: ")
b = input("b: ")
c = input("c: ")
d = input("d: ")

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(a == b) or (c == d): 
		print("ha intersecao")
	else: 
		print("nao ha intersecao")
else: 
	print("entradas invalidas")

-- EXECUTION TIME:
0.204654
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5
Intervalo 2: 2.5 , 3
nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1 , -3
Intervalo 2: 1 , 3
nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:46:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(a == b) or (c == d): 
		print("ha intersecao")
	else: 
		print("nao ha intersecao")
else: 
	print("entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:46:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(a == b) or (c == d): 
		print("Ha intersecao")
	else: 
		print("Nao ha intersecao")
else: 
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:47:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(a == b) or (c == d): 
		print("Ha intersecao")
	else: 
		print("Nao ha intersecao")
else: 
	print("Entradas invalidas")

-- EXECUTION TIME:
0.182645
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:50:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(c >= a) and (c <= b): 
		print("Ha intersecao")
	else: 
		print("Nao ha intersecao")
else: 
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:52:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(c >= a) and (c <= b) or (d >= a) and (d <= b): 
		print("Ha intersecao")
	else: 
		print("Nao ha intersecao")
else: 
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:53:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
d = float(input("d: "))

print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)

if (b > a) and (d >c):
	if(c >= a) and (c <= b) or (d >= a) and (d <= b): 
		print("Ha intersecao")
	else: 
		print("Nao ha intersecao")
else: 
	print("Entradas invalidas")

-- EXECUTION TIME:
0.222275
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
