== TEST (2019-03-25 14:29:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var=input("dividendo")
-- OUTPUT:
361.23
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:34:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=input(int("dividendo"))
var2=input(int("divisor"))
var3=input(int("quociente"))
var4=input(int("resto"))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1=input(int("dividendo"))
ValueError: invalid literal for int() with base 10: 'dividendo'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:37:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=input(float("dividendo: "))
var2=input(float("divisor:"))
var3=input(float("quociente: "))
var4=input(float("resto: "))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1=input(float("dividendo: "))
ValueError: could not convert string to float: 'dividendo: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:37:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=input(float("dividendo"))
var2=input(float("divisor"))
var3=input(float("quociente"))
var4=input(float("resto "))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1=input(float("dividendo"))
ValueError: could not convert string to float: 'dividendo'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:44:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
var3=var1//var2 #quociente
var4=var1%var2 #resto
print(var1)
print(var2)
print(var3)
print(var4)


-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:45:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
var3=var1//var2 #quociente
var4=var1%var2 #resto
print(var1)
print(var2)
print(var3)
print(var4)


-- EXECUTION TIME:
0.216645
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:45:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
var3=var1//var2 #quociente
var4=var1%var2 #resto
print(var1)
print(var2)
print(var3)
print(var4)


-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:46:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
var3=var1//var2 #quociente
var4=var1%var2 #resto
print(var3)
print(var4)


-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:46:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
var3=var1//var2 #quociente
var4=var1%var2 #resto
print(var3)
print(var4)


-- EXECUTION TIME:
0.198656
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:46:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
var3=var1//var2 #quociente
var4=var1%var2 #resto
print(var3)
print(var4)


-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:48:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:48:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.179703
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:48:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:49:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.178614
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:49:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:49:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.14745
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:49:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:49:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.125846
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:49:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:49:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:49:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.117281
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendodivisordividendo
divisor
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:49:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=float(input("dividendo"))
var2=float(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.108413
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:49:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=int(input("dividendo"))
var2=int(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:49:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=int(input("dividendo"))
var2=int(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.20725
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
173
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:49:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=int(input("dividendo"))
var2=int(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:50:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=int(input("dividendo"))
var2=int(input("divisor"))
dividendo=var1
divisor=var2
print("dividendo")
print("divisor")
print(var1/var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
dividendo
divisor
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:50:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=int(input("dividendo"))
var2=int(input("divisor"))
dividendo=var1
divisor=var2
print(dividendo)
print(divisor)
print(var1//var2) #quociente
print(var1%var2) #resto



-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:50:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1=int(input("dividendo"))
var2=int(input("divisor"))
dividendo=var1
divisor=var2
print(dividendo)
print(divisor)
print(var1//var2) #quociente
print(var1%var2) #resto



-- EXECUTION TIME:
0.141868
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
