== TEST (2019-03-27 14:44:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
x = var// 1000
y = var%1000
print(x)
print(y)


-- OUTPUT:
9
173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:46:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
x = var// 1000
y = var%10
z = 
soma = x + 
print(x)
print(y)


-- ERROR:
File "XXXX", line 7
    z = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:46:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
x = var// 1000
y = var%10
soma = x + y
print(soma)


-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:47:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
x = var// 1000
y = var%10
z = var%100
soma = x + y +
print(soma)


-- ERROR:
File "XXXX", line 8
    soma = x + y +
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:47:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
x = var// 1000
y = var%10
z = var%100
soma = x + y + z
print(soma)


-- OUTPUT:
85
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:48:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
x = var// 1000
y = var%10
z = var%1000
soma = x + y + z
print(soma)


-- OUTPUT:
185
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:49:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
x = var// 1000
y = var%10
soma = x + y 
print(soma)


-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:54:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0)
resto = var % 10
n = ( n - resto) / 10
soma = soma + resto
print("A soma dos numeros é: ", n)


-- ERROR:
File "XXXX", line 6
    while (var > 0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:54:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0):
resto = var % 10
n = ( n - resto) / 10
soma = soma + resto
print("A soma dos numeros é: ", n)


-- ERROR:
File "XXXX", line 7
    resto = var % 10
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:55:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0):
 resto = var % 10
 n = ( n - resto) / 10
 soma = soma + resto
print("A soma dos numeros é: ", n)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    n = ( n - resto) / 10
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:55:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0):
 resto = var % 10
 var = ( n - resto) / 10
 soma = soma + resto
print("A soma dos numeros é: ", n)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var = ( n - resto) / 10
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:55:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0):
 resto = var % 10
 var = ( var - resto) / 10
 soma = soma + resto
print("A soma dos numeros é: ", n)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print("A soma dos numeros é: ", n)
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:55:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0):
 resto = var % 10
 var = ( var - resto) / 10
 soma = soma + resto
print("A soma dos numeros é: ", var)


-- OUTPUT:
A soma dos numeros é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 14:56:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0):
 resto = var % 10
 var = ( var - resto) / 10
 soma = soma + resto
 print("A soma dos numeros é: ", var)


-- EXECUTION TIME:
0.126644
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 10, in <module>
    print("A soma dos numeros \xe9: ", var)
UnicodeEncodeError: 'ascii' codec can't encode character '\xe9' in position 19: ordinal not in range(128)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:56:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("digite quatro digitos "))
soma = 0
while (var > 0):
 resto = var % 10
 var = ( var - resto) / 10
 soma = soma + resto
 print("A soma dos numeros é: ", var)


-- OUTPUT:
A soma dos numeros é:  917.0
A soma dos numeros é:  91.0
A soma dos numeros é:  9.0
A soma dos numeros é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
 n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)


-- ERROR:
File "XXXX", line 4
    n = int(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
 n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)


-- ERROR:
File "XXXX", line 4
    n = int(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)


-- OUTPUT:
A soma dos números é:  20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)


-- OUTPUT:
A soma dos números é:  20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)


-- OUTPUT:
A soma dos números é:  20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)


-- OUTPUT:
A soma dos números é:  20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:57:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)


-- OUTPUT:
A soma dos números é:  20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:58:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

  resto = n % 10
   n = n // 10
   soma = soma + resto


print("A soma dos números é: ", soma)


-- ERROR:
File "XXXX", line 11
    n = n // 10
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:58:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

  resto = n % 10
   n = n // 10
   soma = soma + resto


print("A soma dos números é: ", soma)


-- ERROR:
File "XXXX", line 11
    n = n // 10
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:58:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 14:59:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.192695
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 14:59:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("Numero: "))

soma = 0

while (var != 0):
    resto = var % 10
    var = (var - resto)//10
    soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.133199
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 14:59:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("Numero: "))

soma = 0

while (var != 0):
    resto = var % 10
    var = (var - resto)//10
    soma = soma + resto
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 10:25:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("Digite um numero: "))
y = x//1%10
y1 = x//10%10
y2 = x//100%10
y3 = x//1000%10
print(y+y1+y2+y3)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 10:25:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("Digite um numero: "))
y = x//1%10
y1 = x//10%10
y2 = x//100%10
y3 = x//1000%10
print(y+y1+y2+y3)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
