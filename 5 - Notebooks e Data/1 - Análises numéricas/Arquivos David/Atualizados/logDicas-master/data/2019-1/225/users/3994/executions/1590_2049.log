== TEST (2019-03-22 22:02:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:03:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- EXECUTION TIME:
0.134188
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    print = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:03:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:03:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- EXECUTION TIME:
0.147745
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    print = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:03:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- EXECUTION TIME:
0.141485
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    print = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:03:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:04:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:04:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1/var2")
print = input("var1%var2")
-- EXECUTION TIME:
0.181645
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    print = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:04:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1//var2")
print = input("var1%var2")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:04:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")
print = input("var1")
print = input ("var2")
print = input("var1//var2")
print = input("var1%var2")
-- EXECUTION TIME:
0.209633
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    print = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:05:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("346")
var2 = input("2")
print = input("var1")
print = input ("var2")
print = input("var1//var2")
print = input("var1%var2")
-- EXECUTION TIME:
0.174351
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    print = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:05:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("346")
var2 = input("2")
print = input("var1")
print = input ("var2")
print = input("var1//var2")
print = input("var1%var2")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:06:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("346")
var2 = input("2")
print 1 = input("var1")
print 2= input ("var2")
print 3= input("var1//var2")
print 4= input("var1%var2")
total = print 1

-- ERROR:
File "XXXX", line 6
    print 1 = input()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:07:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input ("Digite um numero")
var2 = input("Digite um numero")

-- EXECUTION TIME:
0.153059
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:

-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:

-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 22:09:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1//var2")
var4=input("var1%var2")
print = (var1, var2, var3, var4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 22:09:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1//var2")
var4=input("var1%var2")
print = (var1, var2, var3, var4)

-- EXECUTION TIME:
0.1825
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:48:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1//var2")
var4=input("var1%var2")
print = (var1, var2, var3, var4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:48:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1 // var2")
var4=input("var1 % var2")
print = (var1, var2, var3, var4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 13:43:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1 // var2")
var4=input("var1 % var2")
print(var1, var2, var3, var4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 13:43:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1 // var2")
var4=input("var1 % var2")
print(var1, var2, var3, var4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 13:43:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1 // var2")
var4=input("var1 % var2")
print(var1, var2, var3, var4)

-- EXECUTION TIME:
0.126954
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 13:44:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input ("Digite um numero")
var2=input("Digite um numero")
var3=input("var1 // var2")
var4=input("var1 % var2")
print(var1, var2, var3, var4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 13:44:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3=input("var1 // var2")
var4=input("var1 % var2")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:30:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3=input("var1 / var2")
var4=input("var1 % var2")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:30:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
input("var1 / var2")
input("var1 % var2")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 14:30:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
input("var1 / var2")
input("var1 % var2")



-- EXECUTION TIME:
0.148388
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:41:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input("var1 // var2")
var4= input("var1 % var2")
print(var1
	  var2
	  var3
	  var4)


-- ERROR:
File "XXXX", line 9
    var2
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:41:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input("var1 // var2")
var4= input("var1 % var2")
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:41:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input(var1 // var2)
var4= input(var1 % var2)
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= input(var1 // var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:43:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input(float(var1 // var2))
var4= input(float(var1 % var2))
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= input(float(var1 // var2))
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:43:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input(float("var1 // var2"))
var4= input(float("var1 % var2"))
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= input(float("var1 // var2"))
ValueError: could not convert string to float: 'var1 // var2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:43:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input(float('var1 // var2'))
var4= input(float('var1 % var2'))
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= input(float('var1 // var2'))
ValueError: could not convert string to float: 'var1 // var2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:44:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input(float("Digite um numero"))
var2=input(float("Digite um numero"))
var3= input(float(var1 // var2))
var4= input(float(var1 % var2))
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1=input(float("Digite um numero"))
ValueError: could not convert string to float: 'Digite um numero'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:45:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input(float(var1//var2))
var4= input(float(var1%var2))
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= input(float(var1//var2))
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 14:46:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= input(var1//var2)
var4= input(var1%var2)
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= input(var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:04:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= int(var1//var2)
var4= int(var1%var2)
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= int(var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:06:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= (var1//var2)
var4= (var1%var2)
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= (var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:06:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= var1//var2
var4= var1%var2
print(var1,var2,var3,var4)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= var1//var2
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:07:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= var1//var2
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:07:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= var1//var2
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:08:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= var1//var2
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:08:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
print(var1,var2)




-- OUTPUT:
8 5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:09:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
print(var1,var2, var1//var2)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(var1,var2, var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:09:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
print(var1,var2, "var1//var2")




-- OUTPUT:
8 5 var1//var2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:10:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
print(var1,var2, ("var1//var2"),




-- ERROR:
File "XXXX", line 10
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:10:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
print(var1,var2, ("var1//var2"))




-- OUTPUT:
8 5 var1//var2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:10:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
print(var1,var2, ("var1/var2"))




-- OUTPUT:
8 5 var1/var2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:13:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=input("Digite um numero")
var2=input("Digite um numero")
var3= (var1//var2)
print(var1, var2)




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3= (var1//var2)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:12:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X=input()
Y=input()
B= (X//Y)
C= (X%Y)
print(X)
print(Y)
print(B)
print(C)



-- EXECUTION TIME:
0.139693
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    B= (X//Y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:13:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X=input()
Y=input()
B= input(X//Y)
C= input(X%Y)
print(X)
print(Y)
print(B)
print(C)



-- EXECUTION TIME:
0.154897
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    B= input(X//Y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:13:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X=input()
Y=input()
B= input(X//Y)
C= input(X%Y)
print(X)
print(Y)
print(B)
print(C)



-- EXECUTION TIME:
0.150798
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    B= input(X//Y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:13:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= input()
Y= input()
B= input(X//Y)
C= input(X % Y)
print(X)
print(Y)
print(B)
print(C)



-- EXECUTION TIME:
0.198553
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    B= input(X//Y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:14:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= input()
Y= input()
B= input(X//Y)
B= input(X//Y)
C= input(X % Y)
print(X)
print(Y)
print(B)
print(C)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    B= input(X//Y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:14:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= input()
Y= input()
B= input("X//Y")
B= input(X//Y)
C= input(X % Y)
print(X)
print(Y)
print(B)
print(C)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    B= input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:28:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= input()
Y= input()

B= input(X//Y)
C= input(X % Y)
print(X)
print(Y)
print(B)
print(C)



-- EXECUTION TIME:
0.135639
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 7, in <module>
    B= input(X//Y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:28:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= input()
Y= input()

B= input("X//Y")
C= input("X % Y")
print(X)
print(Y)
print(B)
print(C)



-- EXECUTION TIME:
0.176345
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 7, in <module>
    B= input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:08:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= input()
Y= input()

B= input("X//Y")
C= input("X % Y")
print(X)
print(Y)
print(B)
print(C)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    B= input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:09:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= input()
Y= input()

B= input(X//Y)
C= input(X % Y)
print(X)
print(Y)
print(B)
print(C)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    B= input(X//Y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:11:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= float(input())
Y= float(input())

B= input(X//Y)
C= input(X % Y)
print(int(X))
print(int(Y))
print(int(B))
print(int(C))



-- EXECUTION TIME:
0.191868
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 7, in <module>
    B= input(X//Y)
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:12:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X= float(input())
Y= float(input())

B= (X//Y)
C= (X % Y)
print(int(X))
print(int(Y))
print(int(B))
print(int(C))



-- EXECUTION TIME:
0.175634
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
