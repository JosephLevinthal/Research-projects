== SUBMITION (2019-04-14 21:34:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
altura = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1)
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- EXECUTION TIME:
0.150639
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 12
    if (numero == 1)
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:34:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
altura = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1)
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- ERROR:
File "XXXX", line 12
    if (numero == 1)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:34:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
altura = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- EXECUTION TIME:
0.205352
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2443/main.py", line 10, in <module>
    v2 = pi*(x**2)*(3*raio - x) / 3
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:34:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
altura = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    v2 = pi*(x**2)*(3*raio - x) / 3
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:35:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- EXECUTION TIME:
0.166692
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:35:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:35:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:36:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:36:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v2, 4))
else:
	print(round(v1, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:36:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v2, 4))
else:
	print(round(v1, 4))
-- EXECUTION TIME:
0.140661
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:37:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:37:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:37:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v1, 4))
else:
	print(round(v2, 4))
-- EXECUTION TIME:
0.179134
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:39:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v2, 4))
else:
	print(round(v1, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:39:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v2, 4))
else:
	print(round(v1, 4))
-- EXECUTION TIME:
0.126716
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:40:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v2, 4))
else:
	print(round(v1-v2, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:40:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio = float(input("raio: "))
x = float(input("altura: "))
numero = float(input("1 ou 2: "))

v1 = 4*pi*(raio**3) / 3
v2 = pi*(x**2)*(3*raio - x) / 3

if (numero == 1):
	print(round(v2, 4))
else:
	print(round(v1-v2, 4))
-- EXECUTION TIME:
0.162936
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
