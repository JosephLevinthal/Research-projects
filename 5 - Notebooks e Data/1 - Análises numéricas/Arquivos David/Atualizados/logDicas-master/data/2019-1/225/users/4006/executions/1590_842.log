== TEST (2019-03-22 18:24:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3+1+4+1
print(var1)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:24:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3+1+4+1
print(var1)
-- EXECUTION TIME:
0.151443
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:25:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
print(var1//)
-- ERROR:
File "XXXX", line 5
    print(var1//)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:25:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
print(var1)
-- OUTPUT:
3141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:25:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
print(var1//%)
-- ERROR:
File "XXXX", line 5
    print(var1//%)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:26:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
print()
-- ERROR:
File "XXXX", line 5
    print(var1//%)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:27:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
var2=o
print(var1//var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2=o
NameError: name 'o' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:27:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
var2=1
print(var1//var2)
-- OUTPUT:
3141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:27:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
var2=1
print(var1//var2)
print(var1%var2)
-- OUTPUT:
3141
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:28:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3+1+4+1
var2=1
print(var1//var2)
print(var1%var2)
-- OUTPUT:
9
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:28:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3+1+4+1
var2=1
print(var1//var2)
print(var1%var2)
-- EXECUTION TIME:
0.111526
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:29:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
print(var1+)
-- ERROR:
File "XXXX", line 5
    print(var1+)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:34:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=3141
soma=0
soma+= n
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma+= n
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:20:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
input("escreva um numero de quatro digitos")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    soma+= n
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:20:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
input("escreva um numero de quatro digitos")

-- EXECUTION TIME:
0.21918
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:

-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:22:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
input("escreva um numero de quatro digitos")

a = 123
b = a // 1000
c = a % 1000
print(a)
print(b)
print(c)

-- OUTPUT:
123
0
123
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:22:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
input("escreva um numero de quatro digitos")

a = 123
b = a // 1000
c = a % 1000
print(a)
print(b)
print(c)

-- OUTPUT:
123
0
123
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:22:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
input("escreva um numero de quatro digitos")

a = 2123
b = a // 1000
c = a % 1000
print(a)
print(b)
print(c)

-- OUTPUT:
2123
2
123
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:25:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
a = input("escreva um numero de quatro digitos")

b = a // 1000
c = a % 1000
print(a)
print(b)
print(c)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    b = a // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:26:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
input("escreva um numero de quatro digitos")

a = 123
b = a // 1000
c = a % 1000
print(a)
print(b)
print(c)

-- OUTPUT:
123
0
123
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:28:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b = a // 1000
c = a % 1000
print(a)
print(b)
print(c)

-- OUTPUT:
3141
3
141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:32:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b = a // 1000
c = a// 100
d=a//10

print(a)
print(b)
print(c)
print(d)

-- OUTPUT:
3141
3
31
314
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:34:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100


print(b)
print(d)

p

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    p
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:34:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100


print(b)
print(d)



-- OUTPUT:
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:35:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100
e=41
f=e//10
print(f)



print(b)
print(d)



-- OUTPUT:
4
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:37:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100
e=41
f=e//10
soma=b+d+f
print(f)
print(b)
print(d)



-- OUTPUT:
4
3
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:37:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100
e=41
f=e//10
soma=b+d+f
print(f)
print(b)
print(d)
print(soma)



-- OUTPUT:
4
3
1
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:38:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100
e=41
f=e//10
g=1
h=1/10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(soma)



-- OUTPUT:
4
3
1
8.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:38:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100
e=41
f=e//10
g=1
h=1*10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(soma)



-- OUTPUT:
4
3
1
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:38:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b=a//1000
c=141
d = c// 100
e=41
f=e//10
g=1
h=1*10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(soma)



-- EXECUTION TIME:
0.158193
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
4
3
1
18
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
3
1
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:39:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b= a//1000
c= 141
d = c// 100
e= 41
f=e//10
g=1
h=1*10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(h)
print(soma)



-- OUTPUT:
4
3
1
10
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:52:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b= a//1000
c= 141
d = c// 100
e= 41
f=e//10
g=1
h=1*10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(h)
print(soma)



-- EXECUTION TIME:
0.142915
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
4
3
1
10
18
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
3
1
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:52:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b= a//1000
c= 141
d = c// 100
e= 41
f=e//10
g=1
h=1*10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(h)
print(soma)



-- EXECUTION TIME:
0.161297
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
4
3
1
10
18
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
3
1
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:52:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b= a//1000
c= 141
d = c// 100
e= 41
f=e//10
g=1
h=1*10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(h)
print(soma)



-- EXECUTION TIME:
0.110517
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
4
3
1
10
18
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
3
1
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:52:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a = 3141
b= a//1000
c= 141
d = c// 100
e= 41
f=e//10
g=1
h=1*10
soma=b+d+f+h
print(f)
print(b)
print(d)
print(h)
print(soma)



-- EXECUTION TIME:
0.106595
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
4
3
1
10
18
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
4
3
1
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:59:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
i=a%1



-- OUTPUT:
4
3
1
10
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:01:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:01:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:01:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:01:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:01:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:01:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:01:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=a//100
e=a%100
f=a//10
g=a%10
h=a//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
10190
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:02:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=c//100
e=a%100
f=e//10
soma=b+d+f+h
print(soma)



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    soma=b+d+f+h
NameError: name 'h' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:03:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=c//100
e=a%100
f=e//10
soma=b+d+f+
print(soma)



-- ERROR:
File "XXXX", line 11
    soma=b+d+f+
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:03:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=c//100
e=a%100
f=e//10
soma=b+d+f
print(soma)



-- OUTPUT:
17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:04:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=c//100
e=a%100
f=e//10
g=e%10
h=g//1
soma=b+d+f+h
print(soma)



-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:04:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo

a=int(input("digite um numero"))
b=a//1000
c=a%1000
d=c//100
e=a%100
f=e//10
g=e%10
h=g//1
soma=b+d+f+h
print(soma)



-- EXECUTION TIME:
0.141612
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
