== TEST (2019-03-23 15:51:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=input("total de vendas: ")
x= t * 30 / 100
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x= t * 30 / 100
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:53:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=input("total de vendas: ")
x= t * 30 / 100
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x= t * 30 / 100
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:54:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=input("total de vendas: ")
x= t * 30 / 100
print(round(x, 2))
-- EXECUTION TIME:
0.204985
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 6, in <module>
    x= t * 30 / 100
TypeError: unsupported operand type(s) for /: 'str' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:54:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=input("total de vendas: ")
x= t * 30 / 100
print(round(x, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x= t * 30 / 100
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:54:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=input("total de vendas: ")
x= t * 30 / 100
print(round(x, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x= t * 30 / 100
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:55:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=input("total de vendas: ")
x= t * (30 / 100)
print(round(x, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    x= t * (30 / 100)
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:56:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=input(float("total de vendas: "))
x= t * (30 / 100)
print(round(x, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    t=input(float("total de vendas: "))
ValueError: could not convert string to float: 'total de vendas: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:56:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=float("total de vendas: ")
x= t * (30 / 100)
print(round(x, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    t=float("total de vendas: ")
ValueError: could not convert string to float: 'total de vendas: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:57:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=float(input("total de vendas: "))
x= t * (30 / 100)
print(round(x, 2))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:57:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=float(input("total de vendas: "))
x= t * (30 / 100)
print(round(x, 2))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:57:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

t=float(input("total de vendas: "))
x= t * (30 / 100)
print(round(x, 2))
-- EXECUTION TIME:
0.187796
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
