== TEST (2019-03-22 17:30:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=(var1/var2)
print(round var3,2)
-- ERROR:
File "XXXX", line 7
    print(round var3,2)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:30:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=(var1/var2)
print((round var3,2))
-- ERROR:
File "XXXX", line 7
    print((round var3,2))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:31:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=(var1/var2)
print(round(var3,2))
-- OUTPUT:
0.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:31:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=(var1/var2)
print(round(var3,2))
-- EXECUTION TIME:
0.124313
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
0.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:31:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=(var1/var2)
print(round(var3,2))
-- OUTPUT:
3.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:32:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=(var1/var2)
print(round(var3,2))
-- EXECUTION TIME:
0.200973
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
3.33
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:33:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=int(var1/var2)
print(round(var3,2))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:33:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=int(var1/var2)
print(round(var3,2))
-- EXECUTION TIME:
0.123008
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:34:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=200
var2=30
var3=int(var1/var2)
print(round(var3,2))
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:34:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=200
var2=30
var3=int(var1/var2)
print(round(var3,3))
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:34:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=200
var2=30
var3=int(var1/var2)
print(round(var3,4))
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:36:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- OUTPUT:
333.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:36:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- EXECUTION TIME:
0.213352
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
333.33
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:36:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,1))
-- OUTPUT:
333.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:36:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,1))
-- EXECUTION TIME:
0.140951
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
333.3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:37:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=200
var4=(var1/var2)
var5=var3*var4
print(round(var5,1))
-- OUTPUT:
666.7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:37:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=100
var2=30
var3=40
var4=(var1/var2)
var5=var3*var4
print(round(var5,1))
-- OUTPUT:
133.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:37:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=40
var4=(var1/var2)
var5=var3*var4
print(round(var5,1))
-- OUTPUT:
12.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:38:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=40
var4=(var1/var2)
var5=var3*var4
print(round(var5,1))
-- EXECUTION TIME:
0.198815
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
12.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:38:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=40
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- OUTPUT:
12.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:38:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=40
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- EXECUTION TIME:
0.172678
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
12.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:38:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- OUTPUT:
30.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:38:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- EXECUTION TIME:
0.139308
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
30.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:38:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- OUTPUT:
30.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:39:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=500
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- OUTPUT:
150.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:39:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=500
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- EXECUTION TIME:
0.186433
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
150.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:40:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- OUTPUT:
30.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:40:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
var5=var3*var4
print(round(var5,2))
-- EXECUTION TIME:
0.142878
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
30.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:41:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
30.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:41:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- EXECUTION TIME:
0.144183
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
30.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:41:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
total=var3/var4
print(round(total,2))
-- OUTPUT:
333.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:42:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
total=var3/var4
print(round(total,2))
-- EXECUTION TIME:
0.156708
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
333.33
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:42:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=100
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
30.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:42:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=80
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
24.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:42:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
60.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:43:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- EXECUTION TIME:
0.191557
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:43:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- EXECUTION TIME:
0.226439
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:43:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
60.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:43:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
60.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:57:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
60.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 13:57:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- EXECUTION TIME:
0.188115
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
60.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 13:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=30
var2=100
var3=200
var4=(var1/var2)
total=var3*var4
print(round(total,2))
-- OUTPUT:
60.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:03:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input"total de venda"())
var2= float("lucro")
var3=var1/var2
print(round(var3,2)
-- ERROR:
File "XXXX", line 4
    var1=float(input"total de venda"())
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:04:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input"total de venda")
var2= float("lucro")
var3=var1/var2
print(round(var3,2)
-- ERROR:
File "XXXX", line 4
    var1=float(input"total de venda")
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:04:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float("lucro")
var3=var1/var2
print(round(var3,2)
-- ERROR:
File "XXXX", line 8
    
                       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:04:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float("lucro")
var3=var1/var2
print(round(var3,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float("lucro")
ValueError: could not convert string to float: 'lucro'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:05:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(input("lucro"))
var3=var1/var2
print(round(var3,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:05:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(input("lucro"))
var3=var1/var2
print(round(var3,2))
-- EXECUTION TIME:
0.12435
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1014/main.py", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:06:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(input("lucro"))
var3=var1/var2
print(round(var3,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:06:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(input("lucro"))
var3=var1/var2
print(round(var3,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:07:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(input("lucro"))
var3=var1/var2
print(round(var3,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:07:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(input("lucro"))
var3=var1/var2
print(round(var3,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:08:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(input("lucro"))
var3=var1/var2
print(round(var3,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:10:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= var1*0.30
print=var2
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:10:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= var1*0.30
print=var2
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:12:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= var1*0.30
print=(round(var2,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:12:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= var1*0.30
print=(round(var2,2))
-- EXECUTION TIME:
0.197401
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:12:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2= float(var1*0.30)
print=(round(var2,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:13:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2=var1*0.30
print=(round(var2,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:13:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2=var1*0.30
print=(round(var2,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:40:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2=var1*0.30
print=(round(var2,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:40:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
var2=var1*0.30
print=(round(var2,2))
-- EXECUTION TIME:
0.191329
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:41:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
lucro=var1*0.30
print=(round(lucro,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2= float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:41:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
lucro=var1*0.30
print=(round(lucro,2))
-- EXECUTION TIME:
0.203886
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:42:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
lucro=(var1*0.30)
print(round(lucro,2))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:42:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
lucro=(var1*0.30)
print(round(lucro,2))
-- EXECUTION TIME:
0.173983
-- TEST CASE 1:
---- input:
700.50
---- correct output:
210.15
---- user output:
210.15
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 14:34:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu co
var1=float(input("total de venda"))
lucro=(var1*0.30)
print(round(lucro,2))
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
