== TEST (2019-04-14 19:35:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 

from math import *
vE= (4 * pi * r  ** 3) / 3

vC= pi * x ** 2 * (3 * r - x) / 3

print(round(vE, 4))

print(round(vC, 4))

-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:35:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 

from math import *
vE= (4 * pi * r  ** 3) / 3

vC= pi * x ** 2 * (3 * r - x) / 3

print(round(vE, 4))

print(round(vC, 4))

-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:36:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao :"))
from math import *
vE= (4 * pi * r  ** 3) / 3

vC= pi * x ** 2 * (3 * r - x) / 3

print(round(vE, 4))

print(round(vC, 4))

-- OUTPUT:
179.5944
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:38:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao :"))
from math import *
vE= (4 * pi * r  ** 3) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(opcao == 1) :
	print(round(vE, 4))
else :
	print(round(vC, 4))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if(opcao == 1) :
NameError: name 'opcao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:39:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * r  ** 3) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(opcao == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if(opcao == 1) :
NameError: name 'opcao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:39:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * r  ** 3) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:39:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * r  ** 3) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.185146
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:40:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:40:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:40:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=float(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.147324
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:40:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:41:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.143932
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:41:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(opcao == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    if(opcao == 1) :
NameError: name 'opcao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:41:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(opcao == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.17787
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2443/main.py", line 11, in <module>
    if(opcao == 1) :
NameError: name 'opcao' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:42:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.150356
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:42:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:42:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))
from math import *
vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3
if(n == 1) :
	print(round(vE, 4))
else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.200328
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:46:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.216564
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:46:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:46:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * x ** 2 * (3 * r - x) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.147715
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:33:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2() * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.168637
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 14
    if(n == 1) :
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:33:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2() * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- ERROR:
File "XXXX", line 14
    if(n == 1) :
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:34:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
172.3644
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:34:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * r - x) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:34:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * r - x) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.184869
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:34:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * r - x) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:36:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= ((4 * pi) * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vE, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
172.3644
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:37:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
172.3644
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:37:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.146912
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
172.3644
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
294.9421
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:37:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vC - vE, 4))

-- EXECUTION TIME:
0.164438
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
-172.3644
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
-294.9421
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:38:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=input("opcao 1/2 ? :")

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.149297
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
172.3644
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
294.9421
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:39:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.152546
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
7.23
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
294.9421
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:39:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
7.23
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:39:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.139281
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
7.23
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
294.9421
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:39:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
7.23
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:40:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.148979
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 14
    if(n == 1) :
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:40:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.155268
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 14
    if(n == 1) :
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:40:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.312793
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 14
    if(n == 1) :
               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:40:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- ERROR:
File "XXXX", line 14
    if(n == 1) :
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:41:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- ERROR:
File "XXXX", line 14
    if(n == 1) :
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:41:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x))) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.169775
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
7.23
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
294.9421
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:41:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x))) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
7.23
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:41:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x))) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
7.23
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:41:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * (r - x))) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- OUTPUT:
7.23
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:42:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r=float(input("raio do tanque :"))
x=float(input("altura: ")) 
n=int(input("opcao 1/2 ? :"))

from math import *

vE= (4 * pi * (r  ** 3)) / 3

vC= (pi * (x ** 2) * (3 * r - x)) / 3

if(n == 1) :
	print(round(vC, 4))

else :
	print(round(vE - vC, 4))

-- EXECUTION TIME:
0.182058
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
