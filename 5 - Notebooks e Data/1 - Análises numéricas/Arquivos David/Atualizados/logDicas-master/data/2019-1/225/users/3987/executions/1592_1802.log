== TEST (2019-04-03 15:43:14) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2"))
dano = [sqrt(5*d1) + pi * (d2)/3]
print(dano)

-- OUTPUT:
[8.519253284679376]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:44:24) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2"))
dano = (sqrt(5*d1)) + (pi**((d2)/3)
print(dano)

-- ERROR:
File "XXXX", line 6
    print(dano)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:44:34) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2"))
dano = (sqrt(5*d1)) + (pi**((d2)/3))
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:45:19) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = (sqrt(5*d1)) + pi**((d2)/3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:45:34) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = (sqrt(5*d1)) + pi**((d2)//3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:46:24) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = ((5*d1)**0.5) + pi**((d2)//3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:46:45) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = ((5*d1)**0.5) + pi**((d2)//3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:45:24) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = ((5*d1)**0.5) + pi**((d2)//3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:45:54) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = ((5*d1)**0.5) + pi**((d2)//3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:49:39) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = ((5*d1)**0.5) + pi**((d2)/3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:51:37) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = (input("d2:"))
dano = ((5*d1)**0.5) + pi**(d2)//3
print(dano)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano = ((5*d1)**0.5) + pi**(d2)//3
TypeError: unsupported operand type(s) for ** or pow(): 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:51:54) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = (input("d2:"))
dano = ((5*d1)**0.5) + (pi**(d2)//3)
print(dano)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano = ((5*d1)**0.5) + (pi**(d2)//3)
TypeError: unsupported operand type(s) for ** or pow(): 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:52:39) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = (input("d2:"))
dano = ((5*d1)**0.5) + (pi**((d2)//3))
print(dano)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano = ((5*d1)**0.5) + (pi**((d2)//3))
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:52:45) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = (input("d2:"))
dano = ((5*d1)**0.5) + (pi**((d2)//3))
print(dano)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano = ((5*d1)**0.5) + (pi**((d2)//3))
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-17 13:53:17) 
-- CODE:
from math import *
p = float(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = ((5*d1)**0.5) + pi**((d2)//3)
print(dano)

-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-17 13:54:15) 
-- CODE:
from math import *
p = int(input("pontos de vida iniciais:"))
d1 = int(input("d1:"))
d2 = int(input("d2:"))
dano = ((5*d1)**0.5) + pi**((d2)//3)
print(p-int(dano))

-- EXECUTION TIME:
0.145077
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
188
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
285
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
