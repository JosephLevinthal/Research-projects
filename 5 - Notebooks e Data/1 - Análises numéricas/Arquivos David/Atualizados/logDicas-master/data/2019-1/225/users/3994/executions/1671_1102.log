== TEST (2019-04-25 12:58:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:20:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
		print("Voloume: ",v*1000,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Voloume: ",v*1000,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:20:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
			print("Voloume: ",v*1000,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Voloume: ",v*1000,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:20:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
		print("Voloume: ",v*1000,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Voloume: ",v*1000,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 12:21:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
			print("Voloume: ",v*1000,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- EXECUTION TIME:
0.130692
-- ERROR:
  File "/home/codebench/codes/1671/1102/main.py", line 10
    print("Voloume: ",v*1000,"litros")
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:21:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
			print("Voloume: ",v*1000,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Voloume: ",v*1000,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:22:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
		print("Voloume: ",v*1000,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Voloume: ",v*1000,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:22:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
		print("Volume: ",v*1000,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Volume: ",v*1000,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:25:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2,3)
		print("Volume: ", v*1000 ,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Volume: ", v*1000 ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:26:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * pi**2 * r**3)/2, 3)
		print("Volume: ", v*1000 ,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Volume: ", v*1000 ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:27:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * h**2 * r**3)/2, 3)
		print("Volume: ", v*1000 ,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Volume: ", v*1000 ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:29:05) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((4/3 * h**2 * r**3)/2, 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:29:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((2/3 * h**2 * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- ERROR:
File "XXXX", line 10
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:31:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(round((2/3 * h**2 * r**3), 3))
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H - 2 * r) :
		v=(round((pi * r**2 * H) - () ))
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:41:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*h**2*(3*r-h))
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 12:49:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*h**2*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-h)),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- EXECUTION TIME:
0.148073
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:49:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*h**2*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-h)),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 12:49:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*h**2*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-h)),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- EXECUTION TIME:
0.135373
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:49:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*h**2*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-h)),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:52:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h)),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 22
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:52:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 12:52:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- EXECUTION TIME:
0.143045
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:17:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3))
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:09:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:24:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r)) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*h - r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117911.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:26:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r)) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*H - 2*r) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:26:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r)) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:27:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)* H - (2*r)) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:28:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:28:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:29:06) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:30:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:30:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:32:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
			v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:34:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
	   print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:35:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
				  print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:35:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:35:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:35:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 19:35:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- EXECUTION TIME:
0.176855
-- ERROR:
  File "/home/codebench/codes/1671/1102/main.py", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:35:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:36:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:37:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:37:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:38:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:38:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:38:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:38:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:39:08) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:40:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:40:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:40:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
			print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:40:39) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:41:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
		
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:41:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((pi*(r**2)*(H - 2*r) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:43:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round(((pi*(r**2)*(H - 2*r) + (2/3) * pi * (r**3)),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 16
    print("Volume: ", (v*1000) ,"litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:45:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round(((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3)),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 15
    v=round(((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3)),3)
                                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:46:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round(((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3)),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- ERROR:
File "XXXX", line 15
    v=round(((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3)),3)
                                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:46:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=round((2/3 * pi * r**3), 3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<r):
		v=round((pi/3)*(h**2)*(3*r-h),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h== H-r):
		v=round((((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3)),3)
		print("Volume: ", (v*1000) ,"litros")
	elif(h<H-r and h>r):
		v=round((pi*(r**2)*(h - r)) + (2/3 * pi * r**3),3)
		print("Volume: ", (v*1000) ,"litros")
	else:
		v=round(((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h))),3)
		print("Volume: ", (v*1000) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:50:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(2/3 * pi * r**3)
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h),3
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h== H-r):
		v=(((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3))
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h<H-r and h>r):
		v=(pi*(r**2)*(h - r)) + (2/3 * pi * r**3)
		print("Volume: ", round((v*1000),3) ,"litros")
	else:
		v=((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h)))
		print("Volume: ", round((v*1000),3) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 19:50:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(2/3 * pi * r**3)
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h),3
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h== H-r):
		v=(((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3))
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h<H-r and h>r):
		v=(pi*(r**2)*(h - r)) + (2/3 * pi * r**3)
		print("Volume: ", round((v*1000),3) ,"litros")
	else:
		v=((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h)))
		print("Volume: ", round((v*1000),3) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 19:50:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H=float(input("Digite a altura total: "))
h=float(input("Digite o nivel de combustivel: "))
r=float(input("Digite o raio: "))
print("Entradas:",H,",",h,",",r)
from math import*
if(H>0 and h>0 and r>0 and H>h and H>(2*r)):
	if(h==r):
		v=(2/3 * pi * r**3)
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h<r):
		v=(pi/3)*(h**2)*(3*r-h),3
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h== H-r):
		v=(((pi*(r**2))*(H - 2*r)) + (2/3) * pi * (r**3))
		print("Volume: ", round((v*1000),3) ,"litros")
	elif(h<H-r and h>r):
		v=(pi*(r**2)*(h - r)) + (2/3 * pi * r**3)
		print("Volume: ", round((v*1000),3) ,"litros")
	else:
		v=((pi*(r**2)*(H - 2*r)) + (4/3 * pi * r**3)) - ((pi/3)*((H-h)**2)*(3*r-(H-h)))
		print("Volume: ", round((v*1000),3) ,"litros")
else:
	print("Entradas invalidas")
		
			
	
	
	


-- EXECUTION TIME:
0.12842
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
