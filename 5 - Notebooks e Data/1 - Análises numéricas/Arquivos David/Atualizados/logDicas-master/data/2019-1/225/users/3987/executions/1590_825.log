== TEST (2019-03-29 13:51:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio é:")
A = pi*(r**2)
V = 4//3*pi*(r**3)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = pi*(r**2)
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 13:52:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = pi*(r**2)
V = 4//3*pi*(r**3)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = pi*(r**2)
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 13:56:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = π*(r**2)
V = 4//3*π*(r**3)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = π*(r**2)
NameError: name 'π' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 13:57:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = 3,14*(r**2)
V = 4//3*3,14*(r**3)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = 3,14*(r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 13:58:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = 3,14*(r)**2
V = 4//3*3,14*(r)**3
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = 3,14*(r)**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 13:59:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = 3,1416*(r)**2
V = 4//3*3,1416*(r)**3
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = 3,1416*(r)**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:00:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = (3,1416)*(r)**2
V = 4//3*3,1416*(r)**3
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = (3,1416)*(r)**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:01:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = (3,1416)*(r**2)
V = 4//3*3,1416*(r)**3
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = (3,1416)*(r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:02:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = from math import*(r**2)
V = 4//3*3,1416*(r)**3
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 5
    A = from math import*(r**2)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:07:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
A = from math import*r**2
V = 4//3*3,1416*(r)**3
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 5
    A = from math import*r**2
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:10:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
pi = 3,14
A = pi*(r*r)
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = pi*(r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:11:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("O raio e:")
pi = 3.14
A = pi*(r*r)
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = pi*(r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:13:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14
r = input("O raio e:")
A = pi*(r*r)
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = pi*(r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:14:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14
r = input("O raio e:")
A = pi*(r*r)
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = pi*(r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:15:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14
r = input("O raio e:")
A = pi*(r**2)
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = pi*(r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:15:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14
r = input("O raio e:")
A = pi*(r*r)
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = pi*(r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:16:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
pi = 3.14
r = input("O raio e:")
A = (r*r)*pi
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = (r*r)*pi
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:21:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import * pi = 3.14
r = input("O raio e:")
A = (r*r)*pi
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 4
    from math import * pi = 3.14
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:23:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import * pi = 
r = input("O raio e:")
A = (r*r)*pi
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 4
    from math import * pi = 
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:38:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
from math import * pi = 3.141592
A = (r*r)*pi
V = 4//3*pi*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 5
    from math import * pi = 3.141592
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:51:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
A = (r*r)*from math import
V = 4//3*from math import*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 5
    A = (r*r)*from math import
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:51:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
A = (r*r)*from math import
V = 4//3*from math import*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 5
    A = (r*r)*from math import
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:51:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
A = from math import * (r*r)
V = 4//3*from math import*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 5
    A = from math import * (r*r)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:53:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
a = from math import * (r*r)
v = 4//3*from math import*(r*r*r)
print(round(A,3))
print(round(V,3))
-- ERROR:
File "XXXX", line 5
    a = from math import * (r*r)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:53:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
a = from math import * (r*r)
v = 4//3*from math import*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
File "XXXX", line 5
    a = from math import * (r*r)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:55:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
from math import * pi = 3,14
print(round(pi*(r*r)3))

-- ERROR:
File "XXXX", line 5
    from math import * pi = 3,14
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 14:58:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
from math import = pi
a = pi * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
File "XXXX", line 5
    from math import = pi
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:02:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")

-- ERROR:
File "XXXX", line 5
    from math import = pi
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:03:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
pi = 3,1416
a = pi*(r*r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = pi*(r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:05:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
x = 3,1416
a = x*(r*r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = x*(r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:10:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
r = input("O raio e:")
from math import pi
a = pi * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = pi * (r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:12:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * pi
r = input("O raio e:")
a = pi * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
File "XXXX", line 4
    from math import * pi
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:12:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = input("O raio e:")
a = pi * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = pi * (r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:13:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = input("O raio e:")
a = pi * (r**2)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = pi * (r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:13:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = input("O raio e:")
a = pi * (r)**2
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = pi * (r)**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:14:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = input("O raio e:")
a = pi * r**2
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = pi * r**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:15:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = input("O raio e:")
a = (pi) * r**2
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = (pi) * r**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:17:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = input("O raio e:")
a = (pi) * (r**2)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = (pi) * (r**2)
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:17:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = input("O raio e:")
a = (pi) * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = (pi) * (r*r)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:19:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:20:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:21:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.209607
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:22:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4//3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:22:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:23:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.263614
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:24:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.20217
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:25:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import = pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
File "XXXX", line 4
    from math import = pi
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:25:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * pi
r = int(input("O raio e:"))
a = (pi) * (r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
File "XXXX", line 4
    from math import * pi
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:25:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi)*(r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:25:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi)*(r*r)
v = 4/3*pi*(r*r*r)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.126161
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:29:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi)*(r*r)
v = 4/3*pi*(r*r*r)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:29:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi)*(r*r)
v = 4/3*pi*(r*r*r)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- EXECUTION TIME:
0.183745
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:30:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = round((pi)*(r*r),3)
v = round(4/3*pi*(r*r*r),3)
print(a)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:31:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = round((pi)*(r*r),3)
v = round(4/3*pi*(r*r*r),3)
print(a)
print(v)
-- EXECUTION TIME:
0.206578
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:31:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = round(((pi)*(r*r)),3)
v = round(4/3*pi*(r*r*r),3)
print(a)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:31:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = round(((pi)*(r*r)),3)
v = round(4/3*pi*(r*r*r),3)
print(a)
print(v)
-- EXECUTION TIME:
0.147955
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:32:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = round(((pi)*(r*r)),3)
v = round((4/3*pi*(r*r*r)),3)
print(a)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:32:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = round(((pi)*(r*r)),3)
v = round((4/3*pi*(r*r*r)),3)
print(a)
print(v)
-- EXECUTION TIME:
0.135233
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:34:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:34:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import pi
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- EXECUTION TIME:
0.184471
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:42:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
= pi
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
File "XXXX", line 5
    = pi
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:42:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
=pi
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
File "XXXX", line 5
    =pi
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:42:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import 
=pi
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
File "XXXX", line 4
    from math import 
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:43:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
=pi
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
File "XXXX", line 5
    =pi
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:44:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
= pi
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
File "XXXX", line 5
    = pi
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:45:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:45:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- EXECUTION TIME:
0.170605
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:46:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi =
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
File "XXXX", line 5
    pi =
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:46:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:49:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:49:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
A = round(a,3)
V = round(v,3)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.14936
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:49:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:49:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.152745
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:55:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(int(round(a,3)))
print(nt(round(v,3)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:55:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(int(round(a,3)))
print(int(round(v,3)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:55:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(int(round(a,3)))
print(int(round(v,3)))
-- EXECUTION TIME:
0.131006
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:55:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(round(a,3)))
print(round(v,3)))
-- ERROR:
File "XXXX", line 9
    print(round(a,3)))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 15:55:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 15:56:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = 4/3*pi*(r**3)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.16037
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:03:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = (4/3)*(pi)*(r**3)
print(round(a,3))
print(round(v,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:03:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = (4/3)*(pi)*(r**3)
print(round(a,3))
print(round(v,3))
-- EXECUTION TIME:
0.159455
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:05:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = (4/3)*(pi)*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:05:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import * 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = (4/3)*(pi)*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- EXECUTION TIME:
0.169225
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:06:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import 
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
v = (4/3)*(pi)*(r**3)
A = round(a,3)
V = round(v,3)
print(A)
print(V)
-- ERROR:
File "XXXX", line 4
    from math import 
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:31:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:32:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
A = round(a,3)
print(A)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:32:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
A = round(a,3)
print(A)
v = (4/3)*(pi)*(r**3)
V = round(v,3)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:32:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = (pi)*(r**2)
A = round(a,3)
print(A)
v = (4/3)*(pi)*(r**3)
V = round(v,3)
print(V)
-- EXECUTION TIME:
0.15557
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:33:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = pi*r**2
A = round(a,3)
print(A)
v = (4/3)*(pi)*(r**3)
V = round(v,3)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:33:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = pi*r**2
A = round(a,3)
print(A)
v = 4/3*pi*r**3
V = round(v,3)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:33:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = pi*r**2
A = round(a,3)
print(A)
v = 4/3*pi*r**3
V = round(v,3)
print(V)
-- EXECUTION TIME:
0.113926
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:34:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = pi*r**2
A = round (a,3)
print(A)
v = 4/3*pi*r**3
V = round (v,3)
print(V)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:34:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = int(input("O raio e:"))
a = pi*r**2
A = round (a,3)
print(A)
v = 4/3*pi*r**3
V = round (v,3)
print(V)
-- EXECUTION TIME:
0.130865
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:34:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = float(input("O raio e:"))
a = pi*r**2
A = round (a,3)
print(A)
v = 4/3*pi*r**3
V = round (v,3)
print(V)
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 11:36:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo. 
from math import *
pi 
r = float(input("O raio e:"))
a = pi*r**2
A = round (a,3)
print(A)
v = 4/3*pi*r**3
V = round (v,3)
print(V)
-- EXECUTION TIME:
0.144683
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
