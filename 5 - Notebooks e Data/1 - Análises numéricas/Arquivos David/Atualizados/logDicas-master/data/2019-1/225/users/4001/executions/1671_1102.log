== TEST (2019-04-24 01:33:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:08:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H < 0) or (h < 0) or (r < 0) or (H < h) or (H < 2 * r):
	

-- ERROR:
File "XXXX", line 11
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:10:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H < 0) or (h < 0) or (r < 0) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")


-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:13:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H,",", h, ",", r)
from math import*
# Condicoes
if (H < 0) or (h < 0) or (r < 0) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")
elif ()

-- ERROR:
File "XXXX", line 11
    elif ()
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:13:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H,",", h, ",", r)
from math import*
# Condicoes
if (H < 0) or (h < 0) or (r < 0) or (H < h) or (H < 2 * r):
	print("Entradas invalidas")


-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = (pi / 3) * x**2 * (3 * r - x)
		print(round(N, 3))
	elif (h == H - 2*r):
		N = pi * r ** 2 * x
		print(round(N, 3))
		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = (pi / 3) * x**2 * (3 * r - x)
		print(round(N, 3))
	elif (h == H - 2*r):
		N = pi * r ** 2 * x
		print(round(N, 3))
	elif (h == r - H):
		N = ((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x))
		print(round(N, 3))
		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:45) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = (pi / 3) * x**2 * (3 * r - x)
		print("Volume: ", round(N, 3), "litros")
	elif (h == H - 2*r):
		N = pi * r ** 2 * x
		print("Volume: ", round(N, 3) "litros")
	elif (h == r - H):
		N = ((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x))
		print("Volume: ", round(N, 3), "litros")
else:
	
		

-- ERROR:
File "XXXX", line 15
    print("Volume: ", round(N, 3) "litros")
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = (pi / 3) * x**2 * (3 * r - x)
		print("Volume: ", round(N, 3), "litros")
	elif (h == H - 2*r):
		N = pi * r ** 2 * x
		print("Volume: ", round(N, 3), "litros")
	elif (h == r - H):
		N = ((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x))
		print("Volume: ", round(N, 3), "litros")
else:
	
		

-- ERROR:
File "XXXX", line 22
    
      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:01:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = round((pi / 3) * x**2 * (3 * r - x), 3)
		print("Volume: ", )
	elif (h == H - 2*r):
		N = round(pi * r ** 2 * x, 3)
		print("Volume: ", )
	elif (h == r - H):
		N = round((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x), 3)
		print("Volume: ", )
else:
	
		

-- ERROR:
File "XXXX", line 22
    
      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = round((pi / 3) * x**2 * (3 * r - x), 3)
		print("Volume: ", )
	elif (h == H - 2*r):
		N = round(pi * r ** 2 * x, 3)
		print("Volume: ", )
	elif (h == r - H):
		N = round((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x), 3)
		print("Volume: ", )

		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = round((pi / 3) * x**2 * (3 * r - x), 3)
		print("Volume: ", N, "litros")
	elif (h == H - 2*r):
		N = round(pi * r ** 2 * x, 3)
		print("Volume: ",N, "litros")
	elif (h == r - H):
		N = round((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x), 3)
		print("Volume: ",N, "litros" )

		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		N = round((pi / 3) * x**2 * (3 * r - x), 3)
		print("Volume: ", N, "litros")
	elif (h == H - 2*r):
		N = round(pi * r ** 2 * x, 3)
		print("Volume: ",N, "litros")
	elif (h == r - H):
		N = round((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x), 3)
		print("Volume: ",N, "litros" )
else:
	print("Entradas invalidas")

		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:06:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	N = round((pi / 3) * x**2 * (3 * r - x), 3)
	print("Volume: ", N, "litros")
elif (h == H - 2*r):
	N = round(pi * r ** 2 * x, 3)
	print("Volume: ",N, "litros")
elif (h == r - H):
	N = round((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x), 3)
	print("Volume: ",N, "litros" )


		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	N = round((pi / 3) * x**2 * (3 * r - x), 3)
	print("Volume: ", N, "litros")
elif (h == H - 2*r):
	N = round(pi * r ** 2 * x, 3)
	print("Volume: ",N, "litros")
elif (h == r - H):
	N = round((pi/3)* x**2 * (3 * r - x) - 2*((pi/3)* x**2 * (3 * r - x)) + (pi * r ** 2 * x), 3)
	print("Volume: ",N, "litros" )


		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:38:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	N = (4/3) * pi * r ** 3 / 2
	print("Volume: ", round(N * 1000, 3), "litros")  
elif (h == H - r):




		

-- ERROR:
File "XXXX", line 20
    
      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:38:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	N = (4/3) * pi * r ** 3 / 2
	print("Volume: ", round(N * 1000, 3) + "litros")  
elif (h == H - r):




		

-- ERROR:
File "XXXX", line 20
    
      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:39:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	N = round(((4/3) * pi * r ** 3 / 2) * 1000, 3)
	print("Volume: ", N  )  
elif (h == H - r):




		

-- ERROR:
File "XXXX", line 20
    
      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:40:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	N = round(((4/3) * pi * r ** 3 / 2) * 1000, 3)
	print("Volume: ", N  )  





		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	N = round(((4/3) * pi * r ** 3 / 2) * 1000, 3)
	print("Volume: ", N  )  
elif (h == H - r):
	N = round((pi * r ** 2 * H) * 1000, 3)
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:56:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((4/3) * pi * r ** 3, 3)
	print("Volume : ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:07:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == 2 * r - H):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h = H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- ERROR:
File "XXXX", line 17
    elif (h = H/2) and (h > r):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:07:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == 2 * r - H):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h = "H"/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- ERROR:
File "XXXX", line 17
    elif (h = "H"/2) and (h > r):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:08:06) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == 2 * r - H):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:12:41) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h < r):
	V = round((pi/ 3) * x ** 2 * (3 * r - H))
	print("Volume: ", V * 1000, "litros")
elif (h == 2 * r - H):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:06:36) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h < r):
	V = round((pi/ 3) * x ** 2 * (3 * r - H))
	print("Volume: ", V * 1000, "litros")
elif (h == 2 * r - H):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:17:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h < r):
	V = round((pi/ 3) * x ** 2 * (3 * r - H))
	print("Volume: ", V * 1000, "litros")
elif (h == H - 2 * r ):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- EXECUTION TIME:
0.03017
-- ERROR:
Error response from daemon: Container 538cd688dce7780b7f457b0dd93b35ce46362ac7cfdfd065cab7c8c2d6ff7c49 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:17:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h < r):
	V = round((pi/ 3) * x ** 2 * (3 * r - H))
	print("Volume: ", V * 1000, "litros")
elif (h == H - 2 * r ):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:20:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r ):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:20:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r ):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:20:45) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r ):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:22:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r ):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:22:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r ):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h == H/2) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + ((pi / 3) * H ** 2 * (3 * r - H))/2, 3)
	print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:29:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r ):
		V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round(((4/3) * pi * r ** 3) + (pi * r**2 * H)) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
	




		

-- ERROR:
File "XXXX", line 17
    V = round(((4/3) * pi * r ** 3) + (pi * r**2 * H)) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
                                                                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:32:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r ):
		V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 13:33:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r ):
		V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- EXECUTION TIME:
0.142797
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:33:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r ):
		V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:37:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r ):
		V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:41:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r ):
		V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 13:43:11) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r ):
		V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:18:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r):
		V = round(pi * r**2 * H, 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 12:19:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r):
		V = round(pi * r**2 * H, 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- EXECUTION TIME:
0.134505
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:19:36) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r):
		V = round(pi * r**2 * H, 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:39:45) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > 2*r):
	if (h == r):
		V = round(((4/3) * pi * r ** 3)/2, 3)
		print("Volume : ", V * 1000, "litros")
	elif (h == H - 2 * r):
		V = round(pi * r**2 * H, 3)
		print("Volume: ", V * 1000, "litros")
	elif (h > H - r):
		V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
		print("Volume: ", V * 1000, "litros")
else:
	print("Entradas invalidas")
	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:44:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif: (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round(pi * r**2 * H, 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
   print("Volume: ", V * 1000, "litros")

	




		

-- ERROR:
File "XXXX", line 11
    elif: (h == r):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:44:51) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round(pi * r**2 * H, 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
   print("Volume: ", V * 1000, "litros")

	




		

-- ERROR:
File "XXXX", line 19
    print("Volume: ", V * 1000, "litros")
                                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:45:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round(pi * r**2 * H, 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
	print("Volume: ", V * 1000, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:46:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) and (h <= 0) and (r <= 0) and (H <= h) and (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round(pi * r**2 * H, 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
	print("Volume: ", V * 1000, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:47:01) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round(pi * r**2 * H, 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
	print("Volume: ", V * 1000, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:47:08) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round(pi * r**2 * H, 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
	print("Volume: ", V * 1000, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:47:36) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((4/3) * pi * r ** 3)/2, 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round(pi * r**2 * H, 3)
	print("Volume: ", V * 1000, "litros")
elif (h < H - r):
	V = round((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H)), 3)
	print("Volume: ", V * 1000, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  827113.0 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:58:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", V * 1000, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:58:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", V * 1000, "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", V * 1000, "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", V * 1000, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:59:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:59:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:59:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:59:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 12:59:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:00:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:00:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - 2 * r):
	V = round((pi * r**2 * H), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:23:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round((pi * r**2 * H) + ((4/3) * pi * r ** 3)/2, 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h  -r))
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:24:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * H) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h  -r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h  -r), 3)
TypeError: unsupported operand type(s) for +: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:24:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * H ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * H) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h  -r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * H) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h  -r), 3)
TypeError: unsupported operand type(s) for +: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:33:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * h ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * (H - 2 * r) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
File "XXXX", line 19
    print("Volume: ", (V * 1000), "litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:33:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * h ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * (H - 2 * r) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
File "XXXX", line 19
    print("Volume: ", (V * 1000), "litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:34:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * h ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * (H - 2 * r) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
File "XXXX", line 19
    print("Volume: ", (V * 1000), "litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:35:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * h ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * (H - 2 * r)) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
TypeError: unsupported operand type(s) for +: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:40:24) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round(((((4/3) * pi * r ** 3)/2) * 1000), 3)
	print("Volume : ", V, "litros")
elif (h < r):
	V = round(((pi / 3) * h ** 2 * (3 * r - H) * 1000), 3)
	print("Volume : ", V, "litros")
elif (h == H - r):
	V = round((((pi * r**2 * (H - 2 * r)) + ((4/3) * pi * r ** 3)/2) * 1000), 3)
	print("Volume: ", V, "litros")
elif (h < H - r) and (h > r):
	V = round((((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r) * 1000), 3)
	print("Volume: ", V, "litros")
elif (h > H - r):
	V = round((((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H)))* 1000, 3)
	print("Volume: ", v, "litros")

	




		

-- ERROR:
File "XXXX", line 25
    print("Volume: ", v, "litros")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:40:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = round((((4/3) * pi * r ** 3)/2), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * h ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * (H - 2 * r)) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
TypeError: unsupported operand type(s) for +: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:44:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = (((4/3) * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = round((pi / 3) * h ** 2 * (3 * r - H), 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = round(((pi * r**2 * (H - 2 * r)) + ((4/3) * pi * r ** 3)/2), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = round(((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))), 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 22, in <module>
    V = round(((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r), 3)
TypeError: unsupported operand type(s) for +: 'int' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:45:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = (((4/3) * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume : ", (V * 1000), "litros")
elif (h < r):
	V = (pi / 3) * h ** 2 * (3 * r - H)
	V2 = round(V, 3)
	print("Volume : ", (V * 1000), "litros")
elif (h == H - r):
	V = ((pi * r**2 * (H - 2 * r)) + ((4/3) * pi * r ** 3)/2)
	V2 = round(V, 3)
	print("Volume: ", (V * 1000), "litros")
elif (h < H - r) and (h > r):
	V = (((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r)
	V2 = round(V, 3)
	print("Volume: ", (V * 1000), "litros")
elif (h > H - r):
	V = (4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H)))
	V2 = round(V, 3)
	print("Volume: ", (V * 1000), "litros")

	




		

-- ERROR:
File "XXXX", line 25
    V2 = round(V, 3)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 13:48:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = (((4/3) * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h < r):
	V = ((pi / 3) * h ** 2 * (3 * r - H)) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h == H - r):
	V = ((pi * r**2 * (H - 2 * r)) + ((4/3) * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h < H - r) and (h > r):
	V = ((((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h > H - r):
	V = ((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")

	




		

-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 13:48:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = (((4/3) * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h < r):
	V = ((pi / 3) * h ** 2 * (3 * r - H)) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h == H - r):
	V = ((pi * r**2 * (H - 2 * r)) + ((4/3) * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h < H - r) and (h > r):
	V = ((((4/3) * pi * r ** 3)/2) + (pi * r**2 * (h - r))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h > H - r):
	V = ((4/3) * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - ((pi / 3) * H ** 2 * (3 * r - H))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")

	




		

-- EXECUTION TIME:
0.199823
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 11:42:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
H = float(input("Altura total do tanque: "))
h = float(input("Nivel de combustivel no tanque: "))
r = float(input("Raio dos bojos: "))
# Saidas pt. 1
print("Entradas: ", H, ",", h, ",", r)
from math import*
# Condicoes
if (H <= 0) or (h <= 0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas invalidas")
elif (h == r):
	V = ((4/3 * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h < r):
	V = (pi / 3 * h ** 2 * (3 * r - H)) * 1000
	V2 = round(V, 3)
	print("Volume : ", V2, "litros")
elif (h == H - r):
	V = ((pi * r**2 * (H - 2 * r)) + (4/3 * pi * r ** 3)/2) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h < H - r) and (h > r):
	V = (((4/3 * pi * r ** 3)/2) + (pi * r**2 * (h - r))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")
elif (h > H - r):
	V = (4/3 * pi * r ** 3 + (pi * r**2 * (H - 2 * r)) - (pi / 3 * H ** 2 * (3 * r - H))) * 1000
	V2 = round(V, 3)
	print("Volume: ", V2, "litros")

	




		

-- EXECUTION TIME:
0.147518
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
