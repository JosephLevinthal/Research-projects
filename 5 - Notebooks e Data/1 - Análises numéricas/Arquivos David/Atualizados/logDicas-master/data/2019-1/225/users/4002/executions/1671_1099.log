== SUBMITION (2019-04-29 08:22:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b=c)
isosceles = (a=b or a=c or c=b)
escaleno = (a!=b!=c)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- EXECUTION TIME:
0.147987
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    equilatero = (a=b=c)
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:22:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b=c)
isosceles = (a=b or a=c or c=b)
escaleno = (a!=b!=c)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = (a=b=c)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:27:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b and b=c and c=a)
isosceles = (a=b or a=c or c=b)
escaleno = (a!=b!=c)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = (a=b and b=c and c=a)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:27:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = a=b and b=c and c=a
isosceles = (a=b or a=c or c=b)
escaleno = (a!=b!=c)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 8
    isosceles = (a=b or a=c or c=b)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:27:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = a=b and b=c and c=a
isosceles = a=b or a=c or c=b
escaleno = (a!=b!=c)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = a=b and b=c and c=a
                  ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 08:28:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = a=b and b=c and c=a
isosceles = a=b or a=c or c=b
escaleno = (a!=b!=c)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- EXECUTION TIME:
0.190771
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    equilatero = a=b and b=c and c=a
                  ^
SyntaxError: can't assign to operator

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:28:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = a=b and b=c and c=a
isosceles = a=b or a=c or c=b
escaleno = (a!=b!=c)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = a=b and b=c and c=a
                  ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:31:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b and b=c and c=a)
isosceles = a=b or a=c or c=b
escaleno = 
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = (a=b and b=c and c=a)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:31:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b and b=c and c=a)
isosceles = a=b or a=c or c=b
escaleno = 
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = (a=b and b=c and c=a)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:32:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b and b=c and c=a)
isosceles = (a=b or a=c or c=b)
escaleno = (a!=b and b!=c and c!=a)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = (a=b and b=c and c=a)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:34:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b) and (b=c) and (c=a)
isosceles = (a=b) or (a=c) or (c=b)
escaleno = (a!=b) and (b!=c) and (c!=a)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = (a=b) and (b=c) and (c=a)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:34:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

equilatero = (a=b) and (b=c) and (c=a)
isosceles = (a=b) or (a=c) or (c=b)
escaleno = (a!=b) and (b!=c) and (c!=a)
invalido = (a<0 or b<0 or c<0)  or (a>b+c and b>c+a and c>b+a)

if ((a < b + c) and (b < a + c) and (c < a + b)):
	if (equilatero):
		print("equilatero")
	else:
		if(isosceles):
			print("isosceles")
		else:
			if(escaleno):
				print("escaleno")
else:
	print("invalido")
	

-- ERROR:
File "XXXX", line 7
    equilatero = (a=b) and (b=c) and (c=a)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:38:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else: 
			print("Tipo de triangulo: escaleno")
else: 
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 08:38:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else: 
			print("Tipo de triangulo: escaleno")
else: 
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 08:38:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else: 
			print("Tipo de triangulo: escaleno")
else: 
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.172034
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 08:38:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if((a < b + c) and (b < a + c) and (c < b + a)):
	if((a == b) and (b == c) and (a == c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b) or (b == c)):
			print("Tipo de triangulo: isosceles")
		else: 
			print("Tipo de triangulo: escaleno")
else: 
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.122964
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
