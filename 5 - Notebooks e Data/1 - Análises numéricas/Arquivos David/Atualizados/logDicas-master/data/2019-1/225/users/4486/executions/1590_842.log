== TEST (2019-03-29 23:22:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A//1000
C = (A%1000)//100
D = ((A%1000)//100)//10
E = ((((A%1000)//100)//10)(A))

S = A + B + C + D
print(s)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    E = ((((A%1000)//100)//10)(A))
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:27:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A//1000
C = (A%1000)//100
D = ((A%1000)%100)//10
E = ((A%1000)%100)% 10

S = B + C + D + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:29:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A//1000
C = (A%1000)
X = C//100
D =(C%100)
Y = D//10
E = (D%10)

S = B 
print(S)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:29:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A//1000
C = A%1000
X = C//100
D = C%100
Y = D//10
E = D%10

S = B 
print(S)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:31:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A // 1000
C = A % 1000
X = C // 100
D = C % 100
Y = D // 10
E = D % 10

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:31:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = (input("Digite um numero de 4 dígitos:"))
B = A // 1000
C = A % 1000
X = C // 100
D = C % 100
Y = D // 10
E = D % 10

S = B + X + Y + E
print(S)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    B = A // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:32:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = (input("Digite um numero de 4 dígitos:"))
B = A // 1000



print(B)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    B = A // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:32:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = (input("Digite um numero de 4 dígitos:"))
B = A // 1000



print(B)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    B = A // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:32:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = (input("Digite um numero de 4 dígitos:"))
B = A // 1000



print(B)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    B = A // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:33:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = (input("Digite um numero de 4 dígitos:"))
B = A // 1000
C = A % 1000
X = C // 100
D = C % 100
Y = D // 10
E = D % 10

S = B + X + Y + E
print(S)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    B = A // 1000
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:34:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A // 1000
C = A % 1000
X = C // 100
D = C % 100
Y = D // 10
E = D % 10

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:36:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A // 1000
C = A % 1000
X = C // 100
D = C % 100
Y = D // 10
E = D % 10

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:37:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = A // 1000
C = A % 1000
X = C // 100
D = C % 100
Y = D // 10
E = D % 10

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:00:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = (A // 1000)
C = (A % 1000)
X = (C // 100)
D = (C % 100)
Y = (D // 10)
E = (D % 10)

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:02:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = (A // 1000)
C = (A % 1000)
X = (C // 100)
D = (C % 100)
Y = (D // 10)
E = (D % 10)

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 21:38:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = (A // 1000)
C = (A % 1000)
X = (C // 100)
D = (C % 100)
Y = (D // 10)
E = (D % 10)

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:24:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:25:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:25:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um numero de 4 dígitos:"))

print(A)

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:26:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = input("Digite uma frase:")
print(A.lower())

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:27:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:28:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- EXECUTION TIME:
0.151852
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A // 1000) # 3
C = (A % 1000)  # 141
X = (C // 100)  # 1
D = (C % 100)   # 41
Y = (D // 10)   # 4
E = (D % 10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A//1000) # 3
C = (A%1000)  # 141
X = (C//100)  # 1
D = (C%100)   # 41
Y = (D//10)   # 4
E = (D%10)    # 1

S = B + X + Y + E
print(B)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:29:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A//1000) # 3
C = (A%1000)  # 141
X = (C//100)  # 1
D = (C%100)   # 41
Y = (D//10)   # 4
E = (D%10)    # 1

S = B + X + Y

print(S+E)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:29:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
A = int(input("Digite um número:"))
B = (A//1000) # 3
C = (A%1000)  # 141
X = (C//100)  # 1
D = (C%100)   # 41
Y = (D//10)   # 4
E = (D%10)    # 1

S = B + X + Y + E
print(S)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:31:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)
-- OUTPUT:
A soma dos números é:  20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:31:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = n // 10
    soma = soma + resto


print("A soma dos números é: ", soma)
-- OUTPUT:
A soma dos números é:  20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:32:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:32:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:33:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("Numero: "))
soma = 0
while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.20281
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:23:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

soma = 0
while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:26:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())
a = x//1000
b = x % 1000
c = b // 100
d = b % 100
e = c // 10
f = c % 10
s = a + c + e + f
print(s)
-- OUTPUT:
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:26:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())
a = x//1000
b = x % 1000
c = b // 100
d = b % 100
e = c // 10
f = c % 10
s = a + c + e + f
print(s)
-- OUTPUT:
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:28:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())
a = x//1000
b = x % 1000
c = b // 100
d = b % 100
e = d // 10
f = d % 10
s = a + c + e + f
print(s)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:28:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())
a = x//1000
b = x % 1000
c = b // 100
d = b % 100
e = d // 10
f = d % 10
s = a + c + e + f
print(s)
-- EXECUTION TIME:
0.164789
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
