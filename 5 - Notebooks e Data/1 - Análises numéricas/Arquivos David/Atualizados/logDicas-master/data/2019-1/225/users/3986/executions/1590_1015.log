== TEST (2019-03-23 16:06:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

print(x, y, z)
-- OUTPUT:
10 -2 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:07:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

print(max(x,y,z))
-- OUTPUT:
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:07:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

print(max(x,y,z))
print(min(x,y,z))
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:07:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

print(max(x,y,z))
print(min(x,y,z))
-- EXECUTION TIME:
0.123207
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:08:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

print(max(x,y,z))
print(min(x,y,z))
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:08:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

print(max(z,y,x))
print(min(x,y,z))
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:12:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

m=max(x,y,z)
l=min(x,y,z)
n= x + y + z - l - m
-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:14:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

m=max(x,y,z)
l=min(x,y,z)
n= x + y + z - l - m
print(l,n,m)
-- OUTPUT:
-2 0 10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:14:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x=int(input("valor 1: "))
y=int(input("valor 2: "))
z=int(input("valor 3: "))

m=max(x,y,z)
l=min(x,y,z)
n= x + y + z - l - m
print(l,n,m)
-- EXECUTION TIME:
0.177545
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2 0 10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
