== TEST (2019-04-22 15:02:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print ("entradas:", a ",", b "," , c ",")
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
	#isosceles
	if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
	       #escaleno
		    if (a != b !=c):
				print("Tipo de triangulo:", "escaleno")
		    	  #invalido
			   	if(abs(b-c)<a<(b+c)):
					   print("valido")
					else:
						print("tipo de triangulo", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 6
    print ("entradas:", a ",", b "," , c ",")
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:02:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print ("entradas:", a ",", b "," , c ",")
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
	#isosceles
	if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
	       #escaleno
		    if (a != b !=c):
				print("Tipo de triangulo:", "escaleno")
		    	  #invalido
			   	if(abs(b-c)<a<(b+c)):
					   print("valido")
					else:
						print("tipo de triangulo", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 6
    print ("entradas:", a ",", b "," , c ",")
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:03:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
	#isosceles
	if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
	       #escaleno
		    if (a != b !=c):
				print("Tipo de triangulo:", "escaleno")
		    	  #invalido
			   	if(abs(b-c)<a<(b+c)):
					   print("valido")
					else:
						print("tipo de triangulo", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 14
    if (a != b !=c):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:04:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
	#isosceles
	if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
	   #escaleno
		if (a != b !=c):
		   print("Tipo de triangulo:", "escaleno")
		   #invalido
			 if(abs(b-c)<a<(b+c)):
			   print("valido")
			else:
				print("tipo de triangulo", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 14
    if (a != b !=c):
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:06:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
	#isosceles
	if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
	   #escaleno
		if (a != b !=c):
		   print("Tipo de triangulo:", "escaleno")
		   #invalido
			 if(abs(b-c)<a<(b+c)):
			   print("tipo de triangulo:", "valido")
			else:
				print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 14
    if (a != b !=c):
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:06:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
	#isosceles
	if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
	   #escaleno
		if (a != b !=c):
		   print("Tipo de triangulo:", "escaleno")
		   #invalido
			 if(abs(b-c)<a<(b+c)):
			   print("tipo de triangulo:", "valido")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 14
    if (a != b !=c):
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:07:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
#isosceles
if (a == b !=c):
	print("Tipo de triangulo:", "isosceles")
#escaleno
if (a != b !=c):
	print("Tipo de triangulo:", "escaleno")
#invalido
if(abs(b-c)<a<(b+c)):
	print("tipo de triangulo:", "valido")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: valido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:09:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
#isosceles
if (a == b !=c):
	print("Tipo de triangulo:", "isosceles")
#escaleno
if (a != b !=c):
	print("Tipo de triangulo:", "escaleno")
#invalido
if(abs(b-c)<a<(b+c)):
	print("tipo de triangulo:", "valido")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.163743
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: valido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
tipo de triangulo: valido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:12:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
#isosceles
if (a == b !=c):
#escaleno
if (a != b !=c):
#invalido
if(abs(b-c)<a<(b+c)):
	print("tipo de triangulo:", "valido")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 10
    if (a == b !=c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:12:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
#isosceles
if (a == b !=c):
	print("Tipo de triangulo:", "isosceles")
#escaleno
if (a != b !=c):
	print("Tipo de triangulo:", "escaleno")
#invalido
if(abs(b-c)<a<(b+c)):
	print("tipo de triangulo:", "valido")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: valido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:22:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
if(abs(b-c)<a<(b+c)):
	print("tipo de triangulo:", "valido")
else:
	print("tipo de triangulo:", "invalido")
#equilatero
if (a == b == c):
	print("Tipo de triangulo:", "equilatero")
#isosceles
if (a == b !=c):
	print("Tipo de triangulo:", "isosceles")
#escaleno
if (a != b != c):
	print("Tipo de triangulo:", "escaleno")
#invalido

				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: valido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:24:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if (a == b == c):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
   #escaleno
   if (a != b != c):
	   print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:24:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if (a == b == c):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   if (a == b !=c):
	   print("Tipo de triangulo:", "isosceles")
   #escaleno
   if (a != b != c):
	   print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.125257
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
		 if((a == b) or (b == c)):
	   print("Tipo de triangulo:", "isosceles")
   #escaleno
       else:
	     print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 10
    if ((a == b) and (b == c) and (a == c):
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
		 if((a == b) or (b == c)):
	   print("Tipo de triangulo:", "isosceles")
   #escaleno
       else:
	     print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 14
    if((a == b) or (b == c)):
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:30:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
		 if((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
   #escaleno
       else:
	     print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 14
    if((a == b) or (b == c)):
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:30:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
   if((a == b) or (b == c)):
	   print("Tipo de triangulo:", "isosceles")
   #escaleno
    else:
	   print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 14
    if((a == b) or (b == c)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:31:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
      if((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
   #escaleno
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:31:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
      if((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
   #escaleno
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.170071
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:32:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
   #escaleno
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:32:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))
print("Entradas:", a, ",", b, ",", c)
#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
   #escaleno
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.176888
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:35:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
   #escaleno
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:35:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   #isosceles
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
   #escaleno
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.133518
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:35:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:36:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   #equilatero
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.14766
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:36:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:37:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.209675
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:37:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
if ((a == b) and (b == c) and (a == c)):
	 print("Tipo de triangulo:", "equilatero")
else:
   if ((a == b) or (b == c)):
	   print("Tipo de triangulo:", "isosceles")
   else:
	   print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- ERROR:
File "XXXX", line 11
    if ((a == b) and (b == c) and (a == c)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:37:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:37:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.111234
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:38:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
				
				
			   
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:38:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)

#invalido
if(abs(b-c)<a<(b+c)):
   if ((a == b) and (b == c) and (a == c)):
	   print("Tipo de triangulo:", "equilatero")
   else:
      if ((a == b) or (b == c)):
	      print("Tipo de triangulo:", "isosceles")
      else:
	      print("Tipo de triangulo:", "escaleno")
else:
	print("Tipo de triangulo:", "invalido")
				
				
			   
-- EXECUTION TIME:
0.22074
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
