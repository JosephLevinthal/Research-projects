== TEST (2019-04-19 19:20:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print(" Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if (___COMPLETE AQUI___):
	# Testa se medidas correspondem aas de um triangulo
	if (___COMPLETE AQUI___):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (___COMPLETE AQUI___):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:27:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print(" Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if (___COMPLETE AQUI___):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    if (___COMPLETE AQUI___):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:29:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print(" Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B or (A+B>C)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    if ((B+C>A) or (A+C>B or (A+B>C)):
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:29:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print(" Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    s = (a + b + c) / 2.0
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:30:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print(" Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 22.0 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:31:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 22.0 33.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:32:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:32:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:43:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:44:04) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:44:13) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 10:22:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 10:23:30) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 23:05:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-21 22:20:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-21 22:20:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")


-- OUTPUT:
Entradas: -11.0 22.0 33.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-21 22:21:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
	else:
		print(" Area: invalida ")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-21 22:21:43) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print(" Area: invalida ")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-21 22:21:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print("Area: invalida")
else:
	print(" Area: invalida ")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-21 22:22:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A, B, C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print(" Area: invalida ")
else:
	print(" Area: invalida ")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 13:51:18) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
else:
	print(" Area: invalida ")
else:
	print(" Area: invalida ")

-- ERROR:
File "XXXX", line 21
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 13:51:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) or (A+C>B) or (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print(" Area: invalida ")
else:
	print(" Area: invalida ")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 13:53:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) and (B>0) and (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print(" Area: invalida ")
else:
	print(" Area: invalida ")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
 Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 13:53:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) and (B>0) and (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print(" Area: invalida ")
else:
	print(" Area: invalida ")

-- EXECUTION TIME:
0.231203
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
 Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
 Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 13:53:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) and (B>0) and (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print(" Area: invalida ")
else:
	print(" Area: invalida ")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
 Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 13:54:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) and (B>0) and (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 13:54:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) and (B>0) and (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- EXECUTION TIME:
0.142396
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 13:56:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 13:56:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- EXECUTION TIME:
0.136279
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 13:57:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 13:57:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:", A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- EXECUTION TIME:
0.189985
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:14:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:"A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- EXECUTION TIME:
0.165369
-- ERROR:
  File "/home/codebench/codes/1671/1079/main.py", line 10
    print("Entradas:"A,",", B ,",", C)
                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 13:14:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))

print("Entradas:",A,",", B ,",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A>0) or (B>0) or (C>0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((B+C>A) and (A+C>B) and (A+B>C)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida ")
else:
	print("Area: invalida ")

-- EXECUTION TIME:
0.180582
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
