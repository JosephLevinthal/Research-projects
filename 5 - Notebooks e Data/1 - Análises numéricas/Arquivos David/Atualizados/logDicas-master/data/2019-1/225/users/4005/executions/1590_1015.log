== TEST (2019-03-20 15:22:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(a=(11),b=(12),c=(13))
min(a,b,c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(a=(11),b=(12),c=(13))
TypeError: int() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:24:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(a=11,b=12,c=13)
min(a,b,c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(a=11,b=12,c=13)
TypeError: int() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(a=11,b=12,c=13)
min(a,b,c)
-- EXECUTION TIME:
0.13686
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1015/main.py", line 4, in <module>
    int(a=11,b=12,c=13)
TypeError: int() takes at most 2 arguments (3 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:24:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(a=11,b=12,c=13)
min(a,b,c)
print(min)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(a=11,b=12,c=13)
TypeError: int() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:25:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(a=11,b=12,c=13,d=14,e=15)
min(a,b,c,d,e)
print(min)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(a=11,b=12,c=13,d=14,e=15)
TypeError: int() takes at most 2 arguments (5 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:25:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(a=11,b=12,c=13,d=14,e=15)
min(a,b,c,d,e)
print(min)
-- EXECUTION TIME:
0.170931
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1015/main.py", line 4, in <module>
    int(a=11,b=12,c=13,d=14,e=15)
TypeError: int() takes at most 2 arguments (5 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:26:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(a=11,b=12,c=13,d=14,e=15)
min("a,b,c,d,e")
print(min)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(a=11,b=12,c=13,d=14,e=15)
TypeError: int() takes at most 2 arguments (5 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:26:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(11,12,13,14,15)
min(int)
print(min)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(11,12,13,14,15)
TypeError: int() takes at most 2 arguments (5 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:26:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(11,12,13,14,15)
min(int)
print(min)
-- EXECUTION TIME:
0.142022
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1015/main.py", line 4, in <module>
    int(11,12,13,14,15)
TypeError: int() takes at most 2 arguments (5 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:26:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(11,12,13)
min(int)
print(min)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(11,12,13)
TypeError: int() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:27:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
min(11,14,9)
print(min)
-- OUTPUT:
<built-in function min>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:27:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
min(11,14,9)
print(min)
-- EXECUTION TIME:
0.20228
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
<built-in function min>
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:27:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
min(11,14,9)
print(min)
-- OUTPUT:
<built-in function min>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:27:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
min(11,14,9)

-- OUTPUT:
<built-in function min>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:27:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
min(11,14,9)

-- OUTPUT:
<built-in function min>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:27:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
min(1,2,3,4,5,6)

-- OUTPUT:
<built-in function min>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:28:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
min(1,2,3,4,5,6)
max(6,5,4,3,2,1)

-- OUTPUT:
<built-in function min>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:05:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(:))
y = int(input(:))
z = int(input(:))
a = min(x,y,z)
print(x)
print(y)
print(z)




-- ERROR:
File "XXXX", line 4
    x = int(input(:))
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:05:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
print(x)
print(y)
print(z)




-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:06:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
print(a)





-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:06:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
print(a)





-- EXECUTION TIME:
0.237412
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:07:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
print(a)
print()
print(b)






-- OUTPUT:
-2

10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:08:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
med= (a/b)
b = max(x,y,z)
print(a)
print(med)
print(b)






-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    med= (a/b)
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:08:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
med= int(a/b)
b = max(x,y,z)
print(a)
print(med)
print(b)






-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    med= int(a/b)
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:09:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)

b = max(x,y,z)
print(a)
print(a-b)
print(b)






-- OUTPUT:
-2
-12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:09:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)

b = max(x,y,z)
print(a)
print(a-b)
print(b)






-- EXECUTION TIME:
0.144614
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:09:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)

b = max(x,y,z)
print(a)
print(b-a)
print(b)






-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:10:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)

b = max(x,y,z)
print(a)
print(b-a)
print(b)






-- EXECUTION TIME:
0.171246
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:10:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)

b = max(x,y,z)
print(a)
print(b-a)
print(b)






-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:10:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)

b = max(x,y,z)
print(a)
print(b-a)
print(b)






-- EXECUTION TIME:
0.198311
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:10:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
print(a)
print(b-a)
print(b)






-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:13:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)
i = (a-c)
print(a)
print(i)
print(b)






-- OUTPUT:
-2
-10
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:14:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)
i = (a-c)
print(a)
print(i)
print(b)






-- EXECUTION TIME:
0.174369
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-10
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:14:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)
i = (a-c)
print(a)
print(i)
print(b)






-- OUTPUT:
-2
-10
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:15:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)(a-b)

print(a)
print(c)
print(b)






-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    c =(x+y+z)(a-b)
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:15:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)int(a-b)

print(a)
print(c)
print(b)






-- ERROR:
File "XXXX", line 9
    c =(x+y+z)int(a-b)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:15:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)-(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
20
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:15:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)+(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:16:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)+(a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.167396
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-4
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:16:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)/(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-0.6666666666666666
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:16:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)/(a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.169161
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-0.6666666666666666
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:16:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z)*(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-96
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:17:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b-a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:17:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b-a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:17:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b+a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:18:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b+a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.146219
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-4
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:18:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b+a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:18:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b+a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.185768
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-4
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:18:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)+(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:18:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)+(a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.133213
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-4
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:19:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)+(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:19:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)+(a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.152461
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-4
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:19:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)+(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:20:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)*(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-96
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:20:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)*(a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.134891
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-96
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:20:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)/(a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
-0.6666666666666666
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:20:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(a+b)/(a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.289181
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-0.6666666666666666
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 21:21:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z-a-b)

print(a)
print(c)
print(b)






-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 21:21:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(":"))
y = int(input(":"))
z = int(input(":"))
a = min(x,y,z)
b = max(x,y,z)
c =(x+y+z-a-b)

print(a)
print(c)
print(b)






-- EXECUTION TIME:
0.211942
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
