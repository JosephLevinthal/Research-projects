== TEST (2019-04-03 15:10:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2.5/3,3))
-- OUTPUT:
0.833
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:10:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2.5/3,3))
-- EXECUTION TIME:
0.150722
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.833
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.833
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.833
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:10:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/3,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:10:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/3,3))
-- EXECUTION TIME:
0.176498
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:10:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/3,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:10:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/3,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:10:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/3,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:10:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(10/3,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:11:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= 10/3
print(round(var,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:11:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= 10/3
print(round(var,3))
-- EXECUTION TIME:
0.136811
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(var,3))
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.132655
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.153124
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.112593
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.120587
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.183351
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.384235
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.170874
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1590/1446/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.430656
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- OUTPUT:
1.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.487949
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
1.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.298593
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1590/1446/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.292943
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1590/1446/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:13:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)
var2= var1/3
print(round(var2,3))
-- EXECUTION TIME:
0.4001
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
1.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
1.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:13:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)

print(round(var1,3))
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:14:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/2)

print(round(var1,3))
-- EXECUTION TIME:
0.280354
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
5.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
5.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:14:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/3)

print(round(var1,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:14:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/3)

print(round(var1,3))
-- EXECUTION TIME:
0.186502
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:14:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10//3)

print(round(var1,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:14:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10//3)

print(round(var1,3))
-- EXECUTION TIME:
0.149617
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:52:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10//3)

print(round(var1,3))
-- EXECUTION TIME:
0.184525
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:52:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10//3)

print(round(var1,3))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:52:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= (10/3)

print(round(var1,3))
-- OUTPUT:
3.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:22:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input())
var2=int(input())
dividendo=var1
divisor=var2
print(dividendo)
print(divisor)
print(var1//var2)
print(var1%var2)
-- EXECUTION TIME:
0.133976
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 5, in <module>
    var2=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:22:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input())
var2=int(input())
dividendo=var1
divisor=var2
print(dividendo)
print(divisor)
print(var1//var2)
print(var1%var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:22:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input())
var2=int(input())
dividendo=var1
divisor=var2
print(dividendo)
print(divisor)
print(var1//var2)
print(var1%var2)
-- EXECUTION TIME:
0.198658
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 5, in <module>
    var2=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:24:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:24:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.125093
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.148193
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.164727
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.1
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
2.1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.177363
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
2.1
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
6.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.184339
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1590/1446/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.0981231
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1590/1446/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.162723
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
4.5
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:

-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:24:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.204934
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:24:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.168875
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:25:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(input())
var2= round(var1/10*3,2)
print(var2)

-- EXECUTION TIME:
0.164507
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:28:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input())
print(round(a/3,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:28:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input())
print(round(a/3,3))
-- EXECUTION TIME:
0.129647
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:34:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input())
print(round(a/3,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:34:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input())
print(round(a/3,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:34:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input())
print(round(a/3,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:35:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input())
print(round(a/3,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:35:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input())
print(round(a/3,3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
