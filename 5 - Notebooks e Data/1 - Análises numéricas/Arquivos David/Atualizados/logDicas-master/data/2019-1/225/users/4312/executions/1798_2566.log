== TEST (2019-06-10 14:14:42) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range size(fal):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 6
    for i in range size(fal):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:14:53) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range size(fal):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 6
    for i in range size(fal):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:14:54) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range size(fal):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 6
    for i in range size(fal):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:14:54) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range size(fal):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 6
    for i in range size(fal):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:15:20) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 19
    for i in range size(vet):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:15:21) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 19
    for i in range size(vet):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:15:21) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 19
    for i in range size(vet):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:15:22) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 19
    for i in range size(vet):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:15:24) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range size(vet):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
File "XXXX", line 19
    for i in range size(vet):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:15:31) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:16:01) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:16:12) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(5, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:16:35) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = vet[i] * 10
print(round(vet, 1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:16:59) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = vet[i] * 10
print(vet)
-- EXECUTION TIME:
1.03913
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[30  0  0 30 40 60]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[10 20 40 50 50 80]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[20 10 30 10 20 40]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:48:18) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:49:03) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:50:05) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:50:06) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:50:07) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:50:11) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:50:17) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- EXECUTION TIME:
3.18788
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 26, in <module>
    vet[6] = (vet[6]/size(vet))*100
IndexError: index 6 is out of bounds for axis 0 with size 6

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:50:18) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- EXECUTION TIME:
2.98763
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 26, in <module>
    vet[6] = (vet[6]/size(vet))*100
IndexError: index 6 is out of bounds for axis 0 with size 6

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 14:50:18) 
-- CODE:
from numpy import*
fal = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(fal)):
	if(fal[i] == 2):
		vet[0] = vet[0] + 1
	elif(fal[i] == 3):
		vet[1] = vet[1] + 1
	elif(fal[i] == 4):
		vet[2] = vet[2] + 1
	elif(fal[i] == 5):
		vet[3] = vet[3] + 1
	elif(fal[i] == 6):
		vet[4] = vet[4] + 1
	elif(fal[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- EXECUTION TIME:
3.88942
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 26, in <module>
    vet[6] = (vet[6]/size(vet))*100
IndexError: index 6 is out of bounds for axis 0 with size 6

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:51:15) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 14:51:16) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:04:22) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100
	vet[6] = (vet[6]/size(vet))*100
print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:05:57) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100

print(round(vet, 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:06:22) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = (vet[0]/size(vet))*100
	vet[1] = (vet[1]/size(vet))*100
	vet[2] = (vet[2]/size(vet))*100
	vet[3] = (vet[3]/size(vet))*100
	vet[4] = (vet[4]/size(vet))*100
	vet[5] = (vet[5]/size(vet))*100

print(round(vet[i], 1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:09:45) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/6)*100
print(round(vte[i], 1))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:10:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/6)*100
print(round(vet[i], 1))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:10:43) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/6)*100
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:13:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:13:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:13:48) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
1.03274
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:14:33) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:14:44) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100, 1)
print(vet)


-- EXECUTION TIME:
1.23837
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:24) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
1.88258
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:25) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
2.23819
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:26) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
6.78528
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:27) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
9.09244
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:28) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
9.11194
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15  7 23  7 15 30]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:29) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
9.12386
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15  7 23  7 15 30]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18  0  0 18 25 37]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:43) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
6.01726
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:44) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
6.18791
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
6.13236
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:47) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
5.91222
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:47) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
6.10152
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:47) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
5.91094
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15  7 23  7 15 30]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18  0  0 18 25 37]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:51) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
3.89924
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:31:51) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = (vet[i]/size(falt))*100
print(vet)


-- EXECUTION TIME:
2.49149
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2566/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:44:15) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:44:15) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100, 1)
print(vet)


-- EXECUTION TIME:
1.27211
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:44:20) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100, 1)
print(vet)


-- EXECUTION TIME:
2.28713
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [18  0  0 18 25 37]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4  8 16 20 20 32]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:44:23) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100, 1)
print(vet)


-- EXECUTION TIME:
3.1329
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0 18 25 37]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  8 16 20 20 32]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:44:23) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100, 1)
print(vet)


-- EXECUTION TIME:
2.20065
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[15  7 23  7 15 30]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:

-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15  7 23  7 15 30]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:47:34) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:47:36) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
1.12527
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0  9 10 14]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  7 12 12 10 15]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [18  0  0  9 10 14]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:47:37) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:47:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
1.04197
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18  0  0  9 10 14]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4  7 12 12 10 15]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15  3 10  2  5 10]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:48:08) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6, dtype=int)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100.0, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:48:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100.0, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:50:57) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100.0, 1)
print(vet)


-- EXECUTION TIME:
1.72105
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:50:57) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100.0, 1)
print(vet)


-- EXECUTION TIME:
3.17646
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:50:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100.0, 1)
print(vet)


-- EXECUTION TIME:
6.50492
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:50:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100.0, 1)
print(vet)


-- EXECUTION TIME:
8.71506
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:50:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100.0, 1)
print(vet)


-- EXECUTION TIME:
8.37128
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:50:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt))*100.0, 1)
print(vet)


-- EXECUTION TIME:
8.56573
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:14) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
1.9762
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:15) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
2.33625
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:17) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
2.88581
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:21) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
3.50504
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:34) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
7.6191
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:35) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
9.32056
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:36) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
8.98997
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:36) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
9.38374
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:37) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
8.85195
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:38) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100.0, 1)
print(vet)


-- EXECUTION TIME:
6.10155
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(v*100, 1)
print(vet)


-- EXECUTION TIME:
3.83574
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:51:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:51:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:47) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(v*100, 1)
print(vet)


-- EXECUTION TIME:
3.51862
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:48) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(v*100, 1)
print(vet)


-- EXECUTION TIME:
3.49813
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:49) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(v*100, 1)
print(vet)


-- EXECUTION TIME:
3.52027
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:49) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(v*100, 1)
print(vet)


-- EXECUTION TIME:
3.82278
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:51) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(*100, 1)
print(vet)


-- EXECUTION TIME:
4.00558
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:51:51) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:51:51) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
3.95976
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:51:59) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
3.72585
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:00) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
3.7871
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:00) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
3.88314
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
3.94319
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:02) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
3.59786
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:06) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
3.53724
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt)*100, 1)
print(vet)


-- EXECUTION TIME:
2.92149
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt*100, 1)
print(vet)


-- EXECUTION TIME:
1.54801
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2566/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(falt*100, 1)
print(vet)


-- EXECUTION TIME:
2.24242
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:09) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:09) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:09) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:09) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:09) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:21) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
1.21849
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:22) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
3.32923
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:22) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:23) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
4.68989
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:23) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
5.38039
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:23) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
6.20833
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:23) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
6.92905
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:24) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
1.31693
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2566/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:24) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:31) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
1.04176
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:32) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
2.8398
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:32) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
2.78941
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:33) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
2.82441
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    print(vet)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:52:40) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet)*100, 1)
print(vet)


-- EXECUTION TIME:
0.62233
-- ERROR:
  File "/home/codebench/codes/1798/2566/main.py", line 21
    print(vet)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:53:11) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:53:13) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
0.98558
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:53:17) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
0.812026
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:54:08) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]*100/sum(vet)), 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:54:08) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]*100/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
1.19512
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:54:09) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]*100/sum(vet)), 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:54:12) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]*100/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
1.3439
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:54:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]*100)/sum(vet)), 1))
print(vet)


-- ERROR:
File "XXXX", line 20
    vet[i] = round((vet[i]*100)/sum(vet)), 1))
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:54:49) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]*100)/sum(vet), 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:55:10) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:34) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
1.75259
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:35) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
4.01299
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:35) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
6.48468
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:36) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
7.62111
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:37) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
8.70236
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 15:58:38) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
9.655
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:03:27) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
0.971457
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:03:29) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
2.39967
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:03:32) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- EXECUTION TIME:
1.19499
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.   9.4 10.5 13.4]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.   7.1 12.1 12.1 10.4 14.9]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  3.8 10.3  2.7  5.2  9.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:03:37) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(((vet[i]*100)/sum(vet)), 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:07:43) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = round(((vet[0]/sum(vet))*100, 1)
	vet[1] = round(((vet[1]/sum(vet))*100, 1)
	vet[2] = round(((vet[2]/sum(vet))*100, 1)
	vet[3] = round(((vet[3]/sum(vet))*100, 1)
	vet[4] = round(((vet[4]/sum(vet))*100, 1)
	vet[5] = round(((vet[5]/sum(vet))*100, 1)
print(vet)


-- ERROR:
File "XXXX", line 21
    vet[1] = round(((vet[1]/sum(vet))*100, 1)
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:08:28) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = round((vet[0]/sum(vet))*100, 1)
	vet[1] = round((vet[1]/sum(vet))*100, 1)
	vet[2] = round((vet[2]/sum(vet))*100, 1)
	vet[3] = round((vet[3]/sum(vet))*100, 1)
	vet[4] = round((vet[4]/sum(vet))*100, 1)
	vet[5] = round((vet[5]/sum(vet))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:09:08) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = round((vet[0]/size(vet))*100, 1)
	vet[1] = round((vet[1]/size(vet))*100, 1)
	vet[2] = round((vet[2]/size(vet))*100, 1)
	vet[3] = round((vet[3]/size(vet))*100, 1)
	vet[4] = round((vet[4]/size(vet))*100, 1)
	vet[5] = round((vet[5]/size(vet))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:09:56) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = round((vet[0]/size(vet))*100, 1)
	vet[1] = round((vet[1]/size(vet))*100, 1)
	vet[2] = round((vet[2]/size(vet))*100, 1)
	vet[3] = round((vet[3]/size(vet))*100, 1)
	vet[4] = round((vet[4]/size(vet))*100, 1)
	vet[5] = round((vet[5]/size(vet))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:09:59) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = round((vet[0]/size(vet))*100, 1)
	vet[1] = round((vet[1]/size(vet))*100, 1)
	vet[2] = round((vet[2]/size(vet))*100, 1)
	vet[3] = round((vet[3]/size(vet))*100, 1)
	vet[4] = round((vet[4]/size(vet))*100, 1)
	vet[5] = round((vet[5]/size(vet))*100, 1)
print(vet)


-- EXECUTION TIME:
1.02236
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [6.42976950e+07 0.00000000e+00 0.00000000e+00 6.42976950e+07
 8.57791667e+07 1.28603250e+08]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [2.14736117e+07 4.28240833e+07 8.57791667e+07 1.07121750e+08
 1.07121750e+08 1.71427305e+08]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [42824083.3 21473611.7 64297695.  21473611.7 42824083.3 85779166.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:10:05) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[0] = round((vet[0]/size(vet))*100, 1)
	vet[1] = round((vet[1]/size(vet))*100, 1)
	vet[2] = round((vet[2]/size(vet))*100, 1)
	vet[3] = round((vet[3]/size(vet))*100, 1)
	vet[4] = round((vet[4]/size(vet))*100, 1)
	vet[5] = round((vet[5]/size(vet))*100, 1)
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:13:34) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/sum(vet))*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:14:31) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(vet))*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 16:14:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(vet))*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.943425
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 50.    0.    0.   50.   66.7 100. ]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 16.7  33.3  66.7  83.3  83.3 133.3]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[33.3 16.7 50.  16.7 33.3 66.7]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:14:49) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(vet))*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:15:02) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(vet))*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 16:17:33) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round((vet[i]/size(vet))*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:53:41) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:53:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.05991
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:53:47) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.96466
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:53:56) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.925875
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:06) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.70894
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:

-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:54:06) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:17) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.88144
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:19) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.74036
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:20) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
4.99239
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:21) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
4.8137
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:54:21) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
4.12546
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:

-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 10:55:59) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:05) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.80466
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:06) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.11657
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 10:56:06) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
3.2152
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:05:41) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.93354
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:05:42) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.83223
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:05:42) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:05:42) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:05:43) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
4.04035
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:05:44) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
7.05006
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:05:45) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
10.4311
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:05:46) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
10.0663
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:00) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.8047
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.14065
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.4274
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.67298
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.88941
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.95792
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:06:25) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:28) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.932928
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:32) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.978362
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:48) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.37867
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:48) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
4.17776
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:49) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
3.37181
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:50) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
6.43834
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:51) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
8.31818
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:51) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
8.1186
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:54) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.73677
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:06:54) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.18553
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2566/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:07:11) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:07:22) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.15178
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:07:26) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.42977
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:07:26) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.85404
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:07:27) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
8.27762
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:07:27) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
7.76386
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:07:27) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	if(falt[i] == 2):
		vet[0] = vet[0] + 1
	elif(falt[i] == 3):
		vet[1] = vet[1] + 1
	elif(falt[i] == 4):
		vet[2] = vet[2] + 1
	elif(falt[i] == 5):
		vet[3] = vet[3] + 1
	elif(falt[i] == 6):
		vet[4] = vet[4] + 1
	elif(falt[i] == 7):
		vet[5] = vet[5] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
8.50776
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:

-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:08:22) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:08:27) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.909315
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 7, in <module>
    dia = falta[i] - 2
NameError: name 'falta' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:08:33) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.43805
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 7, in <module>
    dia = falta[i] - 2
NameError: name 'falta' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:08:34) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
3.21851
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 7, in <module>
    dia = falta[i] - 2
NameError: name 'falta' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:08:34) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
3.868
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 7, in <module>
    dia = falta[i] - 2
NameError: name 'falta' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:08:34) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.77555
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1798/2566/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:09:02) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:09:03) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:09:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.29931
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 7, in <module>
    dia = falta[i] - 2
NameError: name 'falta' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:09:08) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falta[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.96018
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1798/2566/main.py", line 7, in <module>
    dia = falta[i] - 2
NameError: name 'falta' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:09:28) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:09:30) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.1339
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:09:41) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.12569
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:09:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:04) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.70707
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:05) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.22769
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:05) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.48534
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:10:20) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:28) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
4.07318
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:30) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
7.68401
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:38) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.48017
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:10:38) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.90248
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.90944
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:39) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.71118
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:40) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.90535
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:40) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.89885
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:10:47) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:10:47) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:10:59) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.834967
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:11:06) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.3675
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:11:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
3.49674
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:11:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
8.1181
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:11:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
6.92755
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:11:07) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
7.56508
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 11:15:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:25) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
5.01681
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:25) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
3.24097
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 11:16:25) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.22226
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 13:48:17) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 13:48:21) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 13:48:29) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.07041
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 13:48:30) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.90763
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- GRADE:
33%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 13:48:30) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
3.22047
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 13:48:31) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
2.63748
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 13:48:31) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
4.95914
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 13:48:57) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.12997
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 13:49:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.17406
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:05:10) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:05:10) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:05:14) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.764536
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:05:19) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:05:20) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:05:22) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:05:30) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
0.948815
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 08:16:00) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:16:27) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
9.69251
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 08:43:44) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(size(falt)):
	dia = falt[i] - 2
	vet[dia] = vet[dia] + 1
for i in range(size(vet)):
	vet[i] = round(vet[i]/size(falt)*100, 1)
	
print(vet)


-- EXECUTION TIME:
1.10466
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:13:45) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in falt:
	if falt[i] == 2:
		vet[0] = vet[0] + 1
	elif falt[i] == 3:
		vet[1] = vet[1] + 1
	elif falt[i] == 4:
		vet[2] = vet[2] + 1
	elif falt[i] == 5:
		vet[3] = vet[3] + 1
	elif falt[i] == 6:
		vet[4] = vet[4] + 1
	else:
		vet[5] = vet[5] + 1

for i in range(0, size(vet)):
	vet[i] = round(vet[i]/size(falt) * 100, 1)

print(vet)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:15:13) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in falt:
	
	if falt[i] == 2:
		vet[0] = vet[0] + 1
	elif falt[i] == 3:
		vet[1] = vet[1] + 1
	elif falt[i] == 4:
		vet[2] = vet[2] + 1
	elif falt[i] == 5:
		vet[3] = vet[3] + 1
	elif falt[i] == 6:
		vet[4] = vet[4] + 1
	else:
		vet[5] = vet[5] + 1

for i in range(0, size(vet)):
	vet[i] = round(vet[i]/size(falt) * 100, 1)

print(vet)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:15:58) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(0, size(falt)):
	
	if falt[i] == 2:
		vet[0] = vet[0] + 1
	elif falt[i] == 3:
		vet[1] = vet[1] + 1
	elif falt[i] == 4:
		vet[2] = vet[2] + 1
	elif falt[i] == 5:
		vet[3] = vet[3] + 1
	elif falt[i] == 6:
		vet[4] = vet[4] + 1
	else:
		vet[5] = vet[5] + 1

for i in range(0, size(vet)):
	vet[i] = round(vet[i]/size(falt) * 100, 1)

print(vet)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 09:16:01) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(0, size(falt)):
	
	if falt[i] == 2:
		vet[0] = vet[0] + 1
	elif falt[i] == 3:
		vet[1] = vet[1] + 1
	elif falt[i] == 4:
		vet[2] = vet[2] + 1
	elif falt[i] == 5:
		vet[3] = vet[3] + 1
	elif falt[i] == 6:
		vet[4] = vet[4] + 1
	else:
		vet[5] = vet[5] + 1

for i in range(0, size(vet)):
	vet[i] = round(vet[i]/size(falt) * 100, 1)

print(vet)

-- EXECUTION TIME:
1.19781
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
Faltas registradas: [18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
Faltas registradas: [ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
Faltas registradas: [15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 09:19:54) 
-- CODE:
from numpy import*
falt = array(eval(input("Faltas registradas: ")))

vet = zeros(6)

for i in range(0, size(falt)):
	
	if falt[i] == 2:
		vet[0] = vet[0] + 1
	elif falt[i] == 3:
		vet[1] = vet[1] + 1
	elif falt[i] == 4:
		vet[2] = vet[2] + 1
	elif falt[i] == 5:
		vet[3] = vet[3] + 1
	elif falt[i] == 6:
		vet[4] = vet[4] + 1
	else:
		vet[5] = vet[5] + 1

for i in range(0, size(vet)):
	vet[i] = round(vet[i]/size(falt) * 100, 1)

print(vet)

-- EXECUTION TIME:
0.979208
-- TEST CASE 1:
---- input:
[2,2,2,5,5,5,6,6,6,6,7,7,7,7,7,7]
---- correct output:
[18.8 0. 0. 18.8 25. 37.5]
---- user output:
[18.8  0.   0.  18.8 25.  37.5]
-- TEST CASE 2:
---- input:
[2,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7]
---- correct output:
[ 4. 8. 16. 20. 20. 32.]
---- user output:
[ 4.  8. 16. 20. 20. 32.]
-- TEST CASE 3:
---- input:
[2,2,3,4,4,4,5,6,6,7,7,7,7]
---- correct output:
[15.4 7.7 23.1 7.7 15.4 30.8]
---- user output:
[15.4  7.7 23.1  7.7 15.4 30.8]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
