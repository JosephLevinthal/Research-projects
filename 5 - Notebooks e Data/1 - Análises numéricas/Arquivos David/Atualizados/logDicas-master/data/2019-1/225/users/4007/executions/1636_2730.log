== TEST (2019-05-16 21:59:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 21:59:43) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 21:59:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:00:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:00:19) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:00:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:00:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:01:19) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y < 0 or x >= 0 and y < 0):
	print("inferiores")
else:
	print("superiores")
-- EXECUTION TIME:
0.199837
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:03:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
else:
	print("superiores")
-- EXECUTION TIME:
0.185961
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:03:06) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
else:
	print("superiores")
-- EXECUTION TIME:
0.141219
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:03:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
else:
	print("superiores")
-- EXECUTION TIME:
0.202035
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:03:13) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
else:
	print("superiores")
-- EXECUTION TIME:
0.149601
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:03:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
else:
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:05:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
elif: (x > 0 and y > 0 or x <= 0 and y > 0):
		print("superiores")
-- EXECUTION TIME:
0.153117
-- ERROR:
  File "/home/codebench/codes/1636/2730/main.py", line 6
    elif: (x > 0 and y > 0 or x <= 0 and y > 0):
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:05:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
elif: (x > 0 and y > 0 or x <= 0 and y > 0):
		print("superiores")
-- ERROR:
File "XXXX", line 6
    elif: (x > 0 and y > 0 or x <= 0 and y > 0):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:05:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
elif: (x > 0 and y > 0 or x <= 0 and y > 0):
		print("superiores")
-- EXECUTION TIME:
0.180425
-- ERROR:
  File "/home/codebench/codes/1636/2730/main.py", line 6
    elif: (x > 0 and y > 0 or x <= 0 and y > 0):
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:05:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
elif: (x > 0 and y > 0 or x <= 0 and y > 0):
	print("superiores")
-- ERROR:
File "XXXX", line 6
    elif: (x > 0 and y > 0 or x <= 0 and y > 0):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 22:06:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
elif(x > 0 and y > 0 or x <= 0 and y > 0):
	print("superiores")
-- OUTPUT:
inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 22:06:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x = float(input("x: "))
y = float(input("y: "))
if (x < 0 and y <= 0 or x >= 0 and y < 0 ):
	print("inferiores")
elif(x > 0 and y > 0 or x <= 0 and y > 0):
	print("superiores")
-- EXECUTION TIME:
0.272641
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
