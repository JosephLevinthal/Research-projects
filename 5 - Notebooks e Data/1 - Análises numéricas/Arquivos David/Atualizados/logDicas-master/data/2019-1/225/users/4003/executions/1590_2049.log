== TEST (2019-03-25 14:51:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(dividendo)
y = input(divisor)
print (x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = input(dividendo)
NameError: name 'dividendo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:51:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(k)
y = input(divisor)
print (x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = input(k)
NameError: name 'k' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:51:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input
y = input(divisor)
print (x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y = input(divisor)
NameError: name 'divisor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:51:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input
y = input
print (x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print (x//y)
TypeError: unsupported operand type(s) for //: 'builtin_function_or_method' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:52:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(dividendo)
y = input(divisor)
print (x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = input(dividendo)
NameError: name 'dividendo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:53:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
print (x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print (x//y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:54:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
print ("x//y")
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(x%y)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:56:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
float ("x//y")
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    float ("x//y")
ValueError: could not convert string to float: 'x//y'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:57:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
float ("x/y")
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    float ("x/y")
ValueError: could not convert string to float: 'x/y'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:57:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
float (x)//(y)
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    float (x)//(y)
TypeError: unsupported operand type(s) for //: 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:57:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
float (x)/(y)
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    float (x)/(y)
TypeError: unsupported operand type(s) for /: 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:58:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
float (x)/(y)
print(float)
-- EXECUTION TIME:
0.139048
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    float (x)/(y)
TypeError: unsupported operand type(s) for /: 'float' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:58:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
float (x)/(y)
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    float (x)/(y)
TypeError: unsupported operand type(s) for /: 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:00:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
round(float (x)/(y))
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    round(float (x)/(y))
TypeError: unsupported operand type(s) for /: 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:02:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo")
y = input("divisor")
print (x//y)
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print (x//y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:03:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input("dividendo:")
y = input("divisor:")
print (x//y)
print(float)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print (x//y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:10:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
print(x//y)
print(x%y)
-- OUTPUT:
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:10:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.176618
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:11:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:11:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.111708
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
