== TEST (2019-04-22 14:43:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
	if(u != o) and(o != p) and (p != u):
	print("escaleno")
		elif(u==o) and(o==p) and(p==u):
		print("equilatero")
			else((x != y) or(y != z)):
			print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:45:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
	if((u != o) and(o != p) and (p != u)):
		print("escaleno")
	else:
		if(u==o) and(o==p) and(p==u):
			print("equilatero")
		else((x != y) or(y != z)):
			print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 13
    else((x != y) or(y != z)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:48:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
	if((u != o) and(o != p) and (p != u)):
		print("escaleno")
	else:
		if(u==o) and(o==p) and(p==u):
			print("equilatero")
		else ((x != y) or(y != z)):
			print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 13
    else ((x != y) or(y != z)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:56:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
elif((u != o) and(o != p) and (p != u)):
	print("escaleno")
elif(u==o) and(o==p) and(p==u):
	print("equilatero")
elif((x != y) or(y != z)):
	print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 8
    elif((u != o) and(o != p) and (p != u)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:58:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
elif ((u != o) and(o != p) and (p != u)):
	print("escaleno")
elif (u==o) and(o==p) and(p==u):
	print("equilatero")
elif ((x != y) or(y != z)):
	print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 8
    elif ((u != o) and(o != p) and (p != u)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:00:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
	if ((u != o) and(o != p) and (p != u)):
		print("escaleno")
	else:
		if (u==o) and(o==p) and(p==u):
			print("equilatero")
		else ((x != y) or(y != z)):
			print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 13
    else ((x != y) or(y != z)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:01:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
	if ((u != o) and(o != p) and (p != u)):
		print("escaleno")
	else:
		if (u==o)and(o==p)and(p==u):
			print("equilatero")
		else ((u != o)or(o != p)):
			print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 13
    else ((u != o)or(o != p)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:02:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
u = float(input(": "))
o = float(input(": "))
p = float(input(": "))

if (u<o+p) and (o<u+p) and (p<u+o):
	if ((u != o) and(o != p) and (p != u)):
		print("escaleno")
	else:
		if (u==o)and(o==p)and(p==u):
			print("equilatero")
		else ((u != o)or(o != p)):
			print("isosceles")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 13
    else ((u != o)or(o != p)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:05:35) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:05:46) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.174529
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:05:50) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.207314
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:05:56) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:06:07) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")
-- EXECUTION TIME:
0.183837
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:06:52) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("invalido")
-- EXECUTION TIME:
0.176117
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:08:11) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:08:20) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.209791
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:15:02) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:15:19) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.19828
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:22:41) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:22:52) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.144752
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:24:28) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			if((x==y)and(y==z)and(z==x)):
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.199118
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    print("equilatero")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:27:31) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			if((x==y)and(y==z)and(z==x)):
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 15
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:27:57) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			if((x==y)and(y==z)and(z==x)):
				print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.184601
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:29:51) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:29:58) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if((x != y) and(y != z) and(z != x)):
		print("escaleno")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.200882
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:32:17) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("equilatero")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.132248
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:32:55) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("equilatero")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			if(x != y) and(y != z) and(z != x):
			print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.137773
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    print("escaleno")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:32:58) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("equilatero")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			if(x != y) and(y != z) and(z != x):
			print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 15
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:33:11) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("equilatero")
	else:
		if((x != y) or(y != z)):
			print("isosceles")  
		else:
			if(x != y) and(y != z) and(z != x):
				print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:34:56) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
elif(x==y)and(y==z)and(z==x):
	print("equilatero")
elif((x != y) or(y != z)):
	print("isosceles")  
elif(x != y) and(y != z) and(z != x):
	print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.142642
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 8
    elif(x==y)and(y==z)and(z==x):
       ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:37:07) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
elif(x==y)and(y==z)and(z==x):
	print("equilatero")
elif((x != y) or(y != z)):
	print("isosceles")  
elif(x != y) and(y != z) and(z != x):
	print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 8
    elif(x==y)and(y==z)and(z==x):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:40:00) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.149117
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:48) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:41:40) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.123178
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:45) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:44:43) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:44:52) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.222292
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:44:55) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:45:05) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:45:09) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:45:23) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:45:29) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:45:32) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x != y) or(y != z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:46:32) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x == y) or(y == z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:46:38) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x == y) or(y == z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.144099
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:48:17) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

print("Entradas:", x, ",", y, ",", z)

if((x < y + z) and(y < x + z) and(z < y + x)):
	if(x==y)and(y==z)and(z==x):
		print("Tipo de triangulo: equilatero")
	elif((x == y) or(y == z)):
		print("Tipo de triangulo: isosceles")  
	elif(x != y) and(y != z) and(z != x):
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
