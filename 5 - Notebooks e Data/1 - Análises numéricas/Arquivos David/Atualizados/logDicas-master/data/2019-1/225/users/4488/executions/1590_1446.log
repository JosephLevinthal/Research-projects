== TEST (2019-04-01 14:28:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
round( 2 / 3 )

-- OUTPUT:
504.86
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 14:28:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
round( 2 / 3 )

-- OUTPUT:
504.86
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:22:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
dividendo=var1
divisor=var2
print(dividendo)
print(divisor)
print(var1//var2) 
print(var1%var2)
-- EXECUTION TIME:
0.153765
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 5, in <module>
    var2=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:25:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= float(input("total de vendas"))
var2=round(var1/10*3, 2)
print(var2)
-- EXECUTION TIME:
0.137121
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:25:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= float(input("total de vendas"))
var2= round(var1/10*3, 2)
print(var2)
-- EXECUTION TIME:
0.149415
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= float(input("total de vendas"))
var2= round(var1/10*3, 2)
print(var2)
-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:25:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= float(input())
var2= round(var1/10*3, 2)
print(var2)
-- EXECUTION TIME:
0.184411
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.1
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= float(input())
var2= round(var1/10*3, 2)
print(var2)
-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:28:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=float(input())
print(round(a/3,3))
-- EXECUTION TIME:
0.153283
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
