== TEST (2019-04-14 21:01:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if (conta==3):
	print("ponto pertence a reta .")
	else:
		print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:01:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if (conta==3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- OUTPUT:
ponto pertence a reta .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:01:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if (conta==3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- EXECUTION TIME:
0.21657
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta .
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta .
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:14:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if (conta=3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 7
    if (conta=3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:14:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if(conta=3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if(conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if( conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if( conta=3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if(conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
 if(conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if(conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if(conta=3 ):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3 ):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if(conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:15:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta=(2*x+y)
if(conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:16:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if(conta =3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta =3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:16:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if (conta =3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if (conta =3):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:16:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if(conta = 3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta = 3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:16:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if(conta=3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- ERROR:
File "XXXX", line 7
    if(conta=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:16:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if(conta==3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- OUTPUT:
ponto pertence a reta .
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:16:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if(conta==3):
	print("ponto pertence a reta .")
else:
	print("ponto nao pertence a reta .")
-- EXECUTION TIME:
0.141517
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta .
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta .
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 21:16:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if(conta==3):
	print("ponto pertence a reta")
else:
	print("ponto nao pertence a reta")
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 21:17:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x= int(input("x:"))
y= int(input("y:"))
conta =(2*x+y)
if(conta==3):
	print("ponto pertence a reta")
else:
	print("ponto nao pertence a reta")
-- EXECUTION TIME:
0.315275
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
