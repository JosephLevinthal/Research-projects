== TEST (2019-04-24 14:08:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor = float(input("valor total: "))
ti = input("R/C/I: ")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:47:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total"))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo)

-- OUTPUT:
-56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:47:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo)

-- OUTPUT:
-56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:48:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

-- OUTPUT:
-56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:48:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

-- OUTPUT:
-56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:54:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0,44
	print("Valor total:,(round(c, 2))
   
    
-- ERROR:
File "XXXX", line 10
    print("Valor total:,(round(c, 2))
                                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:54:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0,44
	print("Valor total:" ,(round(c, 2))
   
    
-- ERROR:
File "XXXX", line 13
    
        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 14:54:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0,44
	print("Valor total:" ,(round(c, 2)) 
-- ERROR:
File "XXXX", line 11
    
                                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:02:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > 500) and (tipo == R):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif (valort > 500) and (tipo == R):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:03:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif ((valort > 500) and (tipo == R)):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif ((valort > 500) and (tipo == R)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:03:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif ((valort > "500") and (tipo == R)):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif ((valort > "500") and (tipo == R)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:04:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif ((valort > "500") and (tipo == "R")):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif ((valort > "500") and (tipo == "R")):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:06:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > "500") and (tipo == "R"):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif (valort > "500") and (tipo == "R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:06:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif(valort > "500") and (tipo == "R"):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif(valort > "500") and (tipo == "R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:07:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > "500") and (tipo == "R") :
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif (valort > "500") and (tipo == "R") :
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:07:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > "500" and tipo == "R") :
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif (valort > "500" and tipo == "R") :
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:08:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > "500") and (tipo == "R"):
			c = valort * 0.65
         print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif (valort > "500") and (tipo == "R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:08:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))

elif (valort > "500") and (tipo == "R"):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 12
    elif (valort > "500") and (tipo == "R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:09:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > 500) and (tipo == R):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif (valort > 500) and (tipo == R):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:09:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif ((valort > 500) and (tipo == R)):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif ((valort > 500) and (tipo == R)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:10:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > 500 and tipo == R):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 11
    elif (valort > 500 and tipo == R):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:11:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo: (R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())
if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > 500 and tipo == R):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 10
    elif (valort > 500 and tipo == R):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:11:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())
if (valort <= 500) and (tipo == R):
	c = valort * 0.44
	print("Valor total:" ,(round(c, 2))
elif (valort > 500 and tipo == R):
	c = valort * 0.65
   print("Valor total:" ,(round(c, 2))
elif (valort <= 1000) and (tipo == C):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 1000) and (tipo == C):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
elif (valort <= 5000) and (tipo == I):
	c = valort * 0.55
	print("Valor total:" ,(round(c, 2))
elif (valort > 5000) and (tipo == I):
	c = valort * 0.60
	print("Valor total:" ,(round(c, 2))
else:
	print("Dados invalidos")		
			
-- ERROR:
File "XXXX", line 10
    elif (valort > 500 and tipo == R):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:12:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
valort = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())

			
-- OUTPUT:
-56.0 kwh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:15:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
print(valort,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(valort,"kwh e tipo" ,tipo.upper())
NameError: name 'valort' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:16:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
if (consumo < 0):
	print("Dados invalidos")
			
-- OUTPUT:
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:17:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != R) or (tipo != I) or (tipo != C):
	print("Dados invalidos")
			
-- OUTPUT:
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:18:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") or (tipo != "I") or (tipo != "C"):
	print("Dados invalidos")
			
-- OUTPUT:
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:21:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") or (tipo != "I") or (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
			
-- OUTPUT:
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:22:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
			
-- OUTPUT:
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:23:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C)")
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
			
-- OUTPUT:
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:23:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C) ")
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
			
-- OUTPUT:
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:24:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:26:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: ", round(v, 2))
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:28:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: ", round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: ", round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: ", round(v, 2))
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:30:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: ", round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: ", round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total" + v)
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:30:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("valor total: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: ", round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: ", round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total" + v)
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:31:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (tipo != "R") and (tipo != "I") and (tipo != "C"):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: ", round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: ", round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: ", round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total" + v)
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:34:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" + v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total:" + v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" + v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total" + v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" + v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" + v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:35:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" + v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total:" + v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" + v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" + v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" + v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" + v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:36:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: " + v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: " + v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: " + v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: " + v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:37:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: " + v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: " + v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: " + v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: " + v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:37:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: " + v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: " + v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: " + v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: " + v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:38:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
	print("valor total: " + v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: " + v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: " + v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: " + v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:39:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
   print("valor total:" ,v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,v)
else:
	print("Dados invalidos")
	
			
-- ERROR:
File "XXXX", line 14
    print("valor total:" ,v)
                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:40:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65
   print("valor total:" ,v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,v)
else:
	print("Dados invalidos")
	
			
-- ERROR:
File "XXXX", line 14
    print("valor total:" ,v)
                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:41:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total:" ,v)
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:42:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,v)
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total:" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,v)
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,v)
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,v)
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:44:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print(consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total:" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
-56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:45:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Etradas: " ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total:" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Etradas:  -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:45:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total:" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:46:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total:" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:46:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total:" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total:" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total:" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total:" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:47:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:47:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:48:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 15:48:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- EXECUTION TIME:
0.129139
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:49:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 15:49:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- EXECUTION TIME:
0.225023
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kwh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kwh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:50:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kwh e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kwh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 15:51:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kWh  e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- OUTPUT:
Entradas: -56.0 kWh  e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 15:51:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
consumo = float(input("consumo: "))
tipo = input("tipo:(R/I/C) ")
print("Entradas:" ,consumo,"kWh  e tipo" ,tipo.upper())
if (consumo < 0):
	print("Dados invalidos")
elif (consumo <= 500) and (tipo == "R"):
	v = consumo * 0.44
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 500) and (tipo == "R"):
	v = consumo * 0.65																					
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 1000) and (tipo == "C"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 1000) and (tipo == "C"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
elif (consumo <= 5000) and (tipo == "I"):
	v = consumo * 0.55
	print("Valor total: R$" ,round(v, 2))
elif (consumo > 5000) and (tipo == "I"):
	v = consumo * 0.60
	print("Valor total: R$" ,round(v, 2))
else:
	print("Dados invalidos")
	
			
-- EXECUTION TIME:
0.196234
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh  e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh  e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
