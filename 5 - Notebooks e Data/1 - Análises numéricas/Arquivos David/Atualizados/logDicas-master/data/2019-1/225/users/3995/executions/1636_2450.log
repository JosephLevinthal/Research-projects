== TEST (2019-04-05 14:55:39) 
-- CODE:
nome1=input("nome 1:")
nome2:input("nome 2:")
if(nome1>nome2):
	print(nome2)
	print(nome1)
else:
	print(nome1)
	print(nome2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(nome1>nome2):
NameError: name 'nome2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 14:55:51) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print(nome2)
	print(nome1)
else:
	print(nome1)
	print(nome2)
-- OUTPUT:
Ada
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 14:58:14) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print(nome2.upper())
	print(nome1.upper())
else:
	print(nome1.upper())
	print(nome2.upper())
-- OUTPUT:
ADA
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 14:58:46) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print(nome2.upper())
	print(nome1.upper())
else:
	print(nome1.upper())
	print(nome2.upper())
-- EXECUTION TIME:
0.140798
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
ADA
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
DEMETRIUS
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:02:37) 
-- CODE:
nome1=input(.upper("nome 1:"))
nome2=input(.lower("nome 2:"))
if(nome1>nome2):
	print(nome2)
	print(nome1)
else:
	print(nome1)
	print(nome2)
-- ERROR:
File "XXXX", line 1
    nome1=input(.upper("nome 1:"))
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:03:47) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print(.lower(nome2))
	print(.upper(nome1))
else:
	print(.upper(nome1))
	print(.lower(nome2))
-- ERROR:
File "XXXX", line 4
    print(.lower(nome2))
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:04:35) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print(.lower(nome2))
	print(.upper(nome1))
else:
	print(.upper(nome1))
	print(.lower(nome2))
-- ERROR:
File "XXXX", line 4
    print(.lower(nome2))
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:04:42) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print(.lower(nome2)
	print(.upper(nome1))
else:
	print(.upper(nome1))
	print(.lower(nome2))
-- ERROR:
File "XXXX", line 4
    print(.lower(nome2)
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:04:59) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print(.lower(nome2))
	print(.upper(nome1))
else:
	print(.upper(nome1))
	print(.lower(nome2))
-- ERROR:
File "XXXX", line 4
    print(.lower(nome2))
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:06:28) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2))
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2))
-- OUTPUT:
ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:06:41) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2))
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2))
-- EXECUTION TIME:
0.157707
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:06:50) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2))
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2))
-- OUTPUT:
ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:07:05) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2))
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2))
-- EXECUTION TIME:
0.195317
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:07:09) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2))
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2))
-- OUTPUT:
ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:07:33) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2).lower())
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2).lower())
-- OUTPUT:
ADA
leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:07:47) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2).lower())
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2).lower())
-- EXECUTION TIME:
0.174408
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
ADA
leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:07:50) 
-- CODE:
nome1=input("nome 1:")
nome2=input("nome 2:")
if(nome1>nome2):
	print((nome2).lower())
	print((nome1).upper())
else:
	print((nome1).upper())
	print((nome2).lower())
-- OUTPUT:
ADA
leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:09:29) 
-- CODE:
nome1=input(("nome 1:").upper())
nome2=input(("nome 2:"))
if(nome1>nome2):
	print(nome2)
	print(nome1)
else:
	print(nome1)
	print(nome2)
-- OUTPUT:
NOME 1:nome 2:Ada
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:09:54) 
-- CODE:
nome1=input(("nome 1:"))
nome2=input(("nome 2:"))
if(nome1>nome2):
	print(nome2)
	print(nome1.upper())
else:
	print(nome1.upper())
	print(nome2)
-- OUTPUT:
nome 1:nome 2:ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:10:05) 
-- CODE:
nome1=input(("nome 1:"))
nome2=input(("nome 2:"))
if(nome1>nome2):
	print(nome2)
	print(nome1.upper())
else:
	print(nome1.upper())
	print(nome2)
-- EXECUTION TIME:
0.174081
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:10:08) 
-- CODE:
nome1=input(("nome 1:"))
nome2=input(("nome 2:"))
if(nome1>nome2):
	print(nome2)
	print(nome1.upper())
else:
	print(nome1.upper())
	print(nome2)
-- EXECUTION TIME:
0.194237
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:11:40) 
-- CODE:
nome1=input(("nome 1:"))
nome2=input(("nome 2:"))
if(nome1>nome2):
	print(nome2)
	print(nome1.upper())
else:
	print(nome1.upper())
	print(nome2)
-- EXECUTION TIME:
0.130881
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:11:43) 
-- CODE:
nome1=input(("nome 1:"))
nome2=input(("nome 2:"))
if(nome1>nome2):
	print(nome2)
	print(nome1.upper())
else:
	print(nome1.upper())
	print(nome2)
-- EXECUTION TIME:
0.123253
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:12:35) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(y)
	print(x.upper())
else:
	print(x.upper())
	print(y)
-- EXECUTION TIME:
0.153453
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Demetrius
MARCOS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:12:36) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(y)
	print(x.upper())
else:
	print(x.upper())
	print(y)
-- OUTPUT:
nome 1:nome 2:ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:13:22) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x)
	print(y.upper())
else:
	print(x.upper())
	print(y)
-- EXECUTION TIME:
0.13871
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:13:22) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x)
	print(y.upper())
else:
	print(x.upper())
	print(y)
-- OUTPUT:
nome 1:nome 2:ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:13:59) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.upper())
	print(y)
-- EXECUTION TIME:
0.166712
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ADA
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:13:59) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.upper())
	print(y)
-- OUTPUT:
nome 1:nome 2:ADA
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:14:49) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.lower())
	print(yupper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(yupper())
NameError: name 'yupper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:15:02) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.lower())
	print(y.upper())
-- OUTPUT:
nome 1:nome 2:ada
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:15:20) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.lower())
	print(y.upper())
-- EXECUTION TIME:
0.206064
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ada
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:wilson
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:18:53) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.lower())
	print(y.upper())
-- EXECUTION TIME:
0.204588
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ada
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:wilson
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:18:54) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.lower())
	print(y.upper())
-- OUTPUT:
nome 1:nome 2:ada
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:18:56) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if(x>y):
	print(x.lower())
	print(y.upper())
else:
	print(x.lower())
	print(y.upper())
-- EXECUTION TIME:
0.18392
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:ada
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:wilson
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:23:54) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if((x>y).upper()):
	print(x)
	print(y)
else:
	print(x)
	print(y)
-- EXECUTION TIME:
0.20419
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1636/2450/main.py", line 3, in <module>
    if((x>y).upper()):
AttributeError: 'bool' object has no attribute 'upper'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:24:06) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if((x>y).upper()):
	print(x)
	print(y)
else:
	print(x)
	print(y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if((x>y).upper()):
AttributeError: 'bool' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:26:43) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if((x>y)):
	print(x)
	print(y.upper())
else:
	print(x)
	print(y.upper())
-- EXECUTION TIME:
0.192951
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:Ada
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 15:26:43) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if((x>y)):
	print(x)
	print(y.upper())
else:
	print(x)
	print(y.upper())
-- OUTPUT:
nome 1:nome 2:Ada
LEON
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 15:26:45) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if((x>y)):
	print(x)
	print(y.upper())
else:
	print(x)
	print(y.upper())
-- EXECUTION TIME:
0.285978
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:Ada
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 19:46:09) 
-- CODE:
x=input(("nome 1:"))
y=input(("nome 2:"))
if((x>y)):
	print(x)
	print(y.upper())
else:
	print(x)
	print(y.upper())
-- EXECUTION TIME:
0.158699
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
nome 1:nome 2:Ada
LEON
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
nome 1:nome 2:Marcos
DEMETRIUS
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
nome 1:nome 2:WILSON
GEORGE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:50:47) 
-- CODE:
1=input()
2=input()
if(1>2):
	print(2)
	print(1.upper())
else:
	print(1.upper())
	print(2)
-- ERROR:
File "XXXX", line 5
    print(1.upper())
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:28:28) 
-- CODE:
1=input()
2=input()
if(1>2):
	print(2)
	print(1.upper())
else:
	print(1.upper())
	print(2)
if(1<2):
	print(1)
	print(2)
else:
	print(2)
	print(1)
-- ERROR:
File "XXXX", line 5
    print(1.upper())
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:28:52) 
-- CODE:
1=input()
2=input()
if(1>2):
	print(2)
	print(1)
else:
	print(1)
	print(2)
if(1<2):
	print(1)
	print(2)
else:
	print(2)
	print(1)
-- ERROR:
File "XXXX", line 1
    1=input()
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:29:29) 
-- CODE:
1=input("")
2=input("")
if(1>2):
	print(2)
	print(1)
else:
	print(1)
	print(2)
if(1<2):
	print(1)
	print(2)
else:
	print(2)
	print(1)
-- ERROR:
File "XXXX", line 1
    1=input("")
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:29:38) 
-- CODE:
1=input("")
2=input("")
if(1>2):
	print(2)
	print(1)
else:
	print(1)
	print(2)

-- ERROR:
File "XXXX", line 1
    1=input("")
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:29:57) 
-- CODE:
1=input()
2=input()
if(1>2):
	print(2)
	print(1.upper())
else:
	print(1.upper())
	print(2)
-- ERROR:
File "XXXX", line 5
    print(1.upper())
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:31:49) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y).upper():
	
-- ERROR:
File "XXXX", line 5
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:31:57) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y).upper():
-- ERROR:
File "XXXX", line 4
    
                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:32:04) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y):
	
-- ERROR:
File "XXXX", line 5
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:32:17) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y):
	print(x)
	
-- ERROR:
File "XXXX", line 5
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:34:31) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y):
	1=x.upper()
	2=y.upper()
	print(2)
	print(1)
else:
	1=x.upper()
	2=y.upper()
	print(1)
	print(2)
-- ERROR:
File "XXXX", line 4
    1=x.upper()
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:37:27) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y):
	1=(x.upper())
	2=(y.upper())
	print(2)
	print(1)
else:
	1=(x.upper())
	2=(y.upper())
	print(1)
	print(2)
-- ERROR:
File "XXXX", line 4
    1=(x.upper())
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 10:38:17) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y):
	print(2.upper())
	print(1.upper())
else:
	print(1.upper())
	print(2.upper())
-- ERROR:
File "XXXX", line 4
    print(2.upper())
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:37:20) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y.upper()):
	print(x)
	print(y)
else:
	print(y)
	print(x)
-- EXECUTION TIME:
0.17289
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Leon
Ada
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Marcos
Demetrius
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:37:46) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x<y.upper()):
	print(x)
	print(y)
else:
	print(y)
	print(x)
-- EXECUTION TIME:
0.169717
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Ada
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
Marcos
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
george
WILSON
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:38:13) 
-- CODE:
x=input("nome:")
y=input("nome:")
if(x>y.upper()):
	print(y)
	print(x)
else:
	print(x)
	print(y)
-- EXECUTION TIME:
0.138711
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Ada
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
Marcos
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
george
WILSON
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
