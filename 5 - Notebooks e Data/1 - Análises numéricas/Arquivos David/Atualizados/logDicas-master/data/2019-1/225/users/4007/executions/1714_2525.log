== TEST (2019-06-29 18:17:19) 
-- CODE:
n = int(input("digite um numero: "))
i = 0
a = 0
while (i < n):
	if (n % i == 0):
		a = a + 1
	i = i + 1
print(a)
print(i)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if (n % i == 0):
ZeroDivisionError: integer division or modulo by zero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:17:44) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i < n):
	if (n % i == 0):
		a = a + 1
	i = i + 1
print(a)
print(i)
	
-- OUTPUT:
5
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:18:41) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i < n):
	if (n % i == 0):
		a = a + 1
	i = i + 1
print("1")
print(a)
print(i)
	
-- OUTPUT:
1
5
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:20:10) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i < n):
	if (n % i == 0):
		a = a + 1
	i = i + 1
print("1")
print(a)
print(i)
	
-- OUTPUT:
1
5
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:20:53) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i < n):
	if (n % i == 0):
		a = a + 1
		print(i)
	i = i + 1


print(i)
	
-- OUTPUT:
1
2
3
4
6
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:21:28) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i < n):
	if (n % i == 0):
		a = a + 1
		print(i)
	i = i + 1

print(a)
	
-- OUTPUT:
1
2
3
4
6
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:22:11) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i == n):
	if (n % i == 0):
		a = a + 1
		print(i)
	i = i + 1

print(a)
	
-- OUTPUT:
1
2
3
4
6
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:22:31) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i <= n):
	if (n % i == 0):
		a = a + 1
		print(i)
	i = i + 1

print(a)
	
-- OUTPUT:
1
2
3
4
6
12
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:22:53) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i <= n):
	if (n % i == 0):
		a = a + 1
		print(i)
	i = i + 1

print(a, "divisores")
	
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:23:10) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i <= n):
	if (n % i == 0):
		a = a + 1
		print(i)
	i = i + 1

print(a, "divisores")
	
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:23:29) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i <= n):
	if (n % i == 0):
		a = a + 1
		print(i)
	i = i + 1

print(a, "divisores")
	
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:26:25) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i <= n):
	if (n % i == 0):
		a = a + 1
		print(i)
		
	i = i + 1

if (a == 1):
	print(a, "divisor")

else:
	print(a, "divisores")

	
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:26:40) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i <= n):
	if (n % i == 0):
		a = a + 1
		print(i)
		
	i = i + 1

if (a == 1):
	print(a, "divisor")

else:
	print(a, "divisores")

	
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 18:26:51) 
-- CODE:
n = int(input("digite um numero: "))
i = 1
a = 0
while (i <= n):
	if (n % i == 0):
		a = a + 1
		print(i)
		
	i = i + 1

if (a == 1):
	print(a, "divisor")

else:
	print(a, "divisores")

	
-- EXECUTION TIME:
0.743686
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
