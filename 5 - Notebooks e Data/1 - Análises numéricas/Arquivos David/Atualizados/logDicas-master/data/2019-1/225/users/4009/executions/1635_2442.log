== TEST (2019-04-08 19:29:12) 
-- CODE:

num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 4
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 19:29:46) 
-- CODE:

num = input("Digite um numero: ")

if ((num % 2) ==   0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 4
    if ((num % 2) ==   0)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 12:02:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.176827
-- ERROR:
  File "/home/codebench/codes/1635/2442/main.py", line 7
    if (num % 2 = 0):
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:02:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:04:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 12:04:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.18199
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:04:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:05:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 12:05:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.272564
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:07:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "Impar"

print(par)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(par)
NameError: name 'par' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:08:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:08:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "Impar"

print(par):

-- ERROR:
File "XXXX", line 12
    print(par):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:08:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 12:10:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.202941
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
