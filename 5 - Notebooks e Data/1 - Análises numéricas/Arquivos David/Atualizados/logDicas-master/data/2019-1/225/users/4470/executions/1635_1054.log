== TEST (2019-04-07 20:57:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == S):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == S):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2x+y=3 == S):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2x+y=3 == S):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:57:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:58:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 20:59:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if (2*x+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if (2*x+y=3 == "S"):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:00:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "S"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:00:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "S"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:00:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "S"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:00:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "S"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "S"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:02:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "P"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "P"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:02:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "P"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "P"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:03:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "s"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:03:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3 == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3 == "s"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:04:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
P = ((2*x)+y=3)

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    P = ((2*x)+y=3)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:04:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
P = ((2*x)+y=3)

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    P = ((2*x)+y=3)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:04:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
P = ((2*x)+y=3)

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    P = ((2*x)+y=3)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:05:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
P = (2*x)+y=3

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    P = (2*x)+y=3
       ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:05:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
P = (2*x)+y=3

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    P = (2*x)+y=3
       ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:05:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
P = (2*x)+y=3

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    P = (2*x)+y=3
       ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:05:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
(2*x)+y=3

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    (2*x)+y=3
    ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:05:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
(2*x)+y=3

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    (2*x)+y=3
    ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:05:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())
(2*x)+y=3

if (P == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 6
    (2*x)+y=3
    ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:05:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())


if ((2*x)+y=3 == "s"):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 8
    if ((2*x)+y=3 == "s"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:07:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y=3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- ERROR:
File "XXXX", line 7
    if ((2*x)+y=3):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:08:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y==3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 21:08:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y==3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 21:08:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input())
y = float(input())

if ((2*x)+y==3):
	msg = "ponto pertence a reta"
	
else:
	msg = "ponto nao pertence a reta"
	
print(msg)
-- EXECUTION TIME:
0.285351
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
