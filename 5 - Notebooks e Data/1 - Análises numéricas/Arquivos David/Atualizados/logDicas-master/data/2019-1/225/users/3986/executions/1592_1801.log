== TEST (2019-03-29 16:45:42) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
a= input("abra: ")
x= "a" + " o"
# Escreva um progama que leia a quantidade de vezes que o feitiço ira se repetir
n= o * a
# multiplique "n" por "x"
y= n * x
# imprima y
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    n= o * a
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:45:58) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
a= input("abra: ")
x= "a" + " o"
# Escreva um progama que leia a quantidade de vezes que o feitiço ira se repetir
n= o * a
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    n= o * a
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:46:09) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
a= input("abra: ")
x= "a" + " o"
# Escreva um progama que leia a quantidade de vezes que o feitiço ira se repetir
n= o * a
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    n= o * a
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:48:26) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
x= "Abra " + o
# Escreva um progama que leia a quantidade de vezes que o feitiço ira se repetir
n= x * o
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    n= x * o
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:52:19) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
x= "Abra " + o
# Escreva um programa que leia a quantidade de vezes que o feitiço ira se repetir
n= int(input("numero de repeticoes: ")
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- ERROR:
File "XXXX", line 8
    y= n * x
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:52:57) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
x= "Abra " + o
# Escreva um programa que leia a quantidade de vezes que o feitiço ira se repetir
n= int(input("numero de repeticoes: "))
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:53:05) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
x= "Abra " + o
# Escreva um programa que leia a quantidade de vezes que o feitiço ira se repetir
n= int(input("numero de repeticoes: "))
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- EXECUTION TIME:
0.182332
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carroAbra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:53:12) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
x= "Abra " + o
# Escreva um programa que leia a quantidade de vezes que o feitiço ira se repetir
n= int(input("numero de repeticoes: "))
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:53:39) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
x= "Abra " + o + " "
# Escreva um programa que leia a quantidade de vezes que o feitiço ira se repetir
n= int(input("numero de repeticoes: "))
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- OUTPUT:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:53:54) 
-- CODE:
# Coloque uma entrada que seja capaz de ler o nome do objeto que ira ser aberto
o= input("nome_do_objeto: ")
# Faça uma variavel que some a palavra "Abra" + " o"
x= "Abra " + o + " "
# Escreva um programa que leia a quantidade de vezes que o feitiço ira se repetir
n= int(input("numero de repeticoes: "))
# multiplique "n" por "x"
y= n * x
# imprima y
print(y)
-- EXECUTION TIME:
0.155947
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carro Abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
