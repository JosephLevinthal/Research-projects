== TEST (2019-04-22 13:51:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:00:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if (a == b) and (b == c) and (c == a)
-- ERROR:
File "XXXX", line 7
    if (a == b) and (b == c) and (c == a)
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:00:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if (a == b) and (b == c) and (c == a):
-- ERROR:
File "XXXX", line 8
    
                                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:00:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ("a == b") and ("b == c") and ("c == a"):
-- ERROR:
File "XXXX", line 8
    
                                                ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:01:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ("a = b") and ("b = c") and ("c = a"):
-- ERROR:
File "XXXX", line 8
    
                                             ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:05:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
-- ERROR:
File "XXXX", line 8
    
                                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:06:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("ivalido")
-- ERROR:
File "XXXX", line 8
    
                                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:06:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("ivalido")
-- ERROR:
File "XXXX", line 8
    
                                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:06:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalido")
-- ERROR:
File "XXXX", line 8
    
                                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:07:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	print("invalido")
-- ERROR:
File "XXXX", line 8
    
                                                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:13:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	print("invalido")
else: 
	if ((a == b) and (b == c)):
		print("equilatero")
		
		else: 
			if ((a == b) and (b == c) and (c == a)):
				print("isosceles")
			else:
				print("escaleno")
               
-- ERROR:
File "XXXX", line 13
    else: 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:13:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	print("invalido")
else: 
	if ((a == b) and (b == c)):
		print("equilatero")
		else: 
			if ((a == b) and (b == c) and (c == a)):
				print("isosceles")
			else:
				print("escaleno")
               
-- ERROR:
File "XXXX", line 12
    else: 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:13:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	print("invalido")
else: 
	if ((a == b) and (b == c)):
		print("equilatero")
	else: 
			if ((a == b) and (b == c) and (c == a)):
				print("isosceles")
			else:
				print("escaleno")
               
-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:13:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	print("invalido")
else: 
	if ((a == b) and (b == c)):
		print("equilatero")
	else: 
			if ((a == b) and (b == c) and (c == a)):
				print("isosceles")
			else:
				print("escaleno")
               
-- EXECUTION TIME:
0.261578
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:17:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	msg = "invalido"
else: 
	if ((a == b) and (b == c)):
		msg  = "equilatero"
	else: 
			if ((a == b) and (b == c) and (c == a)):
				msg  = "isosceles"
			else:
				msg = "escaleno"
				
print("tipo de triangulo" + msg)
               
-- OUTPUT:
tipo de trianguloescaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:18:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	msg = "invalido"
else: 
	if ((a == b) and (b == c)):
		msg  = "equilatero"
	else: 
			if ((a == b) and (b == c) and (c == a)):
				msg  = "isosceles"
			else:
				msg = "escaleno"
				
print("tipo de triangulo " + msg)
               
-- OUTPUT:
tipo de triangulo escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:18:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	msg = "invalido"
else: 
	if ((a == b) and (b == c)):
		msg  = "equilatero"
	else: 
			if ((a == b) and (b == c) and (c == a)):
				msg  = "isosceles"
			else:
				msg = "escaleno"
				
print("tipo de triangulo " + msg)
               
-- OUTPUT:
tipo de triangulo escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:18:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	msg = "invalido"
else: 
	if ((a == b) and (b == c)):
		msg  = "equilatero"
	else: 
			if ((a == b) and (b == c) and (c == a)):
				msg  = "isosceles"
			else:
				msg = "escaleno"
				
print("tipo de triangulo: " + msg)
               
-- EXECUTION TIME:
0.180006
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:18:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a >= b + c) or (b >= a + c) or (c >= a + b) or (a < 0) or (b < 0) or (c < 0)):
	msg = "invalido"
else: 
	if ((a == b) and (b == c)):
		msg  = "equilatero"
	else: 
			if ((a == b) and (b == c) and (c == a)):
				msg  = "isosceles"
			else:
				msg = "escaleno"
				
print("tipo de triangulo: " + msg)
               
-- OUTPUT:
tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:20:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	msg = "invalido"
else: 
	if ((A == B) and (B == C)):
		msg  = "equilatero"
	else: 
			if ((A == B) and (B == C) and (C == A)):
				msg  = "isosceles"
			else:
				msg = "escaleno"
				
print("tipo de triangulo: " + msg)
               
-- OUTPUT:
tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:22:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) and (B == C) and (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:22:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) and (B == C) and (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- EXECUTION TIME:
0.154039
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:23:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) and (B == C) and (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:23:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) and (B == C) and (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:23:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) and (B == C) and (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:24:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:24:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- EXECUTION TIME:
0.15151
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:24:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:26:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if ((A == B) or (B == C) (C == A)):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:26:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- EXECUTION TIME:
0.155877
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1099/main.py", line 13, in <module>
    if ((A == B) or (B == C) (C == A)):
TypeError: 'bool' object is not callable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:26:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- EXECUTION TIME:
0.168953
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:26:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:26:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A >= B + C) or (B >= A + C) or (C >= A + B) or (A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- EXECUTION TIME:
0.176738
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:34:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:34:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- OUTPUT:
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:34:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A < 0) or (B < 0) or (C < 0)):
	X = "invalido"
else: 
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- EXECUTION TIME:
0.173307
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:13:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A < 0) or (B < 0) or (C < 0):
	X = "invalido"
else: 
	
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- ERROR:
File "XXXX", line 7
    if ((A < 0) or (B < 0) or (C < 0):
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:13:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado a: "))
B = float(input("lado b: "))
C = float(input("lado c: "))

if ((A < 0) or (B < 0) or (C < 0):
	X = "invalido"
else: 
	
	if ((A == B) and (B == C)):
		X  = "equilatero"
	else: 
			if ((A == B) or (B == C) or (C == A)):
				X  = "isosceles"
			else:
				X = "escaleno"
				
print("tipo de triangulo: " + X)
               
-- EXECUTION TIME:
0.132429
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    if ((A < 0) or (B < 0) or (C < 0):
                                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or(b != c)):
		print("isosceles")  
   else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
   else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
     else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
   else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
   else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
 else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
  else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
   else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
    else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
     else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
      else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
       else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
       else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
  
       else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a: "))
b = float(input("lado b: "))
c = float(input("lado c: "))

if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a != b) and(b != c) and(c != a)):
		print("escaleno")
else:
	if ((a != b) or (b != c)):
		print("isosceles")  
   else:
		print("equilatero")

else:
	print("invalido")

-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:56:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalido"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 15:56:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalido"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)

-- EXECUTION TIME:
0.185151
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
