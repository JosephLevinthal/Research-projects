== TEST (2019-04-29 01:56:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d > a ) or ( b > c):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 01:57:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d > a ) or ( b > c):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- EXECUTION TIME:
0.147999
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 01:57:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d > a ) or ( b > c):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 01:58:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d < a ) or ( b > d):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 01:59:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d < a ) or ( b > d):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 01:59:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d < a ) or ( b > d):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 01:59:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d < a ) or ( b > d):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 02:00:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d < a ) or ( b > d):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 02:01:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if( d < a ) or ( b > d):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 02:06:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
d = float(input("Digite um numero: "))

print( "Intervalo 1:", a ,",", b)
print( "Intervalo 2:", c ,",", d)

if (b > a) and (d > c):
	if(( (c < a ) and ( d < a)) or (( d > b) and (c > b) )):
		print("Nao ha intersecao")
	else:
		print("Ha intersecao")
else:
	print("Entradas invalidas")
		
		
-- EXECUTION TIME:
0.122004
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
