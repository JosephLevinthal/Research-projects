== TEST (2019-03-30 19:38:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
-- ERROR:
File "XXXX", line 9
    d =  6371,01*acos(sin(t1)sin(t2)+cos
               ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:42:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = 20 = pi * r ** 2
-- ERROR:
File "XXXX", line 5
    Area = 20 = pi * r ** 2
          ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:43:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = 20 = from<pi>import * r ** 2
-- ERROR:
File "XXXX", line 5
    Area = 20 = from<pi>import * r ** 2
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:44:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = (20 = from<pi>import * r ** 2)
-- ERROR:
File "XXXX", line 5
    Area = (20 = from<pi>import * r ** 2)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:44:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r ** 2")
-- ERROR:
File "XXXX", line 5
    Area = (20 = from<pi>import * r ** 2)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:47:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r ** 2")
Volume = ("20 = 4/3 from<pi>import * r ** 3")

-- ERROR:
File "XXXX", line 5
    Area = (20 = from<pi>import * r ** 2)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:48:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r ** 2")
Volume = ("20 = 4/3 from<pi>import * r ** 3")
print(Area)
print(Volume)

-- OUTPUT:
20 = from<pi>import * r ** 2
20 = 4/3 from<pi>import * r ** 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:48:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r ** 2")
Volume = ("20 = 4/3 from<pi>import * r ** 3")
print(Area)
print(Volume)

-- EXECUTION TIME:
0.179462
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
20 = from<pi>import * r ** 2
20 = 4/3 from<pi>import * r ** 3
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
20 = from<pi>import * r ** 2
20 = 4/3 from<pi>import * r ** 3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:48:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(Area)
print(Volume)

-- EXECUTION TIME:
0.154607
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:48:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(Area)
print(Volume)

-- OUTPUT:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:48:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(Area)
print(Volume)

-- EXECUTION TIME:
0.136131
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:49:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(Area)
print(Volume)

-- OUTPUT:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:49:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(Area)
print(Volume)

-- OUTPUT:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:49:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(Area)
print(Volume)

-- EXECUTION TIME:
0.1414
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
20 = from<pi>import * r **2
20 = 4/3 from<pi>import * r **3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:49:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 1.333 from<pi>import * r **3")
print(Area)
print(Volume)

-- OUTPUT:
20 = from<pi>import * r **2
20 = 1.333 from<pi>import * r **3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:49:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 1.333 from<pi>import * r **3")
print(Area)
print(Volume)

-- EXECUTION TIME:
0.161538
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
20 = from<pi>import * r **2
20 = 1.333 from<pi>import * r **3
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
20 = from<pi>import * r **2
20 = 1.333 from<pi>import * r **3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:50:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 1.333 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:51:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 1.333 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- EXECUTION TIME:
0.22027
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:51:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:51:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("20 = from<pi>import * r **2")
Volume = ("20 = 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- EXECUTION TIME:
0.225147
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:52:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("A = from<pi>import * r **2")
Volume = ("V = 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:52:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("A = from<pi>import * r **2")
Volume = ("V = 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- EXECUTION TIME:
0.182931
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:52:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = A = from<pi>import * r **2
Volume = V = 4/3 from<pi>import * r **3
print(round(Area, 3))
print(round(Volume, 3))

-- ERROR:
File "XXXX", line 5
    Area = A = from<pi>import * r **2
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:53:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("A = from<pi>import * r **2")
Volume = V = 4/3 from<pi>import * r **3
print(round(Area, 3))
print(round(Volume, 3))

-- ERROR:
File "XXXX", line 6
    Volume = V = 4/3 from<pi>import * r **3
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:54:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("A = from<pi>import * r **2")
Volume = ("V = 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:54:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = ("A = from<pi>import * r **2")
Volume = ("V = 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))

-- EXECUTION TIME:
0.193686
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:54:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = (" from<pi>import * r **2")
Volume = (" 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:54:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = (" from<pi>import * r **2")
Volume = (" 4/3 from<pi>import * r **3")
print(round(Area, 3))
print(round(Volume, 3))
-- EXECUTION TIME:
0.20601
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:55:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = " from<pi>import * r **2"
Volume = " 4/3 from<pi>import * r **3"
print(round(Area, 3))
print(round(Volume, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:55:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = " from<pi>import * r **2"
Volume = " 4/3 from<pi>import * r **3"
print(round(Area, 3))
print(round(Volume, 3))
-- EXECUTION TIME:
0.147599
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 7, in <module>
    print(round(Area, 3))
TypeError: type str doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:56:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = " from<pi>import * r **2"
Volume =  4/3 "from<pi>import" * r **3
print(round(Area, 3))
print(round(Volume, 3))
-- ERROR:
File "XXXX", line 6
    Volume =  4/3 "from<pi>import" * r **3
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:56:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
Area = from<pi>import * r **2
Volume =  4/3 "from<pi>import * r **3
print(round(Area, 3))
print(round(Volume, 3))
-- ERROR:
File "XXXX", line 5
    Area = from<pi>import * r **2
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:57:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = from<pi>import * r **2
V =  4/3 "from<pi>import * r **3
print(round(A, 3))
print(round(V, 3))
-- ERROR:
File "XXXX", line 5
    A = from<pi>import * r **2
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:58:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 "from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
File "XXXX", line 6
    V =  float("4/3 "from<pi>import * r **3")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:58:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:59:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:59:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:59:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:59:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:59:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:59:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 19:59:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 19:59:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 3))
-- EXECUTION TIME:
0.157126
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:00:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float(" from<pi>import * r **3")
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:00:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float(" from<pi>import * r **3")
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.201534
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:00:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:00:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("4/3 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.137483
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:00:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = float("from<pi>import * r **2")
V =  float("1.333 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = float("from<pi>import * r **2")
ValueError: could not convert string to float: 'from<pi>import * r **2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:05:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = pi * (r * r)
V =  float("1.333 from<pi>import * r **3")
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = pi * (r * r)
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:06:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = pi * (r * r)
V = 1.333 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = pi * (r * r)
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:06:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = pi * (r * r)
V = 1.333 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.134932
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    A = pi * (r * r)
NameError: name 'pi' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:06:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = pi * (r * r)
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = pi * (r * r)
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:07:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = pi * (r * r)
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = pi * (r * r)
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:07:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = pi * (r * r)
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.18107
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 5, in <module>
    A = pi * (r * r)
NameError: name 'pi' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:10:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = input(pi*(r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = input(pi*(r * r))
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:10:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = input(pi*(r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = input(pi*(r * r))
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:12:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = input(from <pi> import * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = input(from <pi> import * (r * r))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:15:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = input(from math import * pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = input(from math import * pi * (r * r))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:15:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = input("from math import" * pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = input("from math import" * pi * (r * r))
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:17:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = from math import* pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = from math import* pi * (r * r))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:17:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = from math import* pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = from math import* pi * (r * r))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:17:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = from math import* pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = from math import* pi * (r * r))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:17:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = from math import* pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = from math import* pi * (r * r))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:17:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = from math import* pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = from math import* pi * (r * r))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:17:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = from math import* pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = from math import* pi * (r * r))
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:19:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = math.pi * (r * r))
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
File "XXXX", line 5
    A = math.pi * (r * r))
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:20:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
A = math.pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    A = math.pi * r**2
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:21:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = math.pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = math.pi * r**2
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:21:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = math.pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.129175
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    A = math.pi * r**2
NameError: name 'math' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:22:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = math.pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = math.pi * r**2
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:22:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = math.pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.196328
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/825/main.py", line 6, in <module>
    A = math.pi * r**2
NameError: name 'math' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:22:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = math.pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = math.pi * r**2
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:22:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = math.pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    A = math.pi * r**2
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:22:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.155624
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.7
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:22:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- OUTPUT:
63.617
381.7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:22:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = pi * r**2
V = 4/3 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.174445
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.7
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:23:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = pi * r**2
V = 1.333 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- OUTPUT:
63.617
381.61
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:23:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = pi * r**2
V = 1.333 * pi * (r * r * r)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.236913
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.61
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7869.11
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 2))
-- OUTPUT:
36425049296355.84
381.61
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:24:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.191503
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
36425049296355.84
381.61
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
2.105974298139953e+22
7869.11
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:24:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 2))
-- OUTPUT:
36425049296355.84
381.61
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:24:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import*
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.116946
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
36425049296355.84
381.61
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
2.105974298139953e+22
7869.11
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:25:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 2))
-- OUTPUT:
36425049296355.84
381.61
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:25:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 2))
-- EXECUTION TIME:
0.239196
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
36425049296355.84
381.61
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
2.105974298139953e+22
7869.11
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:25:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 3))
-- OUTPUT:
36425049296355.84
381.608
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:26:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 3))
-- EXECUTION TIME:
0.209273
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
36425049296355.84
381.608
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
2.105974298139953e+22
7869.108
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:26:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**20)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 3))
-- OUTPUT:
36425049296355.84
381.608
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:26:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**2)
V = float(1.333 * pi * r**3)
print(round(A, 3))
print(round(V, 3))
-- OUTPUT:
63.617
381.608
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:26:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**2)
V = float(1.33 * pi * r**3)
print(round(A, 3))
print(round(V, 3))
-- OUTPUT:
63.617
380.749
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 20:27:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**2)
V = float(4/3 * pi * r**3)
print(round(A, 3))
print(round(V, 3))
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 20:27:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = float(input("raio:"))
from math import *
A = float(pi * r**2)
V = float(4/3 * pi * r**3)
print(round(A, 3))
print(round(V, 3))
-- EXECUTION TIME:
0.165497
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
