== TEST (2019-03-20 23:07:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print((x+y+z)-max(x,y,z)-min(x,y,z)
-- ERROR:
File "XXXX", line 10
    
                                       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:07:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-max(x,y,z)-min(x,y,z)
-- ERROR:
File "XXXX", line 10
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:11:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-x-z)
-- OUTPUT:
10
-2
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:12:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-x-z)
-- OUTPUT:
10
-2
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 23:12:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-x-z)
-- EXECUTION TIME:
0.1328
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:17:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
inter=(x+y+z)/3
print(max(x,y,z))
print(min(x,y,z))
print(inter)
-- OUTPUT:
10
-2
2.6666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 23:17:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
inter=(x+y+z)/3
print(max(x,y,z))
print(min(x,y,z))
print(inter)
-- EXECUTION TIME:
0.126216
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
2.6666666666666665
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:22:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
inter=(x+y+z)/3
print(max(x,y,z))
print(min(x,y,z))
print(inter)
-- OUTPUT:
10
-2
2.6666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:22:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
inter=(x+y+z)/3
print(max(x,y,z))
print(min(x,y,z))
print(inter)
-- OUTPUT:
10
-2
2.6666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 23:22:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
inter=(x+y+z)/3
print(max(x,y,z))
print(min(x,y,z))
print(inter)
-- EXECUTION TIME:
0.175327
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
2.6666666666666665
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 23:25:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))

-- EXECUTION TIME:
0.202933
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:25:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))

-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:25:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=(x+y+z+1)/4
print(max(x,y,z))
print(min(x,y,z))
print(w)

-- OUTPUT:
10
-2
2.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:26:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=(x+y+z+1)/4
print(max(x,y,z))
print(min(x,y,z))
print(w)

-- OUTPUT:
10
-2
2.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 23:26:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=(x+y+z+1)/4
print(max(x,y,z))
print(min(x,y,z))
print(w)

-- EXECUTION TIME:
0.189984
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
2.25
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 23:26:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=(x+y+z+1)/3
print(max(x,y,z))
print(min(x,y,z))
print(w)

-- OUTPUT:
10
-2
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 23:26:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=(x+y+z+1)/3
print(max(x,y,z))
print(min(x,y,z))
print(w)

-- EXECUTION TIME:
0.183513
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:00:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(z+x+y-max-min)
 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(z+x+y-max-min)
TypeError: unsupported operand type(s) for -: 'int' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:01:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(int(z+x+y)-max-min)
 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(int(z+x+y)-max-min)
TypeError: unsupported operand type(s) for -: 'int' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:03:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=z+y+x-max-min
print(max(x,y,z))
print(min(x,y,z))
print(w)

 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    w=z+y+x-max-min
TypeError: unsupported operand type(s) for -: 'int' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:07:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
soma=z+y+x
q=soma-max(soma)-min(soma)
print(max(x,y,z))
print(min(x,y,z))
print(w)

 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    q=soma-max(soma)-min(soma)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:07:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
soma=z+y+x
q=soma-max(soma)-min(soma)
print(max(x,y,z))
print(min(x,y,z))
print(q)

 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    q=soma-max(soma)-min(soma)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:09:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
soma=z+y+x
print(max(x,y,z))
print(min(x,y,z))
print(soma)

 

-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:10:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=max(x,y,z)
q=min(x,z,y)
soma=z+y+x-w-q
print(max(x,y,z))
print(min(x,y,z))
print(soma)

 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 00:10:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
w=max(x,y,z)
q=min(x,z,y)
soma=z+y+x-w-q
print(max(x,y,z))
print(min(x,y,z))
print(soma)

 

-- EXECUTION TIME:
0.181724
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:13:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
w=max(x,y,z)
r=min(x,y,z)
soma=s-w-r
print(max(x,y,z))
print(min(x,y,z))
print(soma)

 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 00:13:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
w=max(x,y,z)
r=min(x,y,z)
soma=s-w-r
print(max(x,y,z))
print(min(x,y,z))
print(soma)

 

-- EXECUTION TIME:
0.149022
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 00:14:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
print(max(x,y,z))
print(min(x,y,z))
print(soma)

 

-- EXECUTION TIME:
0.141333
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1015/main.py", line 10, in <module>
    print(soma)
NameError: name 'soma' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:15:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
r=s-(max(a,b,c))
t=r-(min(a,b,c))
print(max(x,y,z))
print(min(x,y,z))
print(t)

 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    r=s-(max(a,b,c))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:15:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
r=s-(max(x,y,z))
t=r-(min(x,y,z))
print(max(x,y,z))
print(min(x,y,z))
print(t)

 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:16:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
r=s-(max(x,y,z))
t=r-(min(x,y,z))
print(max(x,y,z))
print(min(x,y,z))
print(t)

 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 00:16:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
r=s-(max(x,y,z))
t=r-(min(x,y,z))
print(max(x,y,z))
print(min(x,y,z))
print(t)

 

-- EXECUTION TIME:
0.186487
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:17:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
r=s-(max(x,y,z))
t=r-(min(x,y,z))
print(max(x,y,z))
print(min(x,y,z))
print(s)

 

-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 00:18:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
r=s-(max(x,y,z))
t=r-(min(x,y,z))
print(max(x,y,z))
print(min(x,y,z))
print(s)

 

-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 00:18:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=x+y+z
r=s-(max(x,y,z))
t=r-(min(x,y,z))
print(max(x,y,z))
print(min(x,y,z))
print(s)

 

-- EXECUTION TIME:
0.122471
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:32:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))


 

-- EXECUTION TIME:
0.193136
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:33:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(round(x+z+y/2,2))


 

-- OUTPUT:
10
-2
9.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:33:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(round(x+z+y/2,2))


 

-- EXECUTION TIME:
0.137602
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
9.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:34:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-y-z)


 

-- OUTPUT:
10
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:34:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
print(max(x,y,z))
print(min(x,y,z))
print(x+y+z-y-z)


 

-- EXECUTION TIME:
0.174547
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:36:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
s=(x+y+z)-M-m
M=(max(x,y,z))
m=(min(x,y,z))
print(M)
print(m)
print(s)


 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    s=(x+y+z)-M-m
NameError: name 'M' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:37:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
s=(x+y+z)-M-m

m=(min(x,y,z))
print(M)
print(m)
print(s)


 

-- EXECUTION TIME:
0.177993
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1015/main.py", line 8, in <module>
    s=(x+y+z)-M-m
NameError: name 'm' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:37:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
s=(x+y+z)-M-m

m=(min(x,y,z))
print(M)
print(m)
print(s)


 

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    s=(x+y+z)-M-m
NameError: name 'm' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:38:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-M-m
print(M)
print(m)
print(s)


 

-- EXECUTION TIME:
0.205292
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:38:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-M-m
print(M)
print(m)
print(s)


 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:38:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-M-m
print(M)
print(m)
print(s)


 

-- EXECUTION TIME:
0.118229
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:38:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-(M+m)
print(M)
print(m)
print(s)


 

-- EXECUTION TIME:
0.172822
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:38:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-(M+m)
print(M)
print(m)
print(s)


 

-- EXECUTION TIME:
0.135497
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:38:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-(M+m)
print(M)
print(m)
print(s)


 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:39:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-(M+m)
print(M)
print(m)
print(s)


 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:42:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-m
t=(x+y+z)-M
r=t+s
print(M)
print(m)
print(r)


 

-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:42:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
s=(x+y+z)-m
t=(x+y+z)-M
r=t+s
print(M)
print(m)
print(r)


 

-- EXECUTION TIME:
0.130546
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:43:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r= (M+m)-(x+z+y)
print(M)
print(m)
print(r)


 

-- EXECUTION TIME:
0.109652
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:43:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r= (M+m)-(x+z+y)
print(M)
print(m)
print(r)


 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:44:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(M+m)-(x+z+y)
print(M)
print(m)
print(abs(r))


 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:44:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(M+m)-(x+z+y)
print(M)
print(m)
print(abs(r))


 

-- EXECUTION TIME:
0.167427
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:44:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M-m)
print(M)
print(m)
print(r)


 

-- EXECUTION TIME:
0.134643
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
-4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:50:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(M)
print(m)
print(r)


 

-- EXECUTION TIME:
0.165605
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:50:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(M)
print(m)
print(r)


 

-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:50:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(M)
print(m)
print(r)


 

-- EXECUTION TIME:
0.137587
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 03:50:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(m)
print(r)
print(M)

 

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 03:51:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(m)
print(r)
print(M)

 

-- EXECUTION TIME:
0.136383
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 13:50:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(m)
print(r)
print(M)

 

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 13:50:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(m)
print(r)
print(M)

 

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 13:53:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input())
y=int(input())
z=int(input())
M=(max(x,y,z))
m=(min(x,y,z))
r=(x+z+y)-(M+m)
print(m)
print(r)
print(M)

 

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
