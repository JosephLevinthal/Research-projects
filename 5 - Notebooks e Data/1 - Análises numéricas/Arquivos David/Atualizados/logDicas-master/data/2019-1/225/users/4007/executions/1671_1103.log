== TEST (2019-04-24 15:15:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a, b) 
-- OUTPUT:
Entrada: 100
Animal: Garoupa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a"," b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a"," b) 
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a, "," b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, "," b) 
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a,","b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a,","b) 
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a,b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a,","b) 
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a,,b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a,,b) 
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a",",b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a",",b) 
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a",", b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a",", b) 
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a","b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a","b) 
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a, ","b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, ","b) 
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a, "," b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, "," b) 
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a, ",: ",b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, "," b) 
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a,",: " ,b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, "," b) 
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo: ", a,",: " ,b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, "," b) 
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo ", a,",: " ,b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, "," b) 
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:19:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x) and (x <= b):
	print(x, "pertecnce ao intervalo ", a,", " ,b) 
-- ERROR:
File "XXXX", line 9
    print(x, "pertecnce ao intervalo: ", a, "," b) 
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:27:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) or (x >= b)):
	print(x, "nao pertence ao intervalo ", a"," ,b)
elif (b <= a):
	print("Entradas ", a"e" ,b, "invalidas")
	
-- ERROR:
File "XXXX", line 11
    print(x, "nao pertence ao intervalo ", a"," ,b)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:27:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) or (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a"e" ,b, "invalidas")
	
-- ERROR:
File "XXXX", line 13
    print("Entradas ", a"e" ,b, "invalidas")
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:27:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) or (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a"e" ,b,"invalidas")
	
-- ERROR:
File "XXXX", line 13
    print("Entradas ", a"e" ,b,"invalidas")
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:27:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) or (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
2.0 nao pertence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:27:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) or (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
2.0 nao pertence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) or (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
2.0 nao pertence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:29:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
2.0 nao pertence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:29:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
2.0 nao pertence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:30:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:30:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:31:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- EXECUTION TIME:
0.190674
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
3.0 pertence ao intervalo  2.0 ,  4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas  5.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:32:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
	
-- EXECUTION TIME:
0.150292
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
3.0 pertence ao intervalo  2.0 ,  4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas  5.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:32:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas a e b invalidas")
	
-- EXECUTION TIME:
0.156551
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
3.0 pertence ao intervalo  2.0 ,  4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
elif (b <= a):
	print("Entradas a e b invalidas")
	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 ,  4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("x: "))
x = float(input("a: "))
b = float(input("b: "))

if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,", " ,b) 
elif ((a >= x) and (x >= b)):
	print(x, "nao pertence ao intervalo ", a,"," ,b)
else
	(b <= a)
	print("Entradas a e b invalidas")
	
-- ERROR:
File "XXXX", line 12
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:33:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
x = float(input("x: "))
b = float(input("b: "))


	
-- ERROR:
File "XXXX", line 12
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:36:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
x = float(input("x: "))
b = float(input("b: "))
if ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)

	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:37:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
x = float(input("x: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas a e b invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print("x nao pertence ao intervalo a, b")


	
-- OUTPUT:
3.0 pertence ao intervalo  2.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:39:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas a e b invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print("x nao pertence ao intervalo a, b")


	
-- OUTPUT:
x nao pertence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:40:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas a e b invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print("x nao pertence ao intervalo a, b")


	
-- OUTPUT:
x nao pertence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:40:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas a e b invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print("x nao pertence ao intervalo a, b")


	
-- EXECUTION TIME:
0.139193
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x nao pertence ao intervalo a, b
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas a e b invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas ", a"e" ,b, "invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print(x, "nao pertence ao intervalo " a,"," ,b)


	
-- ERROR:
File "XXXX", line 8
    print("Entradas ", a"e" ,b, "invalidas")
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:42:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas ", a"e" ,b,"invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print(x, "nao pertence ao intervalo " a,"," ,b)


	
-- ERROR:
File "XXXX", line 8
    print("Entradas ", a"e" ,b,"invalidas")
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:42:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print(x, "nao pertence ao intervalo " a,"," ,b)


	
-- ERROR:
File "XXXX", line 12
    print(x, "nao pertence ao intervalo " a,"," ,b)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:42:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print(x, "nao pertence ao intervalo ", a,"," ,b)


	
-- OUTPUT:
2.0 nao pertence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))
if (b <= a):
	print("Entradas ", a,"e" ,b,"invalidas")
elif ((a <= x) and (x <= b)):
	print(x, "pertence ao intervalo ", a,"," ,b)
else:
	print(x, "nao pertence ao intervalo ", a,"," ,b)


	
-- EXECUTION TIME:
0.169583
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo  3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas  6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo  1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
