== TEST (2019-04-18 16:47:26) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("isosceles")
		else:
			print("escaleno")
		
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 16:47:38) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("isosceles")
		else:
			print("escaleno")
		
-- EXECUTION TIME:
0.164312
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:48:48) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:49:07) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 16:49:08) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- EXECUTION TIME:
0.181224
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:49:11) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:49:13) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:49:14) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:50:23) 
-- CODE:
n1 = float(input("digite numero: ")), n2 = float(input("digite numero: ")), n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 1
    n1 = float(input()), n2 = float(input()), n3 = float(input())
        ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:50:23) 
-- CODE:
n1 = float(input("digite numero: ")), n2 = float(input("digite numero: ")), n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 1
    n1 = float(input()), n2 = float(input()), n3 = float(input())
        ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:50:23) 
-- CODE:
n1 = float(input("digite numero: ")), n2 = float(input("digite numero: ")), n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 1
    n1 = float(input()), n2 = float(input()), n3 = float(input())
        ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 16:57:42) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:00:24) 
-- CODE:
n1 = float(input("digite numero: "))
n2 = float(input("digite numero: "))
n3 = float(input("digite numero: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:06:28) 
-- CODE:
n1, n2, n3 = float(input("digite numero: "))


if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    n1, n2, n3 = float(input())
TypeError: 'float' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:07:02) 
-- CODE:
n1 , n2 , n3 = float(input("digite os numeros: "))


if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    n1 , n2 , n3 = float(input())
TypeError: 'float' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:11:57) 
-- CODE:
n1, n2, n3 = float(input("digite os numeros: "))

n1 = float(n1)
n2 = float(n2)
n3 = float (n3)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    n1, n2, n3 = float(input())
TypeError: 'float' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:15:06) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Entradas:" n1 , n2 , n3)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Entradas:" n1 , n2 , n3)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Entradas:" n1 , n2 , n3)
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas:" n1 , n2 , n3)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 6
    print("Entradas:" n1 , n2 , n3)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:15:58) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Entradas:" n1 , n2 , n3)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Entradas: n1 , n2 , n3")
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Entradas: n1 , n2 , n3)
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas: n1 , n2 , n3")
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 6
    print("Entradas:" n1 , n2 , n3)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:17:07) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

Entradas = n1 , n2 , n3

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(Entradas)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(Entradas)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(Entradas)
			print("Tipo de triangulo: isosceles")
		else:
			print(Entradas)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
(2.0, 4.0, 4.0)
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:19:15) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = (Entradas: n1 , n2 , n3) 

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(Entradas)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 5
    var = (Entradas: n1 , n2 , n3) 
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:19:38) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = Entradas: n1 , n2 , n3 

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(Entradas)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 5
    var = Entradas: n1 , n2 , n3 
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:19:55) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = "Entradas:" + n1 , n2 , n3 

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(Entradas)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = "Entradas:" + n1 , n2 , n3 
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:20:23) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = "Entradas:" n1 , n2 , n3 

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(Entradas)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 5
    var = "Entradas:" n1 , n2 , n3 
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:21:17) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = "Entradas: n1 , n2 , n3"

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("var")
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("var")
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("var")
			print("Tipo de triangulo: isosceles")
		else:
			print("var")
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
var
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:21:26) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = "Entradas: n1 , n2 , n3"

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("var")
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("var")
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("var")
			print("Tipo de triangulo: isosceles")
		else:
			print("var")
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
var
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:22:01) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = "Entradas: n1 , n2 , n3"

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: n1 , n2 , n3
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:23:28) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

n1 = a
n2 = b
n3 = c

var = "Entradas: n1 , n2 , n3"

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: n1 , n2 , n3
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:23:28) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

n1 = a
n2 = b
n3 = c

var = "Entradas: n1 , n2 , n3"

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: n1 , n2 , n3
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:27:05) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = float("Entradas: n1 , n2 , n3")

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = float("Entradas: n1 , n2 , n3")
ValueError: could not convert string to float: 'Entradas: n1 , n2 , n3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:27:29) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = float(input("Entradas: n1 , n2 , n3"))

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:27:55) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = float("Entradas: n1 , n2 , n3")

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = float("Entradas: n1 , n2 , n3")
ValueError: could not convert string to float: 'Entradas: n1 , n2 , n3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:31:20) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

print("Entradas: n1 , n2 , n3")

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    print(var)
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:32:03) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = "Entradas: n1 , n2 , n3" 

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: n1 , n2 , n3
Entradas: n1 , n2 , n3
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:32:30) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = float("Entradas: n1 , n2 , n3")

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = float("Entradas: n1 , n2 , n3")
ValueError: could not convert string to float: 'Entradas: n1 , n2 , n3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:36:47) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

n1 = a
n2 = b
n3 = c

var = "Entradas: n1 , n2 , n3"

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: n1 , n2 , n3
Entradas: n1 , n2 , n3
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:37:09) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

n1 = a
n2 = b
n3 = c

var = "Entradas: a, b , c"

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: a, b , c
Entradas: a, b , c
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:40:21) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

n1 = a
n2 = b
n3 = c

var = "Entradas:", n1, ",", n2 , ",", n3, ","

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
('Entradas:', 2.0, ',', 4.0, ',', 4.0, ',')
('Entradas:', 2.0, ',', 4.0, ',', 4.0, ',')
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:40:26) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

n1 = a
n2 = b
n3 = c

var = "Entradas:", n1, ",", n2 , ",", n3, ","

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
('Entradas:', 2.0, ',', 4.0, ',', 4.0, ',')
('Entradas:', 2.0, ',', 4.0, ',', 4.0, ',')
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:41:03) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

n1 = a
n2 = b
n3 = c

var = "Entradas: n1, n2 , n3"

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: n1, n2 , n3
Entradas: n1, n2 , n3
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:41:56) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

var = "Entradas: n1, n2 , n3"

print(var)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:43:50) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))


if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Entradas: n1, n2, n3 ")
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Entradas: n1, n2, n3")
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Entradas: n1, n2, n3")
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas: n1 ,n2, n3")
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 17:44:20) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))


if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Entradas: n1, n2, n3 ")
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Entradas: n1, n2, n3")
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Entradas: n1, n2, n3")
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas: n1 ,n2, n3")
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: n1, n2, n3
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:24:09) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

var = "Entradas:", a, ",", b, ",", c

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = "Entradas:", a, ",", b, ",", c
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:24:57) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

var = "Entradas:", a, ",", b, ",", c

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:25:07) 
-- CODE:
a = float(input("digite n1: "))
b = float(input("digite n2: "))
c = float(input("digite n3: "))

var = "Entradas:", a, ",", b, ",", c

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:25:53) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

print("Entradas:", a, ",", b, ",", c)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print("Entradas:", a, ",", b, ",", c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:26:24) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

print("Entradas:", n1, ",", n2, ",",n3)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print(var)
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print(var)
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print(var)
			print("Tipo de triangulo: isosceles")
		else:
			print(var)
			print("Tipo de triangulo: escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    print(var)
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:26:51) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

print("Entradas:", n1, ",", n2, ",",n3)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 15:27:01) 
-- CODE:
n1 = float(input("digite n1: "))
n2 = float(input("digite n2: "))
n3 = float(input("digite n3: "))

print("Entradas:", n1, ",", n2, ",",n3)

if ((n1 >= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else: 
		if ((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.272446
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
