== TEST (2019-03-31 14:16:29) 
-- CODE:
n=int(input())
from math import*
var1=1-(factorial(365)/factorial(365-n))*(1/365**n)
print(round(var1, 2)
-- ERROR:
File "XXXX", line 5
    
                        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:17:09) 
-- CODE:
n=int(input())
from math import*
var1=1-(factorial(365)/factorial(365-n))*(1/365**n)
print(int(round(var1, 2)))
-- ERROR:
File "XXXX", line 5
    
                        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:19:06) 
-- CODE:
n=int(input())
from math import*
var1=(factorial(365))
var2=var1//factorial(365-n)
var3=var2*1/365**n
var4=1-var3
print(round(var4, 2))

-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:19:21) 
-- CODE:
n=int(input())
from math import*
var1=(factorial(365))
var2=var1/factorial(365-n)
var3=var2*1/365**n
var4=1-var3
print(round(var4, 2))

-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 14:20:09) 
-- CODE:
n=int(input())
from math import*
var1=(factorial(365))
var2=var1/factorial(365-n)
var3=var2*1/365**n
var4=1-var3
print(round(var4, 2))

-- EXECUTION TIME:
0.167302
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
0.17
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
0.54
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:21:46) 
-- CODE:
n=int(input())
from math import*
var1=1-((factorial(365)/(factorial(365-n)))*1/(365**n)
print(round(var1, 2))
-- ERROR:
File "XXXX", line 4
    print(round(var1, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:22:07) 
-- CODE:
n=int(input())
from math import*
var1=1-((factorial(365)/(factorial(365-n)))*1/(365**n)
print(int(round(var1, 2)))
-- ERROR:
File "XXXX", line 4
    print(int(round(var1, 2)))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:22:47) 
-- CODE:
n=int(input())
from math import*
var1=1-((factorial(365)/(factorial(365-n)))*1/(365**n)
print(round(var1, 2))
-- ERROR:
File "XXXX", line 4
    print(round(var1, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:24:02) 
-- CODE:
n=int(input())
from math import*
x=1-((factorial(365)/(factorial(365-n)))*1/(365**n)
print(round(x, 2))
-- ERROR:
File "XXXX", line 4
    print(round(x, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:27:04) 
-- CODE:
n=int(input())
from math import*
x=1-((factorial(365)/(factorial(365-n)))*1/(365**n)
print(float(round(x, 2)))
-- ERROR:
File "XXXX", line 4
    print(float(round(x, 2)))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:32:41) 
-- CODE:
n=int(input())
from math import*
x=1-((factorial(365))/(factorial(365-n)))*1/(365**n)
print(round(x, 2))
-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:35:14) 
-- CODE:
n=int(input())
from math import*
x= 1-((factorial(365))/(factorial(365-n)))*1/(365**n)
print(round(x, 2))
-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:35:39) 
-- CODE:
n=int(input())
from math import*
x= (1-((factorial(365))/(factorial(365-n)))*1/(365**n))*100
print(round(x, 2))
-- OUTPUT:
16.7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 14:35:46) 
-- CODE:
n=int(input())
from math import*
x= (1-((factorial(365))/(factorial(365-n)))*1/(365**n))*100
print(round(x, 2))
-- EXECUTION TIME:
0.136322
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
16.7
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
53.83
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
