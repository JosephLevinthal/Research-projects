== TEST (2019-04-22 15:24:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
facebook = input
print("facebook")
-- OUTPUT:
facebook
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:36:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print("Entrada" a, "," b, "," c, ",")
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
-- ERROR:
File "XXXX", line 6
    print("Entrada" a, "," b, "," c, ",")
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:36:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:37:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:39:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(a==c)or(b!=c):
	 print("isosceles")
elif((a!=b)or(a!=c)or(b!=c))
	  print("escaleno")
-- ERROR:
File "XXXX", line 9
    elif((a==b)or(a==c)or(b!=c):
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:40:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c!=a):
	 print("isosceles")
elif((a!=b)or(a!=c)or(b!=c))
	  print("escaleno")
-- ERROR:
File "XXXX", line 9
    elif((a==b)or(b==c)or(c!=a):
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a):
	 print("isosceles")
elif((a!=b)or(a!=c)or(b!=c))
	  print("escaleno")
-- ERROR:
File "XXXX", line 9
    elif((a==b)or(b==c)and(c!=a):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:41:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a):
	 print("isosceles")

-- ERROR:
File "XXXX", line 9
    elif((a==b)or(b==c)and(c!=a):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:42:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a):
	print("isosceles")

-- ERROR:
File "XXXX", line 9
    elif((a==b)or(b==c)and(c!=a):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:42:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:42:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c))
	  print("escaleno")

-- ERROR:
File "XXXX", line 11
    elif((a!=b)or(a!=c)or(b!=c))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:42:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c))
	print("escaleno")

-- ERROR:
File "XXXX", line 11
    elif((a!=b)or(a!=c)or(b!=c))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:43:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:43:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:43:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:44:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:45:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:45:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:03:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:03:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = input()
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- EXECUTION TIME:
0.259645
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
2 4 4
equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
3.3 4.4 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1 2 7
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:03:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = input()
c = input()
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2.0 4 4
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:07:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a==b)or(a==c)or(b==c)):
	print("equilatero")
elif((a==b)or(b==c)and(c!=a)):
	print("isosceles")
elif((a!=b)or(a!=c)or(b!=c)):
	print("escaleno")
else:
	print("invalido")

-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:11:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if (a>b>c)
	if ((a==b)or(a==c)or(b==c)):
		print("equilatero")
	elif((a==b)or(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)or(a!=c)or(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else
-- ERROR:
File "XXXX", line 7
    if (a>b>c)
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:11:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if (a>b>c):
	if ((a==b)or(a==c)or(b==c)):
		print("equilatero")
	elif((a==b)or(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)or(a!=c)or(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else
-- ERROR:
File "XXXX", line 16
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:11:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if (a>b>c):
	if ((a==b)or(a==c)or(b==c)):
		print("equilatero")
	elif((a==b)or(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)or(a!=c)or(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else
-- ERROR:
File "XXXX", line 16
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:12:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if (a<=b>c):
	if ((a==b)or(a==c)or(b==c)):
		print("equilatero")
	elif((a==b)or(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)or(a!=c)or(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print()
-- OUTPUT:
2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:13:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if (a<=b>c):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print()
-- OUTPUT:
2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:16:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print()
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:16:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print(a,b,c)
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:17:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("valido")
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:17:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("valido")
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:20:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:21:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a>0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:22:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a<=0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:22:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a<=0)and(b>0)and(c>0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:27:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print(a , b , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- OUTPUT:
2.0 4.0 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, ","  c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, ","  c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, ","  c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, ","  c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, ","  c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, ","  c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, ","  c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, ","  c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: " a "," b ","  c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: " a "," b ","  c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:31:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: "a, "," b, "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: "a, "," b, "," , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:33:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada: ",a "," ,b ","  ,c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada: ",a "," ,b ","  ,c)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:33:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:", a "," , b "," ,c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:", a "," , b "," ,c)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:", a "," , b "," , c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:", a "," , b "," , c)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:" a","b ","c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:" a","b ","c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:" a","b ","c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:" a","b ","c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:" a","b ","c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:" a","b ","c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:" a","b ","c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:" a","b ","c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:" a","b ","c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:" a","b ","c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:" a","b ","c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:" a","b ","c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:35:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:",a "," ,b "," ,c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:",a "," ,b "," ,c)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:36:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entrada:", a "," ,b "," ,c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("invalido") 
-- ERROR:
File "XXXX", line 6
    print("Entrada:", a "," ,b "," ,c)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:37:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("invalido") 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:37:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("invalido") 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:37:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("invalido") 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:37:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("invalido") 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:37:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("invalido") 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:38:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
	print("tipo de triangulo:invalido")
 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:38:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
	print("tipo de triangulo:invalido")
 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:39:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:39:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:39:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if ((a<=0)and(b<=0)and(c<=0)):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- EXECUTION TIME:
0.165579
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo:invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:40:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)or(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:41:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:42:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a<=0)and(b<=0)and(c<=0)or(a+b>c)and(c+b>a)(b+c>a):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)and(a>=b+c)(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)and(a>=b+c)(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)and(a>=b+c)(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)and(a>=b+c)(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)or(a>=b+c)or(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)or(a>=b+c)or(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)or(a>=b+c)or(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)or(a>=b+c)or(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")
else:
	print("tipo de triangulo:invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)or(a>=b+c)or(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:46:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(c>=b+a)or(a>=b+c)or(b>=c+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:49:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)and(b<=0)and(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:50:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)and(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:51:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:51:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.129278
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo:invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo:isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a<=b+c)or(b<=a+c)or(c<=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a<=b+c)or(b<=a+c)or(c<=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a<=b+c)or(b<=a+c)or(c<=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a<=b+c)or(b<=a+c)or(c<=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a<=b+c)or(b<=a+c)or(c<=b+a):
	if ((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c!=a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
else:
		print("tipo de triangulo:invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- ERROR:
File "XXXX", line 9
    elif((a==b)and(a==c)and(b==c)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- ERROR:
File "XXXX", line 9
    elif((a==b)and(a==c)and(b==c)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:04:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)0r(a==c)or(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.154288
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif((a==b)0r(a==c)or(b==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:04:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)or(a==c)or(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.135373
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif((a==b)or(a==c)or(b==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)or(a==c)or(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)and(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)or(a!=c)or(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.186527
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif((a==b)or(a==c)or(b==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)or(a==c)or(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)or(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)or(a!=c)or(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.122388
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif((a==b)or(a==c)or(b==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:05:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)or(a==c)or(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)or(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- ERROR:
File "XXXX", line 9
    elif((a==b)or(a==c)or(b==c)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)or(a==c)or(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)or(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.127715
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif((a==b)or(a==c)or(b==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)or(a==c)or(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)or(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.14487
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif((a==b)or(a==c)or(b==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:05:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif((a==b)and(a==c)and(b==c)):
		print("tipo de triangulo:equilatero")
	elif((a==b)or(b==c)or(c==a)):
		print("tipo de triangulo:isosceles")
	elif((a!=b)and(a!=c)and(b!=c)):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.164497
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif((a==b)and(a==c)and(b==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:06:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=a+c)or(c>=b+a):
	print("tipo de trinagulo: invalido")
	elif(a==b)and(a==c)and(b==c):
		print("tipo de triangulo:equilatero")
	elif(a==b)or(b==c)or(c==a):
		print("tipo de triangulo:isosceles")
	elif(a!=b)and(a!=c)and(b!=c):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.168099
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif(a==b)and(a==c)and(b==c):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:07:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
	elif(a==b)and(b==c)and(a==c):
		print("tipo de triangulo:equilatero")
	elif(a==b)or(b==c)or(c==a):
		print("tipo de triangulo:isosceles")
	elif(a!=b)and(b!=c)and(a!=c):
		print("tipo de triangulo:escaleno")
	else:
		print("tipo de triangulo:invalido")

-- EXECUTION TIME:
0.124594
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif(a==b)and(b==c)and(a==c):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:07:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
	elif(a==b)and(b==c)and(a==c):
		print("tipo de triangulo: equilatero")
	elif(a==b)or(b==c)or(c==a):
		print("tipo de triangulo: isosceles")
	elif(a!=b)and(b!=c)and(a!=c):
		print("tipo de triangulo: escaleno")
	else:
		print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.16492
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    elif(a==b)and(b==c)and(a==c):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:08:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
	elif(a==b)and(b==c)and(a==c):
		print("tipo de triangulo: equilatero")
	elif(a==b)or(b==c)or(c==a):
		print("tipo de triangulo: isosceles")
	elif(a!=b)and(b!=c)and(a!=c):
		print("tipo de triangulo: escaleno")
else:
		print("tipo de triangulo: invalido")

-- ERROR:
File "XXXX", line 9
    elif(a==b)and(b==c)and(a==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:08:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
elif(a==b)and(b==c)and(a==c):
		print("tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
		print("tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
		print("tipo de triangulo: escaleno")
else:
		print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.147721
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de trinagulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:08:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("tipo de triangulo: escaleno")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.184428
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de trinagulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:09:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("tipo de triangulo: escaleno")
else:
	print("tipo de triangulo: invalido")

-- EXECUTION TIME:
0.209969
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de trinagulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:13:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("tipo de triangulo: escaleno")
else:
	print("tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:13:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("tipo de trinagulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("tipo de triangulo: escaleno")
else:
	print("tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:13:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:13:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:14:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:14:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c!=a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:15:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:16:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:17:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:18:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:19:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidadef
a = float(input())
b = float(input())
c = float(input())
print("Entradas:", a, ",", b, ",", c)
if (a<=0)or(b<=0)or(c<=0)or(a>=b+c)or(b>=c+a)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and(b==c)and(a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b)or(b==c)or(c==a):
	print("Tipo de triangulo: isosceles")
elif(a!=b)and(b!=c)and(a!=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.148408
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
