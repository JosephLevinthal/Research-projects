== TEST (2019-03-23 15:36:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 15
y = 2
print(x , y , x // y , x % y )
-- OUTPUT:
15 2 7 1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:36:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 15
y = 2
print(x , y , x // y , x % y )
-- EXECUTION TIME:
0.186718
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
15 2 7 1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
15 2 7 1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
15 2 7 1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:37:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = "dividendo : 15"
y = "divisor : 2"
print(x , y , x // y , x % y )
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x , y , x // y , x % y )
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:38:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = "dividendo : 15"
y = "divisor : 2"
print(float(x , y , x // y , x % y) )
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x , y , x // y , x % y) )
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:38:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = "dividendo : 15"
y = "divisor : 2"
print(float(x , y , x / y , x % y) )
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(x , y , x / y , x % y) )
TypeError: unsupported operand type(s) for /: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:39:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

print("x" , x)
-- OUTPUT:
x 100
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:40:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

print(x)
-- OUTPUT:
100
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:40:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

print(x , y)
-- OUTPUT:
100 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:40:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

print(x , y)
print(y)
-- OUTPUT:
100 2
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:41:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

print(x)
print(y)
print(x / y)
-- OUTPUT:
100
2
50.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:42:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

print(x)
print(y)
print(x // y)
print(x % y)
-- OUTPUT:
100
2
50
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:42:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

print(x)
print(y)
print(x // y)
print(x % y)
-- EXECUTION TIME:
0.252579
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
100
2
50
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
100
2
50
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
100
2
50
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:44:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(100)
y = input(2)

print(x)
print(y)
print(x // y)
print(x % y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:44:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(100)
y = input(2)

print(x)
print(y)
print(x // y)
print(x % y)
-- EXECUTION TIME:
0.146949
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 9, in <module>
    print(x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:45:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(x)
y = input(y)

print(x)
print(y)
print(x // y)
print(x % y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = input(x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:46:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(x)
var2= input(y)

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = input(x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:46:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = x
var2= y

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = x
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:46:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = 100
var2= 2

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- OUTPUT:
100
2
50
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:46:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = 100
var2= 2

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- EXECUTION TIME:
0.179304
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
100
2
50
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
100
2
50
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
100
2
50
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:50:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = 346
var2= 2

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- OUTPUT:
346
2
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:51:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = 346
var2= 2

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- EXECUTION TIME:
0.210442
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
346
2
173
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
346
2
173
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
346
2
173
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:53:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float(input("dividendo: 346"))
var2= float(input("divisor: 2"))

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:53:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float(input("dividendo: 346"))
var2= float(input("divisor: 2"))

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- EXECUTION TIME:
0.194526
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:53:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float(input("dividendo: 346"))
var2= float(input("divisor: 2"))

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:53:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float(input("dividendo: 346"))
var2= float(input("divisor: 2"))

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:57:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float("dividendo: 346")
var2= float("divisor: 2")

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 =float("dividendo: 346")
ValueError: could not convert string to float: 'dividendo: 346'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float("dividendo: ")
var2= float("divisor: ")

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 =float("dividendo: ")
ValueError: could not convert string to float: 'dividendo: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:58:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float("dividendo: ")
var2= float("divisor: ")

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- EXECUTION TIME:
0.125408
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 4, in <module>
    var1 =float("dividendo: ")
ValueError: could not convert string to float: 'dividendo: '

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 15:58:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float(input("dividendo: "))
var2= float(input("divisor: "))

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 15:58:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 =float(input("dividendo: "))
var2= float(input("divisor: "))

print(var1)
print(var2)
print(var1 // var2)
print(var1 % var2)
-- EXECUTION TIME:
0.168676
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:04:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int("dividendo: 100")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = int("dividendo: 100")
ValueError: invalid literal for int() with base 10: 'dividendo: 100'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:04:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float("dividendo: 100")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = float("dividendo: 100")
ValueError: could not convert string to float: 'dividendo: 100'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:06:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(100)
y = input(2)

-- OUTPUT:
1002
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:06:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(100)
y = input(2)

-- OUTPUT:
1002
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:07:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2

-- OUTPUT:
1002
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:07:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2
print(x , y)

-- OUTPUT:
100 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:08:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2
print("dividendo" , x)

-- OUTPUT:
dividendo 100
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:08:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2
print("dividendo:" , x)
print("divisor:" , y)
-- OUTPUT:
dividendo: 100
divisor: 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:09:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2
print("dividendo:" , x)
print("divisor:" , y)
print("quociente:" , x // y)
-- OUTPUT:
dividendo: 100
divisor: 2
quociente: 50
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:09:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2
print("dividendo:" , x)
print("divisor:" , y)
print("quociente:" , x // y)
print("resto:" , x % y)
-- OUTPUT:
dividendo: 100
divisor: 2
quociente: 50
resto: 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:09:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 2
print("dividendo:" , x)
print("divisor:" , y)
print("quociente:" , x // y)
print("resto:" , x % y)
-- EXECUTION TIME:
0.13955
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo: 100
divisor: 2
quociente: 50
resto: 0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo: 100
divisor: 2
quociente: 50
resto: 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo: 100
divisor: 2
quociente: 50
resto: 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:15:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo : 100"))
y = float(input("dividor : 2"))
print(x , y , x // y , x % y)
-- OUTPUT:
8.0 5.0 1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:16:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo : 100"))
y = float(input("dividor : 2"))
print(x , y , x // y , x % y)
-- EXECUTION TIME:
0.192597
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0 5.0 1.0 3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0 2.0 7.0 0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0 2.0 173.0 1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:17:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x
	  y
	  x // y
	  x % y)
-- ERROR:
File "XXXX", line 7
    y
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:17:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x
	   y
	  x // y
	  x % y)
-- ERROR:
File "XXXX", line 7
    y
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:17:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x , y
	  x // y
	  x % y)
-- ERROR:
File "XXXX", line 7
    x // y
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:18:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x , y , x // y , x % y)
-- OUTPUT:
10 2 5 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:18:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x , y , x // y , x % y)
-- EXECUTION TIME:
0.155145
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
10 2 5 0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
10 2 5 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
10 2 5 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:20:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x)
print(y)
-- OUTPUT:
10
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:20:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
var = x // y
print(x)
print(y)

-- OUTPUT:
10
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:21:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
var = x // y
print(x)
print(y)
print(var)

-- OUTPUT:
10
2
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:21:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
var = x // y
var2 = x % y
print(x)
print(y)
print(var)
print(var2)

-- OUTPUT:
10
2
5
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:21:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
var = x // y
var2 = x % y
print(x)
print(y)
print(var)
print(var2)

-- EXECUTION TIME:
0.137447
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
10
2
5
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
10
2
5
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
10
2
5
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:23:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
var = x // y
var2 = x % y
print(x , y , x //y , x % y)

-- OUTPUT:
10 2 5 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:23:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
var = x // y
var2 = x % y
print(x , y , x //y , x % y)

-- EXECUTION TIME:
0.145123
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
10 2 5 0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
10 2 5 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
10 2 5 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:23:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = X
y = Y



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = X
NameError: name 'X' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:24:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x1 = X
y = Y



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x1 = X
NameError: name 'X' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:26:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 5
print("dividendo")



-- OUTPUT:
dividendo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:26:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 5
print("dividendo")
print("divisor")
print("quociente")
print("resto")

-- OUTPUT:
dividendo
divisor
quociente
resto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:26:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 5
print("dividendo")
print("divisor")
print("quociente")
print("resto")

-- EXECUTION TIME:
0.188161
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
quociente
resto
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
quociente
resto
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
quociente
resto
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:27:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 5
print("dividendo")
print("divisor")
print("quociente")
print("resto")

-- EXECUTION TIME:
0.145323
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo
divisor
quociente
resto
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo
divisor
quociente
resto
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo
divisor
quociente
resto
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:28:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 5
print("dividendo" , x)
print("divisor" , y)
print("quociente" , x // y)
print("resto" , x % y)

-- OUTPUT:
dividendo 100
divisor 5
quociente 20
resto 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:28:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 100
y = 5
print("dividendo" , x)
print("divisor" , y)
print("quociente" , x // y)
print("resto" , x % y)

-- EXECUTION TIME:
0.176537
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo 100
divisor 5
quociente 20
resto 0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo 100
divisor 5
quociente 20
resto 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo 100
divisor 5
quociente 20
resto 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:29:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346)
y = input(2)

print( x // y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print( x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:29:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346)
y = input(2)

print( x // y)
-- EXECUTION TIME:
0.175894
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 7, in <module>
    print( x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:30:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346)
y = input(2)

print( x // y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print( x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:30:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346 // 2)
y = input(2)

print( x // y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print( x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:31:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = (346)
y = (2)

print( x // y)
-- EXECUTION TIME:
0.127067
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
173
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
173
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:31:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = (346)
y = (2)

print( x // y)
-- OUTPUT:
173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:31:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = (346)
y = (2)
print(x)
print(y)
print( x // y)
print(x%y)
-- OUTPUT:
346
2
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:31:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = (346)
y = (2)
print(x)
print(y)
print( x // y)
print(x%y)
-- EXECUTION TIME:
0.150899
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
346
2
173
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
346
2
173
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
346
2
173
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:32:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = (346)
y = input(2)
print(x)
print(y)
print( x // y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print( x // y)
TypeError: unsupported operand type(s) for //: 'int' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:32:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346)
y = input(2)

-- EXECUTION TIME:
0.217303
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
3462
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
3462
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
3462
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:32:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346)
y = input(2)

-- OUTPUT:
3462
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:33:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346)
y = input(2)
total = x , y , x//y , x%y
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    total = x , y , x//y , x%y
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:33:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input(346)
y = input(2)
total = x , y , x//y , x%y
print(total)
-- EXECUTION TIME:
0.20046
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    total = x , y , x//y , x%y
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:35:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
-- EXECUTION TIME:
0.122784
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:

-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:

-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:35:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    total = x , y , x//y , x%y
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:35:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    total = x , y , x//y , x%y
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:36:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
Y = 2
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    total = x , y , x//y , x%y
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:37:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
Y = 2
print("dividendo:")
print("dividor:")
print("quociente:")
print("resto:")
-- OUTPUT:
dividendo:
dividor:
quociente:
resto:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:38:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
Y = 2
print("dividendo:")
print("dividor:")
print("quociente:")
print("resto:")
-- EXECUTION TIME:
0.178009
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo:
dividor:
quociente:
resto:
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo:
dividor:
quociente:
resto:
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo:
dividor:
quociente:
resto:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:38:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
Y = 2
print("dividendo:X")
print("dividor:Y")
print("quociente:X // Y")
print("resto:X % Y")
-- OUTPUT:
dividendo:X
dividor:Y
quociente:X // Y
resto:X % Y
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:38:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
Y = 2
print("dividendo:X")
print("dividor:Y")
print("quociente:X // Y")
print("resto:X % Y")
-- EXECUTION TIME:
0.151209
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo:X
dividor:Y
quociente:X // Y
resto:X % Y
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo:X
dividor:Y
quociente:X // Y
resto:X % Y
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo:X
dividor:Y
quociente:X // Y
resto:X % Y
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:39:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
Y = 2
print("dividendo:" , X)
print("dividor:", Y)
print("quociente:" , X // Y)
print("resto:" , X % Y)
-- OUTPUT:
dividendo: 100
dividor: 2
quociente: 50
resto: 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:39:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 100
Y = 2
print("dividendo:" , X)
print("dividor:", Y)
print("quociente:" , X // Y)
print("resto:" , X % Y)
-- EXECUTION TIME:
0.149644
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
dividendo: 100
dividor: 2
quociente: 50
resto: 0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
dividendo: 100
dividor: 2
quociente: 50
resto: 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
dividendo: 100
dividor: 2
quociente: 50
resto: 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:44:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 20
y = 2
var = x //y
var1 = x%y
print(x , y , var , var1)
-- OUTPUT:
20 2 10 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:44:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 20
y = 2
var = x //y
var1 = x%y
print(x , y , var , var1)
-- EXECUTION TIME:
0.147069
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
20 2 10 0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
20 2 10 0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
20 2 10 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:44:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 20
y = 2
var = x //y
var1 = x%y
print(x , y , var , var1)
-- OUTPUT:
20 2 10 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:56:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 20
Y = 5
print(X)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:57:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 20
Y = 5
print(X)
print(Y)
print(X // Y)
print(X % Y)
-- OUTPUT:
20
5
4
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:57:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 20
Y = 5
print(X)
print(Y)
print(X // Y)
print(X % Y)
-- EXECUTION TIME:
0.149553
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
20
5
4
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
20
5
4
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
20
5
4
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:57:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 20
Y = 5
print(X)
print(Y)
print(X // Y)
print(X % Y)
-- OUTPUT:
20
5
4
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:01:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 20
Y = 5

-- OUTPUT:
20
5
4
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:01:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 20
Y = 5

-- OUTPUT:
20
5
4
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:02:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = 20
Y = 5

-- EXECUTION TIME:
0.119638
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:

-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:

-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:04:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = float(input("dividendo: 10"))
Y = float(input("divisor: 2"))
a = X // Y
-- OUTPUT:
20
5
4
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:04:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = float(input("dividendo: 10"))
Y = float(input("divisor: 2"))
a = X // Y
b = X % Y
-- OUTPUT:
20
5
4
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:04:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = float(input("dividendo: 10"))
Y = float(input("divisor: 2"))
a = X // Y
b = X % Y
print(X , Y , a , b)
-- OUTPUT:
8.0 5.0 1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 17:04:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X = float(input("dividendo: 10"))
Y = float(input("divisor: 2"))
a = X // Y
b = X % Y
print(X , Y , a , b)
-- EXECUTION TIME:
0.14462
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0 5.0 1.0 3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0 2.0 7.0 0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0 2.0 173.0 1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:19:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo: 100"))
y = float(input("divisor: 50"))

-- OUTPUT:
8.0 5.0 1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:20:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo: 100"))
y = float(input("divisor: 50"))

-- OUTPUT:
8.0 5.0 1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:20:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo: 100"))
y = float(input("divisor: 50"))

-- OUTPUT:
8.0 5.0 1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:21:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo: 100"))
y = float(input("divisor: 50"))


-- OUTPUT:
8.0 5.0 1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:21:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo: 100"))
y = float(input("divisor: 50"))
print(x)
print(y)
-- OUTPUT:
8.0
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:22:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo: 100"))
y = float(input("divisor: 50"))
z = x * y
print(z)
-- OUTPUT:
40.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 17:22:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input("dividendo: 100"))
y = float(input("divisor: 50"))
z = x * y
print(z)
-- OUTPUT:
40.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 19:51:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x)
print(y)
-- OUTPUT:
10
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 19:52:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = 10
y = 2
print(x)
print(y)
x // y
x % y
-- OUTPUT:
10
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 19:59:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
r = x // y
s = x % y
print(x)
print(y)
print(r)
print(s)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 19:59:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
r = x // y
s = x % y
print(x)
print(y)
print(r)
print(s)
-- EXECUTION TIME:
0.141963
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 20:11:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
r = x // y
s = x % y
print(x)
print(y)
print(r)
print(s)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 20:11:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("dividendo:"))
y = int(input("divisor:"))
r = x // y
s = x % y
print(x)
print(y)
print(r)
print(s)
-- EXECUTION TIME:
0.120734
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
