== TEST (2019-03-27 15:22:45) 
-- CODE:
var = input(1234
print(1%2%3%4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
File "XXXX", line 2
    print(1%2%3%4)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:23:07) 
-- CODE:
var = input(1234
print(1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
File "XXXX", line 2
    print(1 + 2 + 3 + 4)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:23:09) 
-- CODE:
var = input(1234
print(1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.192473
-- ERROR:
  File "/home/codebench/codes/1590/842/main.py", line 2
    print(1 + 2 + 3 + 4)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:23:10) 
-- CODE:
var = input(1234
print(1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
File "XXXX", line 2
    print(1 + 2 + 3 + 4)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:23:24) 
-- CODE:
var = input(1234
print (1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
File "XXXX", line 2
    print (1 + 2 + 3 + 4)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:23:36) 
-- CODE:
var = input(1234)
print(1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
123410
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:23:40) 
-- CODE:
var = input(1234)
print(1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.106189
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
123410
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
123410
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:23:41) 
-- CODE:
var = input(1234)
print(1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.149259
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
123410
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
123410
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:23:41) 
-- CODE:
var = input(1234)
print(1 + 2 + 3 + 4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.145305
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
123410
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
123410
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 15:24:19) 
-- CODE:
var = input(1234)
print(1//2//3//4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
12340
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 15:24:22) 
-- CODE:
var = input(1234)
print(1//2//3//4)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.201328
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
12340
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
12340
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:37:51) 
-- CODE:
var = input("numero inteiro de quatro digitos: ")
print(var)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:37:52) 
-- CODE:
var = input("numero inteiro de quatro digitos: ")
print(var)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.143187
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:38:06) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(var1)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:38:07) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(var1)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.125907
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9173
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1010
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:38:08) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(var1)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:38:39) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(var1 % var1)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(var1 % var1)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:39:08) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(var1 // var1 // var1 // var1)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(var1 // var1 // var1 // var1)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:39:10) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(var1 // var1 // var1 // var1)
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.265072
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/842/main.py", line 2, in <module>
    print(var1 // var1 // var1 // var1)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:40:13) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: 1234")
print(1//2//3//4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(var1 // var1 // var1 // var1)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:40:13) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: 1234")
print(1//2//3//4)

-- EXECUTION TIME:
0.139129
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:40:16) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: 1234")
print(1//2//3//4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(var1 // var1 // var1 // var1)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:40:17) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: 1234")
print(1//2//3//4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(var1 // var1 // var1 // var1)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:40:17) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: 1234")
print(1//2//3//4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(var1 // var1 // var1 // var1)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:40:29) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(1//2//3//4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(var1 // var1 // var1 // var1)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:40:31) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(1//2//3//4)

-- EXECUTION TIME:
0.204269
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:41:01) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print(soma dos digitos)

-- ERROR:
File "XXXX", line 2
    print(soma dos digitos)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:41:15) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- OUTPUT:
soma dos digitos:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:41:16) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- EXECUTION TIME:
0.146422
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
soma dos digitos:
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
soma dos digitos:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:41:18) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- OUTPUT:
soma dos digitos:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:41:19) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- EXECUTION TIME:
0.165157
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
soma dos digitos:
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
soma dos digitos:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:41:19) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- OUTPUT:
soma dos digitos:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:42:13) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- OUTPUT:
soma dos digitos:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 13:42:13) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- OUTPUT:
soma dos digitos:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:42:13) 
-- CODE:
var1 = input("numero inteiro de quatro digitos: ")
print("soma dos digitos: ")

-- EXECUTION TIME:
0.136504
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
soma dos digitos:
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
soma dos digitos:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 22:19:20) 
-- CODE:
a = int(input("Digite um numero: "))

b = a // 1000
c = a % 1000

d = c // 100
e = c % 100

f = e // 10
g = e % 10

h = g // 1

soma = b + d + f + h

print(soma)
-- EXECUTION TIME:
0.136668
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
