== SUBMITION (2019-04-10 13:04:49) 
-- CODE:
print(bool(p > g)
-- EXECUTION TIME:
0.126211
-- ERROR:
  File "/home/codebench/codes/1636/2450/main.py", line 2
    
                     ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:04:50) 
-- CODE:
print(bool(p > g)
-- ERROR:
File "XXXX", line 2
    
                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:05:23) 
-- CODE:
print(bool(p > g))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    print(bool(p > g))
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:05:34) 
-- CODE:
print(bool(2 > 3))
-- OUTPUT:
False
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:09:35) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print("next")
-- OUTPUT:
False
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:10:40) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:10:54) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- EXECUTION TIME:
0.146379
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Leon
Ada
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Marcos
Demetrius
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
WILSON
george
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:12:24) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:13:08) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:13:41) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:13:55) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:14:41) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() > two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:15:11) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() >= two.upper():
	print(one)
	print(two)
else:
	print(two)
	print(one)
-- OUTPUT:
Leon
Ada
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:15:48) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() >= two.upper():
	print(two)
	print(one)
else:
	print(one)
	print(two)
-- OUTPUT:
Ada
Leon
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:15:59) 
-- CODE:
one = input("nome: ")
two = input("nome: ")

if one.upper() >= two.upper():
	print(two)
	print(one)
else:
	print(one)
	print(two)
-- EXECUTION TIME:
0.201451
-- TEST CASE 1:
---- input:
Ada
Leon
---- correct output:
Ada
Leon
---- user output:
Ada
Leon
-- TEST CASE 2:
---- input:
Marcos
Demetrius
---- correct output:
Demetrius
Marcos
---- user output:
Demetrius
Marcos
-- TEST CASE 3:
---- input:
WILSON
george
---- correct output:
george
WILSON
---- user output:
george
WILSON
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
