== TEST (2019-06-10 15:52:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > vet):
   # Zera contador de elementos pares
   npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else:
			nimp = nimp + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(nimp + npar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 15:52:40) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > vet):
   # Zera contador de elementos pares
   npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		else
			nimp = nimp + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(nimp + npar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    else
       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 03:59:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0

# Verifica se o programa vai terminar
while (i < size(vet)):
   # Zera contador de elementos pares
   npar = 0
	nimp = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif (elemento % 2 != 0):
			nimp = nimp + 1
	
	i = i + 0

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(npar + nimp)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 11
    nimp = 0
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:01:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimp = 0

# Verifica se o programa vai terminar
while (i < size(vet)):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif (elemento % 2 != 0):
			nimp = nimp + 1
	
	i = i + 0

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(npar + nimp)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 16
    elif (elemento % 2 != 0):
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:01:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimp = 0

# Verifica se o programa vai terminar
while (i < size(vet)):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif (elemento % 2 != 0)
			nimp = nimp + 1
	
	i = i + 0

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(npar + nimp)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 16
    elif (elemento % 2 != 0)
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:01:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimp = 0

# Verifica se o programa vai terminar
while (i < size(vet)):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif (elemento % 2 !== 0)
			nimp = nimp + 1
	
	i = i + 0

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(npar + nimp)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 16
    elif (elemento % 2 !== 0)
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:01:49) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0
nimp = 0

# Verifica se o programa vai terminar
while (i < size(vet)):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif (elemento % 2 !== 0):
			nimp = nimp + 1
	
	i = i + 0

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimp)

   # No. total de elementos
   print(npar + nimp)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 16
    elif (elemento % 2 !== 0):
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:04:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
i = 0
npar = 0


# Verifica se o programa vai terminar
while (i < size(vet)):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
	i = i + 0

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(i - npar)

   # No. total de elementos
   print( i )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 17
    i = i + 0
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:08:10) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar = 0

# Verifica se o programa vai terminar
while (i < size(vet)):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:11:01) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar = 0

# Verifica se o programa vai terminar
while (size(vet) != 1 ):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:11:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar = 0

# Verifica se o programa vai terminar
while (size(vet) != 1 ):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 04:13:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar = 0

# Verifica se o programa vai terminar
while (size(vet) != 1 ):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- EXECUTION TIME:
1.10796
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
4
7
11
10
-4
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
17
0
17
27
-17
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
10
-6
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:15:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar = 0

# Verifica se o programa vai terminar
while (size(vet) != 1 ):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:18:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while (size(vet) != 1 ):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:19:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while (size(vet) != 1 ):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:19:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
npar = 0

# Verifica se o programa vai terminar
while (size(vet) != 1 ):

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:20:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while (size(vet) != 1 ):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:20:18) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while (size(vet) != 1 ):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for elemento in vet
                      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:38:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while ((size(vet) != 1)):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:40:55) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while ((size(vet) != 1))
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 8
    while ((size(vet) != 1))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:42:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while (size(vet) != 1):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:46:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))


# Verifica se o programa vai terminar
while (size(vet) != 1):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 04:48:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) != 1):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (vet[elemento] % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 11
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 05:14:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) != 1):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if (vet[elemento] % 2 == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 11
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 05:15:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) != 1):
	npar = 0
	
   # Conta quantidade de elementos pares
   for elemento in range(size(vet)):
      if ((vet[elemento] % 2) == 0):
         npar = npar + 1
	
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet) - npar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 11
    for elemento in range(size(vet)):
                                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:02:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if ((vet[x] % 2) == 0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:03:14) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if (x % 2 == 0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:08:38) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if (x % 2 == 0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:08:52) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if (x % 2 == 0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:14:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if (x % 2 == 0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:14:54) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if(x % 2 == 0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:15:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if(x % 2 == 0):
         par = par + 1
			else:
				impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:16:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if(x % 2 == 0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:16:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if(x%2==0):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 09:16:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	par = 0
	impar = 0
	
   # Conta quantidade de elementos pares
   for x in vet:
      if( (x%2) == 0 ):
         par = par + 1
		else:
			impar = impar + 1
	
   # No. de elementos pares
   print(par)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print( size(vet) )

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
-- ERROR:
File "XXXX", line 12
    for x in vet:
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 09:22:17) 
-- CODE:
from numpy import*

vet = array(eval(input("Primeiro vetor:")))

while (size(vet)>1):
	npar=0
	nimpar=0
	for elemento in vet:
		if (elemento%2==0):
		    npar= npar + 1
		else:
			nimpar= nimpar + 1
	print(npar)
	
	print(nimpar)
	
	print(size(vet))
	
	vet = array(eval(input("Primeiro vetor:")))

	
	
-- EXECUTION TIME:
1.30974
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor:8
10
18
Primeiro vetor:2
2
4
Primeiro vetor:
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 11:06:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   n = 0

   # Conta quantidade de elementos pares
   for i in vet:
      if (i % 2 == 0):
         n = n + 1 
   # No. de elementos pares
   print(n)

   # No. de elementos impares
   print(size(vet)-n)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.898469
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
