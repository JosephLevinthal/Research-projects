== TEST (2019-04-19 11:02:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(not(a<0 and b<0 and c<0)):
	if(a==b and b==c):
		msg:"equilatero"
	else:
		if(a==b or b==c or c==a):
			msg="isosceles"
		else:
			msg="escaleno"
else:
	msg="invalido"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 11:02:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(not(a<0 and b<0 and c<0)):
	if(a==b and b==c):
		msg="equilatero"
	else:
		if(a==b or b==c or c==a):
			msg="isosceles"
		else:
			msg="escaleno"
else:
	msg="invalido"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 11:03:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(not(a<0 and b<0 and c<0)):
	if(a==b and b==c and c==a):
		msg="equilatero"
	else:
		if(a==b or b==c or c==a):
			msg="isosceles"
		else:
			msg="escaleno"
else:
	msg="invalido"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 11:06:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(not(a<=0 and b<=0 and c<=0)):
	if(not(a>b+c and b>a+c and c>a+b)):
		if(a==b and b==c and c==a):
			msg="equilatero"
		else:
			if(a==b or b==c or c==a):
				msg="isosceles"
			else:
				msg="escaleno"
	else:
		msg="invalido"
else:
	msg="invalido"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 11:11:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c and b>=a+c and c>=a+b):
		msg="invalido"
	else:
		if((a==b)and(b==c)):
			msg="equilatero"
		else:
			if((a==b)or(b==c)or(c==a)):
				msg="isosceles"
			else:
				msg="escaleno"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:11:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c and b>=a+c and c>=a+b):
		msg:"invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:11:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c and b>=a+c and c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:12:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print(msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:13:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 13:13:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- EXECUTION TIME:
0.142298
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:13:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:14:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:14:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:14:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 13:15:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalida"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- EXECUTION TIME:
0.139007
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 13:15:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalido"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 13:15:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>=0 and b>=0 and c>=0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalido"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- EXECUTION TIME:
0.134679
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:06:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalido"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:06:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("lado1:"))
b=float(input("lado2:"))
c=float(input("lado3:"))
print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a>=b+c or b>=a+c or c>=a+b):
		msg="invalido"
	else:
		if(a==b and b==c):
			msg="equilatero"
		else:
			if(a==b or a==c or b==c):
				msg="isosceles"
			else:
				msg="escaleno"
else:
	msg="invalido"
print("Tipo de triangulo:",msg)
-- EXECUTION TIME:
0.163591
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
