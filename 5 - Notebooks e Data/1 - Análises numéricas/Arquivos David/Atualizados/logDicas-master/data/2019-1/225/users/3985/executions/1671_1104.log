== TEST (2019-04-24 13:14:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("a: "))
b= float(input("b: "))
c= float(input("c: "))
d= float(input("d: "))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)

if (a<b) and (c>d):
elif (a<c) and (b>d):
elif (a<d) and (c>b):
elif (a>b) and (c<d):
elif (a>d) and (c<d):
elif (a>c) and (b<d):

-- ERROR:
File "XXXX", line 14
    elif (a<c) and (b>d):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:15:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("a: "))
b= float(input("b: "))
c= float(input("c: "))
d= float(input("d: "))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)

if (a<b) and (c>d):
	print("Nao ha intersecao")
elif (a<c) and (b>d):
elif (a<d) and (c>b):
elif (a>b) and (c<d):
elif (a>d) and (c<d):
elif (a>c) and (b<d):

-- ERROR:
File "XXXX", line 16
    elif (a<d) and (c>b):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:16:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("a: "))
b= float(input("b: "))
c= float(input("c: "))
d= float(input("d: "))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)

if (a<b) and (c>d):
	print("Nao ha intersecao")
elif (a<c) and (b>d):
	print("Nao ha intersecao")
elif (a<d) and (c>b):
	print("Nao ha intersecao")
elif (a>b) and (c<d):
	print("Nao ha intersecao")
elif (a>d) and (c<d):
	print("Nao ha intersecao")
elif (a>c) and (b<d):
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:23:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("a: "))
b= float(input("b: "))
c= float(input("c: "))
d= float(input("d: "))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)
if (b>a) and (d>c):
	if (a>=c) and (a<=d) or (b>=c) and (b<=d):
		print("Ha intersecao")
	elif (c>=a) and (c<=b) or (d>=a) and (d<=c):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:24:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("a: "))
b= float(input("b: "))
c= float(input("c: "))
d= float(input("d: "))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)
if (b>a) and (d>c):
	if (a>=c) and (a<=d) or (b>=c) and (b<=d):
		print("Ha intersecao")
	elif (c>=a) and (c<=b) or (d>=a) and (d<=c):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:24:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("a: "))
b= float(input("b: "))
c= float(input("c: "))
d= float(input("d: "))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)
if (b>a) and (d>c):
	if (a>=c) and (a<=d) or (b>=c) and (b<=d):
		print("Ha intersecao")
	elif (c>=a) and (c<=b) or (d>=a) and (d<=c):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:24:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("a: "))
b= float(input("b: "))
c= float(input("c: "))
d= float(input("d: "))

print("Intervalo 1: ",a,",",b)
print("Intervalo 2: ",c,",",d)
if (b>a) and (d>c):
	if (a>=c) and (a<=d) or (b>=c) and (b<=d):
		print("Ha intersecao")
	elif (c>=a) and (c<=b) or (d>=a) and (d<=c):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.184903
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
