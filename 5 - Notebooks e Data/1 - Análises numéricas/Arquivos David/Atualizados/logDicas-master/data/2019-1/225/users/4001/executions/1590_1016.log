== TEST (2019-03-22 23:36:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = float(input("lado a:"))
b = float(input("lado b:"))
c = float(input("lado c:"))

-- OUTPUT:
63.61725123519331 3
381.7035074111598 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 00:17:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("lado a:"))
b = float(input("lado b:"))
c = float(input("lado c:"))
s = (a + b + c)/2
area = sqrt(s(s-a)*(s-b)*(s-c))
print(round(area, 5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt(s(s-a)*(s-b)*(s-c))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 00:17:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("lado a:"))
b = float(input("lado b:"))
c = float(input("lado c:"))
s = (a + b + c)/2
area = sqrt(s(s-a)*(s-b)*(s-c))
print(round(area, 5))

-- EXECUTION TIME:
0.214837
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1016/main.py", line 9, in <module>
    area = sqrt(s(s-a)*(s-b)*(s-c))
TypeError: 'float' object is not callable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 00:18:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = int(input("lado a:"))
b = int(input("lado b:"))
c = int(input("lado c:"))
s = (a + b + c)/2
area = sqrt(s(s-a)*(s-b)*(s-c))
print(round(area, 5))

-- EXECUTION TIME:
0.198355
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1016/main.py", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 00:18:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("lado a:"))
b = float(input("lado b:"))
c = float(input("lado c:"))
s = (a + b + c)/2
area = sqrt(s(s-a)*(s-b)*(s-c))
print(round(area, 5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt(s(s-a)*(s-b)*(s-c))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 00:19:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("lado a:"))
b = float(input("lado b:"))
c = float(input("lado c:"))
s = (a + b + c)/2
area = float(sqrt(s(s-a)*(s-b)*(s-c)))
print(round(area, 5))

-- EXECUTION TIME:
0.111208
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1016/main.py", line 9, in <module>
    area = float(sqrt(s(s-a)*(s-b)*(s-c)))
TypeError: 'float' object is not callable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 00:21:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a = float(input("lado a:"))
b = float(input("lado b:"))
c = float(input("lado c:"))
s = (a + b + c)/2
area = float(sqrt(s*(s-a)*(s-b)*(s-c)))
print(round(area, 5))

-- EXECUTION TIME:
0.223999
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
