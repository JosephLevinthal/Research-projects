== TEST (2019-04-13 00:46:49) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))


-- ERROR:
File "XXXX", line 8
    print("falta"round(y, 2))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 00:54:06) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)
if (valor disponivel >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"


-- ERROR:
File "XXXX", line 7
    if (valor disponivel >= total):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 00:54:31) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)

if (vd >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"


-- ERROR:
File "XXXX", line 7
    if (valor disponivel >= total):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 00:55:14) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)

if (vd >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"
	
print(msg)


-- OUTPUT:
suficiente
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 00:55:39) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)

if (vd >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"
	
print(msg.upper())


-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 00:56:26) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)

if (vd >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"
	
print(msg.upper())


-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 00:56:52) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)

if (vd >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"
	
print(msg.upper())


-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 00:57:19) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)

if (vd >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"
	
print(msg.upper())


-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 00:57:54) 
-- CODE:
vd = float(input("valor disponivel: "))
qtrc = int(input("quantidades de tickets:"))
vt = float(input("valor dos tickets: "))
qpo = int(input("quantidade de passes: "))
vp = float(input("valor dos passes: "))
total = (qtrc*vt) + (qpo*vp)

if (vd >= total):
	msg = "suficiente"
	
else: 
	msg = "insuficiente"
	
print(msg.upper())


-- EXECUTION TIME:
0.215795
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
INSUFICIENTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
