== TEST (2019-04-15 10:18:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= float(input("opcao desejada: "))
1 = (4 * pi * r**3)/3
2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
print(round(1,4))
else:
	print(round(2,4))

-- ERROR:
File "XXXX", line 12
    print(round(1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 10:20:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= float(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
print(round(v1,4))
else:
	print(round(v2,4))

-- ERROR:
File "XXXX", line 12
    print(round(v1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:30:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= float(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
print(round(v1,4))
else:
	print(round(v2,4))

-- ERROR:
File "XXXX", line 12
    print(round(v1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:33:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= float(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3

if (n == 1):
print(round(v1,4))

else:
	print(round(v2,4))

-- ERROR:
File "XXXX", line 13
    print(round(v1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:33:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= float(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
print(round(v1,4))

else:
	print(round(v2,4))

-- ERROR:
File "XXXX", line 12
    print(round(v1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:38:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
print(round(v1,4))

else:
	print(round(v2,4))

-- ERROR:
File "XXXX", line 12
    print(round(v1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:38:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
print(round(v1,4))
else:
	print(round(v2,4))

-- ERROR:
File "XXXX", line 12
    print(round(v1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:39:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
print(round(v1,4))
else:
	x=v2-v1
	print(round(v2,4))

-- ERROR:
File "XXXX", line 12
    print(round(v1,4))
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:39:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
   print(round(v1,4))
else:
	x=v2-v1
	print(round(v2,4))

-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:39:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
   print(round(v2,4))
else:
	x=v1-v2
	print(round(v1,4))

-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:41:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
   print(round(v2,4))
else:
	h=v1-v2
	print(round(v1,4))

-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:41:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
   print(round(v2,4))
else:
	h=v1-v2
	print(round(h,4))

-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:42:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
pi
r = float(input("raio e: "))
h = float(input("altura e: "))
n= int(input("opcao desejada: "))
v1 = (4 * pi * r**3)/3
v2 = (pi * h**2 * (3*r-h))/3
if (n == 1):
   print(round(v2,4))
else:
	h=v1-v2
	print(round(h,4))

-- EXECUTION TIME:
0.140725
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
