== TEST (2019-04-24 14:07:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if (a = b) and (b = c) and (c = a) :
	print(equlitatero)
-- ERROR:
File "XXXX", line 7
    if (a = b) and (b = c) and (c = a) :
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:07:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if (a=b) and (b=c) and (c=a) :
	print("equilatero")
	
-- ERROR:
File "XXXX", line 7
    if (a=b) and (b=c) and (c=a) :
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b) and (b=c) and (c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b) and (b=c) and (c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b) and (b=c) and (c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b) and (b=c) and (c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b) and (b=c) and (c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b) and (b=c) and (c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b) and (b=c) and (c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b) and (b=c) and (c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b) and (b=c) and (c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b) and (b=c) and (c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b) and (b=c) and (c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b) and (b=c) and (c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b) and (b=c) and (c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b) and (b=c) and (c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:08:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a ,b,c)
if(a=b)and(b=c)and(c=a) :
	
	
-- ERROR:
File "XXXX", line 7
    if(a=b)and(b=c)and(c=a) :
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:09:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
if (a==b) and (b==c) and (c==a)
	
-- ERROR:
File "XXXX", line 6
    if (a==b) and (b==c) and (c==a)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:09:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
if (a==b) and (b==c) and (c==a)
	
-- ERROR:
File "XXXX", line 6
    if (a==b) and (b==c) and (c==a)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:09:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
if (a==b) and (b==c) and (c==a) :
	
-- ERROR:
File "XXXX", line 8
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:10:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a,b,c)
if (a==b) and (b==c) and (c==a) :
	print("equilatero")
	
-- OUTPUT:
2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:10:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a,b,c)
if (a==b) and (b==c) and (c==a) :
	print("equilatero")
	
-- OUTPUT:
2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:11:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
if (a==b) or (b==c) or (c==a) :
	print("equilatero")
	
-- OUTPUT:
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:11:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
if (a==b) or (b==c) or (c==a) :
	print("equilatero")
	
	
-- OUTPUT:
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:14:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(a , b , c)
if (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("equilatero")
	
	
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:16:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print(entradas : a , b , c)
if (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("equilatero")
elif (a!=b) and (b!=c) amd (c!=a) :
	print("escaleno")

	
	
-- ERROR:
File "XXXX", line 6
    print(entradas : a , b , c)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:17:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print( a , b , c)
if (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("equilatero")
elif (a!=b) and (b!=c) amd (c!=a) :
	print("escaleno")

	
	
-- ERROR:
File "XXXX", line 11
    elif (a!=b) and (b!=c) amd (c!=a) :
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:17:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print( a , b , c)
if (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("equilatero")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")

	
	
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:19:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print( a , b , c)
if (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("equilatero")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")
elif (a<0) and (a>b) and (b>c) and (c>a) :
	print("invalido")

	
	
-- OUTPUT:
2.0 4.0 4.0
equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:25:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print( a , b , c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("invalido")
elif (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("isoceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")



	
	
-- OUTPUT:
2.0 4.0 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("entrada:" a , b , c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("invalido")
elif (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("isoceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")



	
	
-- ERROR:
File "XXXX", line 6
    print("entrada:" a , b , c)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("entrada: a , b , c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("invalido")
elif (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("isoceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")



	
	
-- ERROR:
File "XXXX", line 6
    print("entrada: a , b , c)
                             ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:29:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print( a , b , c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("invalido")
elif (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("isoceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")



	
	
-- OUTPUT:
2.0 4.0 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:31:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("invalido")
elif (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("isoceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:32:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("isoceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:33:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:",equilatero)
elif (a==b) or (b==c) or (c==a) :
	print("isoceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:",equilatero)
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:",isosceles)
elif (a!=b) and (b!=c) and (c!=a) :
	print("Tipo de triangulo:",escaleno)



	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print("Tipo de triangulo:",isosceles)
NameError: name 'isosceles' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:",equilatero)
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:",isosceles)
elif (a!=b) and (b!=c) and (c!=a) :
	print("Tipo de triangulo:",)



	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print("Tipo de triangulo:",isosceles)
NameError: name 'isosceles' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:34:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:",equilatero)
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:",isosceles)
elif (a!=b) and (b!=c) and (c!=a) :
	print("Tipo de triangulo:",)



	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print("Tipo de triangulo:",isosceles)
NameError: name 'isosceles' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:35:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:",)
elif (a!=b) and (b!=c) and (c!=a) :
	print("Tipo de triangulo:",)



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:36:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) and (b<=0) and (b<=0) and (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:37:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (b<=0) or (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (c!=a) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:38:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (b<=0) or (c<=0) :
	print("Tipo de triangulos:",invalido)
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- EXECUTION TIME:
0.144586
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulos: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulos: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:45:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- EXECUTION TIME:
0.199213
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulos: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulos: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:45:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:48:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (b==c) and (c==a) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:48:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:50:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:50:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- EXECUTION TIME:
0.163633
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulos: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulos: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:51:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:51:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:51:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:54:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulos:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulos: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:55:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulo:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- EXECUTION TIME:
0.141528
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:55:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulo:","invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo:","equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo:","isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo:","escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:55:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))
print("Entradas:", a, ",", b, ",", c)
if (a<=0) or (b<=0) or (c<=0) or (a + b >= c) or (b + c >= a) or (c + a >= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- EXECUTION TIME:
0.12692
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:56:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:57:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- EXECUTION TIME:
0.139658
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:57:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 14:58:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- EXECUTION TIME:
0.211716
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:58:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 14:59:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")



	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:02:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:02:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a + b <= c) or (b + c <= a) or (c + a <= b) :
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- EXECUTION TIME:
0.119925
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:03:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- EXECUTION TIME:
0.161793
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:03:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c!=a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:04:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:04:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1"))
b = float(input("lado 2"))
c = float(input("lado 3"))

print("Entradas:", a, ",", b, ",", c)

if (a<=0) or (b<=0) or (c<=0) or (a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif (a==b) and (c==b) and (a==c) :
	print("Tipo de triangulo: equilatero")
elif (a==b) or (b==c) or (c==a) :
	print("Tipo de triangulo: isosceles")
elif (a!=b) and (b!=c) and (a!=c) :
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")


	
	
-- EXECUTION TIME:
0.302655
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
