== TEST (2019-05-09 09:44:10) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade A = 
cidade B =
numero de anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 6
    cidade A = 
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:44:26) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade A = 0
cidade B = 0
numero de anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 6
    cidade A = 0
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:44:40) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade A == 0
cidade B == 0
numero de anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 6
    cidade A == 0
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:44:53) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade A = 0
cidade B = 0
numero de anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 6
    cidade A = 0
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:45:20) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cid A = 0
cid B = 0
numero de anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 6
    cid A = 0
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:45:44) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade_A = 0
cidade_B = 0
numero de anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 8
    numero de anos = 0
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:46:00) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade_A = 0
cidade_B = 0
numero_de_ anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 8
    numero_de_ anos = 0
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:46:05) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade_A = 0
cidade_B = 0
numero_de_anos = 0

while(NA < NB):
	cidade A = 
	cidade B = 
-- ERROR:
File "XXXX", line 11
    cidade A = 
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:46:13) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade_A = 0
cidade_B = 0
numero_de_anos = 0

while(NA < NB):
	cidade_A = 
	cidade_B = 
-- ERROR:
File "XXXX", line 11
    cidade_A = 
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 09:47:43) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade_A = 0
cidade_B = 0
numero_de_anos = 0

while(NA < NB):
	cidade_A = cidade_A + 1
	cidade_B = cidade_B + 1
-- ERROR:
File "XXXX", line 11
    cidade_A = 
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:05:54) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade_A = 0
cidade_B = 0
numero_de_anos = 0

while(NA < NB):
	cidade_A = (cidade_A + PA) * 100
	cidade_B = (cidade_B + PB) * 100
	numero_de_anos = numero_de_anos + 1
	
-- ERROR:
File "XXXX", line 11
    cidade_A = 
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:06:47) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cidade_A = 0
cidade_B = 0
numero_de_anos = 0

while(NA < NB):
	cidade_A = (cidade_A + PA) * 100
	cidade_B = (cidade_B + PB) * 100
	numero_de_anos = numero_de_anos + 1
	print(numero_de_anos)
-- OUTPUT:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:37:51) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

numero_de_anos = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (cA + PA) * 100
		soma2 = (cB + PB) * 100
	numero_de_anos = numero_de_anos + 1
	
	print(numero_de_anos)
-- ERROR:
File "XXXX", line 13
    numero_de_anos = numero_de_anos + 1
                                      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:38:02) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

numero_de_anos = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (cA + PA) * 100
		soma2 = (cB + PB) * 100
		numero_de_anos = numero_de_anos + 1
	
	print(numero_de_anos)
-- ERROR:
File "XXXX", line 15
    print(numero_de_anos)
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-09 10:38:29) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

numero_de_anos = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (cA + PA) * 100
		soma2 = (cB + PB) * 100
		numero_de_anos = numero_de_anos + 1
	
	print(numero_de_anos)
-- ERROR:
File "XXXX", line 15
    print(numero_de_anos)
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-09 10:38:58) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

numero_de_anos = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (cA + PA) * 100
		soma2 = (cB + PB) * 100
		numero_de_anos = numero_de_anos + 1
	
	print(numero_de_anos)
-- EXECUTION TIME:
0.0293431
-- ERROR:
Error response from daemon: Container 462abdd537d9c62c8167c343bca5bd03fce33234219873271740bc0a945b4ad8 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 13:49:07) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (NA * PA) / 100
		soma2 = (NB * PB) / 100
		nda = nda + 1
	
	print(numero_de_anos)
-- EXECUTION TIME:
0.156972
-- ERROR:
  File "/home/codebench/codes/1712/2498/main.py", line 15
    print(numero_de_anos)
                        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 13:49:17) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (NA * PA) / 100
		soma2 = (NB * PB) / 100
		nda = nda + 1
	
	print(nda)
-- EXECUTION TIME:
0.180422
-- ERROR:
  File "/home/codebench/codes/1712/2498/main.py", line 15
    print(nda)
             ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 13:49:52) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (NA * PA) / 100
		soma2 = (NB * PB) / 100
		nda = nda + 1
	
	print(int(nda))
-- EXECUTION TIME:
0.160661
-- ERROR:
  File "/home/codebench/codes/1712/2498/main.py", line 15
    print(int(nda))
                  ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:50:07) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (NA * PA) / 100
		soma2 = (NB * PB) / 100
		nda = nda + 1
	
	print(int(nda))
-- ERROR:
File "XXXX", line 15
    print(int(nda))
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:50:24) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (NA * PA) / 100
		soma2 = (NB * PB) / 100
		nda = nda + 1
	
print(int(nda))
-- ERROR:
File "XXXX", line 15
    print(int(nda))
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 13:51:06) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (NA * PA) / 100
		soma2 = (NB * PB) / 100
		nda = nda + 1
	
		print(int(nda))
-- OUTPUT:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 13:55:29) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = 0
soma2 = 0

while(NA < NB):
		soma1 = (NA * PA) / 100
		soma2 = (NB * PB) / 100
		nda = nda + 1
	
		print(int(nda))
-- EXECUTION TIME:
229.099
-- TEST CASE 1:
---- input:
250150
580000
35.5
10.5
---- correct output:
5
---- user output:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
-- TEST CASE 2:
---- input:
180250
1200000
10.25
5.7
---- correct output:
45
---- user output:
OCI runtime exec failed: exec failed: cannot exec a container that has stopped: unknown
-- TEST CASE 3:
---- input:
1000000
1650000
12.75
3.2
---- correct output:
6
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:15:58) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA
soma2 = NB

while(NA <= NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
	
	
		print(int(nda))
-- OUTPUT:
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:16:53) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA
soma2 = NB

while(NA <= NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
	
		print(int(nda))
-- OUTPUT:
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:31:19) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + soma
soma2 = NB + soma

while(NA <= NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + soma
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:31:26) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + soma
soma2 = NB + soma

while(NA <= NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + soma
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:31:55) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + soma
soma2 = NB + soma

while(NA <= NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + soma
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:32:05) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + soma
soma2 = NB + soma

while(NA < NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + soma
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:32:57) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:33:53) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:34:58) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 14:35:32) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
sna = NA + ((soma1 * PA) / 100)
snb = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- EXECUTION TIME:
0.161067
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1712/2498/main.py", line 7, in <module>
    sna = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:35:34) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
sna = NA + ((soma1 * PA) / 100)
snb = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = (soma1 * PA) / 100
		soma2 = (soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    sna = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:38:46) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = soma1+(soma1 * PA) / 100
		soma2 = soma2+(soma2 * PB) / 100
		
		
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 14:38:50) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = soma1+(soma1 * PA) / 100
		soma2 = soma2+(soma2 * PB) / 100
		
		
		print(int(nda))
-- EXECUTION TIME:
0.152704
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1712/2498/main.py", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 14:39:13) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = soma1+((soma1 * PA) / 100)
		soma2 = soma2+((soma2 * PB) / 100)
		
		
		print(int(nda))
-- EXECUTION TIME:
0.164638
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1712/2498/main.py", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 14:39:52) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = soma1+((soma1 * PA) / 100)
		soma2 = soma2+((soma2 * PB) / 100)
		nda=nda+1
		print(int(nda))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 14:39:54) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

nda = 0
soma1 = NA + ((soma1 * PA) / 100)
soma2 = NB + ((soma2 * PB) / 100)

while(NA < NB):
		soma1 = soma1+((soma1 * PA) / 100)
		soma2 = soma2+((soma2 * PB) / 100)
		nda=nda+1
		print(int(nda))
-- EXECUTION TIME:
0.211066
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1712/2498/main.py", line 7, in <module>
    soma1 = NA + ((soma1 * PA) / 100)
NameError: name 'soma1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 14:42:41) 
-- CODE:
NA = int(input("Habitantes da cidade A: "))
NB = int(input("Habitantes da cidade B: "))
PA = float(input("crescimento populacional A: "))
PB = float(input("crescimento populacional B: "))

cna=NA+((NA*PA)/100)
cnb=NB+((NB*PB)/100)
ct=1

while(cna<cnb):
	cna=cna+((cna*PA)/100)
	cnb=cnb+((cnb*PB)/100)
	ct=ct+1
print(ct)
-- EXECUTION TIME:
0.18559
-- TEST CASE 1:
---- input:
250150
580000
35.5
10.5
---- correct output:
5
---- user output:
5
-- TEST CASE 2:
---- input:
180250
1200000
10.25
5.7
---- correct output:
45
---- user output:
45
-- TEST CASE 3:
---- input:
1000000
1650000
12.75
3.2
---- correct output:
6
---- user output:
6
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
