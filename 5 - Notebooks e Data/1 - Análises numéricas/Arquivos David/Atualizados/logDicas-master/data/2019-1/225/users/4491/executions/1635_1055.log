== TEST (2019-04-08 15:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = input(radians("a: "))
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * sen*2a / g

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * sen*2a / g
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:50:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = input(radians("a: "))
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * (sen*2a) / g

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (sen*2a) / g
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:50:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = input(radians("a: "))
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * (sin*2a) / g

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (sin*2a) / g
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:50:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = input(radians("a: "))
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * (sin2a) / g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = input(radians("a: "))
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:51:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = radians("a: ")
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * (sin2a) / g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians("a: ")
TypeError: must be real number, not str
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:51:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = radians(float("a: "))
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * (sin2a) / g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(float("a: "))
ValueError: could not convert string to float: 'a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:52:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = radians(a)
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * (sin2a) / g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 00:22:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = input("velocidade inicial: ")
a = radians(a)
dis = input("distancia: ")
g = 9,8
#formula
R = (vo ** 2) * (sin2a) / g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = radians(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:02:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2a) / g

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = (vo ** 2) * (sin2a) / g
NameError: name 'sin2a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:55:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2a) / g

if(dis = 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (sin*2a) / g
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:55:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2a) / g

if(dis = 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (sin*2a) / g
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:57:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2a) / g

if(dis = 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (sin*2a) / g
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:57:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2a) / g

if(dis = 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 12
    if(dis = 20):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:58:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2a) / g

if("dis" = 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 12
    if("dis" = 20):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:58:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2a) / g

if ("dis" = 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 12
    if ("dis" = 20):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:58:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2a) / g

if( "dis" = 20 ):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 12
    if( "dis" = 20 ):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 11:59:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = (vo ** 2) * (sin2a) / g
NameError: name 'sin2a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:00:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (sin*2a) / g
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:00:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2*a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = (vo ** 2) * (sin2*a) / g
NameError: name 'sin2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:02:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
ang = radians(float(input("a: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2*a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = (vo ** 2) * (sin2*a) / g
NameError: name 'sin2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:02:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
ang = radians(float(input("a: ")))
sin = (radians(ang))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2*a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R = (vo ** 2) * (sin2*a) / g
NameError: name 'sin2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:03:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
sin = radians(ang)
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2*a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    sin = radians(ang)
NameError: name 'ang' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:03:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
ang = radians(float(input("ang: ")))
sin = radians(ang)
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2*a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    dis = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:11:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("a: ")))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2*a) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    dis = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:12:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin2) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = (vo ** 2) * (sin2) / g
NameError: name 'sin2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:12:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:12:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- EXECUTION TIME:
0.19852
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:12:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(dis = 20):
	abs(dis - R)
	mensagem = "nao"
else:
	mensagem = "sim"
	
print(mensagem)

-- ERROR:
File "XXXX", line 12
    if(dis = 20):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:13:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:14:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(dis == 20):
	abs(dis - R)
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.134111
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:14:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(dis == 20):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:14:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(dis == 20):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.181516
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:18:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:18:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.244352
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:23:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (sin*2) / g

if(abs(dis + 0,1 - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if(abs(dis + 0,1 - R) < 1):
TypeError: abs() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:23:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = ((vo ** 2) * (sin*2) / g ) + 0.1

if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:24:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = ((vo ** 2) * (sin*2) / g ) + 0.1

if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.156557
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:25:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = ((vo ** 2) * (sin*2) / g ) + 0,1

if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if(abs(dis - R) < 1):
TypeError: unsupported operand type(s) for -: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:25:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
R = f + 0.1
#formula
f = ((vo ** 2) * (sin*2) / g )

if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = f + 0.1
NameError: name 'f' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:26:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
f = ((vo ** 2) * (sin*2) / g )
R = f + 0.1
if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:26:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
f = ((vo ** 2) * (sin*2) / g )
R = f + 0.1
if(abs(dis - R) < 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.195326
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:27:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
f = ((vo ** 2) * (sin*2) / g )
R = f + 0.1
if(abs(dis - R) <= 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:28:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
sin = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
f = ((vo ** 2) * (sin*2) / g )
R = f + 0.1
if(abs(dis - R) <= 1):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- EXECUTION TIME:
0.175211
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:58:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (*2) / g
if((abs(dis - R) <= 0.1) and ((abs(dis - R) >= 0)):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 11
    if((abs(dis - R) <= 0.1) and ((abs(dis - R) >= 0)):
                                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:58:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (*2) / g
if((abs(dis - R) <= 0.1) and ((abs(dis - R) >= 0))):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (*2) / g
                    ^
SyntaxError: can't use starred expression here
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:59:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = (vo ** 2) * (*2) / g
if((abs(dis - R) <= 0.1) and (abs(dis - R) >= 0)):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    R = (vo ** 2) * (*2) / g
                    ^
SyntaxError: can't use starred expression here
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:59:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = ((vo ** 2) * (*2) / g )
if((abs(dis - R) <= 0.1) and (abs(dis - R) >= 0)):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
File "XXXX", line 10
    R = ((vo ** 2) * (*2) / g )
                     ^
SyntaxError: can't use starred expression here
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:59:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
vo = float(input("velocidade inicial: "))
a = radians(float(input("ang: ")))
dis = float(input("distancia: "))
g = 9.8
#formula
R = ((vo ** 2) * (sin*2*a) / g )
if((abs(dis - R) <= 0.1) and (abs(dis - R) >= 0)):
	mensagem = "sim"
else:
	mensagem = "nao"
	
print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = ((vo ** 2) * (sin*2*a) / g )
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
