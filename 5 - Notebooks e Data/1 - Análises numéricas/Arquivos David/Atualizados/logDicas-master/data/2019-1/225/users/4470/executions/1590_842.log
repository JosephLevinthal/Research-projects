== TEST (2019-03-29 23:13:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
print(2 + 1 + 4 + 1)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:13:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
print(2 + 1 + 4 + 1)
-- EXECUTION TIME:
0.136538
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
8
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:15:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
print(3 + 1 + 4 + 1)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:16:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
print(3 + 1 + 4 + 1)
-- EXECUTION TIME:
0.138796
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:18:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
print(3 % 1 // 4 % 1)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:18:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
print(3 % 1 // 4 % 1)
-- EXECUTION TIME:
0.159001
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:22:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
a = 3
b = 1
c = 4
d = 1
print(a + b + c + d)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 23:22:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
a = 3
b = 1
c = 4
d = 1
print(a + b + c + d)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 23:22:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
a = 3
b = 1
c = 4
d = 1
print(a + b + c + d)
-- EXECUTION TIME:
0.119514
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:24:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos"))
print(x)

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:25:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("numero de quatro digitos:"))
print(x)

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:27:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("3000//1000"))
print(x)

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:27:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("3000//1000"))
y = int(input("3000%1000"))
print(x)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:28:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input("3000//1000"))
y = 3000%1000
print(x)

-- OUTPUT:
9173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:28:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

y = 3000%1000
print(x)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:28:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 3000%1000
print(x)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:28:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 3000%1000
print(x)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:28:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 3000%1000
print(x)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:28:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 3141%1000
print(x)

-- OUTPUT:
141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:29:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 141//100
print(x)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:31:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000/1000
print(a)

-- OUTPUT:
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:31:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000/1000
print(a)
var1 = 3.0

b = 3141%1000
print(b)
-- OUTPUT:
3.0
141
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:32:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000/1000
print(a)
var_1 = 3.0

b = 3141%1000
print(b)
var_2 = 141

c = 141/100
print(c)
-- OUTPUT:
3.0
141
1.41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:32:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000/1000
print(a)
var_1 = 3.0

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1.14
-- OUTPUT:
3.0
141
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:33:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1
-- OUTPUT:
3
141
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:33:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1

d = 200//100
print(d)
-- OUTPUT:
3
141
1
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:34:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1

d = 200//100
print(d)
var_4 = 2

soma = 3 + 141 + 1 + 2
print(soma)
-- OUTPUT:
3
141
1
2
147
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:34:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1

d = 200//100
print(d)
var_4 = 2

soma = 3 + 141 + 1 + 2
print(soma)
-- OUTPUT:
3
141
1
2
147
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:34:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1

d = 200//100
print(d)
var_4 = 2

soma = 3 + 141 + 1 + 2
print(soma)
-- OUTPUT:
3
141
1
2
147
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:34:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1

d = 200//100
print(d)
var_4 = 2

soma = 3 + 141 + 1 + 2
print(soma)
-- EXECUTION TIME:
0.201072
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
141
1
2
147
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
141
1
2
147
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:35:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1

d = 200//100
print(d)
var_4 = 2

print(var_1 + var_2 + var_3 + var_4)
-- OUTPUT:
3
141
1
2
147
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:35:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
print(a)
var_1 = 3

b = 3141%1000
print(b)
var_2 = 141

c = 141//100
print(c)
var_3 = 1

d = 200//100
print(d)
var_4 = 2

print(var_1 + var_2 + var_3 + var_4)
-- EXECUTION TIME:
0.149132
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
141
1
2
147
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
141
1
2
147
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:35:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
var_1 = 3

b = 3141%1000
var_2 = 141

c = 141//100
var_3 = 1

d = 200//100
var_4 = 2

print(var_1 + var_2 + var_3 + var_4)
-- OUTPUT:
147
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:35:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
var_1 = 3

b = 3141%1000
var_2 = 141

c = 141//100
var_3 = 1

d = 200//100
var_4 = 2

print(var_1 + var_2 + var_3 + var_4)
-- EXECUTION TIME:
0.211802
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
147
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
147
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:36:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
var_1 = 3

b = 3141%1000
var_2 = 141

c = 141//100
var_3 = 1

d = 200//100
var_4 = 2

print(var_1 + var_2 + var_3 + var_4)
-- OUTPUT:
147
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:36:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
var_1 = 3

b = 3141%1000
var_2 = 141

c = 141//100
var_3 = 1

d = 200&100
print(d)
var_4 = 2

print(var_1 + var_2 + var_3 + var_4)
-- OUTPUT:
64
147
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:36:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
var_1 = 3

b = 3141%1000
var_2 = 141

c = 141//100
var_3 = 1

d = 200&100
var_4 = 64

print(var_1 + var_2 + var_3 + var_4)
-- OUTPUT:
209
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:36:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = 3000//1000
var_1 = 3

b = 3141%1000
var_2 = 141

c = 141//100
var_3 = 1

d = 200&100
var_4 = 64

print(var_1 + var_2 + var_3 + var_4)
-- EXECUTION TIME:
0.207494
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
209
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
209
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:41:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input(4001/1000)
a2 = input(4001%1000)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a2 = input(4001%1000)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:51:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = float(input())

a = n//1000
ra = n%1000

b = ra//100
rb = ra%100

c = rb//10
rc = rb%10

d = rc//1
rd = rc%1



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a2 = input(4001%1000)
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:52:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = float(input())
a = n//1000
ra = n%1000

b = ra//100
rb = ra%100

c = rb//10
rc = rb%10

d = rc//1
rd = rc%1

print(a + b + c + d)



-- OUTPUT:
20.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:56:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input())
a = n//1000
ra = n%1000

b = ra//100
rb = ra%100

c = rb//10
rc = rb%10

d = rc//1
rd = rc%1

print(a + b + c + d)



-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:56:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input())
a = n//1000
ra = n%1000

b = ra//100
rb = ra%100

c = rb//10
rc = rb%10

d = rc//1
rd = rc%1

print(a + b + c + d)



-- EXECUTION TIME:
0.162623
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
