== TEST (2019-03-21 20:01:09) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:01:30) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.243742
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:02:08) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
print(ordem)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
[-2, 0, 10]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:02:22) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
print(ordem)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.142456
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
[-2, 0, 10]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:02:40) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
print(ordem)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
[-2, 0, 10]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:02:50) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
print(ordem)
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- EXECUTION TIME:
0.152643
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
[-2, 0, 10]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:03:13) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
print(ordem)
-- OUTPUT:
[-2, 0, 10]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:03:28) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 , num2 , num3
ordem = sorted(numeros)
print(ordem)
-- EXECUTION TIME:
0.137772
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
[-2, 0, 10]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:11:10) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))
numeros = num1 num2 , num3
min(num1, num2, num3)
max(num1, num2, num3)
interm = num1 + num2 + num3 - min - max
print(min)
print(interm)
print(max)
-- ERROR:
File "XXXX", line 4
    numeros = num1 num2 , num3
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:11:22) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))

min(num1, num2, num3)
max(num1, num2, num3)
interm = num1 + num2 + num3 - min - max
print(min)
print(interm)
print(max)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    interm = num1 + num2 + num3 - min - max
TypeError: unsupported operand type(s) for -: 'int' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:12:10) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))

minimo = min(num1, num2, num3)
maximo = max(num1, num2, num3)
interm = num1 + num2 + num3 - minimo - maximo
print(min)
print(interm)
print(max)
-- OUTPUT:
<built-in function min>
0
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:14:04) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))

interm = num1 + num2 + num3 - min(num1, num2, num3) - max(num1, num2, num3)

print(min(num1, num2, num3))
print(interm)
print(max(num1, num2, num3))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 20:15:13) 
-- CODE:
num1 = int(input("digite numero 1: "))
num2 = int(input("digite numero 2: "))
num3 = int(input("digite numero 3: "))

interm = num1 + num2 + num3 - min(num1, num2, num3) - max(num1, num2, num3)

print(min(num1, num2, num3))
print(interm)
print(max(num1, num2, num3))
-- EXECUTION TIME:
0.110654
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
