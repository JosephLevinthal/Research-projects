== TEST (2019-04-01 15:03:53) 
-- CODE:
v= input("valor integral: ")
q= input("quantidade de ingressos: ")

pP= v - (v * (desconto / 100))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    pP= v - (v * (desconto / 100))
NameError: name 'desconto' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:04:29) 
-- CODE:
v= input("valor integral: ")
q= input("quantidade de ingressos: ")
d= v / 100
pP= v - (v * (d))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    d= v / 100
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:05:02) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= v - (v * (d))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:05:51) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= v - ((v) * (d))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:06:01) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= v - ((v) * (d))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 15:06:08) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= v - ((v) * (d))

print(round(pP , 2))

-- EXECUTION TIME:
0.191366
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1616/2918/main.py", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:06:28) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= (v) - ((v) * (d))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:07:28) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= (v) - (v * (d) / 100)

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:08:17) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= (v) - ((v) * (d) / 100)

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 15:08:24) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
pP= (v) - ((v) * (d) / 100)

print(round(pP , 2))

-- EXECUTION TIME:
0.190238
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1616/2918/main.py", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:10:24) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
desconto= v / 100
pP= v - (v * (desconto))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:12:00) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= desconto
desconto= v / 100
pP= v - (v * (d * desconto))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:12:43) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
desc= int(input(desconto))
desconto= v / 100
pP= v - (v * (d * desconto))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:13:07) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
desconto= int(input("desconto: "))
desconto= v / 100
pP= v - (v * (d * desconto))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:15:52) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
desc= v * (v / 100)

pP= v - (v * (desc))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:16:17) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
desc= v / 100

pP= v - (v * (desc))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:18:07) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
desc= 20 / 100 
pP= v - (v * (desc / 100))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:18:24) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
desc= 20 * 100 
pP= v - (v * (desc / 100))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:18:36) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
desc= 20 / 100 
pP= v - (v * (desc / 100))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:19:00) 
-- CODE:
v= int(input("valor integral: "))
q= input("quantidade de ingressos: ")
d= v / 100
desc= 20 / 100 
pP= v - v * (desc / 100)

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:27:15) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desconto= int(input("desconto: "))
pP= v - (v * (desconto / 100)

print(round(pP, 2))

-- ERROR:
File "XXXX", line 6
    print(round(pP, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:27:40) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desconto= int(input("desconto: "))
d= desconto / 100
pP= v - (v * (d)

print(round(pP, 2))

-- ERROR:
File "XXXX", line 7
    print(round(pP, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:27:53) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desconto= input("desconto: ")
d= desconto / 100
pP= v - (v * (d)

print(round(pP, 2))

-- ERROR:
File "XXXX", line 7
    print(round(pP, 2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:29:10) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= v * d / 100

pP= v - (v * (d))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:29:51) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= int(input("desconto: ")
d= v * d / 100

pP= v - (v * (d))

print(round(pP, 2))

-- ERROR:
File "XXXX", line 4
    d= v * d / 100
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:31:12) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= v * 100

pP= v - (v * (d / 100))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:31:23) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= v / 100

pP= v - (v * (d / 100))

print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:32:00) 
-- CODE:
v= float(input("valor integral: "))
q= float(input("quantidade de ingressos: "))
d= v / 100

pP= v - (v * (d / 100))

print(round(pP, 2))

-- OUTPUT:
28.42
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:35:01) 
-- CODE:
v= float(input("valor integral: "))
q= float(input("quantidade de ingressos: "))
d= v / 100

pP= v - (v * d)


print(round(pP, 2))

-- OUTPUT:
20.38
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:35:17) 
-- CODE:
v= float(input("valor integral: "))
q= float(input("quantidade de ingressos: "))
d= v / 100

pP= v - (v * (d))


print(round(pP, 2))

-- OUTPUT:
20.38
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:35:38) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= v / 100

pP= v - (v * (d))


print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:40:23) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= 20 / 100 

pP= v - (v * (d))


print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 15:40:30) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= 20 / 100 

pP= v - (v * (d))


print(round(pP, 2))

-- EXECUTION TIME:
0.25667
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1616/2918/main.py", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:41:36) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
d= 20  

pP= v - (v * (d / 100))


print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:43:19) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))

pP= v - (v * (20 / 100))


print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:44:48) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
pP= v - (v * ( desc))


print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:45:00) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 * 100
pP= v - (v * (desc))


print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:45:12) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 // 100
pP= v - (v * (desc))


print(round(pP, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:45:56) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
pP= v - (v * (desc))
total= pP * desc

print(round(total, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:46:36) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
pP= v - (v * (desc))


print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:47:28) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
pP= v - (v )* (desc))


print(round(pP , 2))

-- ERROR:
File "XXXX", line 4
    pP= v - (v )* (desc))
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:47:35) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
pP= v - (v) * (desc))


print(round(pP , 2))

-- ERROR:
File "XXXX", line 4
    pP= v - (v) * (desc))
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:47:46) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
pP= v - (v) * (desc)


print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:48:07) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
pP= (v - (v)) * (desc)


print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:49:10) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100

pP= v - (v) * (desc)


print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 15:49:11) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100

pP= v - (v) * (desc)


print(round(pP , 2))

-- EXECUTION TIME:
0.144589
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1616/2918/main.py", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:49:11) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100

pP= v - (v) * (desc)


print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:52:43) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100

pP= v - (v * (desc))


print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:53:14) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100
d= desc

pP= v - (v * (d))


print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 15:54:53) 
-- CODE:
v= int(input("valor integral: "))
q= int(input("quantidade de ingressos: "))
desc= 20 / 100

pP= (v - (v * (desc)))

print(round(pP , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    v= int(input())
ValueError: invalid literal for int() with base 10: '28.50'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
