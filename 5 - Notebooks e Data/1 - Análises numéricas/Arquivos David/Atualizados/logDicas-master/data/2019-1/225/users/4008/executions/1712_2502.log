== SUBMITION (2019-05-15 13:35:02) 
-- CODE:
from math import*
n = int(input())
c = 0
d = 0
e = 0
aux = -1
while(c<n):
	if(c==0):
		e = e+3
	else:
		e = e + (aux * (4/(d*(d+1)*(d+2))))
		
	
	
		
	
	if(aux==1):
		aux=-1
	else:
		aux=1
	c = c+1
	d = d+2

print(round(e, 8))
-- EXECUTION TIME:
0.207608
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.14140672
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14151899
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14207182
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 13:35:11) 
-- CODE:
from math import*
n = int(input())
c = 0
d = 0
e = 0
aux = -1
while(c<n):
	if(c==0):
		e = e+3
	else:
		e = e + (aux * (4/(d*(d+1)*(d+2))))
		
	
	
		
	
	if(aux==1):
		aux=-1
	else:
		aux=1
	c = c+1
	d = d+2

print(round(e, 8))
-- EXECUTION TIME:
0.166261
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.14140672
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14151899
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14207182
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 13:38:09) 
-- CODE:
from math import*
n = int(input())
c = 0
d = 0
e = 0
aux = -1
while(c<n):
	if(c==0):
		e = e+3
	else:
		e = e + (aux * (4/(d*(d+1)*(d+2))))
		
	
	
		
	
	if(aux==1):
		aux=-1
	else:
		aux=1
	c = c+1
	d = d+2

print(round(e, 8))
-- OUTPUT:
3.14140672
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 13:38:11) 
-- CODE:
from math import*
n = int(input())
c = 0
d = 0
e = 0
aux = -1
while(c<n):
	if(c==0):
		e = e+3
	else:
		e = e + (aux * (4/(d*(d+1)*(d+2))))
		
	
	
		
	
	if(aux==1):
		aux=-1
	else:
		aux=1
	c = c+1
	d = d+2

print(round(e, 8))
-- EXECUTION TIME:
0.147654
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.14140672
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14151899
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14207182
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 13:38:14) 
-- CODE:
from math import*
n = int(input())
c = 0
d = 0
e = 0
aux = -1
while(c<n):
	if(c==0):
		e = e+3
	else:
		e = e + (aux * (4/(d*(d+1)*(d+2))))
		
	
	
		
	
	if(aux==1):
		aux=-1
	else:
		aux=1
	c = c+1
	d = d+2

print(round(e, 8))
-- EXECUTION TIME:
0.260617
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.14140672
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14151899
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14207182
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 13:38:28) 
-- CODE:
from math import*
n = int(input())
c = 0
d = 0
e = 0
aux = -1
while(c<n):
	if(c==0):
		e = e+3
	else:
		e = e + (aux * (4/(d*(d+1)*(d+2))))
	if(aux==1):
		aux=-1
	else:
		aux=1
	c = c+1
	d = d+2

print(round(e, 8))
-- EXECUTION TIME:
0.204336
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.14140672
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14151899
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14207182
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 13:40:15) 
-- CODE:
from math import*
n = int(input())
c = 0
d = 1
e = 0
aux = 1
while(c<n):
	e = e + (aux * (1 / (d *(3**c))))
	if(aux ==1):
		aux = -1
	else:
		aux = 1
	c = c+1
	d = d+2
e = e *sqrt(12)
print(round(e, 8))
-- EXECUTION TIME:
0.156717
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.1415933
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14159266
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14156872
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
