== TEST (2019-04-24 15:28:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:, a, ",", b , ",", c)

if(a>= b+c) or (b>= a+c) or (c=> a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 7
    print("Entradas:, a, ",", b , ",", c)
                                        ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:28:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:, a, ",", b , ",", c)

if(a>= b+c) or (b>= a+c) or (c=> a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.152519
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas:, a, ",", b , ",", c)
                                        ^
SyntaxError: EOL while scanning string literal

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:, a, ",", b , ",", c)

if(a>= b+c) or (b>= a+c) or (c=> a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 7
    print("Entradas:, a, ",", b , ",", c)
                                        ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:28:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas: a, ",", b , ",", c)

if(a>= b+c) or (b>= a+c) or (c=> a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.21038
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 7
    print("Entradas: a, ",", b , ",", c)
                                       ^
SyntaxError: EOL while scanning string literal

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:28:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas: a, ",", b , ",", c)

if(a>= b+c) or (b>= a+c) or (c=> a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 7
    print("Entradas: a, ",", b , ",", c)
                                       ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:30:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c) or (b>= a+c) or (c=> a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.128568
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    if(a>= b+c) or (b>= a+c) or (c=> a+b):
                                  ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:30:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c) or (b>= a+c) or (c=> a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 9
    if(a>= b+c) or (b>= a+c) or (c=> a+b):
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:31:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>=b+c) or (b>=a+c) or (c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.155885
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    if(a>=b+c) or (b>=a+c) or (c=>a+b):
                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>=b+c) or (b>=a+c) or (c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 9
    if(a>=b+c) or (b>=a+c) or (c=>a+b):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:31:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c) or (b>=a+c) or (c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.208341
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    if(a>= b+c) or (b>=a+c) or (c=>a+b):
                                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:31:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c) or (b>=a+c) or (c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 9
    if(a>= b+c) or (b>=a+c) or (c=>a+b):
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:32:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c) or (b>=a+c)or(c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.127782
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    if(a>= b+c) or (b>=a+c)or(c=>a+b):
                               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c) or (b>=a+c)or(c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 9
    if(a>= b+c) or (b>=a+c)or(c=>a+b):
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:32:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.181007
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 9
    if(a>= b+c)or (b>=a+c)or(c=>a+b):
                              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:32:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c=>a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 9
    if(a>= b+c)or (b>=a+c)or(c=>a+b):
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:33:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:34:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.135072
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:34:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:34:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:34:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:35:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:35:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.137698
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:35:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.119576
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:35:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:35:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.129515
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:36:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.271883
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.194279
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.302875
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.386001
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.499063
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.590439
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.641224
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.593283
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.495638
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.460225
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.410222
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.517763
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.574052
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.670687
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.665185
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.682095
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.26873
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.185846
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.217491
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.66155
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.757291
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.825945
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.526662
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.502907
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:36:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
		print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
		print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
		print("Tipo de triangulo: isoceles")
else:
		print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.328746
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:38:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:38:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: Invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: Equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.141616
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:38:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.215116
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.167106
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.256221
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.253918
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.242707
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.204871
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.23534
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.222647
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:39:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c)  or  (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.247838
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:41:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.178496
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.162838
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.198988
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.19621
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.35001
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.370854
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.283461
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.168084
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.228218
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:41:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.125521
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:42:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.221149
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.318678
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:42:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.113413
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.213719
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.169663
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.139307
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.187378
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.155432
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 15:42:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.14209
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.191031
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.273472
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.180988
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.191967
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.489783
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:42:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.410379
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1671/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 15:45:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",",c)

if(a>= b+c)or (b>=a+c)or(c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b) and (a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (a==c) or (b==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.154112
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
