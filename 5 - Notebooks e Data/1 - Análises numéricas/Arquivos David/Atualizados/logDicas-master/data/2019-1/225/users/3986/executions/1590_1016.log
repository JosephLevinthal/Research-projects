== TEST (2019-03-23 16:45:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=(s * (s - a) * (s - b) * (s - c)) ** 1/2 
print(A)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:45:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=(s * (s - a) * (s - b) * (s - c)) ** 1/2 
print(A)
-- EXECUTION TIME:
0.137447
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1016/main.py", line 4, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:46:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=(s * (s - a) * (s - b) * (s - c)) ** 1/2 
print(round(a,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:46:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=(s * (s - a) * (s - b) * (s - c)) ** 1/2 
print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:46:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=(s * (s - a) * (s - b) * (s - c)) ** 1/2 
print(round(A,5))
-- EXECUTION TIME:
0.135586
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1016/main.py", line 4, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:47:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from match import*
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=sqrt(s * (s - a) * (s - b) * (s - c)) 
print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    from match import*
ModuleNotFoundError: No module named 'match'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:47:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=sqrt(s * (s - a) * (s - b) * (s - c)) 
print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:47:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=sqrt(s * (s - a) * (s - b) * (s - c)) 
print(round(A,5))
-- EXECUTION TIME:
0.200375
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1016/main.py", line 5, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-23 16:48:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a=int(input("valor 1: "))
b=int(input("valor 2: "))
c=int(input("valor 3: "))
s=(a + b + c) / 2
A=sqrt(s * (s - a) * (s - b) * (s - c)) 
print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-23 16:48:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*
a=float(input("valor 1: "))
b=float(input("valor 2: "))
c=float(input("valor 3: "))
s=(a + b + c) / 2
A=sqrt(s * (s - a) * (s - b) * (s - c)) 
print(round(A,5))
-- EXECUTION TIME:
0.227904
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
