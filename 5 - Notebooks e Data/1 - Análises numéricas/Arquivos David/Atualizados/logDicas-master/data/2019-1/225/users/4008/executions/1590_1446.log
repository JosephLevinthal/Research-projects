== TEST (2019-03-24 12:00:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = input("litros de polpa comprados")
var = input(round("litros"/3, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = input(round("litros"/3, 3))
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:00:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = input("litros de polpa comprados")
var = input(round("litros"/3, 3))
print(var)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = input(round("litros"/3, 3))
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:01:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = input("litros de polpa comprados")
var = round(input/3, 3)
print(var)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = round(input/3, 3)
TypeError: unsupported operand type(s) for /: 'builtin_function_or_method' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 12:01:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = input("litros de polpa comprados")
var = round(input/3, 3)
print(var)
-- EXECUTION TIME:
0.193065
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 5, in <module>
    var = round(input/3, 3)
TypeError: unsupported operand type(s) for /: 'builtin_function_or_method' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:01:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = input("litros de polpa comprados")
var = round(input/3, 3)
print(var)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var = round(input/3, 3)
TypeError: unsupported operand type(s) for /: 'builtin_function_or_method' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:06:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = input(10)
print(input(Michael, 10*(1/3))
print(input, 3)
-- ERROR:
File "XXXX", line 6
    print(input, 3)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:06:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = input(10)
print(input(Michael, 10*(1/3))
print("michael", 3)
-- ERROR:
File "XXXX", line 6
    print("michael", 3)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:08:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = 10
var = (10*(1/3))
print(var, 3)
-- OUTPUT:
3.333333333333333 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 12:08:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = 10
var = (10*(1/3))
print(var, 3)
-- EXECUTION TIME:
0.149447
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333333333333333 3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333333333333333 3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333333333333333 3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:08:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = 10
michael = (10*(1/3))
print(var, 3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(var, 3)
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:08:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = 10
michael = (10*(1/3))
print(michael, 3)
-- OUTPUT:
3.333333333333333 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 12:08:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = 10
michael = (10*(1/3))
print(michael, 3)
-- EXECUTION TIME:
0.133484
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
3.333333333333333 3
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
3.333333333333333 3
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
3.333333333333333 3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:10:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
michael = (x*(1/3))
litros = x
print(michael, 3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    michael = (x*(1/3))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:11:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(litros = x)
michael = (x*(1/3))
print(michael, 3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(litros = x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:11:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = litros
print(litros = x)
michael = (x*(1/3))
print(michael, 3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x = litros
NameError: name 'litros' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:15:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litro = float(input("quantidade de litro comprados"))
michael = ((1/3)*litro)
print(michael)

-- OUTPUT:
2.333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 12:15:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litro = float(input("quantidade de litro comprados"))
michael = ((1/3)*litro)
print(michael)

-- EXECUTION TIME:
0.199847
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333333333333333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.666666666666666
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:15:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litro = float(input("quantidade de litros comprados"))
michael = ((1/3)*litro)
print(michael)

-- OUTPUT:
2.333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:16:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("quantidade de litros comprados"))
print(litros)
michael = ((1/3)*litro)
print(michael)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    michael = ((1/3)*litro)
NameError: name 'litro' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 12:16:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("quantidade de litros comprados"))
print(litros)
michael = ((1/3)*litro)
print(michael)

-- EXECUTION TIME:
0.194945
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1446/main.py", line 6, in <module>
    michael = ((1/3)*litro)
NameError: name 'litro' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:17:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("quantidade de litros comprados"))
print(litros)
michael = ((1/3)*litro)
print(round(michael, 3)

-- ERROR:
File "XXXX", line 8
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 12:17:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("quantidade de litros comprados"))
print(litros)
michael = ((1/3)*litro)
print(round(michael, 3)

-- EXECUTION TIME:
0.150882
-- ERROR:
  File "/home/codebench/codes/1590/1446/main.py", line 8
    
                           ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:17:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("quantidade de litros comprados"))
print(litros)
michael = ((1/3)*litro)
print(round(michael, 3)

-- ERROR:
File "XXXX", line 8
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:19:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("quantidade de litros comprados"))
michael = input((1/3)*litro)
print(round(michael, 3)

-- ERROR:
File "XXXX", line 7
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 12:21:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#quantidade de litros adquiridos
litros = float(input("quantidade de litros comprados"))
#parte de michael
michael = input((1/3)*litro)
#saida 
print(round(michael, 3)

-- ERROR:
File "XXXX", line 10
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:39:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#quantidade de litros adquiridos
litros = float(input("qual a quantidade de litros?"))
#parte de michael
michael = float(litros*(1/3)
#saida 
print(float(michael))

-- ERROR:
File "XXXX", line 9
    print(float(michael))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:40:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#quantidade de litros adquiridos
litros = float(input("qual a quantidade de litros?"))
#parte de michael
michael = float(litros*(1/3)
#saida 
print(michael)

-- ERROR:
File "XXXX", line 9
    print(michael)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:40:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#quantidade de litros adquiridos
litros = float(input("qual a quantidade de litros?"))
#parte de michael
michael = float(litros*(1/3)
#saida 
print("michael")

-- ERROR:
File "XXXX", line 9
    print("michael")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:40:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#quantidade de litros adquiridos
litros = float(input("qual a quantidade de litros?"))
#parte de michael
michael = float(litros*(1/3)
#saida 
print("michael")

-- ERROR:
File "XXXX", line 9
    print("michael")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:41:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#quantidade de litros adquiridos
litros = float(input("qual a quantidade de litros?"))
#parte de michael
michael = float(litros*(1/3)
#saida 


-- ERROR:
File "XXXX", line 10
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:41:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3)
print(michael)

-- ERROR:
File "XXXX", line 6
    print(michael)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:41:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3)
print("michael")

-- ERROR:
File "XXXX", line 6
    print("michael")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 16:42:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
print(litros*(1/3))

-- EXECUTION TIME:
0.148884
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333333333333333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.666666666666666
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:42:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
print(litros*(1/3))

-- OUTPUT:
2.333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 16:42:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
print(litros*(1/3))

-- EXECUTION TIME:
0.154211
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333333333333333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.666666666666666
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:42:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
print(litros*(1/3))

-- OUTPUT:
2.333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:42:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
print(litros*(1/3))

-- OUTPUT:
2.333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:43:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
print(round((litros*(1/3), 3)

-- ERROR:
File "XXXX", line 6
    
                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:43:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
print(round((litros*(1/3), 3)

-- ERROR:
File "XXXX", line 6
    
                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:44:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3))
print(round(michael, 3)

-- ERROR:
File "XXXX", line 7
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:45:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3))
print(round(michael, 3)
-- ERROR:
File "XXXX", line 7
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:45:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3))
print(round(michael, 3)
-- ERROR:
File "XXXX", line 7
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:46:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3))
print(float(round(michael, 3)))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 16:47:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3))
print(float(round(michael, 3)))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 16:47:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
litros = float(input("qual a quantidade de litros?"))
michael = float(litros*(1/3))
print(float(round(michael, 3)))
-- EXECUTION TIME:
0.191905
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:25:41) 
-- CODE:
litro = float(input("quantos litros foram comprados?"))
michael = (1/3)*litros
print(round(michael, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    michael = (1/3)*litros
NameError: name 'litros' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 22:25:51) 
-- CODE:
litro = float(input("quantos litros foram comprados?"))
michael = (1/3)*litro
print(round(michael, 3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 22:25:57) 
-- CODE:
litro = float(input("quantos litros foram comprados?"))
michael = (1/3)*litro
print(round(michael, 3))
-- EXECUTION TIME:
0.135996
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
