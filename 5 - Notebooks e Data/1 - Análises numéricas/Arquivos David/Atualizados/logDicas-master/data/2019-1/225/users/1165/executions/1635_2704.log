== TEST (2019-04-12 12:00:34) 
-- CODE:
nota = float(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "aluno recebe bonificacao"
else:
	mensagem = "aluno nao rece bonificacao"

print()
-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:01:24) 
-- CODE:
nota = float(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "aluno recebe bonificacao"
else:
	mensagem = "aluno nao rece bonificacao"

print(mensagem)
-- OUTPUT:
aluno recebe bonificacao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 12:01:56) 
-- CODE:
nota = float(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "aluno recebe bonificacao"
else:
	mensagem = "aluno nao rece bonificacao"

print(mensagem)
-- EXECUTION TIME:
0.142327
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
aluno recebe bonificacao
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
aluno recebe bonificacao
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
aluno recebe bonificacao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:02:36) 
-- CODE:
nota = float(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "aluno recebe bonificacao"
else:
	mensagem = "aluno nao rece bonificacao"

print(mensagem.lower())
-- OUTPUT:
aluno recebe bonificacao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:05:51) 
-- CODE:
nota = float(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 12:06:22) 
-- CODE:
nota = float(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- EXECUTION TIME:
0.194427
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
S
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:07:20) 
-- CODE:
nota = float(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "S"
else:
	mensagem = "N"

print(round(mensagem, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem, 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:07:59) 
-- CODE:
nota = int(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "S"
else:
	mensagem = "N"

print(round(mensagem, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:08:30) 
-- CODE:
nota = int(input("Notas do aluno: "))

if (nota > 0):
	mensagem = "S"
else:
	mensagem = "N"

print(round(mensagem, 1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:09:34) 
-- CODE:
nota = float(input("Nota do aluno: "))

if (nota > 0):
	mensagem = "S"
else:
	mensagem = "N"

print(round(mensagem, 1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem, 1))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 12:53:05) 
-- CODE:
nota = float(input("Nota do aluno: "))

if (nota > 0):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:01:23) 
-- CODE:
nota = float(input("Nota do aluno:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (bonificacao.upper() == "S"):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:01:59) 
-- CODE:
nota = float(input("Nota do aluno:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (bonificacao.upper() == "S"):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- EXECUTION TIME:
0.135398
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
S
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
S
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:02:55) 
-- CODE:
nota = float(input("Nota do aluno:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (bonificacao.upper() == "S"):
	mensagem = "S"

print(mensagem)
-- OUTPUT:
S
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:04:19) 
-- CODE:
nota = float(input("Nota do aluno:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:04:53) 
-- CODE:
nota = float(input("Nota do aluno:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- EXECUTION TIME:
0.226646
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
N
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
N
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:06:06) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "S"
else:
	mensagem = "N"

print(mensagem)
-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:07:17) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
else:
	mensagem = "n"

print(mensagem.upper())
-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:07:42) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
else:
	mensagem = "n"

print(mensagem.upper())
-- EXECUTION TIME:
0.15893
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
N
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
N
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
N
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:46:08) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
else:
	mensagem = "n"

print(mensagem.upper())
-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:49:22) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
else:
	mensagem = "n"

print(mensagem.upper())
-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 16:37:53) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao.upper() = input("Receber bonificacao? (S/N): ")

if (bonificacao == S):
	msg = nota * 0.1
	m = nota + msg
else
	m = nota

print(m)
-- ERROR:
File "XXXX", line 7
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 16:37:53) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao.upper() = input("Receber bonificacao? (S/N): ")

if (bonificacao == S):
	msg = nota * 0.1
	m = nota + msg
else
	m = nota

print(m)
-- ERROR:
File "XXXX", line 7
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 16:37:54) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao.upper() = input("Receber bonificacao? (S/N): ")

if (bonificacao == S):
	msg = nota * 0.1
	m = nota + msg
else
	m = nota

print(m)
-- EXECUTION TIME:
0.16611
-- ERROR:
  File "/home/codebench/codes/1635/2704/main.py", line 7
    else
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:25:14) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg == nota * 0.1
	m == nota + msg
else:
	mensagem = "n"
	m == nota

print(m.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    m == nota
NameError: name 'm' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:25:34) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg == nota * 0.1
	m == nota + msg
else:
	mensagem = "n"
	m = nota

print(m.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(m.upper())
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:26:42) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg = nota * 0.1
	m = nota + msg
else:
	mensagem = "n"
	m = nota

print(m.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(m.upper())
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:26:59) 
-- CODE:
nota = int(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg = nota * 0.1
	m = nota + msg
else:
	mensagem = "n"
	m = nota

print(m.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:31:26) 
-- CODE:
nota = int(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg = nota * 0.1
	m = nota + mesagem
else:
	mensagem = "n"
	m = nota

print(m.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:31:55) 
-- CODE:
nota = int(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg = nota * 0.1
	m = nota + mesagem
else:
	mensagem = "n"
	m = nota

print(mensagem.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:32:07) 
-- CODE:
nota = int(input("Nota do aluno de 0 a 10:"))
bonificacao = input("Receber bonificacao? (S/N): ")

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg = nota * 0.1
	m = nota + mesagem
else:
	mensagem = "n"
	m = nota

print(mensagem.upper())
-- EXECUTION TIME:
0.205354
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2704/main.py", line 1, in <module>
    nota = int(input())
ValueError: invalid literal for int() with base 10: '5.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:39:40) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = float(input("Receber bonificacao? (S/N): "))

if (nota > 0 == bonificacao):
	mensagem = "s"
	msg = nota * 0.1
	m = nota + mesagem
else:
	mensagem = "n"
	m = nota

print(mensagem.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    bonificacao = float(input())
ValueError: could not convert string to float: 'S'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:41:39) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = int(input("Receber bonificacao? (S/N): "))

if (nota > 0 == bonificacao):
	mensagem = "S"
	msg = nota * 0.1
	m = nota + mesagem
else:
	mensagem = "N"
	m = nota

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    bonificacao = int(input())
ValueError: invalid literal for int() with base 10: 'S'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:42:54) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = int(input("Insira a abonificacao (S/N): "))

if (nota > 0 == bonificacao):
	mensagem = "S"
	msg = nota * 0.1
	m = nota + mesagem
else:
	mensagem = "N"
	m = nota

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    bonificacao = int(input())
ValueError: invalid literal for int() with base 10: 'S'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:43:16) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
bonificacao = float(input("Insira a abonificacao (S/N): "))

if (nota > 0 == bonificacao):
	mensagem = "S"
	msg = nota * 0.1
	m = nota + mesagem
else:
	mensagem = "N"
	m = nota

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    bonificacao = float(input())
ValueError: could not convert string to float: 'S'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:46:56) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
opcao = input("Insira a abonificacao (S/N): ")

if (opcao.upper() == "S":
	n = nota + (nota * 10/100)
	print (n)
else:
	print (nota)
-- ERROR:
File "XXXX", line 4
    if (opcao.upper() == "S":
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:47:05) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
opcao = input("Insira a abonificacao (S/N): ")

if (opcao.upper()) == "S":
	n = nota + (nota * 10/100)
	print (n)
else:
	print (nota)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 12:47:15) 
-- CODE:
nota = float(input("Nota do aluno de 0 a 10:"))
opcao = input("Insira a abonificacao (S/N): ")

if (opcao.upper()) == "S":
	n = nota + (nota * 10/100)
	print (n)
else:
	print (nota)
-- EXECUTION TIME:
0.164342
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
