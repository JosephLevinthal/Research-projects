== TEST (2019-03-30 00:03:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = sqrt.math(S*(S-A)*(S-B)*(S-C))
print(round(S,5), round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    A = sqrt.math(S*(S-A)*(S-B)*(S-C))
NameError: name 'sqrt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 00:03:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = sqrt(S*(S-A)*(S-B)*(S-C))
print(round(S,5), round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    A = sqrt(S*(S-A)*(S-B)*(S-C))
NameError: name 'sqrt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 00:04:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt(S*(S-A)*(S-B)*(S-C))
print(round(S,5), round(A,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 00:05:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S*(S-A)*(S-B)*(S-C))
print(round(S,5), round(A,5))
-- ERROR:
File "XXXX", line 10
    print(round(S,5), round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 00:05:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S*(S-A)*(S-B)*(S-C))
print(round(S,5), round(A,5))
-- ERROR:
File "XXXX", line 10
    print(round(S,5), round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 00:05:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S*(S-A)*(S-B)*(S-C))
print(round(S,5),round(A,5))
-- ERROR:
File "XXXX", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 00:06:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S*(S-A)*(S-B)*(S-C))
print(round(S,5),round(A,5))
-- ERROR:
File "XXXX", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 00:09:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S*(S-A)*(S-B)*(S-C))
print(round(S,5),round(A,5))
-- ERROR:
File "XXXX", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:18:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S,5),round(A,5))
-- ERROR:
File "XXXX", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:18:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S, 5),round(A, 5))
-- ERROR:
File "XXXX", line 10
    print(round(S, 5),round(A, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:19:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print (round(S, 5),round(A, 5))
-- ERROR:
File "XXXX", line 10
    print (round(S, 5),round(A, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:19:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S,5), round(A,5))
print (round(S, 5),round(A, 5))
-- ERROR:
File "XXXX", line 10
    print(round(S,5), round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:20:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S,3),round(A,3))
-- ERROR:
File "XXXX", line 10
    print(round(S,3),round(A,3))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:21:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(S,A)
-- ERROR:
File "XXXX", line 10
    print(S,A)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:21:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(S)
-- ERROR:
File "XXXX", line 10
    print(S)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:26:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(A,B,C,S,A)
				  
-- ERROR:
File "XXXX", line 10
    print(A,B,C,S,A)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:27:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S,5),round(A,5))
				  
-- ERROR:
File "XXXX", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:27:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S,5),round(A,5))
				  
-- ERROR:
File "XXXX", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 11:27:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S,5),round(A,5))
				  
-- EXECUTION TIME:
0.151655
-- ERROR:
  File "/home/codebench/codes/1590/1016/main.py", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:28:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
X = float(input("Digite a:"))
Y = float(input("Digite b:"))
Z = float(input("Digite c:"))
S = (A + B + C)/2
A = math.sqrt((S * (S-A) * (S-B) * (S-C))
print(round(S,5),round(A,5))
				  
-- ERROR:
File "XXXX", line 10
    print(round(S,5),round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:29:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
X = float(input("Digite a:"))
Y = float(input("Digite b:"))
Z = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
A = math.sqrt(D)
print(round(S,5),round(A,5))
				  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    S = (A + B + C)/2
NameError: name 'A' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:31:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
SEMI = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
AREA = math.sqrt(D)
print(round(SEMI,5),round(AREA,5))
				  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    D = (S* (S-A)*(S-B)(S-C))
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:31:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
AREA = math.sqrt(D)
print(round(S,5),round(AREA,5))
				  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    D = (S* (S-A)*(S-B)(S-C))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:34:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
AR = math.sqrt(D)
print(round(S,5),round(AR,5))
				  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    D = (S* (S-A)*(S-B)(S-C))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:39:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
AR = math.sqrt(D)
print round(S,5),round(AR,5)
				  
-- ERROR:
File "XXXX", line 11
    print round(S,5),round(AR,5)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:44:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
				  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    D = (S* (S-A)*(S-B)(S-C))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:44:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
AR = math.sqrt(D)
print round(S,5),round(AR,5)
				  
-- ERROR:
File "XXXX", line 11
    print round(S,5),round(AR,5)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:48:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
				  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    D = (S* (S-A)*(S-B)(S-C))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:51:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:51:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 11:51:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S* (S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- EXECUTION TIME:
0.203135
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
21.85 69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
60.0 600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
65.5 709.16654
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:57:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = (input("Digite a:"))
B = (input("Digite b:"))
C = (input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    S = (A + B + C)/2
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:57:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = (input("Digite a:"))
B = (input("Digite b:"))
C = (input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    S = (A + B + C)/2
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:57:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = (input("Digite a:"))
B = (input("Digite b:"))
C = (input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    S = (A + B + C)/2
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:57:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = (input("Digite a:"))
B = (input("Digite b:"))
C = (input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    S = (A + B + C)/2
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:57:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = (input("Digite a:"))
B = (input("Digite b:"))
C = (input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    S = (A + B + C)/2
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:57:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = flat(input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    C = flat(input())
NameError: name 'flat' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:57:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:58:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = (A + B + C)/2
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:58:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:59:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:59:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 11:59:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 11:59:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- EXECUTION TIME:
0.128877
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
21.85 69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
60.0 600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
65.5 709.16654
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:51:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S, 5),round(AR, 5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 12:52:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S, 5),round(AR, 5))
-- EXECUTION TIME:
0.12752
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
21.85 69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
60.0 600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
65.5 709.16654
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:58:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S, 5),round(AR, 5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:58:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (S,AR)
-- OUTPUT:
21.85 69.41967475975385
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:59:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (S,AR)
-- OUTPUT:
21.85 69.41967475975385
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 12:59:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (S,AR)
-- EXECUTION TIME:
0.175768
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
21.85 69.41967475975385
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
60.0 600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
65.5 709.1665442616423
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 12:59:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
print (round(S,5),round(AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:02:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
output1 = round (S,5)
output2 = round (AR,5)
print (ouput1,outpu)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print (ouput1,outpu)
NameError: name 'ouput1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:02:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
output1 = round (S,5)
output2 = round (AR,5)
print (ouput1,output2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print (ouput1,output2)
NameError: name 'ouput1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:02:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D)
output1 = round (S,5)
output2 = round (AR,5)
print (output1,output2)
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:03:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*(S-A)*(S-B)*(S-C))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:06:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
AR = math.sqrt((S*(S-A)*(S-B)*(S-C))) 
print (round (S,5),round (AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:07:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*((S-A)*(S-B)*(S-C))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- ERROR:
File "XXXX", line 10
    AR = math.sqrt(D) 
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:07:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*((S-A)*(S-B)*(S-C))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- ERROR:
File "XXXX", line 10
    AR = math.sqrt(D) 
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:08:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*((S-A)*(S-B)*(S-C))
AR = math.sqrt (D) 
print (round (S,5),round (AR,5))
-- ERROR:
File "XXXX", line 10
    AR = math.sqrt (D) 
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:09:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*((S-A)*(S-B)*(S-C))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- ERROR:
File "XXXX", line 10
    AR = math.sqrt(D) 
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 13:10:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 21:39:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:12:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:12:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- OUTPUT:
21.85 69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:12:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = math.sqrt(D) 
print (round (S,5),round (AR,5))
-- EXECUTION TIME:
0.129989
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
21.85 69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
60.0 600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
65.5 709.16654
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:12:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = math.sqrt(D) 
print (round (AR,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:13:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
import math
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = math.sqrt(D) 
print (round (AR,5))
-- EXECUTION TIME:
0.209547
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:22:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
from math import*
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
D = (S*((S-A)*(S-B)*(S-C)))
AR = sqrt(D)
print (round (AR,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:22:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
from math import *
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
AR = sqrt((S*((S-A)*(S-B)*(S-C))))
print (round (AR,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 10:23:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
from math import *
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
AR = sqrt((S*((S-A)*(S-B)*(S-C))))
print (round (AR,5))
-- EXECUTION TIME:
0.214595
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:26:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
from math import *
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
AR = sqrt(S*((S-A)*(S-B)*(S-C)))
print (round (AR,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 10:26:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo
from math import *
A = float(input("Digite a:"))
B = float(input("Digite b:"))
C = float(input("Digite c:"))
S = ((A + B + C)*1/2)
AR = sqrt(S*((S-A)*(S-B)*(S-C)))
print (round (AR,5))
-- EXECUTION TIME:
0.183399
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
