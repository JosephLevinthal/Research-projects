== TEST (2019-04-07 22:45:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = 2x + y = 3
if()

-- ERROR:
File "XXXX", line 7
    reta = 2x + y = 3
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:46:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = int(2x + y = 3)
if()

-- ERROR:
File "XXXX", line 7
    reta = int(2x + y = 3)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:46:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = int(2x + y == 3)
if()

-- ERROR:
File "XXXX", line 7
    reta = int(2x + y == 3)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:46:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = 2x + y == 3
if()

-- ERROR:
File "XXXX", line 7
    reta = 2x + y == 3
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:46:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = 2*x + y == 3
if()

-- ERROR:
File "XXXX", line 8
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:46:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = 2*x + y == 3


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    reta = 2*x + y == 3
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:52:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = (2*x + y == 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    reta = (2*x + y == 3)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:52:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())
Pxy = (Px,Py)
reta = (2*x + y == 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    reta = (2*x + y == 3)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:53:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())

reta = (2*x + y == 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    reta = (2*x + y == 3)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:53:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())

reta = (2*Px + Py == 3)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    reta = (2*x + y == 3)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:54:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
Px = int(input())
Py = int(input())

reta = (2*x + y == 3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    reta = (2*x + y == 3)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 22:56:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input())
y = int(input())
P(x,y)
reta = (2*x + y == 3)
if (P ∈ reta):
	mensagem = " ponto pertence a reta "
else:
	mensagem = " ponto nao pertence a reta "

-- ERROR:
File "XXXX", line 8
    if (P ∈ reta):
          ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:21:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input())
y = int(input())

if (2*x + y == 3):
	mensagem = " ponto pertence a reta "
else:
	mensagem = " ponto nao pertence a reta "
print(mensagem)

-- EXECUTION TIME:
0.19519
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
