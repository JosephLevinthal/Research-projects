== TEST (2019-04-07 23:05:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = int(input())
if (v>=200):
	mensagem = (v*0.05)
print(round(mensagem,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:06:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = int(input())
if (v>=200):
	mensagem = (v*0.05)
print(round(mensagem,2))

-- EXECUTION TIME:
0.1578
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/869/main.py", line 4, in <module>
    v = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:09:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = int(input())
if (v>=200):
	mensagem = (v*0.95)
print(round(mensagem,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:09:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = int(input())
if (v>=200):
	mensagem = (v*0.95)
print(round(mensagem,2))

-- EXECUTION TIME:
0.129546
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/869/main.py", line 4, in <module>
    v = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:10:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = int(input())
if (v>=200):
	mensagem = (v*0.95)
print(round(mensagem,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 23:10:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input())
if (v>=200):
	mensagem = (v*0.95)
print(round(mensagem,2))

-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 23:10:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v = float(input())
if (v>=200):
	mensagem = (v*0.95)
print(round(mensagem,2))

-- EXECUTION TIME:
0.128481
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:19:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
psd = float(input(" digite psd: "))
d = 5/100

if (psd >= 200):
	pcd = psd - (psd * d)
	print(round(pcd,2))
else:
	print(round(psd,2))
-- EXECUTION TIME:
0.148257
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
