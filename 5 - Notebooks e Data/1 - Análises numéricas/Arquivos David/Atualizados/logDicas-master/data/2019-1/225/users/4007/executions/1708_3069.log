== TEST (2019-04-29 14:16:44) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):

elif(ataque == "FURIA"):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
	

-- ERROR:
File "XXXX", line 6
    elif(ataque == "FURIA"):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:16:52) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
elif(ataque == "FURIA"):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
	

-- ERROR:
File "XXXX", line 5
    elif(ataque == "FURIA"):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:16:56) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
elif(ataque = "FURIA"):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
	

-- ERROR:
File "XXXX", line 5
    elif(ataque = "FURIA"):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:17:05) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
elif(ataque == FURIA):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
	

-- ERROR:
File "XXXX", line 5
    elif(ataque == FURIA):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:17:13) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
elif (ataque == FURIA):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
	

-- ERROR:
File "XXXX", line 5
    elif (ataque == FURIA):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:18:37) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == FURIA):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elif (ataque == FURIA):
NameError: name 'FURIA' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:19:29) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == FURIA):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
else:
	print("Entrada invalida")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    elif (ataque == FURIA):
NameError: name 'FURIA' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:20:00) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA""):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 6
    elif (ataque == "FURIA""):
                             ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:20:09) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 6
    elif (ataque == "FURIA""):
                             ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:20:44) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
print(vp)
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:21:13) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
   print(vp)
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:21:44) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp = (dado1 + dado2)**2
   print(vp)

	else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:01) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp = ((dado1 + dado2)**2)
   print(vp)

	else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:11) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp = ((dado1 + dado2)**2)
print(vp)

	else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 16
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:16) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp = ((dado1 + dado2)**2)
print(vp)

else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:22:18) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp = ((dado1 + dado2)**2)
print(vp)
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:23:00) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp = ((dado1 + dado2)**2)
 	print(vp)
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:23:31) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp=(dado1 + dado2)**2
 	print(vp)
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:23:35) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp=(dado1 + dado2)**2
 	
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:23:44) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp=(dado1 + dado2)**2
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:23:44) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp=(dado1 + dado2)**2
else:
	print("Entrada invalida")

-- ERROR:
File "XXXX", line 14
    print(vp)
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:24:33) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp=(dado1 + dado2)**2
	print(vp)

else:
	print("Entrada invalida")

-- OUTPUT:
100
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 14:24:45) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp=(dado1 + dado2)**2
	print(vp)

else:
	print("Entrada invalida")

-- OUTPUT:
100
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 14:25:01) 
-- CODE:
ataque = input("ataque:(FURIA/GRITO/TOQUE)")
dado1 = int(input("numero sorteado: "))
dado2 = int(input("numero sorteado: "))
if ((dado1 < 0) or (dado2 < 0) or (dado1 > 8) or (dado2 > 8)):
	print("Entrada invalida")
elif (ataque == "FURIA"):
	vp = 10 + dado1 + dado2
	print(vp)
elif (ataque == "GRITO"):
	vp = 6 + dado1 + dado2
	print(vp)
elif (ataque == "TOQUE"):
	vp=(dado1 + dado2)**2
	print(vp)

else:
	print("Entrada invalida")

-- EXECUTION TIME:
0.219588
-- TEST CASE 1:
---- input:
TOQUE
5
5
---- correct output:
100
---- user output:
100
-- TEST CASE 2:
---- input:
GRITA
6
1
---- correct output:
Entrada invalida
---- user output:
Entrada invalida
-- TEST CASE 3:
---- input:
GRITO
6
1
---- correct output:
13
---- user output:
13
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
