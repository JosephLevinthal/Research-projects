== TEST (2019-05-22 15:35:18) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
print(inv)


-- OUTPUT:
ACARARAJADADAJARARACA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-22 15:37:28) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i].replace(' ')
	i = i -1
print(inv)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    inv = inv + s[i].replace(' ')
TypeError: replace() takes at least 2 arguments (1 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-22 15:39:03) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
n= inv.replace(' ')
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
print(inv)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    n= inv.replace(' ')
TypeError: replace() takes at least 2 arguments (1 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-22 15:39:19) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
n= inv.replace(' ')
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
print(n)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    n= inv.replace(' ')
TypeError: replace() takes at least 2 arguments (1 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-27 12:59:17) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
print(inv)


-- EXECUTION TIME:
0.230394
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
ORROHCAC
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 12:59:37) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
print(inv)


-- OUTPUT:
ACARARAJADADAJARARACA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-27 12:59:52) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
print(inv)


-- EXECUTION TIME:
0.122195
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
ORROHCAC
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 12:59:57) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
print(inv)


-- OUTPUT:
ACARARAJADADAJARARACA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:06:47) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
	if(palindromo)/*SE A CONDIÇÃO DO PALINDRO FOR VERDADE ( = 1 )*/
		puts("1")
       
	else /*SE A CONDIÇÃO DO PALINDRO FOR FALSA ( = 0 )*/
		puts("0")
print(puts)

-- ERROR:
File "XXXX", line 7
    if(palindromo)/*SE A CONDIÇÃO DO PALINDRO FOR VERDADE ( = 1 )*/
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:16:06) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
print(s)

-- OUTPUT:
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
ACARARAJADADAJARARACA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:16:43) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
print(inv)

-- OUTPUT:
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
ACARARAJADADAJARARACA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:17:38) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:17:53) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:20:10) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:20:50) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:21:55) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 2
    inv =
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:22:28) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv.replace())
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(inv.replace())
TypeError: replace() takes at least 2 arguments (0 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:22:51) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(replace(inv))
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(replace(inv))
NameError: name 'replace' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:23:40) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:24:14) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =replace("")
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    inv =replace("")
NameError: name 'replace' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:24:49) 
-- CODE:
s = input("Digite uma string: ").upper()
inv ="".replace
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    inv = inv + s[i]
TypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:25:13) 
-- CODE:
s = input("Digite uma string: ").upper()
inv ="".replace()
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    inv ="".replace()
TypeError: replace() takes at least 2 arguments (0 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:25:37) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv.replace())
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(inv.replace())
TypeError: replace() takes at least 2 arguments (0 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:29:44) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(reaplace(" ",""((inv))
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 7
    i = i -1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:29:44) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(reaplace(" ",""((inv))
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 7
    i = i -1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:29:44) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(reaplace(" ",""((inv))
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 7
    i = i -1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:29:44) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(reaplace(" ",""((inv))
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 7
    i = i -1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:29:45) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(reaplace(" ",""((inv))
	i = i -1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 7
    i = i -1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:29:59) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(reaplace(" ",""((inv))
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 7
    if(s[0]) == (s[-1]):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:30:31) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print((reaplace(" ","")inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- ERROR:
File "XXXX", line 6
    print((reaplace(" ","")inv)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:34:57) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
nv= inv.replace(" ","")
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(nv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)

-- OUTPUT:
1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:35:45) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
nv= inv.replace(" ","")
i = -1
while i >= -len(s):
	inv = inv + s[i]
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
print(nv)
-- OUTPUT:
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:44:13) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
nv= inv.replace(" ","")
i = -1
while i >= -len(s):
	inv = inv + s[i]
print(nv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- ERROR:
File "XXXX", line 8
    if(s[0]) == (s[-1]):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:45:02) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
nv = inv.replace(" ","")
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(nv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 13:45:40) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
nv = inv.replace(" ","")
i = -1
while i >= -len(s):
	nv = nv + s[i]
	print(nv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
AA
1
AAA
1
AAAA
1
AAAAA
1
AAAAAA
1
AAAAAAA
1
AAAAAAAA
1
AAAAAAAAA
1
AAAAAAAAAA
1
AAAAAAAAAAA
1
AAAAAAAAAAAA
1
AAAAAAAAAAAAA
1
AAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:14:19) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
AA
1
AAA
1
AAAA
1
AAAAA
1
AAAAAA
1
AAAAAAA
1
AAAAAAAA
1
AAAAAAAAA
1
AAAAAAAAAA
1
AAAAAAAAAAA
1
AAAAAAAAAAAA
1
AAAAAAAAAAAAA
1
AAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:15:39) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
AA
1
AAA
1
AAAA
1
AAAAA
1
AAAAAA
1
AAAAAAA
1
AAAAAAAA
1
AAAAAAAAA
1
AAAAAAAAAA
1
AAAAAAAAAAA
1
AAAAAAAAAAAA
1
AAAAAAAAAAAAA
1
AAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
1
AAAAAAAAAAAAAAAA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:17:01) 
-- CODE:
s = input("Digite uma string: ").upper()
inv =""
i = 1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
C
1
CC
1
CCC
1
CCCC
1
CCCCC
1
CCCCCC
1
CCCCCCC
1
CCCCCCCC
1
CCCCCCCCC
1
CCCCCCCCCC
1
CCCCCCCCCCC
1
CCCCCCCCCCCC
1
CCCCCCCCCCCCC
1
CCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:20:10) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = 1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
C
1
CC
1
CCC
1
CCCC
1
CCCCC
1
CCCCCC
1
CCCCCCC
1
CCCCCCCC
1
CCCCCCCCC
1
CCCCCCCCCC
1
CCCCCCCCCCC
1
CCCCCCCCCCCC
1
CCCCCCCCCCCCC
1
CCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:20:30) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = 1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
C
1
CC
1
CCC
1
CCCC
1
CCCCC
1
CCCCCC
1
CCCCCCC
1
CCCCCCCC
1
CCCCCCCCC
1
CCCCCCCCCC
1
CCCCCCCCCCC
1
CCCCCCCCCCCC
1
CCCCCCCCCCCCC
1
CCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:20:58) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = 1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
C
1
CC
1
CCC
1
CCCC
1
CCCCC
1
CCCCCC
1
CCCCCCC
1
CCCCCCCC
1
CCCCCCCCC
1
CCCCCCCCCC
1
CCCCCCCCCCC
1
CCCCCCCCCCCC
1
CCCCCCCCCCCCC
1
CCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:21:14) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = 1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
C
1
CC
1
CCC
1
CCCC
1
CCCCC
1
CCCCCC
1
CCCCCCC
1
CCCCCCCC
1
CCCCCCCCC
1
CCCCCCCCCC
1
CCCCCCCCCCC
1
CCCCCCCCCCCC
1
CCCCCCCCCCCCC
1
CCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:22:04) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = 1
while i >= -len(s):
	inv = inv + s[i]
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
C
1
CC
1
CCC
1
CCCC
1
CCCCC
1
CCCCCC
1
CCCCCCC
1
CCCCCCCC
1
CCCCCCCCC
1
CCCCCCCCCC
1
CCCCCCCCCCC
1
CCCCCCCCCCCC
1
CCCCCCCCCCCCC
1
CCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
1
CCCCCCCCCCCCCCCC
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:26:17) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:32:26) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	print()
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:33:03) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:42:38) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:43:21) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	if inv != ' '
		print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- ERROR:
File "XXXX", line 7
    if inv != ' '
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:43:26) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	if inv != ' ':
		print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:43:53) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	if s[i] != ' ':
		print(s[i])
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if s[i] != ' ':
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:44:22) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	if s[i] != ' ':
		print(s[i])
	i = i - 1
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
C
1
A
1
R
1
A
1
R
1
A
1
J
1
A
1
D
1
A
1
D
1
A
1
J
1
A
1
R
1
A
1
R
1
A
1
C
1
A
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:44:47) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	print(inv)
	if(s[0]) == (s[-1]):
		print(1)
	else:
		print(0)
-- OUTPUT:
A
1
AC
1
ACA
1
ACAR
1
ACARA
1
ACARAR
1
ACARARA
1
ACARARAJ
1
ACARARAJA
1
ACARARAJAD
1
ACARARAJADA
1
ACARARAJADAD
1
ACARARAJADADA
1
ACARARAJADADAJ
1
ACARARAJADADAJA
1
ACARARAJADADAJAR
1
ACARARAJADADAJARA
1
ACARARAJADADAJARAR
1
ACARARAJADADAJARARA
1
ACARARAJADADAJARARAC
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:46:37) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
print(inv.replace(' ', ''))
#if(s[0]) == (s[-1]):
#	print(1)
#else:
#	print(0)
-- OUTPUT:
ACARARAJADADAJARARACA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:48:47) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
b = 1
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	if(s[0]) != (s[-1]):
		b = 0
print(inv.replace(' ', ''))

-- OUTPUT:
ACARARAJADADAJARARACA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:51:26) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	i = i - 1
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
print(inv.replace(' ', ''))
print(b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    if(s[c]) != (s[i]):
IndexError: string index out of range
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:52:12) 
-- CODE:
s = input("Digite uma string: ").upper()
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv.replace(' ', ''))
print(b)

-- OUTPUT:
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:53:45) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ', '')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv)
print(b)

-- OUTPUT:
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-27 14:54:08) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ', '')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv)
print(b)

-- EXECUTION TIME:
0.135632
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
ORROHCAC
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-27 14:54:28) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv)
print(b)

-- EXECUTION TIME:
0.124498
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
ORROHCAC
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:55:21) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv)
print(b)

-- OUTPUT:
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 14:55:37) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv)
print(b)

-- OUTPUT:
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-27 14:55:58) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv)
print(b)

-- EXECUTION TIME:
0.133972
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
ORROHCAC
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 15:06:10) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(inv)
print(b)

-- OUTPUT:
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 15:09:37) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(s)
print(b)

-- OUTPUT:
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-27 15:09:53) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(s)
print(b)

-- EXECUTION TIME:
0.195259
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-27 15:29:08) 
-- CODE:
s = input("Digite uma string: ").upper()
s=s.replace(' ','')
inv = ""
i = -1
b = 1
c = 0
while i >= -len(s):
	inv = inv + s[i]
	if(s[c]) != (s[i]):
		b = 0
	c = c + 1
	i = i - 1
print(s)
print(b)

-- OUTPUT:
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
