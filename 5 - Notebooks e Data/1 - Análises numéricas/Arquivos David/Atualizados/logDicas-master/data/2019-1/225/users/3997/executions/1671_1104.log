== TEST (2019-04-28 23:58:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))

if (b<a) and (d<c):
	print("Intervalo 1:", a, ",", b
			"Intervalo 2:", c, ",", d
			"Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Intervalo 1:",a, ",", b
		   "Intervalo 2:",c, ",", d
		   "Ha intersecao")
else:
	print("Intervalo 1:",a, ",", b
		   "Intervalo 2:",c, ",", d
		   "Nao ha intersecao")
	
-- ERROR:
File "XXXX", line 12
    "Intervalo 2:", c, ",", d
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:00:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))

if (b<a) and (d<c):
	print("Intervalo 1: ", a, ",", b
			"Intervalo 2: ", c, ",", d
			"Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Intervalo 1: ",a, ",", b
		   "Intervalo 2: ",c, ",", d
		   "Ha intersecao")
else:
	print("Intervalo 1: ",a, ",", b
		   "Intervalo 2: ",c, ",", d
		   "Nao ha intersecao")
	
-- ERROR:
File "XXXX", line 12
    "Intervalo 2: ", c, ",", d
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:02:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))

if (b<a) and (d<c):
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Intervalo 1: ",a, ",", b
		   "Intervalo 2: ",c, ",", d
		   "Ha intersecao")
else:
	print("Intervalo 1: ",a, ",", b
		   "Intervalo 2: ",c, ",", d
		   "Nao ha intersecao")
	
-- ERROR:
File "XXXX", line 16
    "Intervalo 2: ",c, ",", d
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:03:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))

if (b<a) and (d<c):
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Ha intersecao")
else:
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Nao ha intersecao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 00:03:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))

if (b<a) and (d<c):
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Ha intersecao")
else:
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Nao ha intersecao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 00:04:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))

if (b<a) and (d<c):
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Ha intersecao")
else:
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Nao ha intersecao")
	
-- EXECUTION TIME:
0.230494
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1671/1104/main.py", line 8, in <module>
    x = float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:12:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))

if (b<a) and (d<c):
	print("Intervalo 1: ", a, ",", b)
	print("Intervalo 2: ", c, ",", d)
	print("Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Ha intersecao")
else:
	print("Intervalo 1: ",a, ",", b)
	print("Intervalo 2: ",c, ",", d)
	print("Nao ha intersecao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:30:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))
x = float(input("Digite x: "))
print("Intervalo 1: ", a, ",", b)
print("Intervalo 2: ", c, ",", d)

if (b<a) and (d<c):
	print("Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    x = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:30:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))

print("Intervalo 1: ", a, ",", b)
print("Intervalo 2: ", c, ",", d)

if (b<a) and (d<c):
	print("Nao a intersecao")
elif ( a <= x <= b) and ( c <= x <= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    elif ( a <= x <= b) and ( c <= x <= d):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:30:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))

print("Intervalo 1: ", a, ",", b)
print("Intervalo 2: ", c, ",", d)

if (b<a) and (d<c):
	print("Nao a intersecao")
elif ( a <= "x" <= b) and ( c <= "x"<= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    elif ( a <= "x" <= b) and ( c <= "x"<= d):
TypeError: '<=' not supported between instances of 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:31:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))

print("Intervalo 1: ", a, ",", b)
print("Intervalo 2: ", c, ",", d)

if (b<a) and (d<c):
	print("Nao a intersecao")
elif ( a <= b) and ( c <= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:31:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))

print("Intervalo 1: ", a, ",", b)
print("Intervalo 2: ", c, ",", d)

if (b<a) and (d<c):
	print("Nao a intersecao")
elif ( a <= b) and ( c <= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
	
-- EXECUTION TIME:
0.118289
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 12:39:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))

print("Intervalo 1: ", a, ",", b)
print("Intervalo 2: ", c, ",", d)

if (b>a) and (d>c):
	if (a >= c and a <= d):
		print("Ha intersecao")
	elif (b >= c and b <= d):
		print("Ha intersecao")
	elif (c >= a and c <= b):
		print("Ha intersecao")
	elif (d >= a and d <= b):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 12:39:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input("Digite a: "))
b = float(input("Digite b: "))
c = float(input("Digite c: "))
d = float(input("Digite d: "))

print("Intervalo 1: ", a, ",", b)
print("Intervalo 2: ", c, ",", d)

if (b>a) and (d>c):
	if (a >= c and a <= d):
		print("Ha intersecao")
	elif (b >= c and b <= d):
		print("Ha intersecao")
	elif (c >= a and c <= b):
		print("Ha intersecao")
	elif (d >= a and d <= b):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.170302
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
