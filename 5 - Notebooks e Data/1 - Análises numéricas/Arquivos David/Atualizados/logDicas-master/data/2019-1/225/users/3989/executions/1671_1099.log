== TEST (2019-04-18 18:00:18) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))


if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo equilatero")
	else:
		if ((n1==n2) or (n2==n3) or (n1==n3))
		print("Tipo de triangulo isosceles")
	


-- ERROR:
File "XXXX", line 12
    if ((n1==n2) or (n2==n3) or (n1==n3))
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:03:12) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo equilatero")
	else:
		if ((n1==n2) or (n2==n3) or (n1==n3))
		print("Tipo de triangulo isosceles")
	


-- ERROR:
File "XXXX", line 13
    if ((n1==n2) or (n2==n3) or (n1==n3))
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:03:24) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo equilatero")
	else:
		if ((n1==n2) or (n2==n3) or (n1==n3)):
		print("Tipo de triangulo isosceles")
	


-- ERROR:
File "XXXX", line 14
    print("Tipo de triangulo isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:03:39) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo equilatero")
	else:
		if ((n1==n2) or (n2==n3) or (n1==n3)):
	print("Tipo de triangulo isosceles")
	


-- ERROR:
File "XXXX", line 14
    print("Tipo de triangulo isosceles")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:03:52) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo isosceles")
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 15:04:05) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo isosceles")
	


-- EXECUTION TIME:
0.133466
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:04:15) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo isosceles")
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:04:43) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 15:04:52) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n1+n2)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
	


-- EXECUTION TIME:
0.164688
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 15:06:28) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
	


-- EXECUTION TIME:
0.162812
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:06:30) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 15:09:44) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
	


-- EXECUTION TIME:
0.203909
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:09:47) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 15:11:08) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo:escaleno")


-- EXECUTION TIME:
0.18709
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:11:11) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo:escaleno")


-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:11:35) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
	   else:
			print("escaleno")


-- ERROR:
File "XXXX", line 16
    print("escaleno")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:12:11) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo:escaleno")


-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:12:46) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:13:04) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
   else:
				print("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:13:38) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
      else:
			print("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:14:18) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
      else:
			print("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:14:31) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:15:25) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2+n3) or (n2>=n1+n3) or (n3>=n2+n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n1==n3)):
	      print("Tipo de triangulo: isosceles")
		else: 
			print("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else: 
         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:31:54) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n3 == n1)):
	      print("Tipo de triangulo: isosceles")
		else: 
			print("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else: 
         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:32:11) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n3 == n1)):
	      print ("Tipo de triangulo: isosceles")
		else: 
			print ("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else: 
         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:33:07) 
-- CODE:
n1 = float(input("Digite o numero 1: "))
n2 = float(input("Digite o numero 2: "))
n3 = float(input("Digite o numero 3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1>= n2 + n3) or (n2 >= n1 + n3) or (n3 >= n2 + n1)):
	print("Tipo de triangulo: invalido")
else:
	if ((n1 == n2) and (n2 == n3)):
		print("Tipo de triangulo: equilatero")
	else:
	   if ((n1==n2) or (n2==n3) or (n3 == n1)):
	      print ("Tipo de triangulo: isosceles")
		else: 
			print ("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 15
    else: 
         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:38:25) 
-- CODE:
n1 = float(input("Digite n1:"))
n2 = float(input("Digite n2: "))
n3 = float(input("Digite n3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1 >= n2 + n3) or (n2>= n1 + n3) or (n3>= n2 + n1)):
	print ("Tipo de triangulo: invalido")
else:
	if((n1==n2) and (n2==n3)):
		print("Tipo de triangulo: equilatero")
	else:
		if((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print ("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 15:38:33) 
-- CODE:
n1 = float(input("Digite n1:"))
n2 = float(input("Digite n2: "))
n3 = float(input("Digite n3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1 >= n2 + n3) or (n2>= n1 + n3) or (n3>= n2 + n1)):
	print ("Tipo de triangulo: invalido")
else:
	if((n1==n2) and (n2==n3)):
		print("Tipo de triangulo: equilatero")
	else:
		if((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print ("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 15:38:44) 
-- CODE:
n1 = float(input("Digite n1:"))
n2 = float(input("Digite n2: "))
n3 = float(input("Digite n3: "))

print("Entradas:", n1, ",", n2, ",", n3)

if ((n1 >= n2 + n3) or (n2>= n1 + n3) or (n3>= n2 + n1)):
	print ("Tipo de triangulo: invalido")
else:
	if((n1==n2) and (n2==n3)):
		print("Tipo de triangulo: equilatero")
	else:
		if((n1 == n2) or (n2 == n3) or (n3 == n1)):
			print ("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.158735
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
