== TEST (2019-04-29 15:27:44) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(f)
elif (2 < x) and (x<=1000):
	f = -1/(x-2)
	print(f)

-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:28:06) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(f)
elif (2 < x) and (x<=1000):
	f = -1/(x-2)
	print(f)

-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:28:24) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(f)
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(f)

-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:28:57) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(f)
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(f)
else:
	print("Entradas invalidas")

-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:29:11) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(f)
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(f)
else:
	print("Entradas invalidas")

-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:29:43) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(round(f,2))
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(round(f,2))
else:
	print("Entradas invalidas")

-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:29:58) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(round(f,2))
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(round(f,2))
else:
	print("Entradas invalidas")

-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:30:37) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(round(f,4))
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(round(f,4))
else:
	print("Entradas invalidas")

-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 15:30:43) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(round(f,4))
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(round(f,4))
else:
	print("Entradas invalidas")

-- EXECUTION TIME:
0.203088
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
Entradas invalidas
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 15:30:58) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(round(f,4))
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(round(f,4))
else:
	print("Entrada invalida")

-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 15:31:02) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(round(f,4))
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(round(f,4))
else:
	print("Entrada invalida")

-- EXECUTION TIME:
0.178615
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
Entrada invalida
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 15:31:12) 
-- CODE:
x = float(input(""))

if (- 1000 <= x) and (x<-2):
	f = - 1/(x+2)
	print(round(f,4))
elif (2 < x) and (x<=1000):
	f = 1/(x-2)
	print(round(f,4))
else:
	print("entrada invalida")

-- EXECUTION TIME:
0.167297
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
entrada invalida
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
