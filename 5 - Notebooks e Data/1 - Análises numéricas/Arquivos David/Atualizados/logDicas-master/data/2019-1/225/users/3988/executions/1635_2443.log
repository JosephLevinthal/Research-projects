== TEST (2019-04-12 13:39:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n =="1"):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = pi
	
-- OUTPUT:
nao_eleitor
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:40:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n =="1"):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = (pi * x **2 * ((3 * r) - x))/ 3
print(round(V, 4))
	
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:41:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n =="1"):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = (pi * x **2 * ((3 * r) - x))/ 3
print(round(V, 4))
	
-- EXECUTION TIME:
0.126574
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:47:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = (pi * x **2 * ((3 * r) - x))/ 3
print(round(V, 4))
	
-- EXECUTION TIME:
0.153296
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:47:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==01):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = (pi * x **2 * ((3 * r) - x))/ 3
print(round(V, 4))
	
-- EXECUTION TIME:
0.127428
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 8
    if (n ==01):
             ^
SyntaxError: invalid token

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:47:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==01):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = (pi * x **2 * ((3 * r) - x))/ 3
print(round(V, 4))
	
-- ERROR:
File "XXXX", line 8
    if (n ==01):
             ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:47:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = (pi * x **2 * ((3 * r) - x))/ 3
print(round(V, 4))
	
-- EXECUTION TIME:
0.159324
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:50:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = ((pi * x **2 * ((3 * r) - x))/ 3) - ((4 * pi * (r**3))/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.199048
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
-170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
-290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:50:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = ((pi * x **2 * ((3 * r) - x))/ 3) - ((4 * pi * (r**3))/3)
print(round(V, 4))
	
-- OUTPUT:
-170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:50:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = ((pi * x **2 * ((3 * r) - x))/ 3) - ((4 * pi * (r**3))/3)
print(round(V, 4))
	
-- OUTPUT:
-170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:50:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = ((pi * x **2 * ((3 * r) - x))/ 3) - ((4 * pi * (r**3))/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.262484
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
-170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
-290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:51:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi *(x**2)*(3*r)-x)/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.17071
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
169.9875
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
288.4734
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:52:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi *(x**2)*(3*r)-x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:52:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = d = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi *(x**2)*(3*r)-x)/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.193285
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
169.9875
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
288.4734
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:52:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi *(x**2)*(3*r)-x)/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.148056
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
169.9875
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
288.4734
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:52:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi *(x**2)*(3*r)-x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:53:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:54:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:54:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:54:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:55:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n ==1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.177007
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
169.9875
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
288.4734
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:55:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:55:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = (4 * pi * (r**3))/ 3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.161302
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
169.9875
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
288.4734
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:56:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2) * (3*r) - x)/3)
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.149135
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
169.9875
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
288.4734
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:56:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2) * (3*r) - x)/3)
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:58:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2) * ((3*r) - x))/3)
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.153692
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
169.9875
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
288.4734
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:58:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2) * ((3*r) - x))/3)
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * (3*r) - x)/3)
print(round(V, 4))
	
-- OUTPUT:
169.9875
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:58:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2) * ((3*r) - x))/3)
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * ((3*r) - x))/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.222958
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 13:59:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * ((3*r) - x))/3)
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 13:59:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2) * ((3*r) - x))/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.180416
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 14:00:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- EXECUTION TIME:
0.173084
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:00:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 14:00:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- EXECUTION TIME:
0.134652
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 14:00:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- EXECUTION TIME:
0.151017
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
170.5687
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 14:00:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- EXECUTION TIME:
0.137741
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
170.5687
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:00:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 14:00:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- EXECUTION TIME:
0.10658
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
r:altura:em 1/2?290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 14:00:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- EXECUTION TIME:
0.120248
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:02:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:02:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:03:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - ((pi * (x**2)) * ((3*r) - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:05:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - (pi * (x**2) * (3*r - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:05:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - (pi * (x**2) * (3*r - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 14:05:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - (pi * (x**2) * (3*r - x))/3
print(round(V, 4))
	
-- EXECUTION TIME:
0.132998
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:05:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2?")
if (n == 1):
	V = ((pi * (x**2)) * ((3*r) - x))/3
else:
	V = ((4 * pi * (r**3))/3) - (pi * (x**2) * (3*r - x))/3
print(round(V, 4))
	
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:09:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V, 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V, 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:09:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V, 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V, 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 14:09:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("em 1/2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V, 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V, 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 22:26:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.175204
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 12
    print(round(V, 4))
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:26:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V, 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V, 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 22:27:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	from math import*
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V, 4))
	
-- EXECUTION TIME:
0.133706
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 13
    print(round(V, 4))
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:27:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	from math import*
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V, 4))
	
-- ERROR:
File "XXXX", line 13
    print(round(V, 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:27:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V , 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V , 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:28:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V , 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V , 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:28:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V , 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V , 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:44:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
if (n == 1):
	V = (pi * (x**2) * ((3*r) - x))/3
else:
	V = (((4 * pi * (r**3))/3)) - ((pi * (x**2) * ((3*r - x))/3)
print(round(V , 4))
	
-- ERROR:
File "XXXX", line 12
    print(round(V , 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:44:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = input("numero 1 / 2:")
	
-- ERROR:
File "XXXX", line 12
    print(round(V , 4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:50:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = float(input("numero 1 / 2:"))
if (n == 1):
	v = (pi*(x**2) * ((3*r) - x)) / 3
else:
	v = (((4 * pi * (r**3)) / 3)) - ((pi*(x**2) * ((3*r) - x)) / 3)
print(round(v , 4))	
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 22:50:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("r:"))
x = float(input("altura:"))
n = float(input("numero 1 / 2:"))
if (n == 1):
	v = (pi*(x**2) * ((3*r) - x)) / 3
else:
	v = (((4 * pi * (r**3)) / 3)) - ((pi*(x**2) * ((3*r) - x)) / 3)
print(round(v , 4))	
	
-- EXECUTION TIME:
0.178642
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
