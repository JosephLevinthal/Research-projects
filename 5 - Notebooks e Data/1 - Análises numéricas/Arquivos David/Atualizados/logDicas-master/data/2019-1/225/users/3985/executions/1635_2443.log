== TEST (2019-04-14 15:18:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

V= (4*pi*(raio)**3)/3
Vo= (pi*(alt)**2*(3*raio-alt))/3
V1= (V-Vo)

print(round(V1, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:18:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

V= (4*pi*(raio)**3)/3
Vo= (pi*(alt)**2*(3*raio-alt))/3
V1= (V-Vo)

print(round(V1, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:20:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

V= ((4*pi*(raio)**3)/3)
Vo= ((pi*(alt)**2*(3*raio-alt))/3)
V1= (V-Vo)

print(round(V1, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:24:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:25:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:25:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:28:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:28:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))

var= ((4*pi*(raio)**3)/3)
var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:28:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= (input())
if (num == 1):
	var= ((4*pi*(raio)**3)/3)
else:
	var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    var3= (var-var2)
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:33:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= (input())
if (num == 1):
	var= ((4*pi*(raio)**3)/3)
else:
	var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    var3= (var-var2)
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 15:33:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= (input())
if (num == 1):
	var= ((4*pi*(raio)**3)/3)
else:
	var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- EXECUTION TIME:
0.209881
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2443/main.py", line 12, in <module>
    var3= (var-var2)
NameError: name 'var' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:43:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= (input())
if (num == 1):
	var= ((4*pi*(raio)**3)/3)
else:
	var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    var3= (var-var2)
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:48:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= (input())
if (num == 1):
	var= ((4*pi*(raio)**3)/3)
else:
	var2= ((pi*(alt)**2*(3*raio-alt))/3)
var3= (var-var2)

print(round(var3, 4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    var3= (var-var2)
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:52:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= input()
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num == 1):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:53:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= input()
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num == 1):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:54:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= input()
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num == 1):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:52:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= input()
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num == 1):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:53:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input())
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num == 1):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:53:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input())
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num = 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num = 1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:53:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input())
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num <=1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num <=1):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:53:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input())
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num =<1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num =<1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:54:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input())
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num == 1):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:54:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input("Numero6"))
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if (num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if (num == 1):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:54:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input("Numero6"))
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if(num == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if(num == 1):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:55:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input("Numero: "))
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if(num (1)):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if(num (1)):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:55:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input("Numero: "))
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if(num):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if(num):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 01:55:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input("Numero: "))
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if(num==1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- EXECUTION TIME:
0.124492
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 10
    if(num==1):
              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:55:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input("Numero: "))
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if(num==1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if(num==1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:56:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
num= int(input("Numero: "))
var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
if(num==1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 10
    if(num==1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:56:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x==1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x==1):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:57:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x== "1"):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x== "1"):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:57:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == "1"):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == "1"):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:57:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == 1):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == 1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 01:58:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == "1"):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == "1"):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 02:26:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == 1):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == 1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 02:27:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == var1):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == var1):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:09:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == var1):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == var1):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:10:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: "))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == var1):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == var1):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:12:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: (1/2)?"))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == 1):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == 1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:13:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= int(input("Numero: (1/2)?"))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == 1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:15:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= input("Numero: (1/2)?")

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == 1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == 1):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:15:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= input("Numero: (1/2)?")

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x == "1"):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x == "1"):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:15:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= input("Numero: (1/2)?")

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x=="1"):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x=="1"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:16:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= input("Numero: (1/2)?")

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x=="1"):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x=="1"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:17:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= input("Numero: 1/2?")

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt)**2*(3*raio-alt))/3
		 
if (x=="1"):
	var3= ((pi*(alt)**2*(3*raio-alt))/3
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x=="1"):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:19:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= input("Numero: 1/2?")

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
		 
if (x==1):
	var3= var1
else:
	var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if (x==1):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:19:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= input("Numero: 1/2?")

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
		 
if(x==1):
		 var3= var1
else:
		 var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 12
    if(x==1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:20:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= float(input("Numero: 1/2?"))

var= ((4*pi*(raio)**3)/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if(x==1):
		 var3= var1
else:
		 var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 11
    if(x==1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:20:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
x= float(input("Numero: 1/2?"))

var= ((4*pi*(raio**3))/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if(x==1):
		 var3= var1
else:
		 var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 11
    if(x==1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:21:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
y= float(input("Numero: 1/2?"))

var= ((4*pi*(raio**3))/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if(y == 1):
		 var3= var1
else:
		 var3= (var-var1)
print(round(var3, 4))
-- ERROR:
File "XXXX", line 11
    if(y == 1):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:24:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
y= float(input("Numero: 1/2?"))

var= ((4*pi*(raio**3))/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if(y==1):
	var3=var1
else:
	var3=var-var1
print(round(var3, 4))
-- ERROR:
File "XXXX", line 11
    if(y==1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:26:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
y= int(input("Numero: 1/2?"))

var= ((4*pi*(raio**3))/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if(y==1):
	var3=var1
else:
	var3=var-var1
print(round(var3, 4))
-- ERROR:
File "XXXX", line 11
    if(y==1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:26:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
y= int(input("Numero: 1/2?"))

var= ((4*pi*(raio**3))/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if ( y == 1 ) :
	var3=var1
else:
	var3=var-var1
print(round(var3, 4))
-- ERROR:
File "XXXX", line 11
    if ( y == 1 ) :
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:26:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
y= int(input("Numero: 1/2?"))

var= ((4*pi*(raio**3))/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if ( y == 1 ) :
	var3=var1
else:
	var3=var-var1
print(round(var3, 4))
-- EXECUTION TIME:
0.234111
-- ERROR:
  File "/home/codebench/codes/1635/2443/main.py", line 11
    if ( y == 1 ) :
                  ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:28:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
raio= float(input("Raio: "))
alt= float(input("Altura: "))
y= int(input("Numero: 1/2?"))

var= ((4*pi*(raio**3))/3)
var1= ((pi*(alt**2)*(3*raio-alt))/3
if(y==1):
	var3=var1
else:
	var3=var-var1
print(round(var3, 4))
-- ERROR:
File "XXXX", line 11
    if(y==1):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:32:34) 
-- CODE:
# Entradas
from math import*
r = float(input("Raio do tanque: "))
h = float(input("Altura: "))
opcao = float(input("Opcao (1/2)? "))
# Variaveis
V = (4 * pi * r **3)/3
V2 = (pi * h ** 2 * (3 * r - h))/3

if (opcao == 1):
	msg = V2
else:
	msg = V - V2
# Saida
print(round(msg, 4))
-- EXECUTION TIME:
0.257187
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
