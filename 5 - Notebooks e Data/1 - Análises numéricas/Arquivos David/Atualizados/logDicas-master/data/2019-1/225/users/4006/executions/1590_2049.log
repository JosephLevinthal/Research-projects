== TEST (2019-03-20 15:41:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = (float(input)) # dividendo
var2 = (float(input)) # divisor
var3 = var1//var2
var4 = var1 % var2
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = (float(input)) # dividendo
TypeError: float() argument must be a string or a number, not 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:41:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = float(input)
var2 = float(input)
var3 = var1//var2
var4 = var1 % var2
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = float(input)
TypeError: float() argument must be a string or a number, not 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:42:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = float(input)()
var2 = float(input)()
var3 = var1//var2
var4 = var1 % var2
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = float(input)()
TypeError: float() argument must be a string or a number, not 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:43:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = float(input)
var2 = float(input)
print(var1//var2)
print(var1 % var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = float(input)
TypeError: float() argument must be a string or a number, not 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:44:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input(divisor))
print(var1//var2)
print(var1 % var2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var2=int(input(divisor))
NameError: name 'divisor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:44:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
print(var1//var2)
print(var1 % var2)
-- OUTPUT:
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:45:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
print(var1//var2)
print(var1 % var2)
-- EXECUTION TIME:
0.199102
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:45:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
print(var1//var2)
print(var1 % var2)
-- OUTPUT:
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:46:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
print(var1//var2)
print(var1 % var2)
print(var1)
print(var2)
-- OUTPUT:
1
3
8
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:46:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
print(var1//var2)
print(var1 % var2)
print(var1)
print(var2)
-- EXECUTION TIME:
0.195726
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1
3
8
5
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7
0
14
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173
1
347
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 17:23:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
print(var1)
print(var2)
print(var1//var2)
print(var1%var2)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 17:23:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("dividendo"))
var2=int(input("divisor"))
print(var1)
print(var2)
print(var1//var2)
print(var1%var2)

-- EXECUTION TIME:
0.128601
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
