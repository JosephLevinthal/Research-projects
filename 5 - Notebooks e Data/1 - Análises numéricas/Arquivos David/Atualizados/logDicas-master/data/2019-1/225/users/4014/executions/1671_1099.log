== SUBMITION (2019-04-22 15:11:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c<=a) and (c+a<=b) and (a+c<=b):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.161356
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:11:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c<=a) and (c+a<=b) and (a+c<=b):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:16:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c<a) and (c+a<b) and (a+c<b):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.189435
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:17:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c<a) and (c+a<b) and (b+c<a):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.169761
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:18:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c<a) and (c+a<b) and (b+a<c):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.199604
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:18:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.135696
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:18:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:22:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)
if(b+c>=a) and (c+a>=b) and (b+a>=c):
	print("Tipo de triangulo: invalido")
elif(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.202615
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:26:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
elif (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:26:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (c==a):
	print("Tipo de triangulo: isosceles")
elif (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:27:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c)
	print("Tipo de triangulo: isosceles")
elif (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- ERROR:
File "XXXX", line 10
    elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c)
                                                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:28:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:28:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- EXECUTION TIME:
0.163287
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:32:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- EXECUTION TIME:
0.173114
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:32:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:32:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:52:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:52:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:55:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:55:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- EXECUTION TIME:
0.145144
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:55:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- EXECUTION TIME:
0.212501
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:55:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas: ",a,",",b,",",c)

if(b==c)and(c==a):
	print("Tipo de triangulo: equilatero")
elif((a==b) or (b==c) or (c==a)) and (b+c<=a) and (c+a<=b) and (b+a<=c):
	print("Tipo de triangulo: isosceles")
elif ((b+c<=a) and (c+a<=b) and (b+a<=c)) and (a!=b)and (b!=c)and (c!=a):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")

	
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:28:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas:",a,",",b,",",c,)
if(a>=b+c) and (b>=c+a) and (c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and (c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (a==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:29:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas:",a,",",b,",",c,)
if(a>=b+c) and (b>=c+a) and (c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and (c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (a==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:29:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas:",a,",",b,",",c,)
if(a>=b+c) and (b>=c+a) and (c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and (c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (a==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.155863
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:29:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas:",a,",",b,",",c,)
if(a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and (c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (a==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:30:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("a:"))
b=float(input("b:"))
c=float(input("c:"))
print("Entradas:",a,",",b,",",c,)
if(a>=b+c) or (b>=c+a) or (c>=a+b):
	print("Tipo de triangulo: invalido")
elif(a==b)and (c==a):
	print("Tipo de triangulo: equilatero")
elif(a==b) or (b==c) or (a==c):
	print("Tipo de triangulo: isosceles")
else:
	print("Tipo de triangulo: escaleno")

	
-- EXECUTION TIME:
0.144275
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
