== TEST (2019-04-15 12:30:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("numero: "))
from math import *
Vr = 4 * pi * (r**3) / 3
Vc = pi * (h ** 2) * (3*r - h) / 3
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:33:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("numero: "))
n1 = "volume ar"
n2 = "volume comb"
from math import *
Vr = 4 * pi * (r**3) / 3
Vc = pi * (h ** 2) * (3*r - h) / 3

if()
-- ERROR:
File "XXXX", line 13
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:33:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("numero: "))
"n1" = volume ar
"n2" = volume comb
from math import *
Vr = 4 * pi * (r**3) / 3
Vc = pi * (h ** 2) * (3*r - h) / 3

if()
-- ERROR:
File "XXXX", line 7
    "n1" = volume ar
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:33:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("numero: "))
n1 = volume ar
n2 = volume comb
from math import *
Vr = 4 * pi * (r**3) / 3
Vc = pi * (h ** 2) * (3*r - h) / 3

if()
-- ERROR:
File "XXXX", line 7
    n1 = volume ar
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:34:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("numero: "))
volume ar = "n1"
volume comb = "n2"
from math import *
Vr = 4 * pi * (r**3) / 3
Vc = pi * (h ** 2) * (3*r - h) / 3

if()
-- ERROR:
File "XXXX", line 7
    volume ar = "n1"
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 12:34:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("numero: "))
volume ar = float("n1")
volume comb = float("n2")
from math import *
Vr = 4 * pi * (r**3) / 3
Vc = pi * (h ** 2) * (3*r - h) / 3

if()
-- ERROR:
File "XXXX", line 7
    volume ar = float("n1")
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:39:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
Vr = 4 * pi * (r**3) / 3
Vc = pi * (h ** 2) * (3*r - h) / 3

if(n == "n1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print(round(n2, 4))
NameError: name 'n2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:40:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
n1 = 4 * pi * (r**3) / 3
n2 = pi * (h ** 2) * (3*r - h) / 3

if(n == "n1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:40:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
n1 = 4 * pi * (r**3) / 3
n2 = pi * (h ** 2) * (3*r - h) / 3

if(n == "n1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- EXECUTION TIME:
0.153022
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:41:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
n1 = 4 * pi * (r**3) / 3
n2 = (pi * (h ** 2) * (3*r - h)) / 3

if(n == "n1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:43:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("1 ou 2 : "))
from math import *
1 = 4 * pi * (r**3) / 3
2 = (pi * (h ** 2) * (3*r - h)) / 3

if(n == "n1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- ERROR:
File "XXXX", line 8
    1 = 4 * pi * (r**3) / 3
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:44:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
n1 = 4 * pi * (r**3) / 3
n2 = (pi * (h ** 2) * (3*r - h)) / 3

if(n == "n1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:44:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
n1 = 4 * pi * (r**3) / 3
n2 = (pi * (h ** 2) * (3*r - h)) / 3

if(n == "n1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:46:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
1 = 4 * pi * (r**3) / 3
2 = (pi * (h ** 2) * (3*r - h)) / 3

if(n == "1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- ERROR:
File "XXXX", line 8
    1 = 4 * pi * (r**3) / 3
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:47:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("r: "))
h = float(input("altura: "))
n = float(input("n1 ou n2 : "))
from math import *
n1 = 4 * pi * (r**3) / 3
n2 = (pi * (h ** 2) * (3*r - h)) / 3

if(n == "1"): 
	print(round(n1, 4))
else: 
	print(round(n2, 4))
	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
