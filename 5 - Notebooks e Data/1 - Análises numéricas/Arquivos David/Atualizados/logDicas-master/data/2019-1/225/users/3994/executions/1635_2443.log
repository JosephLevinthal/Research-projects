== TEST (2019-04-09 16:16:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input())
x = float(input())
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 *(3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:17:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input(" Digite raio"))
x = float(input(" Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 *(3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:17:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input(" Digite raio"))
x = float(input(" Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 *(3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.172844
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:17:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input(" Digite raio"))
x = float(input(" Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 *(3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:18:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input(" Digite raio"))
x = float(input(" Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 *(3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.257108
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:18:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.166219
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:18:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:21:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.206194
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:28:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * x**2 * (3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.124576
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:30:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = ((pi * x**2) * (3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.128799
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:30:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = ((pi * x**2) * (3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:30:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = ((pi * x**2) * (3*r - x)/3)
	print(round(V,4))
else:
	V = ((4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3))
	print(round(V,4))
-- EXECUTION TIME:
0.135498
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:42:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * x**2 * (3*r - x))/3
	print(round(V,4))
else:
	V = 4 * pi * r**3/3 - pi * x**2 *(3*r - x)/3
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:44:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * x**2 * (3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3 - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- ERROR:
File "XXXX", line 13
    print(round(V,4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:44:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * x**2 * (3*r - x)/3)
	print(round(V,4))
else:
	V = (4 * pi * r**3/3 - (pi * x**2 *(3*r - x))/3
	print(round(V,4))
-- ERROR:
File "XXXX", line 13
    print(round(V,4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:45:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 * (3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:45:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 * (3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.128807
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:23:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 * (3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 12:23:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 * (3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- EXECUTION TIME:
0.14127
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:49:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 * (3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:50:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = pi * x**2 * (3*r - x)/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:52:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * (x**2) * (3*r - x))/3
	print(round(V,4))
else:
	V = (4 * pi * r**3/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:54:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * (x**2)* (3*r - x))/3
	print(round(V,4))
else:
	V = (4 * pi * (r**3))/3 - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:54:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * (x**2)* (3*r - x))/3
	print(round(V,4))
else:
	V = (4 * pi * (r**3))/3 - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:55:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * (x**2)* (3*r - x))/3
	print(round(V,4))
else:
	V = ((4 * pi * (r**3))/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:55:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
if(opcao == 1):
	V = (pi * (x**2)* (3*r - x))/3
	print(round(V,4))
else:
	V = ((4 * pi * (r**3))/3) - (pi * x**2 *(3*r - x)/3)
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:57:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
J = (pi * x**2 *(3*r - x)/3)
if(opcao == 1):
	V = (pi * (x**2)* (3*r - x))/3
	print(round(V,4))
else:
	V = ((4 * pi * (r**3))/3) - J
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:59:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
J = (pi * x**2 *(3*r - x))/3
A = (4 * pi * (r**3))/3
if(opcao == 1):
	V = J
	print(round(V,4))
else:
	V = A - J
	
	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:00:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
J = (pi * x**2 *(3*r - x))/3
A = (4 * pi * (r**3))/3
if(opcao == 1):
	print(round(J,4))
else:
	V = A - J

	print(round(V,4))
-- EXECUTION TIME:
0.144442
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:00:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
J = (pi * x**2 *(3*r - x))/3
A = (4 * pi * (r**3))/3
if(opcao == 1):
	print(round(J,4))
else:
	V = A - J

	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:01:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
J = (pi * x**2 *(3*r - x))/3
A = (4 * pi * (r**3))/3
if(opcao == 1):
	print(round(J,4))
else:
	V = A - J

	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:01:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
J = (pi * x**2 *(3*r - x))/3
A = (4 * pi * (r**3))/3
if(opcao == 1):
	print(round(J,4))
else:
	V = A - J

	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:02:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio"))
x = float(input("Digite altura"))
opcao = input("1/2?")
J = (pi * (x**2) *(3*r - x))/3 # volume de ar
A = (4 * pi * (r**3))/3 # volume total
if(opcao == 1):
	print(round(J,4))
else:
	V = A - J

	print(round(V,4))
-- EXECUTION TIME:
0.167384
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
Digite raioDigite altura1/2?290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:03:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio: "))
x = float(input("Digite altura: "))
opcao = input("1 ou 2?: ")
J = (pi * (x**2) *(3*r - x))/3 # volume de ar
A = (4 * pi * (r**3))/3 # volume total
if(opcao == 1):
	print(round(J,4))
else:
	V = A - J

	print(round(V,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:04:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r = float(input("Digite raio: "))
x = float(input("Digite altura: "))
opcao = int(input("1 ou 2?: "))
J = (pi * (x**2) *(3*r - x))/3 # volume de ar
A = (4 * pi * (r**3))/3 # volume total
if(opcao == 1):
	print(round(J,4))
else:
	V = A - J

	print(round(V,4))
-- EXECUTION TIME:
0.174539
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
