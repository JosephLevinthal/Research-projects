== TEST (2019-06-05 13:04:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
   npar = 0
	impar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
		if (elemento % 2 == 1):
			impar = impar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    impar = 0
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:04:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
npar = 0
impar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
		if (elemento % 2 == 1):
			impar = impar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:04:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
	npar = 0
	impar = 0
   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
		if (elemento % 2 == 1):
			impar = impar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    for elemento in vet:
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:05:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
	npar = 0
	impar = 0
   # Conta quantidade de elementos pares
for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		
		if (elemento % 2 == 1):
			impar = impar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 16
    if (elemento % 2 == 1):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:05:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
	npar = 0
	impar = 0
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1
		
	if (elemento % 2 == 1):
		impar = impar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 20
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:06:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
	npar = 0
	impar = 0
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1
		
	if (elemento % 2 == 1):
		impar = impar + 1

   # No. de elementos pares
   	print(npar)

   # No. de elementos impares
   	print(impar)

   # No. total de elementos
   	print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 20
    print(npar)
              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:06:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
	npar = 0
	impar = 0
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1
		
	if (elemento % 2 == 1):
		impar = impar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(impar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 20
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:06:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 10):
   # Zera contador de elementos pares
	npar = 0
	impar = 0
   # Conta quantidade de elementos pares
for elemento in vet:
	if (elemento % 2 == 0):
		npar = npar + 1
		
	if (elemento % 2 == 1):
		impar = impar + 1

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(impar)

   # No. total de elementos
print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 29
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:12:12) 
-- CODE:
from numpy import*

vet = array(eval(input("insira o vetor: ")))

npar = 0

while(size(vet)>10):
	for vet in
-- ERROR:
File "XXXX", line 8
    for vet in
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:19:21) 
-- CODE:
from numpy import*

vet = array(eval(input("insira o vetor: ")))

npar = 0

while(size(vet)>10):
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:19:54) 
-- CODE:
from numpy import*

vet = array(eval(input("insira o vetor: ")))

npar = 0

while(size(vet)>10):
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
	print(npar)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:22:17) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>10):
	
	npar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
	print(npar)
	
	print()
	
	print()
	
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:22:50) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>10):
	
	npar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
	print(npar)
	
	print()
	
	print()
	
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:24:57) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>10):
	
	npar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
	print(npar)
	
	print()
	
	print()
	
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:25:18) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>10):
	
	npar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		print(npar)
	
		print()
	
		print()
		
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:27:58) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>10):
	
	npar = 0

	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		print(npar)
		if (vet[i] % 2 != 1):	
		print()
	
		print()
		
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 12
    print()
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:28:14) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>10):
	
	npar = 0

	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		print(npar)
		if (vet[i] % 2 != 1):	
		print(impar)
	
		print()
		
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 12
    print(impar)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:28:45) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>10):
	
	npar = 0

	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		print(npar)
		if (vet[i] % 2 != 1):
			impar = impar + 1
		print(impar)
	
		print()
		
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:29:06) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>elemento):
	
	npar = 0

	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		print(npar)
		if (vet[i] % 2 != 1):
			impar = impar + 1
		print(impar)
	
		print()
		
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:29:22) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)>npar):
	
	npar = 0

	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		print(npar)
		if (vet[i] % 2 != 1):
			impar = impar + 1
		print(impar)
	
		print()
		
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:29:33) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))
while(size(vet)> 0):
	
	npar = 0

	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		print(npar)
		if (vet[i] % 2 != 1):
			impar = impar + 1
		print(impar)
	
		print()
		
	vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:36:14) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 10):
	
	npar = 0

	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
		print(npar)
		if (vet[i] % 2 != 1):
			impar = impar + 1
		print(impar)
	
		
		print()
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:41:08) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > i):
	
	npar = 0

	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
		print(npar)
		if (vet[i] % 2 != 1):
			impar = impar + 1
		print(impar)
	
		
		print()
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:43:06) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 10):
	
	npar = 0

	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
		print(npar)
		if (vet[i] % 2 != 0):
			impar = impar + 1
		print(impar)
	
		
		print()
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:43:35) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 10):
	
	npar = 0

	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
		print(npar)
		if (vet[i] % 2 != 0):
			impar = impar + 1
		print(impar)
	
		
		print(size)
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:49:11) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
npar = 0
impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
print(npar)
		elif (vet[i] % 2 != 0):
			impar = impar + 1
print(impar)
		
		
print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:49:41) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 != 0):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 != 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:50:05) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
			elif (vet[i] % 2 != 0):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 != 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:50:19) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 != 0):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 != 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:50:52) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:50:58) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
			elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:51:12) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
	elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:51:18) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:51:20) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:51:22) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:51:25) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
			elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:51:40) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:52:19) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:52:30) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
	elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:52:34) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		
		
	print(npar)
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 18
    elif (vet[i] % 2 == 1):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:52:58) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
		vet = array(eval(input("segundo vetor: ")))
-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:53:15) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:53:44) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > 0):
	
	npar = 0
	impar = 0
	i = 0
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		elif (vet[i] % 2 == 1):
			impar = impar + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:56:34) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet) > i):
	
	npar = 0
	impar = 0
	i = 0
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		elif (vet[i] % 2 == 1):
			impar = impar + 1
			i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 13:56:48) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0
while(size(vet) > i):
	
	npar = 0
	impar = 0
	i = 0
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		elif (vet[i] % 2 == 1):
			impar = impar + 1
			i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:00:49) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0
while(size(vet) > 0):
	
	npar = 0
	impar = 0
	i = 0
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		elif (vet[i] % 2 == 1):
			impar = impar + 1
			i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:07:04) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0
while(size(vet) > i):
	
	npar = 0
	impar = 0
	i = 0
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		elif (vet[i] % 2 == 1):
			impar = impar + 1
			i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- EXECUTION TIME:
593.569
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:10:54) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(i < size(vet)):
	
	npar = 0
	impar = 0
	i = 0
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:11:12) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))
i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:11:22) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))
i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	
vet = array(eval(input("segundo vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:12:09) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))
vet = array(eval(input("segundo vetor: ")))
i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))
		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:15:06) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))
ve2 = array(eval(input("segundo vetor: ")))
i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

while(i < size(ve2)):
	
	npar = 0
	impar = 0
	
	for elemento in ve2:
		if (ve2[i] % 2 == 0):
			npar = npar + 1
		if (ve2[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(ve2))
		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:16:14) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))
ve2 = array(eval(input("segundo vetor: ")))
i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))


		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:16:59) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))


		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:16:59) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))


		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:16:59) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))


		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:17:03) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))


		
	

-- EXECUTION TIME:
1.4148
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:17:26) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))


		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:18:19) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1
vet = array(eval(input("segundo vetor: ")))
	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))


		
	

-- ERROR:
File "XXXX", line 20
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:19:05) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))

		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:19:43) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))
while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:20:56) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))
i = 0 
while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:21:42) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))
i = 0 
while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

		
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:21:45) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))
i = 0 
while(i < size(vet)):
	
	npar = 0
	impar = 0
	
	for elemento in vet:
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

		
	

-- EXECUTION TIME:
1.35305
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
primeiro vetor: 1
12
13
segundo vetor: 16
1
17
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
primeiro vetor: 8
10
18
segundo vetor: 2
2
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:23:24) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(size(vet)>1):
	
	npar = 0
	impar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 14:23:40) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(size(vet)>1):
	
	npar = 0
	impar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:26:09) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet)>1):
	
	npar = 0
	impar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

	vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
4.3581
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:34:06) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))

i = 0

while(size(vet)>1):
	
	npar = 0
	impar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		if (vet[i] % 2 != 0):
			impar = impar + 1
		i = i + 1

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
632.376
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 14:36:03) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet)>1):
	
	npar = 0
	impar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
618.126
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 12:46:38) 
-- CODE:
from numpy import*


vet = array(eval(input("primeiro vetor: ")))


while(size(vet)>1):
	
	npar = 0
	impar = 0
	
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		

	print(npar)
		
		
	print(impar)
		
		
	print(size(vet))

	vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
1.19483
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 13:28:01) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))

while(size(vet)>1):
		npar = 0
	impar = 0
		for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		
	print(npar)
		
	print(impar)
			
	print(size(vet))

	vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
0.866114
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 6
    impar = 0
            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 13:28:14) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))

while(size(vet)>1):
		npar = 0
	impar = 0
		for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		
	print(npar)
		
	print(impar)
			
	print(size(vet))

	vet = array(eval(input("segundo vetor: ")))

-- ERROR:
File "XXXX", line 6
    impar = 0
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 13:28:14) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))

while(size(vet)>1):
		npar = 0
	impar = 0
		for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		
	print(npar)
		
	print(impar)
			
	print(size(vet))

	vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
0.872814
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 6
    impar = 0
            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 13:28:27) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))

while(size(vet)>1):
		npar = 0
		impar = 0
		for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		
	print(npar)
		
	print(impar)
			
	print(size(vet))

	vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
0.689434
-- ERROR:
  File "/home/codebench/codes/1798/2562/main.py", line 8
    if (vet[i] % 2 == 0):
     ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 13:28:53) 
-- CODE:
from numpy import*
vet = array(eval(input("primeiro vetor: ")))

while(size(vet)>1):
	npar = 0
	impar = 0
	for i in range(size(vet)):
		if (vet[i] % 2 == 0):
			npar = npar + 1
		else:
			impar = impar + 1
		
	print(npar)
		
	print(impar)
			
	print(size(vet))

	vet = array(eval(input("segundo vetor: ")))

-- EXECUTION TIME:
1.11961
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
