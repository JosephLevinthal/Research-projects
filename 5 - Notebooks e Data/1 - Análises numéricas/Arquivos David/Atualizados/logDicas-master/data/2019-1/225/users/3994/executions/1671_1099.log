== TEST (2019-04-19 19:41:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas: A, B, C ")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
		else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
				else:
					print(escaleno)
		
-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:41:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas: A, B, C ")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
				else:
					print(escaleno)
		
-- ERROR:
File "XXXX", line 15
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:41:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas: A, B, C ")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: A, B, C 
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:42:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas: A, B, C ")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: A, B, C 
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:42:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas: ")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: 
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:42:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas:" "A" "B" "C" )
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas:ABC
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 19:43:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas:" "A" "B" "C" )
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- EXECUTION TIME:
0.143721
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:ABC
 isoscles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:ABC
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:ABC
 Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:43:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas:" A,B,C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- ERROR:
File "XXXX", line 6
    print(" Entradas:" A,B,C)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:43:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(" Entradas: A,B,C")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: A,B,C
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:44:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(Entradas: A,B,C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- ERROR:
File "XXXX", line 6
    print(Entradas: A,B,C)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:44:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print(Entradas: "A","B","C")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- ERROR:
File "XXXX", line 6
    print(Entradas: "A","B","C")
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:46:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", "A", "B", "C")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: A B C
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 19:47:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", "A", "B", "C")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- EXECUTION TIME:
0.141714
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: A B C
 isoscles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: A B C
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: A B C
 Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:48:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", "A, B, C")
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: A, B, C
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:49:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 19:49:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- EXECUTION TIME:
0.179377
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
 Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 19:49:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- EXECUTION TIME:
0.13031
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
 Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 19:49:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 10:27:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 10:28:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- EXECUTION TIME:
0.199671
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
 Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 10:28:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")
else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-21 22:22:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C) or (B>=A+C) or (C>=A+B) or (A<0) or (B<0) or (C<0)):
	print(" Tipo de triangulo: invalido ")

else:
	if((B==C) and (C==A)):
		print(" equilatero ")
	else:
			if((A==B) or (B==C) or (C==A)):
				print(" isoscles")
			else:
					print(escaleno)
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
 isoscles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:15:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A<0) and (B<0) and (C<0)):
	print(" Tipo de triangulo: invalido ")

else:
	if((A<=B+C) and (B<=A+C) and (C<=A+B)):
		if((B==C) and (C==A)):
			mensagem = " equilatero "
		else:
			if((A==B) or (B==C) or (C==A)):
				mensagem = " isosceles "
	else:
		mensagem = " escaleno "
	else:
		mensagem = " invalido "
		print(" Tipo de triangulo: ", mensagem)
		
-- ERROR:
File "XXXX", line 19
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:15:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A<0) and (B<0) and (C<0)):
	print(" Tipo de triangulo: invalido ")

else:
	if((A<=B+C) and (B<=A+C) and (C<=A+B)):
		if((B==C) and (C==A)):
			mensagem = " equilatero "
		else:
			if((A==B) or (B==C) or (C==A)):
				mensagem = " isosceles "
	else:
		mensagem = " escaleno "
else:
	mensagem = " invalido "
		print(" Tipo de triangulo: ", mensagem)
		
-- EXECUTION TIME:
0.158195
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 19
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:16:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A<0) and (B<0) and (C<0)):
	print(" Tipo de triangulo: invalido ")

else:
	if((A<=B+C) and (B<=A+C) and (C<=A+B)):
		if((B==C) and (C==A)):
			mensagem = " equilatero "
		else:
			if((A==B) or (B==C) or (C==A)):
				mensagem = " isosceles "
			else:
				mensagem = " escaleno "
	else:
		mensagem = " invalido "
print(" Tipo de triangulo: ", mensagem)
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
 Tipo de triangulo:   isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:19:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A<0) and (B<0) and (C<0)):
	print(" Tipo de triangulo: invalido ")

else:
	if((A>=B+C) or (B>=A+C) or (C>=A+B)):
		mensagem = " invalido "
	else:
		if((B==C) and (C==A)):
			mensagem = " equilatero "
		else:
			if((A==B) or (B==C) or (C==A)):
				mensagem = " isosceles "
			else:
				mensagem = " escaleno "
print(" Tipo de triangulo: ", mensagem)
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
 Tipo de triangulo:   isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:19:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input(" Digite lado 1: "))
B = float(input(" Digite lado 2: "))
C = float(input(" Digite lado 3: "))
print("Entradas:", A, ",", B, ",", C)
if((A<0) and (B<0) and (C<0)):
	print(" Tipo de triangulo: invalido ")

else:
	if((A>=B+C) or (B>=A+C) or (C>=A+B)):
		mensagem = " invalido "
	else:
		if((B==C) and (C==A)):
			mensagem = " equilatero "
		else:
			if((A==B) or (B==C) or (C==A)):
				mensagem = " isosceles "
			else:
				mensagem = " escaleno "
print(" Tipo de triangulo: ", mensagem)
		
-- EXECUTION TIME:
0.131596
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
 Tipo de triangulo:   isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
 Tipo de triangulo:   escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
 Tipo de triangulo:   invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
