== SUBMITION (2019-04-10 13:39:18) 
-- CODE:
a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())
if((a*e)-(b*d) !=0):
	x = ((c*e) - (b*f))/((a*e) - (b*d))
	y = ((a*f) - (c*d))/((a*e) - (b*d))
	print(x,y)
else:
	mensagem = " Nao tem solucao " 


-- EXECUTION TIME:
0.14448
-- TEST CASE 1:
---- input:
10.0
10.0
12.0
10.0
10.0
12.0
---- correct output:
Nao tem solucao
---- user output:

-- TEST CASE 2:
---- input:
1.0
8.0
12.0
16.0
22.0
30.0
---- correct output:
-0.22641509433962265
1.528301886792453
---- user output:
-0.22641509433962265 1.528301886792453
-- TEST CASE 3:
---- input:
24.0
48.0
52.0
112.0
16.0
1.0
---- correct output:
-0.15705128205128205
1.1618589743589745
---- user output:
-0.15705128205128205 1.1618589743589745
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:39:35) 
-- CODE:
a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())
if((a*e)-(b*d) !=0):
	x = ((c*e) - (b*f))/(a*e) - (b*d)
	y = ((a*f) - (c*d))/(a*e) - (b*d)
	print(x,y)
else:
	mensagem = " Nao tem solucao " 


-- EXECUTION TIME:
0.212352
-- TEST CASE 1:
---- input:
10.0
10.0
12.0
10.0
10.0
12.0
---- correct output:
Nao tem solucao
---- user output:

-- TEST CASE 2:
---- input:
1.0
8.0
12.0
16.0
22.0
30.0
---- correct output:
-0.22641509433962265
1.528301886792453
---- user output:
-126.9090909090909 -135.36363636363637
-- TEST CASE 3:
---- input:
24.0
48.0
52.0
112.0
16.0
1.0
---- correct output:
-0.15705128205128205
1.1618589743589745
---- user output:
-5373.958333333333 -5391.104166666667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:39:39) 
-- CODE:
a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())
if((a*e)-(b*d) !=0):
	x = ((c*e) - (b*f))/(a*e) - (b*d)
	y = ((a*f) - (c*d))/(a*e) - (b*d)
	print(x,y)
else:
	mensagem = " Nao tem solucao " 


-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:39:49) 
-- CODE:
a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())
if((a*e)-(b*d) !=0):
	x = ((c*e) - (b*f))/(a*e) - (b*d)
	y = ((a*f) - (c*d))/(a*e) - (b*d)
	print(x,y)
else:
	mensagem = " Nao tem solucao " 


-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:40:11) 
-- CODE:
a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())
if((a*e)-(b*d) !=0):
	x = ((c*e) - (b*f))/(a*e) - (b*d)
	y = ((a*f) - (c*d))/(a*e) - (b*d)
	print(x,y)
else:
	mensagem = " Nao tem solucao " 
	print(mensagem)

-- OUTPUT:
Nao tem solucao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:40:57) 
-- CODE:
a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())
if((a*e)-(b*d) !=0):
	x = ((c*e) - (b*f))/((a*e) - (b*d))
	y = ((a*f) - (c*d))/((a*e) - (b*d))
	print(x,y)
else:
	mensagem = " Nao tem solucao " 
	print(mensagem)

-- OUTPUT:
Nao tem solucao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:40:58) 
-- CODE:
a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())
if((a*e)-(b*d) !=0):
	x = ((c*e) - (b*f))/((a*e) - (b*d))
	y = ((a*f) - (c*d))/((a*e) - (b*d))
	print(x,y)
else:
	mensagem = " Nao tem solucao " 
	print(mensagem)

-- EXECUTION TIME:
0.162431
-- TEST CASE 1:
---- input:
10.0
10.0
12.0
10.0
10.0
12.0
---- correct output:
Nao tem solucao
---- user output:
Nao tem solucao
-- TEST CASE 2:
---- input:
1.0
8.0
12.0
16.0
22.0
30.0
---- correct output:
-0.22641509433962265
1.528301886792453
---- user output:
-0.22641509433962265 1.528301886792453
-- TEST CASE 3:
---- input:
24.0
48.0
52.0
112.0
16.0
1.0
---- correct output:
-0.15705128205128205
1.1618589743589745
---- user output:
-0.15705128205128205 1.1618589743589745
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
