== TEST (2019-04-01 14:32:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:50:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto= SUPERMAN
print(texto.lower())

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    texto= SUPERMAN
NameError: name 'SUPERMAN' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:50:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto= SUPERMAN
print(texto.lower())

-- EXECUTION TIME:
0.146291
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1570/main.py", line 4, in <module>
    texto= SUPERMAN
NameError: name 'SUPERMAN' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:50:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto=
"SUPERMAN"
print(texto.lower())

-- ERROR:
File "XXXX", line 4
    texto=
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:50:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto=
"SUPERMAN"
print(texto.lower())

-- EXECUTION TIME:
0.149797
-- ERROR:
  File "/home/codebench/codes/1590/1570/main.py", line 4
    texto=
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:51:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.253644
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:51:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:51:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.110614
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:52:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.161569
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.311268
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.133054
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.173598
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.183227
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:52:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:52:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.115415
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.123864
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:52:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:52:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower(texto))

-- EXECUTION TIME:
0.187677
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1570/main.py", line 5, in <module>
    print(texto.lower(texto))
TypeError: lower() takes no arguments (1 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:52:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower(texto))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(texto.lower(texto))
TypeError: lower() takes no arguments (1 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:53:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print("texto".lower())

-- EXECUTION TIME:
0.203367
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
texto
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:53:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print("texto".lower())

-- OUTPUT:
texto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:53:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.126216
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:53:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:53:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto="Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.153393
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:53:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.14732
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:53:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())

-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:53:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.136124
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:53:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())

-- EXECUTION TIME:
0.144387
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:54:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())
-- EXECUTION TIME:
0.143819
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:54:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:54:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:54:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())
-- EXECUTION TIME:
0.114579
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:54:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:54:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:55:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto.lower())
-- EXECUTION TIME:
0.148116
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:55:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto .lower())
-- EXECUTION TIME:
0.182227
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:55:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto .lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:55:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto = "Estou Aprendendo Python"
print(texto .lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:58:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:58:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.12501
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:58:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 14:58:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- OUTPUT:
estou aprendendo python
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:58:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.148671
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:59:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.165315
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:59:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.176486
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:59:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.179971
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:59:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.124976
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:59:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.121549
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 14:59:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase = "Estou Aprendendo Python"
print(frase.lower())
-- EXECUTION TIME:
0.121017
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
estou aprendendo python
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:17:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input=( "Estou Aprendendo Python")
print(frase.lower())
-- EXECUTION TIME:
0.169449
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1570/main.py", line 5, in <module>
    print(frase.lower())
NameError: name 'frase' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:17:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto= input=( "Estou Aprendendo Python")
print(frase.lower())
-- EXECUTION TIME:
0.135024
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1570/main.py", line 5, in <module>
    print(frase.lower())
NameError: name 'frase' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 15:17:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto= input( "Estou Aprendendo Python")
print(frase.lower())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(frase.lower())
NameError: name 'frase' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:17:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
texto= input( "Estou Aprendendo Python")
print(frase.lower())
-- EXECUTION TIME:
0.121205
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/1570/main.py", line 5, in <module>
    print(frase.lower())
NameError: name 'frase' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-03 15:17:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
frase= input( "Estou Aprendendo Python")
print(frase.lower())
-- EXECUTION TIME:
0.143769
-- TEST CASE 1:
---- input:
PRIMEIRO_CASO_DE_TESTE
---- correct output:
primeiro_caso_de_teste
---- user output:
primeiro_caso_de_teste
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
