== TEST (2019-04-15 13:10:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a= radians float(input("a:"))
d = float(("distancia: "))

g= 9.8
r= ((vo**2)*sin(2*a))/g

if(r<d):
	print("sim")
else:
	print("nao")


-- ERROR:
File "XXXX", line 6
    a= radians float(input())
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:11:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(("distancia: "))

g= 9.8
r= ((vo**2)*sin(2*a))/g

if(r<d):
	print("sim")
else:
	print("nao")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    d = float(("distancia: "))
ValueError: could not convert string to float: 'distancia: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:11:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(("distancia: "))

g= 9.8
r= ((vo**2)*sin(2*a))/g

if(r<d):
	print("sim")
else:
	print("nao")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    d = float(("distancia: "))
ValueError: could not convert string to float: 'distancia: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:12:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(("distancia: "))

g= 9.8
r= ((vo**2)*sin(2*a))/g

if(d>=r):
	print("sim")
else:
	print("nao")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    d = float(("distancia: "))
ValueError: could not convert string to float: 'distancia: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:13:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = ("distancia: ")

g= 9.8
r= ((vo**2)*sin(2*a))/g

if(d>=r):
	print("sim")
else:
	print("nao")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    if(d>=r):
TypeError: '>=' not supported between instances of 'str' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:14:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = input("distancia:")
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(d>=r):
	print("sim")
else:
	print("nao")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if(d>=r):
TypeError: '>=' not supported between instances of 'str' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:14:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(d>=r):
	print("sim")
else:
	print("nao")


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:15:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(d>=r):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.283758
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:15:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(r>=d):
	print("sim")
else:
	print("nao")


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:15:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(r>=d):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.19718
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:15:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(r>=d):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.192787
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:15:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(r>=d):
	print("sim")
else:
	print("nao")


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:15:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(r>=d):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.18466
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:16:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(r>=d):
	print("sim")
else:
	print("nao")


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:19:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d = float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(r>=d):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.198187
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:24:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d =float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(abs(d-r)<=0.1):
	print("sim")
else:
	print("nao")


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:25:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d =float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(abs(d-r)<=0.1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.319502
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:25:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d =float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(abs(d-r)<0.1):
	print("sim")
else:
	print("nao")


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:25:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d =float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(abs(d-r)<0.1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.175914
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:26:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d =float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(abs(d-r)<=0.1):
	print("sim")
else:
	print("nao")


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:26:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=float(input("a:"))
d =float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(abs(d-r)<=0.1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.178679
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:26:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
vo= float(input("vo:"))
a=radians(float(input("a:")))
d =float(input("distancia:"))
g= 9.8
r= ((vo**2)*sin(2*a))/g
if(abs(d-r)<=0.1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.171536
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
