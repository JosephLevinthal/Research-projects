== TEST (2019-04-06 11:55:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float (input("numero de y"))
reta = 2 * x + y == 3
if 
-- ERROR:
File "XXXX", line 7
    if 
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 11:55:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float (input("numero de y"))
reta = 2 * x + y == 3

-- ERROR:
File "XXXX", line 7
    if 
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 11:57:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float (input("numero de y"))
reta = 2 * x + y == 3
if ( x,y == 1):
	mensagem = ponto pertence a reta
else :
	mensagem = ponto nao pertence a reta
print(mensagem)
-- ERROR:
File "XXXX", line 8
    mensagem = ponto pertence a reta
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 11:58:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float (input("numero de y"))
reta = 2 * x + y == 3
if ( x,y == 1):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 11:58:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float (input("numero de y"))
reta = 2 * x + y == 3
if ( x,y == 1):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- EXECUTION TIME:
0.116723
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 11:58:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float (input("numero de y"))
if ( x,y == 1):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 11:58:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float(input("numero de y"))
if ( x,y == 1):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 11:59:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float(input("numero de y"))
if ( x,y == 1):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- EXECUTION TIME:
0.121415
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 11:59:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x"))
y = float(input("numero de y"))
if ( x,y == 1):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- EXECUTION TIME:
0.11524
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 12:02:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if ( x,y == 1):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 12:02:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if ( x,y == 1.0):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- EXECUTION TIME:
0.131482
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 12:02:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if ( x,y == 1.0):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- EXECUTION TIME:
0.190661
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 12:02:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if ( x,y == 1.0):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- EXECUTION TIME:
0.10667
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
numero de x: numero de y: ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
numero de x: numero de y: ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 12:02:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if ( x,y == 1.0):
	mensagem = ("ponto pertence a reta")
else :
	mensagem = ("ponto nao pertence a reta")
print(mensagem)
-- EXECUTION TIME:
0.093699
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:22:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if (1 == 2x + y )
a = pertence a reta
else :
	a = nao pertence a reta

-- ERROR:
File "XXXX", line 6
    if (1 == 2x + y )
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:23:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if 
a = pertence a reta
else :
	a = nao pertence a reta

-- ERROR:
File "XXXX", line 6
    if 
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:26:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  (2*x)==3
	a = ponto pertence a reta
else :
	a = ponto nao pertence a reta
print(a)
-- ERROR:
File "XXXX", line 6
    if  (2*x)==3
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:26:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  (2*x)==3 :
	a = ponto pertence a reta
else :
	a = ponto nao pertence a reta
print(a)
-- ERROR:
File "XXXX", line 7
    a = ponto pertence a reta
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:26:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)==3) :
	a = ponto pertence a reta
else :
	a = ponto nao pertence a reta
print(a)
-- ERROR:
File "XXXX", line 7
    a = ponto pertence a reta
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:26:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)==3) :
	mensagem = ponto pertence a reta
else :
	mensagem= ponto nao pertence a reta
print(mensagem)
-- ERROR:
File "XXXX", line 7
    mensagem = ponto pertence a reta
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:27:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:27:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)+==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- ERROR:
File "XXXX", line 6
    if  ((2*x)+==3) :
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:27:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)+ ==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- ERROR:
File "XXXX", line 6
    if  ((2*x)+ ==3) :
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:28:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)+==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- ERROR:
File "XXXX", line 6
    if  ((2*x)+==3) :
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:28:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x) + ==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- ERROR:
File "XXXX", line 6
    if  ((2*x) + ==3) :
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:28:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x) + ==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- ERROR:
File "XXXX", line 6
    if  ((2*x) + ==3) :
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:28:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)+1==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:28:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)+1==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- EXECUTION TIME:
0.192411
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:29:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)+y==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 13:29:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("numero de x: "))
y = float(input("numero de y: "))
if  ((2*x)+y==3) :
	mensagem = "ponto pertence a reta"
else :
	mensagem = "ponto nao pertence a reta"
print(mensagem)
-- EXECUTION TIME:
0.201108
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
