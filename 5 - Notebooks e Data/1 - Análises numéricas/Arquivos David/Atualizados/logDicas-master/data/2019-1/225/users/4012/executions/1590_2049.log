== TEST (2019-03-20 15:43:30) 
-- CODE:
input(int(17 / 2))
print(17)
print(2)
print(8)
print(1)
-- OUTPUT:
817
2
8
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:43:35) 
-- CODE:
input(int(17 / 2))
print(17)
print(2)
print(8)
print(1)
-- OUTPUT:
817
2
8
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:45:10) 
-- CODE:
input(int(17 / 2))
print(input(17))
print(input(2))
print(input(8))
print(17 % 2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(input(2))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:45:10) 
-- CODE:
input(int(17 / 2))
print(input(17))
print(input(2))
print(input(8))
print(17 % 2)
-- EXECUTION TIME:
0.136854
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 3, in <module>
    print(input(2))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:45:13) 
-- CODE:
input(int(17 / 2))
print(input(17))
print(input(2))
print(input(8))
print(17 % 2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(input(2))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:39:50) 
-- CODE:
dividendo = float(input("X: "))
divisor = float(input("y: "))
quociente = x // y 
resto = x % y 
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    quociente = x // y 
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:40:57) 
-- CODE:
dividendo = float(input("X: "))
divisor = float(input("y: "))
quociente = dividendo // divisor 
resto = dividendo % divisor 
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:41:23) 
-- CODE:
dividendo = float(input("X: "))
divisor = float(input("y: "))
quociente = dividendo // divisor 
resto = dividendo % divisor 
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.301986
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:41:32) 
-- CODE:
dividendo = float(input("X: "))
divisor = float(input("y: "))
quociente = dividendo // divisor 
resto = dividendo % divisor 
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:41:39) 
-- CODE:
dividendo = float(input("X: "))
divisor = float(input("y: "))
quociente = dividendo // divisor 
resto = dividendo % divisor 
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.168398
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:42:13) 
-- CODE:
dividendo = int(input("X: "))
divisor = int(input("y: "))
quociente = dividendo // divisor 
resto = dividendo % divisor 
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:42:22) 
-- CODE:
dividendo = int(input("X: "))
divisor = int(input("y: "))
quociente = dividendo // divisor 
resto = dividendo % divisor 
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.150568
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
