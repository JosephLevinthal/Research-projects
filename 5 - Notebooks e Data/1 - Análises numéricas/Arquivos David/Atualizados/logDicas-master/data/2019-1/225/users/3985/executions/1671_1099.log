== SUBMITION (2019-04-22 14:43:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
else (c+x<=f) or (x+f<=c) or (c+f<=x)
	print("invalido")
-- EXECUTION TIME:
0.194404
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else (c+x<=f) or (x+f<=c) or (c+f<=x)
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:44:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
else (c+x<=f) or (x+f<=c) or (c+f<=x)
	print("invalido")
-- ERROR:
File "XXXX", line 12
    else (c+x<=f) or (x+f<=c) or (c+f<=x)
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:45:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
elif (c+x<=f) or (x+f<=c) or (c+f<=x)
	print("invalido")
-- ERROR:
File "XXXX", line 12
    elif (c+x<=f) or (x+f<=c) or (c+f<=x)
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:45:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
else (c+x=<f) or (x+f=<c) or (c+f=<x)
	print("invalido")
-- ERROR:
File "XXXX", line 12
    else (c+x=<f) or (x+f=<c) or (c+f=<x)
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:45:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
else (f>=c+x) or (c>=x+f) or (x>=c+f):
	print("invalido")
-- ERROR:
File "XXXX", line 12
    else (f>=c+x) or (c>=x+f) or (x>=c+f):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:46:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
else (f>=c+x) or (c>=x+f) or (x>=c+f):
	print("invalido")
-- EXECUTION TIME:
0.168333
-- ERROR:
  File "/home/codebench/codes/1671/1099/main.py", line 12
    else (f>=c+x) or (c>=x+f) or (x>=c+f):
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:46:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
else (f>=c+x) or (c>=x+f) or (x>=c+f):
	print("invalido")
-- ERROR:
File "XXXX", line 12
    else (f>=c+x) or (c>=x+f) or (x>=c+f):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:46:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:46:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("invalido")
-- EXECUTION TIME:
0.165104
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:46:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("isosceles")
elif (c != x) and (x != f) and (c != f):
	print("escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("invalido")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:49:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("Entradas: " a ", " b "," c ",")
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print("Entradas: " a ", " b "," c ",")
	print ("Tipo de triangulo: isosceles")
elif (c != x) and (x != f) and (c != f):
	print("Entradas: " a ", " b "," c ",")
	print("Tipo de triangulo: escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Entradas: " a ", " b "," c ",")
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: " a ", " b "," c ",")
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:50:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("Entradas: " c ", " x "," f ",")
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print("Entradas: " c ", " x "," f ",")
	print ("Tipo de triangulo: isosceles")
elif (c != x) and (x != f) and (c != f):
	print("Entradas: " c ", " x "," f ",")
	print("Tipo de triangulo: escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Entradas: " c ", " x "," f ",")
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: " c ", " x "," f ",")
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:55:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print ("Tipo de triangulo: isosceles")
elif (c != x) and (x != f) and (c != f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 14:55:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print ("Tipo de triangulo: isosceles")
elif (c != x) and (x != f) and (c != f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.171535
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:56:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if (c==x) and (x==f) and (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print ("Tipo de triangulo: isosceles")
elif (c != x) and (x != f) and (c != f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: escaleno")
elif(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 14:59:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())
if(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: invalido")
if (c==x) and (x==f) and (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print("Entradas: ", c ,", " ,x, ",",f)
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")
	
-- OUTPUT:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:00:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())

print("Entradas: ", c ,", " ,x, ",",f)
if(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Tipo de triangulo: invalido")
if (c==x) and (x==f) and (c==f):
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")
	
-- OUTPUT:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:01:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())

print("Entradas: ", c ,", " ,x, ",",f)
if(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Tipo de triangulo: invalido")
if (c==x) and (x==f):
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")
	
-- OUTPUT:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 15:01:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())

print("Entradas: ", c ,", " ,x, ",",f)
if(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Tipo de triangulo: invalido")
elif (c==x) and (x==f):
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")
	
-- OUTPUT:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 15:02:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
c= float(input())
x= float(input())
f= float(input())

print("Entradas: ", c ,", " ,x, ",",f)
if(f>=c+x) or (c>=x+f) or (x>=c+f):
	print("Tipo de triangulo: invalido")
elif (c==x) and (x==f):
	print("Tipo de triangulo: equilatero")
elif (c==x) or (x==f) or (c==f):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")
	
-- EXECUTION TIME:
0.176524
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 ,  4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 ,  4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 ,  2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
