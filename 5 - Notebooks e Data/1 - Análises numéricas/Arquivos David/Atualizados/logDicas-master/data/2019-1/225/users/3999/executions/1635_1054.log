== TEST (2019-04-08 12:50:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
if(2*x+y=3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- ERROR:
File "XXXX", line 6
    if(2*x+y=3):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:51:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
if((2*x)+y=3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- ERROR:
File "XXXX", line 6
    if((2*x)+y=3):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:51:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
  if((2*x)+y=3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- ERROR:
File "XXXX", line 6
    if((2*x)+y=3):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:51:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
if((2*x)+y=3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- ERROR:
File "XXXX", line 6
    if((2*x)+y=3):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 12:51:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
if((2*x)+y==3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 12:51:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
if((2*x)+y==3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- EXECUTION TIME:
0.162104
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
if((2*x)+y==3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 13:25:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("ponto X:"))
y=float(input("ponto Y:"))
if((2*x)+y==3):
	mensagem= "ponto pertence a reta"
else:
	mensagem="ponto nao pertence a reta"
print(mensagem)	
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
