== TEST (2019-04-08 14:21:26) 
-- CODE:
num = int(30)
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:23:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:23:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:23:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 9
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:23:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:23:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.197569
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:23:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:24:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:24:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:24:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:24:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:24:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.12313
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
par
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:24:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:24:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (input(3 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (input(3 % 2 == 0):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:25:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (50 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:25:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("60 ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:25:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("60")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.149429
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:25:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("60")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:26:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:26:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.122926
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
par
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:26:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (4 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (2 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (2 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:27:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (2 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.214447
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
par
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (2 % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
par
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:27:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:28:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:28:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.14542
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:28:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:28:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:28:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("4")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:28:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int("15"))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:28:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int("15"))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.11911
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:28:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int("15"))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(15))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(15))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(15))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(15))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(15))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(15))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(30))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:30:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(30))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.213479
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:30:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int(30))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:34:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("30: ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:34:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("30: ")

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.177744
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1635/2442/main.py", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:35:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else (num % 2 != 0):
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 9
    else (num % 2 != 0):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:36:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:37:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input(int())

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:38:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
30impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:38:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
30impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:38:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.152272
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
30par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:38:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
30impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:40:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
2impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:40:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.150718
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
2impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
2par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:46:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

	print(mensagem)

-- OUTPUT:
2impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:46:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

	print(mensagem)

-- EXECUTION TIME:
0.159408
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
2impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:46:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

	print(mensagem)

-- OUTPUT:
2impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:46:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:47:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número": ))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- ERROR:
File "XXXX", line 5
    num = int(input("digite um número": ))
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:48:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:48:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:48:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:48:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:48:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:48:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:48:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:49:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print("mensagem")

-- OUTPUT:
mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:49:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:49:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.162488
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:49:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.129257
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:49:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:49:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um número"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
30mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
30mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.219083
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
30mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.15057
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
30mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.120373
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
30mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.104991
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
30mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
30mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.182347
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1635/2442/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.195292
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
30mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.215491
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
30mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
30mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (45 % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
30mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(30))

if (45 % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.132188
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
30mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
30mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45)

if (45 % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- ERROR:
File "XXXX", line 7
    if (45 % 2 == 0):
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45))

if (45 % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
45mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:50:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45))

if (45 % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- EXECUTION TIME:
0.142386
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
45mensagem
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
45mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:50:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45))

if (45 % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
45mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:51:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print ("mensagem")

-- OUTPUT:
45mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:51:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
45impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:51:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- EXECUTION TIME:
0.151331
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
45impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
45par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:51:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(45))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
45impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:54:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:54:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 14:54:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- EXECUTION TIME:
0.132504
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:54:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:57:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:57:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:57:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:57:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:57:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:57:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:57:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if (num % 2 == 0):
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:58:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 14:58:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:00:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:01:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:01:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:01:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:01:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:01:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

	num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- ERROR:
File "XXXX", line 5
    num = int(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:01:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:02:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite um numero:"))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:03:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
2impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:03:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
2impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:03:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
2impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:03:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagme")
print (mensagem)

-- OUTPUT:
2mensagme
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:04:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagem")
print (mensagem)

-- OUTPUT:
2mensagem
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:04:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagem")
print (mensagem)

-- OUTPUT:
2mensagem
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:04:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagem")
	print (mensagem)

-- OUTPUT:
2mensagem
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:04:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagem")
	print (mensagem)

-- OUTPUT:
2mensagem
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:04:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagem")
	print (mensagem)

-- EXECUTION TIME:
0.13944
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
2mensagem
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
2mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:04:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagem")
	print (mensagem)

-- EXECUTION TIME:
0.162095
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
2mensagem
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
2mensagem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:04:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
	print ("mensagem")
else :
	mensagem = "impar"
	print ("mensagem")
	print (mensagem)

-- OUTPUT:
2mensagem
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:04:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
2impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:04:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- EXECUTION TIME:
0.1272
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
2impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
2par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:06:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if ("num" % 2 == 0:)
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- ERROR:
File "XXXX", line 7
    if ("num" % 2 == 0:)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:06:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(2))

if (num % 2 == 0:)
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0:)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:07:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if (num % 2 == 0:)
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0:)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:07:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
5impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:07:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if 5 % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
5impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:07:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if 5 % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
5impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 15:07:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if 5 % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- EXECUTION TIME:
0.127939
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
5impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
5impar
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:07:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if 5 % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
5impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:46:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if 5 % 2 1= 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- ERROR:
File "XXXX", line 7
    if 5 % 2 1= 0:
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 15:46:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input( 5))

if 5 % 2 1 != 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- ERROR:
File "XXXX", line 7
    if 5 % 2 1 != 0:
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:31:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input(digite o numero:))

if 5 % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- ERROR:
File "XXXX", line 5
    num = int(input(digite o numero:))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:33:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite o numero: "))

if 5 % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 13:35:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite o numero: "))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 13:35:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("digite o numero: "))

if num % 2 == 0:
	mensagem = "par"
else :
	mensagem = "impar"

print (mensagem)

-- EXECUTION TIME:
0.179827
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
