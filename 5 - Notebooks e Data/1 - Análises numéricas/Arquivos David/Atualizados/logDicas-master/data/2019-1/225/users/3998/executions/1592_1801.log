== TEST (2019-04-13 16:57:14) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
print (Abra + texto * v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print (Abra + texto * v)
NameError: name 'Abra' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 16:57:50) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
print (bra + texto * v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print (bra + texto * v)
NameError: name 'bra' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:02:19) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
print ("Abra" + texto * v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print ("Abra" + texto * v)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:02:50) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
print ( texto * v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print ( texto * v)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:12:47) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
print ("va:",texto )
-- OUTPUT:
va: livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:13:21) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
print ("va:",texto )
-- OUTPUT:
va: livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:21:26) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
print ("va",texto * v )
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print ("va",texto * v )
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:22:13) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
print ("va",texto)
-- OUTPUT:
va livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:22:49) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
print (va,texto)
-- OUTPUT:
Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:24:05) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
print (va,(texto * v))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print (va,(texto * v))
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 17:25:16) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
l = texto * v
print (va,l)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    l = texto * v
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:49:37) 
-- CODE:
texto = input("digite algo: ")
1 = input("repeticao: ")
va = "Abra"
l = texto * 1
print (va,l)
-- ERROR:
File "XXXX", line 2
    1 = input()
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:50:50) 
-- CODE:
texto = input("digite algo: ")
v = input("repeticao: ")
va = "Abra"
l = (texto * v)
print (va,l)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    l = (texto * v)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:53:17) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
va = "Abra"
l = (texto * v)
print (va,l)
-- OUTPUT:
Abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:53:22) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
va = "Abra"
l = (texto * v)
print (va,l)
-- OUTPUT:
Abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:53:41) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
va = "Abra"
l = (texto * v)
print (va,l)
-- OUTPUT:
Abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:53:41) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
va = "Abra"
l = (texto * v)
print (va,l)
-- OUTPUT:
Abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:02:17) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
va = "Abra"
l = (texto * v)
print (va,l)
-- OUTPUT:
Abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 15:35:00) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
print (("Abra"+ texto+" ")*v)
-- EXECUTION TIME:
0.218909
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
digite algo: repeticao: Abracarro Abracarro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
digite algo: repeticao: Abracaixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:35:02) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
print (("Abra"+ texto+" ")*v)
-- OUTPUT:
Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:35:54) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
print (("Abra"+ texto+" ")*v)
-- OUTPUT:
Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:41:39) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
print (("Abra"+ texto+" ")*v)
-- OUTPUT:
Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro Abralivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 15:44:21) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
print (("Abra "+ texto+" ")*v)
-- OUTPUT:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 15:44:50) 
-- CODE:
texto = input("digite algo: ")
v = int(input("repeticao: "))
print (("Abra "+ texto+" ")*v)
-- EXECUTION TIME:
0.176547
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carro Abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
