== TEST (2019-04-10 14:42:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8
from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(R - dist) :
	print("sim")
	
else :
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 16:31:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8
from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(R - dist) :
	print("sim")
	
else :
	print("nao")
-- EXECUTION TIME:
0.124032
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 00:51:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8
from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(R - dist) :
	print("sim")
	
else :
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 00:52:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8
from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(R - dist) :
	print("nao")
	
else :
	print("sim")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 00:52:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8
from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(R - dist) :
	print("nao")
	
else :
	print("sim")
-- EXECUTION TIME:
0.145355
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 00:53:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8
from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(dist - R) :
	print("nao")
	
else :
	print("sim")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 00:53:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8
from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(dist - R) :
	print("nao")
	
else :
	print("sim")
-- EXECUTION TIME:
0.137504
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:01:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8

from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(dist - R) :
	print("nao")
	
else :
	print("sim")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:01:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8

from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(dist - R) :
	print("nao")
	
else :
	print("sim")
-- EXECUTION TIME:
0.155819
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:01:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8

from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(dist - R) :
	print("sim")
	
else :
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:02:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8

from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(dist - R) <= 1 :
	print("sim")
	
else :
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 19:02:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0= float(input(" velocidade inicial: "))
ang=float(input("angulo alpha :"))
dist=float(input("distancia horizontal :"))
g=9.8

from math import *

R= (v0 ** 2) * sin (2 ** radians(ang)) / g

if abs(dist - R) <= 1 :
	print("sim")
	
else :
	print("nao")
-- EXECUTION TIME:
0.142958
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
