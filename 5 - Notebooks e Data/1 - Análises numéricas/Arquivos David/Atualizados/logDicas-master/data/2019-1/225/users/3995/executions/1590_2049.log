== TEST (2019-03-20 15:33:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2, var1%var2)

-- OUTPUT:
1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:33:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2, var1%var2)

-- OUTPUT:
1.0 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:33:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2, var1%var2)

-- EXECUTION TIME:
0.124119
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1.0 3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7.0 0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173.0 1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:35:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2)
print(var1%var2)

-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:36:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2)
print(var1%var2)

-- EXECUTION TIME:
0.273622
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:36:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2)
print(var1%var2)

-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:37:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2)
print(var1%var2)
print(input)
-- OUTPUT:
1.0
3.0
<built-in function input>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:38:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2)
print(var1%var2)
print(input)
-- EXECUTION TIME:
0.173836
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1.0
3.0
<built-in function input>
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7.0
0.0
<built-in function input>
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173.0
1.0
<built-in function input>
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:38:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo")))
var2=float(int(input("Divisor")))
total=input
print(var1//var2)
print(var1%var2)
print(input)
-- OUTPUT:
1.0
3.0
<built-in function input>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:39:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input

print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:39:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input

print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.113513
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:42:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input

print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:42:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input

print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:42:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input

print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.183779
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:42:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input

print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:43:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(Dividendo)
NameError: name 'Dividendo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:44:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
dividendo=var1
divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(Dividendo)
NameError: name 'Dividendo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:44:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
dividendo=var1
divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.19569
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 9, in <module>
    print(Dividendo)
NameError: name 'Dividendo' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:44:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
dividendo=var1
divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(Dividendo)
NameError: name 'Dividendo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:44:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:44:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.166032
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:44:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:45:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:45:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.208023
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:45:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("Dividendo"))) # Dividendo
var2=float(int(input("Divisor"))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:46:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("X="))) # Dividendo
var2=float(int(input("Y="))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:46:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("X="))) # Dividendo
var2=float(int(input("Y="))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.226556
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:46:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("X="))) # Dividendo
var2=float(int(input("Y="))) #Divisor
total=input
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:49:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("X="))) # Dividendo
var2=float(int(input("Y="))) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:49:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("X="))) # Dividendo
var2=float(int(input("Y="))) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.172603
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:49:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=float(int(input("X="))) # Dividendo
var2=float(int(input("Y="))) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:50:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("X="))) # Dividendo
var2=int(input("Y="))) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- ERROR:
File "XXXX", line 4
    var1=int(input())) # Dividendo
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-20 15:50:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("X=")) # Dividendo
var2=int(input("Y=")) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-20 15:50:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("X=")) # Dividendo
var2=int(input("Y=")) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.151524
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:39:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("X=")) # Dividendo
var2=int(input("Y=")) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 14:49:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("X=")) # Dividendo
var2=int(input("Y=")) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 14:50:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("X=")) # Dividendo
var2=int(input("Y=")) #Divisor
Dividendo=var1
Divisor=var2
print(Dividendo)
print(Divisor)
print(var1//var2) #quociente
print(var1%var2) #resto

-- EXECUTION TIME:
0.156561
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
