== SUBMITION (2019-03-25 23:05:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float (input( "dividendo:"))
y = float (input( "divisor:"))
quociente = x // y
resto= x % y
print(x)
-- EXECUTION TIME:
0.13965
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:06:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float (input( "dividendo:"))
y = float (input( "divisor:"))
quociente = x // y
resto= x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.159507
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:06:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float (input( "dividendo:"))
y = float (input( "divisor:"))
quociente = x // y
resto= x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.159276
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:07:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float (input( "dividendo:"))
y = float (input( "divisor:"))
quociente = x // y
resto = x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.133947
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:07:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float (input( "dividendo: "))
y = float (input( "divisor: "))
quociente = x // y
resto = x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.135934
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:09:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input( "dividendo:")
y = input( "divisor:")
quociente = x // y
resto = x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.127025
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    quociente = x // y
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:09:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input( "dividendo:")
y = input( "divisor:")
quociente = x // y
resto = x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.183992
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    quociente = x // y
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:09:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input( "dividendo: ")
y = input( "divisor: ")
quociente = x // y
resto = x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.135812
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    quociente = x // y
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:11:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = input( "dividendo:")
y = input( "divisor:")
quociente = x // y
resto = x % y
print(x)
print(y)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.138245
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    quociente = x // y
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:12:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = input( "dividendo:")
divisor = input( "divisor:")
quociente = dividendo// divisor
resto = dividendo % divisor
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.136686
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    quociente = dividendo// divisor
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:12:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = input( "dividendo:")
divisor = input( "divisor:")
quociente = dividendo// divisor
resto = dividendo % divisor
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.175247
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 6, in <module>
    quociente = dividendo// divisor
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 23:14:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dividendo = int(input( "dividendo:"))
divisor = int(input( "divisor:"))
quociente = dividendo // divisor
resto = dividendo % divisor
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.13265
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
