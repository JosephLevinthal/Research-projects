== TEST (2019-03-25 15:03:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(float("dividendo"))
var2 input(float("divisor"))


-- ERROR:
File "XXXX", line 5
    var2 input(float("divisor"))
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:03:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(float("dividendo"))
var2 = input(float("divisor"))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = input(float("dividendo"))
ValueError: could not convert string to float: 'dividendo'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:03:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(float("dividendo "))
var2 = input(float("divisor "))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = input(float("dividendo "))
ValueError: could not convert string to float: 'dividendo '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:06:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = input(float("dividendo "))
var2 = input(float("divisor "))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1 = input(float("dividendo "))
ValueError: could not convert string to float: 'dividendo '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:06:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = input(float(dividendo ))
var2 = input(float(divisor))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float(dividendo ))
NameError: name 'dividendo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:06:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = input(float("dividendo "))
var2 = input(float("divisor "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float("dividendo "))
ValueError: could not convert string to float: 'dividendo '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:06:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = input(float("dividendo "))
var2 = input(float("divisor "))
-- EXECUTION TIME:
0.126906
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 5, in <module>
    var1 = input(float("dividendo "))
ValueError: could not convert string to float: 'dividendo '

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:07:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = input(float("X(dividendo) "))
var2 = input(float("Y(divisor) "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float("X(dividendo) "))
ValueError: could not convert string to float: 'X(dividendo) '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:07:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = input(float("X (dividendo) "))
var2 = input(float("Y (divisor) "))
-- EXECUTION TIME:
0.153765
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1590/2049/main.py", line 5, in <module>
    var1 = input(float("X (dividendo) "))
ValueError: could not convert string to float: 'X (dividendo) '

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:07:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = input(float("X (dividendo) "))
var2 = input(float("Y (divisor) "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float("X (dividendo) "))
ValueError: could not convert string to float: 'X (dividendo) '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:08:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = input(float("X"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float("X"))
ValueError: could not convert string to float: 'X'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:11:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float("X"))
ValueError: could not convert string to float: 'X'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float("X"))
ValueError: could not convert string to float: 'X'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:12:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    var1 = input(float("X"))
ValueError: could not convert string to float: 'X'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:17:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var%var2

print(var1)
print(var2)
print(var3)
print(var4)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    var4 = var%var2
NameError: name 'var' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:17:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(var3)
print(var4)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:17:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(var3)
print(var4)
-- EXECUTION TIME:
0.216273
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:17:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(var3)
print(var4)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(var3)
print(var4)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:18:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(var3)
print(var4)
-- EXECUTION TIME:
0.125341
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(var3)
print(var4)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:18:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(int(var3))
print(var4)
-- EXECUTION TIME:
0.135901
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
X Y 347
2
173
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 15:18:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(int(var3))
print(var4)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 15:18:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var1 = int(input("X ")) #dividendo
var2 = int(input("Y ")) #divisor
var3 = var1/var2
var4 = var1%var2

print(var1)
print(var2)
print(int(var3))
print(var4)
-- EXECUTION TIME:
0.132443
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
