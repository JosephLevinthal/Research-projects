== TEST (2019-05-13 21:48:37) 
-- CODE:
num = int(input("N° de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (=1)**(cont+1) * 4. / den
	cont = cont + 1
print(round(Ap, 6))
-- ERROR:
File "XXXX", line 7
    Ap = Ap + (=1)**(cont+1) * 4. / den
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:49:54) 
-- CODE:
num = int(input("N° de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (=1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- ERROR:
File "XXXX", line 7
    Ap = Ap + (=1)**(cont+1) * 4 / den
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:50:30) 
-- CODE:
num = int(input("N° de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + =1**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- ERROR:
File "XXXX", line 7
    Ap = Ap + =1**(cont+1) * 4 / den
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:50:56) 
-- CODE:
num = int(input("N° de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- OUTPUT:
3
3.139683
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:51:30) 
-- CODE:
num = int(input("Nº de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- OUTPUT:
3
3.139683
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:51:55) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- OUTPUT:
3
3.139683
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 21:52:14) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- EXECUTION TIME:
0.19529
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.139683
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.141616
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.141556
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:52:28) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- OUTPUT:
3
3.139683
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 21:52:59) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- EXECUTION TIME:
0.163741
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.139683
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.141616
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.141556
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:53:12) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 6))
-- OUTPUT:
3
3.139683
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:53:32) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 8))
-- OUTPUT:
3
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 21:53:49) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 8))
-- EXECUTION TIME:
0.176248
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:54:12) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1

while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 8))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    Ap = Ap + (-1)**(cont+1) * 4 / den
NameError: name 'Ap' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:59:20) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 8))
-- OUTPUT:
3
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 21:59:41) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 8))
-- EXECUTION TIME:
0.146439
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 21:59:59) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 8))
-- OUTPUT:
3
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-13 22:00:14) 
-- CODE:
num = int(input("Numero de aproximacoes: "))
cont = 1
Ap = 3
print(Ap)
while (cont < num):
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	Ap = Ap + (-1)**(cont+1) * 4 / den
	cont = cont + 1
print(round(Ap, 8))
-- EXECUTION TIME:
0.154265
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:00:46) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- OUTPUT:
3
3.16666667
3.13333333
3.1452381
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:02:31) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- EXECUTION TIME:
0.190469
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
3.14162381
3.14156573
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:03:03) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- OUTPUT:
3
3.16666667
3.13333333
3.1452381
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:03:12) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- EXECUTION TIME:
0.175524
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
3.14162381
3.14156573
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:03:16) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- OUTPUT:
3
3.16666667
3.13333333
3.1452381
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:03:29) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- EXECUTION TIME:
0.14305
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
3.14162381
3.14156573
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:05:04) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- OUTPUT:
3
3.16666667
3.13333333
3.1452381
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:05:19) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- EXECUTION TIME:
0.302983
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
3.14162381
3.14156573
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:05:33) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 6))
-- OUTPUT:
3
3.166667
3.133333
3.145238
3.139683
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:05:42) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 6))
-- EXECUTION TIME:
0.221878
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.166667
3.133333
3.145238
3.139683
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.166667
3.133333
3.145238
3.139683
3.142713
3.140881
3.142072
3.141255
3.14184
3.141407
3.141736
3.14148
3.141683
3.141519
3.141653
3.141542
3.141635
3.141556
3.141624
3.141566
3.141616
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.166667
3.133333
3.145238
3.139683
3.142713
3.140881
3.142072
3.141255
3.14184
3.141407
3.141736
3.14148
3.141683
3.141519
3.141653
3.141542
3.141635
3.141556
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:06:24) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- OUTPUT:
3
3.16666667
3.13333333
3.1452381
3.13968254
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:06:40) 
-- CODE:
# Primeiro input 
# Ler numeros de aproximacoes a serem expressas 
num = int(input("No. de aproximacoes: "))

# Inicia variavel contadora
cont = 1

# Inicia variavel acumuladora (primeiro termo da serie do PI)
Ap = 3

# Imprime primeira aproximacao
print(Ap)

# Determina e imprime demais aproximacoes
while (cont < num):
	# Determina o denominador
	den = (cont*2) * (cont*2 + 1) * (cont*2 + 2)
	
	# Computa novo termo da serie do PI
	Ap = Ap + (-1)**(cont+1) * 4. / den
	
	# Incrementa contador
	cont = cont + 1
	
	# Imprime resultado
	print(round(Ap, 8))
-- EXECUTION TIME:
0.17123
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
3.14162381
3.14156573
3.14161607
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3
3.16666667
3.13333333
3.1452381
3.13968254
3.14271284
3.14088134
3.14207182
3.14125482
3.14183962
3.14140672
3.1417361
3.14147969
3.14168319
3.14151899
3.14165339
3.14154199
3.14163536
3.14155633
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:45:24) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- OUTPUT:
3.21746032
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:45:32) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- EXECUTION TIME:
0.164433
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3.21746032
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3.22689488
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3.226719
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 11:45:44) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- OUTPUT:
3.21746032
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 11:45:51) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- EXECUTION TIME:
0.157474
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3.21746032
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3.22689488
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3.226719
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 12:14:45) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- OUTPUT:
3.21746032
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 12:14:51) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- EXECUTION TIME:
0.161619
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3.21746032
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3.22689488
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3.226719
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 12:37:46) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- OUTPUT:
3.21746032
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 12:37:58) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- EXECUTION TIME:
0.228475
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3.21746032
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3.22689488
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3.226719
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 12:38:06) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- OUTPUT:
3.21746032
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-15 12:38:13) 
-- CODE:
from math import*
n = int(input(""))
cont = 1
p = 0
x = 1
m = -1
while cont < n:
	m = m*(-1)
	p = p + (1/((x + 1)*(x + 2)*(x + 3)))*4
	x = x + 2
	cont = cont + 1
p = (round(p, 8))
pi = 3.0 + p
print(round(pi, 8))
-- EXECUTION TIME:
0.146549
-- TEST CASE 1:
---- input:
5
---- correct output:
3.13968254
---- user output:
3.21746032
-- TEST CASE 2:
---- input:
22
---- correct output:
3.14161607
---- user output:
3.22689488
-- TEST CASE 3:
---- input:
19
---- correct output:
3.14155633
---- user output:
3.226719
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
