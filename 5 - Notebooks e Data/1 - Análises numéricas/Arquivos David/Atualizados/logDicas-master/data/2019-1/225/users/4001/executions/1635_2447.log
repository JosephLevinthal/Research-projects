== TEST (2019-04-03 18:24:40) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

if (preco > pagamento):
	print("Falta " + preco - pagamento)
else:
	print("Troco de " + pagamento - preco)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print("Falta " + preco - pagamento)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:25:38) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))

if (preco > pagamento):
	print(float("Falta " + preco - pagamento))
else:
	print(float("Troco de " + pagamento - preco))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(float("Falta " + preco - pagamento))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:27:52) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	print(float(round("Falta " + F, 2)))
else:
	print(float(round("Troco de " + T, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(round("Falta " + F, 2)))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:28:14) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	print(round("Falta " + F, 2))
else:
	print(round("Troco de " + T, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round("Falta " + F, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:30:43) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	print(round("Falta " + F, 2))
else:
	print(round("Troco de " + T, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round("Falta " + F, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:31:40) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	print(float(round("Falta " + F, 2)))
else:
	print(float(round("Troco de " + T, 2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(round("Falta " + F, 2)))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:31:55) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	print(float(round("Falta " + F, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(round("Falta " + F, 2)))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:32:09) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	print(float(round("Falta " + F, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float(round("Falta " + F, 2)))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:33:08) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	float(print(round("Falta " + F, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    float(print(round("Falta " + F, 2)))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:33:32) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
F =  preco - pagamento
T = pagamento - preco
if (preco > pagamento):
	float(print(round("Falta " + F, 2)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    float(print(round("Falta " + F, 2)))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:35:56) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
if (preco > pagamento):
	msg = "Falta " + (preco - pagamento)
print(msg)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    msg = "Falta " + (preco - pagamento)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:39:10) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = preco - pagamento
Y = pagamento - preco
if (preco > pagamento):
	msg = "Falta " + X
else:
	msg = "Troco " + Y
print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:41:05) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = float(preco - pagamento)
Y = float(pagamento - preco)
if (preco > pagamento):
	msg = "Falta " + X
else:
	msg = "Troco " + Y
print(round(msg, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg = "Falta " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:48:19) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = preco - pagamento
Y = pagamento - preco

if (preco > pagamento):
	print(round("Falta " + X, 2))
else:
	print(round("Troco " + Y, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round("Falta " + X, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:50:13) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = preco - pagamento
Y = pagamento - preco

if (preco > pagamento):
	print(round("Falta " + X, 2))
else:
	print(round("Troco " + Y, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round("Falta " + X, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 18:52:34) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = float(preco - pagamento)
Y = float(pagamento - preco)

if (preco > pagamento):
	print(round("Falta " + X, 2))
else:
	print(round("Troco " + Y, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round("Falta " + X, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 19:02:37) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = float(preco - pagamento)
Y = float(pagamento - preco)

if (preco > pagamento):
	print(round("Falta " + X, 2))
else:
	print(round("Troco " + Y, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round("Falta " + X, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 19:03:49) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = float(preco - pagamento)
Y = float(pagamento - preco)

if (preco > pagamento):
	print(round("Falta X", 2))
else:
	print(round("Troco Y", 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round("Falta X", 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 19:04:31) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = float(preco - pagamento)
Y = float(pagamento - preco)

if (preco > pagamento):
	print(round("Falta X" X, 2))
else:
	print(round("Troco Y" Y, 2))
	

-- ERROR:
File "XXXX", line 7
    print(round("Falta X" X, 2))
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 19:04:40) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = float(preco - pagamento)
Y = float(pagamento - preco)

if (preco > pagamento):
	print(round("Falta X" + X, 2))
else:
	print(round("Troco Y" + Y, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round("Falta X" + X, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-03 19:05:39) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = float(preco - pagamento)
Y = float(pagamento - preco)

if (preco > pagamento):
	print(round("Falta X" + float(X), 2))
else:
	print(round("Troco Y" + float(Y), 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(round("Falta X" + float(X), 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:22:21) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = preco - pagamento
Y = pagamento - preco

if (preco > pagamento):
	msg = "Falta " + X
else (pagamento > preco):
	msg = "Troco " + Y
print(round(msg, 2))
	

-- ERROR:
File "XXXX", line 8
    else (pagamento > preco):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:22:30) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = preco - pagamento
Y = pagamento - preco

if (preco > pagamento):
	msg = "Falta " + X
else:
	msg = "Troco " + Y
print(round(msg, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    msg = "Falta " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:22:56) 
-- CODE:
preco = float(input("Preco: "))
pagamento = float(input("Pagamento: "))
X = preco - pagamento
Y = pagamento - preco

if (preco > pagamento):
	msg = "Falta " + X
else:
	msg = "Troco de " + Y
print(round(msg, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    msg = "Falta " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:23:57) 
-- CODE:
a = float(input("Preco: "))
b = float(input("Pagamento: "))
X = a - b
Y = b - a

if (a > b):
	msg = "Falta " + X
else:
	msg = "Troco de " + Y
print(round(msg, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    msg = "Falta " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:24:39) 
-- CODE:
a = float(input("Preco: "))
b = float(input("Pagamento: "))
X = a - b
Y = b - a

if (a > b):
	msg = "Falta " + X
else:
	msg = "Troco de " + Y
print(round(msg, 2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    msg = "Falta " + X
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:26:21) 
-- CODE:
a = float(input("Preco: "))
b = float(input("Pagamento: "))
X = a - b
Y = b - a

if (a > b):
	print("Falta ", round(X, 2))

	
	

-- OUTPUT:
Falta  26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:26:35) 
-- CODE:
a = float(input("Preco: "))
b = float(input("Pagamento: "))
X = a - b
Y = b - a

if (a > b):
	print("Falta ", round(X, 2))

	
	

-- OUTPUT:
Falta  26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:27:11) 
-- CODE:
a = float(input("Preco: "))
b = float(input("Pagamento: "))
X = a - b
Y = b - a

if (a > b):
	print("Falta ", round(X, 2))
else:
	print("Troco de ", round(Y, 2))

	
	

-- OUTPUT:
Falta  26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 18:27:20) 
-- CODE:
a = float(input("Preco: "))
b = float(input("Pagamento: "))
X = a - b
Y = b - a

if (a > b):
	print("Falta ", round(X, 2))
else:
	print("Troco de ", round(Y, 2))

	
	

-- EXECUTION TIME:
0.125989
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta  26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de  28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de  0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
