== TEST (2019-03-26 17:08:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados:"))
print(a-1/3(round a, 3))
-- ERROR:
File "XXXX", line 5
    print(a-1/3(round a, 3))
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:08:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados:"))

-- ERROR:
File "XXXX", line 5
    print(a-1/3(round a, 3))
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:10:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados:"))
b= print(a/2)
c= print(round(a-b) ,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    c= print(round(a-b) ,3)
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:10:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados:"))
b= print(a/2)
c= print(round(a-b) ,3)
-- EXECUTION TIME:
0.163893
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1446/main.py", line 6, in <module>
    c= print(round(a-b) ,3)
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:10:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados: 50"))
b= print(a/2)
c= print(round(a-b) ,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    c= print(round(a-b) ,3)
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:11:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados:50"))
b= print(a/2)
c= print(round(a-b) ,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    c= print(round(a-b) ,3)
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:11:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados:50"))
b= print(a/2)
c= print(round(a-b) ,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    c= print(round(a-b) ,3)
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:12:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados:50"))
b= print(a/2)
c= print(round(a-b) ,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    c= print(round(a-b) ,3)
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:12:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados?"))
b= print(a/2)
c= print(round(a-b) ,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    c= print(round(a-b) ,3)
TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:12:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados?"))
b= print(a/2)-1/3

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b= print(a/2)-1/3
TypeError: unsupported operand type(s) for -: 'NoneType' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:13:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("Litros Comprados?"))
b= print(a/2)-1/3

-- EXECUTION TIME:
0.133949
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1446/main.py", line 5, in <module>
    b= print(a/2)-1/3
TypeError: unsupported operand type(s) for -: 'NoneType' and 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:27:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input("Litros Comprados?"))
b= print(round(a*1/3,3))

-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:27:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input("Litros Comprados?"))
b= print(round(a*1/3,3))

-- EXECUTION TIME:
0.187038
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
