== SUBMITION (2019-04-14 17:38:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input ("40:"))
-- EXECUTION TIME:
0.133797
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:

-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:

-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 17:38:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input ("40:"))
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 17:57:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input ("40:"))
num2 = int(input ("12"))

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
-- OUTPUT:
O dividendo é:  8
O divisor é:  5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:30:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input ("40:"))
num2 = int(input ("12"))

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
-- OUTPUT:
O dividendo é:  8
O divisor é:  5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:18:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input ("Digite o primeiro numero: ")
num2 = int(input ("Digite o segundo numero: "))

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- ERROR:
File "XXXX", line 6
    num2 = int(input())
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:19:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input ("Digite o primeiro numero: ")
num2 = int(input ("Digite o segundo numero: ")

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- ERROR:
File "XXXX", line 6
    num2 = int(input()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:19:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input ("Digite o primeiro numero: ")
num2 = int(input ("Digite o segundo numero:")

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- ERROR:
File "XXXX", line 6
    num2 = int(input()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 22:05:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input(())
num2 = int(input())

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- ERROR:
File "XXXX", line 6
    num2 = int(input())
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 08:09:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input(())
num2 = int(input())

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- ERROR:
File "XXXX", line 6
    num2 = int(input())
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:06:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input(())
num2 = int(input())

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- ERROR:
File "XXXX", line 6
    num2 = int(input())
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:17:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

num1 = int(input(())
num2 = int(input())

dividendo = num1 
divisor = num2 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- ERROR:
File "XXXX", line 6
    num2 = int(input())
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:19:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print ("O dividendo é: ", dividendo)
print  ("O divisor é: ", divisor)
print ("O quociente é: ", quociente)
print ("O resto é: ", resto)
-- OUTPUT:
O dividendo é:  8
O divisor é:  5
O quociente é:  1.6
O resto é:  3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:20:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print (dividendo)
print  (divisor)
print (quociente)
print (resto)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 19:20:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print (dividendo)
print  (divisor)
print (quociente)
print (resto)
-- EXECUTION TIME:
0.83152
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:20:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print (dividendo)
print  (divisor)
print (quociente)
print (resto)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:22:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input(""))
y = float(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print (dividendo)
print  (divisor)
print (quociente)
print (resto)
-- OUTPUT:
8.0
5.0
1.6
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 19:22:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input(""))
y = float(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print (dividendo)
print  (divisor)
print (quociente)
print (resto)
-- EXECUTION TIME:
0.886759
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.6
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.5
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:23:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input(""))
y = float(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print(dividendo)
print(divisor)
print(quociente)
print(resto)

-- OUTPUT:
8.0
5.0
1.6
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 19:23:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input(""))
y = float(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print(dividendo)
print(divisor)
print(quociente)
print(resto)

-- EXECUTION TIME:
0.655943
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.6
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.5
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:23:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = float(input(""))
y = float(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print(dividendo)
print(divisor)
print(quociente)
print(resto)

-- OUTPUT:
8.0
5.0
1.6
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:23:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print(dividendo)
print(divisor)
print(quociente)
print(resto)

-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 19:23:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo/divisor 
resto = dividendo%divisor 

print(dividendo)
print(divisor)
print(quociente)
print(resto)

-- EXECUTION TIME:
0.695523
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 19:24:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo//divisor 
resto = dividendo%divisor 

print(dividendo)
print(divisor)
print(quociente)
print(resto)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 19:24:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input(""))
y = int(input(""))

dividendo = x 
divisor = y 
quociente = dividendo//divisor 
resto = dividendo%divisor 

print(dividendo)
print(divisor)
print(quociente)
print(resto)

-- EXECUTION TIME:
0.785977
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
