== TEST (2019-04-25 16:06:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a >0 and b > 0 and c > 0):
	


-- ERROR:
File "XXXX", line 9
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):

-- ERROR:
File "XXXX", line 7
    
                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):

-- ERROR:
File "XXXX", line 7
    
                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):

-- ERROR:
File "XXXX", line 7
    
                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):

-- ERROR:
File "XXXX", line 7
    
                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:29:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	if((a + b > c)or(a + c > b)or()

-- ERROR:
File "XXXX", line 10
    
                                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:29:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	if((a + b > c)or(a + c > b)or()

-- ERROR:
File "XXXX", line 10
    
                                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:30:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if((a + b > c)or(a + c > b)or(c + b > a):
		
		if(a == b and b == c):
		
		
		

-- ERROR:
File "XXXX", line 10
    if((a + b > c)or(a + c > b)or(c + b > a):
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:31:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if((a + b > c)or(a + c > b)or(c + b > a)):
		
		if(a == b and b == c):
		
		
		

-- ERROR:
File "XXXX", line 16
    
      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:31:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if((a + b > c) or (a + c > b) or (c + b > a)):
		
		if(a == b and b == c):
		
		
		

-- ERROR:
File "XXXX", line 16
    
      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:32:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if((a + b > c) or (a + c > b) or (c + b > a)):
		
		if(a == b and b == c):
-- ERROR:
File "XXXX", line 13
    
                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:33:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
-- ERROR:
File "XXXX", line 13
    
                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:37:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 14
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:37:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 14
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:45:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 14
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))

if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 15
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))

if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 15
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))

if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 15
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))

if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 15
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))

if(a > 0 and b > 0 and c > 0):
	
	if(a + b > c and a + c > b and c + b > a):
		
		if(a == b and b == c):
			
-- ERROR:
File "XXXX", line 15
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:03:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif ()
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif ()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif (a==b)and(b==c):
		print("equilatero")
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif (a==b)and(b==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif (a == b)and(b == c):
		print("equilatero")
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif (a == b)and(b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif(a == b)and(b == c):
		print("equilatero")
	elif ()
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif(a == b)and(b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif(a == b)and(b == c):
		print("equilatero")
	elif ()
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif(a == b)and(b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:07:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif(a == b)and(b == c):
		print("equilatero")
	elif ()
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif(a == b)and(b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:07:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif(a == b)and(b == c):
		print("equilatero")
	elif ()
	
	
		
		
			
-- EXECUTION TIME:
0.203023
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 11
    elif(a == b)and(b == c):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:07:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if(a > 0 and b > 0 and c > 0):
	elif(a == b)and(b == c):
		print("equilatero")
	elif ()
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif(a == b)and(b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:18:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	elif(a == b)and(b == c):
		print("equilatero")
	elif ()
	
	
		
		
			
-- ERROR:
File "XXXX", line 11
    elif(a == b)and(b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:23:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:25:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!=b)and(b!=c)and(c!a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
File "XXXX", line 16
    elif ((a!=b)and(b!=c)and(c!a)):
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:25:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!=b)and(b!=c)and(c!a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.211207
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 16
    elif ((a!=b)and(b!=c)and(c!a)):
                              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:25:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!=b)and(b!=c)and(c!a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
File "XXXX", line 16
    elif ((a!=b)and(b!=c)and(c!a)):
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:25:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:25:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.14909
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:25:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:25:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:25:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.129634
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:25:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif(a == b)and(b == c):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
				  print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:26:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
		print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:26:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.200093
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:26:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:26:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
   print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
File "XXXX", line 8
    print("Entradas:",a,",",b,",",c)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:26:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
   print("Entradas:",a, "," ,b, "," ,c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
File "XXXX", line 8
    print("Entradas:",a, "," ,b, "," ,c)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:27:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.178603
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:27:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.194452
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:28:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:28:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:28:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
C = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print("Entradas:",a,",",b,",",c)
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:29:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.140116
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:29:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido: ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:29:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:29:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	print("Tipo de triangulo: invalido ")
elif((a == b)and(b == c)):
   print("Tipo de triangulo: equilatero")
elif ((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif ((a!= b)and(b!= c)and(c!= a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.178049
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:30:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:30:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)
if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- EXECUTION TIME:
0.214883
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:37:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:38:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:38:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:38:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:38:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:38:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:38:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:38:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:43:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:44:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:45:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:45:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:45:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:45:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-20 10:33:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a = float(input("Lado A: "))
b = float(input("Lado B: "))
c = float(input("Lado C: "))
print("Entradas:",a,",",b,",",c)

if((a >= b+c) or (b >= a+c) or (c >= a+b)):
	
	print("Tipo de triangulo: invalido ")
	
elif((a == b)and(b == c)):
	
   print("Tipo de triangulo: equilatero")
	
elif ((a==b)or(b==c)or(c==a)):
	
	print("Tipo de triangulo: isosceles")
	
elif ((a!= b)and(b!= c)and(c!= a)):
	
	print("Tipo de triangulo: escaleno")
	
else:
	
	print("Tipo de triangulo: invalido")
		
   
				
	
	
		
		
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
