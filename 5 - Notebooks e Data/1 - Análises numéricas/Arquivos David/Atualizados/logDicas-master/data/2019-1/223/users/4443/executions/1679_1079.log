== TEST (2019-04-23 14:52:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
#if (___COMPLETE AQUI___):
	# Testa se medidas correspondem aas de um triangulo
	#if (___COMPLETE AQUI___):
		#s = (a + b + c) / 2.0
		#area = sqrt(s * (s-a) * (s-b) * (s-c))
		#area = round(area, 3)
		#print("Area:", area)
	#else:
		#print("Area: invalida")
#else:
	#print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:15:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor
print(meio)
# Testa se pelo menos uma das entradas eh negativa 
#if ((a>0) and
#	 (b>0) and
#	 (c>0)
#	):
		# Testa se medidas correspondem aas de um triangulo
#	if ((a<b) and (a<c)
#		 (b < a+c) or
#		 (c < a+b)
#		):
#		s = (a + b + c) / 2.0
#		area = sqrt(s * (s-a) * (s-b) * (s-c))
#		area = round(area, 3)
#		print("Area:", area)
#	else:
#		print("Area: invalida")
#else:
#	print("invalida")
#	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
22.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:19:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor
print(meio)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meior + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
22.0
invalida
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:19:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor
print(meio)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
22.0
invalida
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:20:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor
print(meio)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
			print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- ERROR:
File "XXXX", line 27
    print("Area:", area)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:20:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor
print(meio)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
22.0
invalida
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:21:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor
print(meio)

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
22.0
invalida
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("invalida")
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
invalida
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 15:22:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 15:23:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

maior = max(a, b, c)
menor = min(a, b, c)
meio = (a+b+c) - maior - menor

# Testa se pelo menos uma das entradas eh negativa 
if ((a>0) and
	 (b>0) and
	 (c>0)
	):
		# Testa se medidas correspondem aas de um triangulo
	if (maior < meio + menor):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.19098
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
