== SUBMITION (2019-04-11 16:06:13) 
-- CODE:
nt = float(input())
m = input()
m = m.upper()
if(m = "S")
	print(nt+(nt*0,10))
-- EXECUTION TIME:
0.137306
-- ERROR:
  File "/home/codebench/codes/1644/2704/main.py", line 4
    if(m = "S")
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:06:41) 
-- CODE:
nt = float(input())
m = input()
m = m.upper()
if(m = "S"):
	print(nt+(nt*0,10))
else:
	print(nt)
-- EXECUTION TIME:
0.136037
-- ERROR:
  File "/home/codebench/codes/1644/2704/main.py", line 4
    if(m = "S"):
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:06:46) 
-- CODE:
nt = float(input())
m = input()
m = m.upper()
if(m = "S"):
	print(nt+(nt*0,10))
else:
	print(nt)
-- ERROR:
File "XXXX", line 4
    if(m = "S"):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:06:58) 
-- CODE:
nt = float(input())
m = input()
m = m.upper()
if(m == "S"):
	print(nt+(nt*0,10))
else:
	print(nt)
-- EXECUTION TIME:
0.194299
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/2704/main.py", line 5, in <module>
    print(nt+(nt*0,10))
TypeError: unsupported operand type(s) for +: 'float' and 'tuple'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:07:01) 
-- CODE:
nt = float(input())
m = input()
m = m.upper()
if(m == "S"):
	print(nt+(nt*0,10))
else:
	print(nt)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(nt+(nt*0,10))
TypeError: unsupported operand type(s) for +: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:07:29) 
-- CODE:
nt = float(input())
m = input()
m = m.upper()
if(m == "S"):
	print(nt+(nt*0.10))
else:
	print(nt)
-- EXECUTION TIME:
0.101883
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
