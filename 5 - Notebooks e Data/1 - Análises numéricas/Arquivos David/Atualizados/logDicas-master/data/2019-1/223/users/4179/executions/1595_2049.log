== TEST (2019-03-26 16:17:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=input(x//y)
-- OUTPUT:
173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:18:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=input(x/y)
-- OUTPUT:
173.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:19:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=input(x//y)
var1=input(x%y)
-- OUTPUT:
1730
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:20:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=input(x//y)
var1=input(346%2)
-- OUTPUT:
1730
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:20:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=input(x//y)
var1=input(346%3)
-- OUTPUT:
1731
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:20:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=input(x//y)
var1=int(input(346%3))
-- OUTPUT:
1731
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:22:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=input(x//y)
print(x//y)
print(x%y)

-- OUTPUT:
173173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:22:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
print(x//y)
print(x%y)

-- OUTPUT:
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:23:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(input("qual o dividendo?"))
var1=float(input("qual o divisor?"))
print(x//y)
print(x%y)

-- OUTPUT:
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:24:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(input("qual o dividendo?"))
var1=float(input("qual o divisor?"))
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.218833
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
173
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
173
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
173
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:24:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(input("qual o dividendo?"))
var1=float(input("qual o divisor?"))
print(var)
print(var1)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:24:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(input("qual o dividendo?"))
var1=float(input("qual o divisor?"))
print(var)
print(var1)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:24:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(input("qual o dividendo?"))
var1=float(input("qual o divisor?"))
print(var)
print(var1)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.174335
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
173
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
173
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:25:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(int(input("qual o dividendo?")))
var1=float(int(input("qual o divisor?")))
print(var)
print(var1)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:25:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(int(input("qual o dividendo?")))
var1=float(int(input("qual o divisor?")))
print(var)
print(var1)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.15729
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
173
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
173
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:26:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=float(int(input("qual o dividendo?")))
var1=float(int(input("qual o divisor?")))
print(var)
print(var1)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:27:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=int(input("qual o dividendo?")))
var1=fint(input("qual o divisor?")))
print(var)
print(var1)
print(x//y)
print(x%y)

-- ERROR:
File "XXXX", line 6
    var=int(input()))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:27:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=int(input("qual o dividendo?")))
var1=int(input("qual o divisor?")))
print(var)
print(var1)
print(x//y)
print(x%y)

-- ERROR:
File "XXXX", line 6
    var=int(input()))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:27:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=int(input("qual o dividendo?"))
var1=int(input("qual o divisor?"))
print(var)
print(var1)
print(x//y)
print(x%y)

-- OUTPUT:
8
5
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:27:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=int(input("qual o dividendo?"))
var1=int(input("qual o divisor?"))
print(var)
print(var1)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.135587
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
173
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
173
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:27:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=346
y=2
var=int(input("qual o dividendo?"))
var1=int(input("qual o divisor?"))
print(var)
print(var1)
print(x//y)
print(x%y)

-- OUTPUT:
8
5
173
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:30:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var=int(input("qual o dividendo?"))
var1=int(input("qual o divisor?"))
print(var)
print(var1)
print(var//var1)
print(var%var1)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:30:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

var=int(input("qual o dividendo?"))
var1=int(input("qual o divisor?"))
print(var)
print(var1)
print(var//var1)
print(var%var1)

-- EXECUTION TIME:
0.146473
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
