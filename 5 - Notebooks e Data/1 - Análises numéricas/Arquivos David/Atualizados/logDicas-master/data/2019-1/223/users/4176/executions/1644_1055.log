== TEST (2019-04-11 16:09:11) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: "))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin((2*angulo))/g
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- ERROR:
File "XXXX", line 5
    distancia= float(input())
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:09:20) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin((2*angulo))/g
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- ERROR:
File "XXXX", line 10
    if (abs(R - distancia)) <= 0.1:
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:09:42) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin((2*angulo))/g)
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- OUTPUT:
sin
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:09:46) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin((2*angulo))/g)
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- EXECUTION TIME:
0.140425
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sin
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:09:50) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin((2*angulo))/g)
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- OUTPUT:
sin
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:10:13) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin((2*angulo))/g)
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- OUTPUT:
sin
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:11:07) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin(2*angulo))/g
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- OUTPUT:
sin
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:11:08) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin(2*angulo))/g
	 
if (abs(R - distancia)) <= 0.1:
	 print("sin")

else:
	 print("nao")
-- EXECUTION TIME:
0.123328
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sin
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:11:48) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin(2*angulo))/g
	 
if (abs(R - distancia)) <= 0.1:
	 print("sim")

else:
	 print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:11:49) 
-- CODE:
from math import*

velocidade0= float(input("v0: "))
angulo= radians(float(input("Ângulo: ")))
distancia= float(input("Distancia: "))

g= 9.8
R= ((velocidade0**2)*sin(2*angulo))/g
	 
if (abs(R - distancia)) <= 0.1:
	 print("sim")

else:
	 print("nao")
-- EXECUTION TIME:
0.151196
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
