== TEST (2019-05-02 16:15:26) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif ("caso")	
						  
-- ERROR:
File "XXXX", line 9
    elif ("caso")	
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:15:33) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif 	
						  
-- ERROR:
File "XXXX", line 9
    elif 	
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:15:42) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")

						  
-- OUTPUT:
ENTRADA: CONSTRICAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:15:55) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")

						  
-- OUTPUT:
ENTRADA: CONSTRICAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:16:11) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")

						  
-- OUTPUT:
ENTRADA: CONSTRICAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:18:05) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif (d1!d2) or (d1*d2):
	print("ENTRADA: CONSTRICAO")
						  
-- ERROR:
File "XXXX", line 9
    elif (d1!d2) or (d1*d2):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:18:21) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif ((d1!d2) or (d1*d2)):
	print("ENTRADA: CONSTRICAO")
						  
-- ERROR:
File "XXXX", line 9
    elif ((d1!d2) or (d1*d2)):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:19:01) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif (("caso contrario") or (d1*d2)):
	print("ENTRADA: CONSTRICAO")
						  
-- OUTPUT:
ENTRADA: CONSTRICAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:33) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) and (d1+d2+1)):
	print("ENTRADA: CONSTRICAO")
elif ((d1+d2<5) and ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif (("caso contrario") and (d1*d2)):
	print("ENTRADA: CONSTRICAO")
						  
-- OUTPUT:
ENTRADA: CONSTRICAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:24:47) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ("entrada: CONSTRICAO"):
	((d1+d2==12) and (d1+d2+1))
elif ((d1+d2<5) and ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif (("caso contrario") and (d1*d2)):
	print("ENTRADA: CONSTRICAO")
						  
-- OUTPUT:
ENTRADA: CONSTRICAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:31:13) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
	elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: POLEN")
elif (("caso contrario") or (d1*d2)):
	print("ENTRADA: CONSTRICAO")
						  
-- ERROR:
File "XXXX", line 7
    elif ((d1+d2<5) or ((d1+d2+1)*r)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:32:16) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) or  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: CONSTRICAO")
elif (("caso contrario") or (d1*d2)):
	print("ENTRADA: POLEN")
						  
-- OUTPUT:
ENTRADA: FRAQUEZA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:43:14) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) not  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: CONSTRICAO")
elif (("caso contrario") or (d1*d2)):
	print("ENTRADA: POLEN")
						  
-- ERROR:
File "XXXX", line 5
    if ((d1+d2==12) not  (d1+d2+1)):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:46:38) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) and  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
elif ((d1+d2<5) or ((d1+d2+1)*r)):
	print("ENTRADA: CONSTRICAO")
elif (("caso contrario") or (d1*d2)):
	print("ENTRADA: POLEN")
						  
-- OUTPUT:
ENTRADA: CONSTRICAO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:47:06) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) and  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
elif ((d1+d2<5) and ((d1+d2+1)*r)):
	print("ENTRADA: CONSTRICAO")
elif (("caso contrario") and (d1*d2)):
	print("ENTRADA: POLEN")
						  
-- OUTPUT:
ENTRADA: POLEN
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:47:20) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) and  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
elif ((d1+d2<5) and ((d1+d2+1)*r)):
	print("ENTRADA: CONSTRICAO")
elif (("caso contrario") and (d1*d2)):
	print("ENTRADA: POLEN")
						  
-- EXECUTION TIME:
0.143443
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
ENTRADA: POLEN
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:
ENTRADA: POLEN
-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
ENTRADA: POLEN
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:47:34) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))

if ((d1+d2==12) and  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
elif ((d1+d2<5) and ((d1+d2+1)*r)):
	print("ENTRADA: CONSTRICAO")
elif (("caso contrario") and (d1*d2)):
	print("ENTRADA: POLEN")
						  
-- OUTPUT:
ENTRADA: POLEN
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:48:48) 
-- CODE:
r=int(input("ataque: "))
d1=int(input("regra: "))
d2=int(input("pontos de vida: "))
print("resultado: ")

if ((d1+d2==12) and  (d1+d2+1)):
	print("ENTRADA: FRAQUEZA")
elif ((d1+d2<5) and ((d1+d2+1)*r)):
	print("ENTRADA: CONSTRICAO")
elif (("caso contrario") and (d1*d2)):
	print("ENTRADA: POLEN")
						  
-- OUTPUT:
resultado: 
ENTRADA: POLEN
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
