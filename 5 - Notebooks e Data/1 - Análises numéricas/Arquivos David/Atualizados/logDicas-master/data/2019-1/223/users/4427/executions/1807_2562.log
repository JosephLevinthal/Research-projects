== TEST (2019-06-07 19:35:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > ???):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == ???):
         npar = npar + 1

   # No. de elementos pares
   print(???)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    while (size(vet) > ???):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:41:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(cont-npar)

   # No. total de elementos
   print(cont)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    cont = cont + 1
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:41:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
cont = cont + 1
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(cont-npar)

   # No. total de elementos
   print(cont)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 19
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:41:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
   print(cont)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 25
    print(cont)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:41:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 28
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:41:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:43:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 17
    cont = cont + 1
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:43:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    for elemento in vet:
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:44:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 19:44:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.926879
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:44:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:47:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:47:13) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:48:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:49:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:49:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:50:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:50:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 19:50:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
2.79574
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
12
13
0
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
18
0
Proximo vetor:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:50:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:51:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:52:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > cont):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:55:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:56:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
print(size(vet))
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:56:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
print(size(vet)>1)
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:57:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	print(size(vet)>1)
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 19:57:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	print(size(vet)>1)
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:00:40) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	print(size(vet)>1)
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print(cont-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:01:01) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	print(size(vet)>1)
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print(cont-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.13014
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
True
4
-3
1
0
True
0
2
2
0
True
6
-3
3
0
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
True
1
0
1
0
True
16
-14
2
0
True
10
-7
3
0
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
True
8
-7
1
0
True
2
0
2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:01:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print(cont-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:01:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
834.682
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:01:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print(cont-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
10.5584
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
Primeiro vetor: 4
-3
1
0
Proximo vetor: 0
2
2
0
Proximo vetor: 6
-3
3
0
Proximo vetor:
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
0
1
0
Proximo vetor: 16
-14
2
0
Proximo vetor: 10
-7
3
0
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
-7
1
0
Proximo vetor: 2
0
2
0
Proximo vetor:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:01:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print(size(vet)-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:02:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print(size(vet)-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.5204
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
Primeiro vetor: 4
4
0
0
Proximo vetor: 0
11
0
0
Proximo vetor: 6
0
0
0
Proximo vetor:
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
12
0
0
Proximo vetor: 16
1
0
0
Proximo vetor: 10
0
0
0
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
0
0
Proximo vetor: 2
2
0
0
Proximo vetor:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:02:39) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:02:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(cont)
	print(0)
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
6.84477
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
Primeiro vetor: 4
4
0
0
Proximo vetor: 0
11
0
0
Proximo vetor: 6
0
0
0
Proximo vetor:
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
12
0
0
Proximo vetor: 16
1
0
0
Proximo vetor: 10
0
0
0
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
0
0
Proximo vetor: 2
2
0
0
Proximo vetor:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:03:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:03:16) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:03:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	
	# Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
7.48489
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
Primeiro vetor: 4
4
8
Proximo vetor: 0
11
11
Proximo vetor: 6
0
6
Proximo vetor:
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
12
13
Proximo vetor: 16
1
17
Proximo vetor: 10
0
10
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:03:58) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	print(0)
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:04:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	print(0)
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval())

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:04:38) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	print(0)
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval())

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:04:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	print(0)
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval())

-- EXECUTION TIME:
6.22535
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2562/main.py", line 30, in <module>
    vet = array(eval())
TypeError: eval expected at least 1 arguments, got 0

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:05:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			
	# No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	print(0)
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:05:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			
	# No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	print(0)
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:05:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			
	# No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	print(0)
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- EXECUTION TIME:
4.79625
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
0
11
11
0
6
0
6
0
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: 1
12
13
0
16
1
17
0
10
0
10
0
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
18
0
2
2
4
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:05:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			
	# No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:06:25) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			
	# No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- EXECUTION TIME:
5.35885
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
18
2
2
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-07 20:06:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			
	# No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:07:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0

while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			
	# No. de elementos pares
	print(npar)
	
	# No. de elementos impares
	print((size(vet))-npar)
	
	# No. total de elementos
	print(size(vet))
	
	# Leitura do proximo vetor
	#vet = array(eval(input("Proximo vetor: ")))
	vet = array(eval(input()))

-- EXECUTION TIME:
5.44278
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:11:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1208.52
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:15:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1183.12
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-07 20:15:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
cont = int()
cont = 0
print(size(vet))
while (size(vet) > 1):
	# Zera contador de elementos pares
	npar = 0
	# Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	cont = cont + 1
   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(cont-npar)

   # No. total de elementos
print(cont)
print(0)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1125.82
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
