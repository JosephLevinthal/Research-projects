== TEST (2019-04-25 16:08:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
#if ()
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:33:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
	else:
		if (a==b) or (b==c) or (c==a):
	print('isosceles')
	else:
		if (a=!b) and (c=!a) and (b=!c):
		print('escaleno')
		else (a<0 or b<0 or c<0):
			print('invalido')
	
-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:36:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
		if (a==b) or (b==c) or (c==a):
			print('isosceles')
		else:
			if (a=!b) and (c=!a) and (b=!c):
				print('escaleno')
			else (a<0 or b<0 or c<0):
				print('invalido')
	
-- ERROR:
File "XXXX", line 14
    if (a=!b) and (c=!a) and (b=!c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:37:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
		if (a==b) or (b==c) or (c==a):
			print('isosceles')
		else:
			if (a =! b and c =! a and b =! c):
				print('escaleno')
			else (a<0 or b<0 or c<0):
				print('invalido')
	
-- ERROR:
File "XXXX", line 14
    if (a =! b and c =! a and b =! c):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:38:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
	if (a==b) or (b==c) or (c==a):
		print('isosceles')
	else:
		if (a =! b and c =! a and b =! c):
			print('escaleno')
		else (a<0 or b<0 or c<0):
			print('invalido')
	
-- ERROR:
File "XXXX", line 14
    if (a =! b and c =! a and b =! c):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:38:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
	if (a==b) or (b==c) or (c==a):
		print('isosceles')
	else:
		if (a =! b and c =! a and b =! c):
			print('escaleno')
		else (a<0 or b<0 or c<0):
			print('invalido')
	
-- ERROR:
File "XXXX", line 14
    if (a =! b and c =! a and b =! c):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:39:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
	if (a==b) or (b==c) or (c==a):
		print('isosceles')
	else:
		if (a=!b) and (c=!a) and (b=!c):
			print('escaleno')
		else (a<0 or b<0 or c<0):
			print('invalido')
	
-- ERROR:
File "XXXX", line 14
    if (a=!b) and (c=!a) and (b=!c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:40:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
	if ((a==b) or (b==c) or (c==a)):
		print('isosceles')
	else:
		if ((a=!b) and (c=!a) and (b=!c)):
			print('escaleno')
		else (a<0 or b<0 or c<0):
			print('invalido')
	
-- ERROR:
File "XXXX", line 14
    if ((a=!b) and (c=!a) and (b=!c)):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:41:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
	if ((a==b) or (b==c) or (c==a)):
		print('isosceles')
	else:
		if ((a!=b) and (c!=a) and (b!=c)):
			print('escaleno')
		else (a<0 or b<0 or c<0):
			print('invalido')
	
-- ERROR:
File "XXXX", line 16
    else (a<0 or b<0 or c<0):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:43:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (a==b) and (b==c) and (c==a):
	print('equilatero')
else:
	if ((a==b) or (b==c) or (c==a)):
		print('isosceles')
	else:
		if ((a!=b) and (c!=a) and (b!=c)):
			print('escaleno')
		else:
			if (a<0 or b<0 or c<0):
				print('invalido')
			else:
				print('invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:03:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:03:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:03:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)
if (c>=a+b or a>=b+c or b>=a+c):
	print('Tipo de triangulo: invalido')
else:
	if (a==b) and (b==c) and (c==a):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de trinagulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- EXECUTION TIME:
0.138393
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de trinagulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:08:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)

if ((c>=a+b) or (a>=b+c) or (b>=a+c)):
	print('Tipo de triangulo: invalido')
else:
	if ((a==b) and (b==c)):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de triangulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:09:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)

if ((c>=a+b) or (a>=b+c) or (b>=a+c)):
	print('Tipo de triangulo: invalido')
else:
	if ((a==b) and (b==c)):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de triangulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:09:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)

if ((c>=a+b) or (a>=b+c) or (b>=a+c)):
	print('Tipo de triangulo: invalido')
else:
	if ((a==b) and (b==c)):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de triangulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:09:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)

if ((c>=a+b) or (a>=b+c) or (b>=a+c)):
	print('Tipo de triangulo: invalido')
else:
	if ((a==b) and (b==c)):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de triangulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:10:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)

if ((c>=a+b) or (a>=b+c) or (b>=a+c)):
	print('Tipo de triangulo: invalido')
else:
	if ((a==b) and (b==c)):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de triangulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:11:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('Insira um numero a: '))
b = float(input('Insira um numero b: '))
c = float(input('Insira um numero c: '))

print('Entradas:', a,',', b,',', c)

if ((c>=a+b) or (a>=b+c) or (b>=a+c)):
	print('Tipo de triangulo: invalido')
else:
	if ((a==b) and (b==c)):
		print('Tipo de triangulo: equilatero')
	else:
		if ((a==b) or (b==c) or (c==a)):
			print('Tipo de triangulo: isosceles')
		else:
			if ((a!=b) and (c!=a) and (b!=c)):
				print('Tipo de triangulo: escaleno')
			else:
				print('Tipo de triangulo: invalido')
	
-- EXECUTION TIME:
0.200042
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
