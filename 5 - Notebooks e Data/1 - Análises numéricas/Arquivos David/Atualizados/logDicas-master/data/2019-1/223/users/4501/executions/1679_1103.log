== TEST (2019-04-26 17:14:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b):
		print("x pentence ao intervalo a, b")
	

-- OUTPUT:
x pentence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:17:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b):
		print("x pentence ao intervalo a, b")
	else:
		print("Entradas a e b invalidas")
else:
	print("Entradas a e b invalidas")

-- OUTPUT:
x pentence ao intervalo a, b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:18:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b):
		print(x, "pentence ao intervalo" a, b)
	else:
		print("Entradas a e b invalidas")
else:
	print("Entradas a e b invalidas")

-- ERROR:
File "XXXX", line 10
    print(x, "pentence ao intervalo" a, b)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:18:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b):
		print(x , "pentence ao intervalo" a, b)
	else:
		print("Entradas a e b invalidas")
else:
	print("Entradas a e b invalidas")

-- ERROR:
File "XXXX", line 10
    print(x , "pentence ao intervalo" a, b)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:18:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b):
		print("pentence ao intervalo")
	else:
		print("Entradas a e b invalidas")
else:
	print("Entradas a e b invalidas")

-- OUTPUT:
pentence ao intervalo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:19:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b):
		print("pentence ao intervalo")
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")

-- OUTPUT:
pentence ao intervalo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:20:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b and b > a):
		print("pentence ao intervalo")
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")

-- OUTPUT:
pentence ao intervalo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:22:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
	if(x <= a and x <= b and b > a):
		print("{}pentence ao intervalo")
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")

-- OUTPUT:
{}pentence ao intervalo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:30:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x > 0 and a > 0 and b > 0 ):
elif( b > a and a <= x <= b ):		
		print(" x pentence ao intervalo a, b")
		print(" x nao pertence ao intervalo a, b")
else:
		print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 9
    elif( b > a and a <= x <= b ):		
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:34:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a and a <= x <= b ):		
		print(" x pentence ao intervalo a, b")
	elif(b <= a and a <= x <= b):	
		print(" x nao pertence ao intervalo a, b")
   else:
		print("Entradas a e b invalidas")
else:
	print("Entradas a e b invalidas")


-- ERROR:
File "XXXX", line 13
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:34:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a and a <= x <= b ):		
		print(" x pentence ao intervalo a, b")
	elif(b <= a and a <= x <= b):	
		print(" x nao pertence ao intervalo a, b")
	else:
		print("Entradas a e b invalidas")
else:
	print("Entradas a e b invalidas")


-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:35:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print(" x pentence ao intervalo a, b")
	elif(b <= a or a <= x <= b):	
		print(" x nao pertence ao intervalo a, b")
	else:
		print("Entradas a e b invalidas")
else:
	print("Entradas a e b invalidas")


-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:40:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print(x, " pentence ao intervalo " a, b)
	elif(b <= a or a <= x <= b):	
		print(x " nao pertence ao intervalo " a, b)
	else:
		print("Entradas" a e b "invalidas")
else:
	print("Entradas" a e b "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x, " pentence ao intervalo " a, b)
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:40:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print(x " pentence ao intervalo " a, b)
	elif(b <= a or a <= x <= b):	
		print(x " nao pertence ao intervalo " a, b)
	else:
		print("Entradas" a e b "invalidas")
else:
	print("Entradas" a e b "invalidas")


-- ERROR:
File "XXXX", line 10
    print(x " pentence ao intervalo " a, b)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:41:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print("x" " pentence ao intervalo " "a, b")
	elif(b <= a or a <= x <= b):	
		print("x" " nao pertence ao intervalo " "a, b")
	else:
		print("Entradas" " a e b" "invalidas")
else:
	print("Entradas" "a e b" "invalidas")


-- OUTPUT:
Entradasa e binvalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:43:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print("x" " pentence ao intervalo " "a, b")
	elif(b <= a or a <= x <= b):	
		print("x" , " nao pertence ao intervalo " , "a, b")
	else:
		print("Entradas" , " a e b" , "invalidas")
else:
	print("Entradas" , "a e b" , "invalidas")


-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 17:43:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print("x" " pentence ao intervalo " "a, b")
	elif(b <= a not a <= x <= b):	
		print("x" , " nao pertence ao intervalo " , "a, b")
	else:
		print("Entradas" , " a e b" , "invalidas")
else:
	print("Entradas" , "a e b" , "invalidas")


-- ERROR:
File "XXXX", line 11
    elif(b <= a not a <= x <= b):	
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:24:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print("x" " pentence ao intervalo " "a, b")
	elif(b <= a  a <= x <= b):	
		print("x" , " nao pertence ao intervalo " , "a, b")
	else:
		print("Entradas" , " a e b" , "invalidas")
else:
	print("Entradas" , "a e b" , "invalidas")


-- ERROR:
File "XXXX", line 11
    elif(b <= a  a <= x <= b):	
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:25:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print("x" " pentence ao intervalo " "a, b")
	elif(b <= a or a <= x <= b):	
		print("x" , " nao pertence ao intervalo " , "a, b")
	else:
		print("Entradas" , " a e b" , "invalidas")
else:
	print("Entradas" , "a e b" , "invalidas")


-- OUTPUT:
Entradas a e b invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:27:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a or a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, b)
	elif(b <= a or a <= x <= b):	
		print(x , " nao pertence ao intervalo " , a, b)
	else:
		print("Entradas" , a, "e", b, "invalidas")
else:
	print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 22:28:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a and a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, b)
	elif(b <= a and a <= x <= b):	
		print(x , " nao pertence ao intervalo " , a, b)
	else:
		print("Entradas" , a, "e", b, "invalidas")
else:
	print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:31:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a and a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:33:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 23:33:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 00:15:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	elif(b > a == a <= x <= b):
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 00:19:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	elif(b < a == a <= x <= b):
		print(x ,"nao pertence ao intervalo", a, ",", b)
	elif(b = a == a <= x <= b):
	print("Entradas" , a, "e", b , "invalidas")


-- ERROR:
File "XXXX", line 13
    elif(b = a == a <= x <= b):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 00:19:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	elif(b < a == a <= x <= b):
		print(x ,"nao pertence ao intervalo", a, ",", b)
	elif(b <= a == a <= x <= b):
	print("Entradas" , a, "e", b , "invalidas")


-- ERROR:
File "XXXX", line 14
    print("Entradas" , a, "e", b , "invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 00:19:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	elif(b < a == a <= x <= b):
		print(x ,"nao pertence ao intervalo", a, ",", b)
	elif(b <= a == a <= x <= b):
		print("Entradas" , a, "e", b , "invalidas")


-- ERROR:
File "XXXX", line 14
    print("Entradas" , a, "e", b , "invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 00:20:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	elif(b < a == a <= x <= b):
		print(x ,"nao pertence ao intervalo", a, ",", b)
	elif(b <= a == a <= x <= b):
		print("Entradas" , a, "e", b , "invalidas")


-- ERROR:
File "XXXX", line 14
    print("Entradas" , a, "e", b , "invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:37:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	elif(b < a == a <= x <= b):
		print(x ,"nao pertence ao intervalo", a, ",", b)
	elif(b <= a == a <= x <= b):
		print("Entradas" , a, "e", b , "invalidas")


-- ERROR:
File "XXXX", line 14
    print("Entradas" , a, "e", b , "invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 20:39:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and a <= x <= b and b <= a ):
	if( b > a == a <= x <= b ):		
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
		print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:04:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
		print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
2.0  pentence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:05:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
		print("Entradas" , a, "e", b , "invalidas")


-- EXECUTION TIME:
0.18784
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0  pentence ao intervalo  3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pentence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:05:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b and x < a < b and a < b < x):
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
		print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:07:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a <= x <= b or x <= a <= b or a <= b <= x):
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
		print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
2.0  pentence ao intervalo  3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:07:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a <= x <= b or x <= a <= b or a <= b <= x):
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
else:
		print("Entradas" , a, "e", b , "invalidas")


-- EXECUTION TIME:
0.135487
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0  pentence ao intervalo  3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5  pentence ao intervalo  1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:12:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x ," pentence ao intervalo ", a, ",", b)	
	else:
		print(x ,"nao pertence ao intervalo", a, ",", b)
if(b <= a):
	if(a <= x or x <= a <= b or a <= b <= x):
		print(x , "pertence ao intervalo", a, ",", b)
	else:
		print(x , "nao pertence ao intervalo", a, ",", b)
else:
		print("Entradas" , a, "e", b , "invalidas")


-- OUTPUT:
2.0  pentence ao intervalo  3.0 , 4.0
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:14:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
		print("Entradas" , a, "e", b "invalidas")


-- ERROR:
File "XXXX", line 14
    print("Entradas" , a, "e", b "invalidas")
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:14:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b "invalidas")


-- ERROR:
File "XXXX", line 14
    print("Entradas" , a, "e", b "invalidas")
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:15:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
print("Entradas" , a, "e", b, "invalidas")


-- ERROR:
File "XXXX", line 14
    print("Entradas" , a, "e", b, "invalidas")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:15:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
2.0 pentence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:19:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x < b or x < a < b or a < b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.203774
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pentence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:45:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a > 0 and b > 0):
	if(b > a):
		if(a < x < b or x < a < b or a < b < x):
			print(x , "pentence ao intervalo" , a, ",", b)	
		else:
			print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
2.0 pentence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 21:45:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a > 0 and b > 0):
	if(b > a):
		if(a < x < b or x < a < b or a < b < x):
			print(x , "pentence ao intervalo" , a, ",", b)	
		else:
			print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.135933
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pentence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:

-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:53:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(x < a and a < b) or (a < b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
2.0 pentence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:55:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(x < a and a < b) or (a < b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
2.0 pentence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:56:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a and x > b):
	if(x < a and a < b) or (a < b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 10:59:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x < a and a < b) or (a < b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:07:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x > a and a < b) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:07:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x > a and a < b) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.201012
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:08:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x > a and a < b) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:09:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x > a and a < b) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.2608
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:09:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x < a and a < b) or (a < b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:10:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x > a and a < b) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:10:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(x > a and a < b) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.198736
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:11:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:11:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.141849
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:13:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b >= a and a <= x) or (a >= b and b <= x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:13:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b >= a and a <= x) or (a >= b and b <= x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.11701
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:16:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x < a and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.152705
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 1.1 e 22.2 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:16:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(x < a and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:17:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:17:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.137518
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:19:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
elif(b <= a):
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:19:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	else:
		print(x , "nao pertence ao intervalo" , a, ",", b)
elif(b <= a):
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.127941
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:21:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
	else:
		print("Entradas" , a, "e", b, "invalidas")
		


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:21:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
	else:
		print("Entradas" , a, "e", b, "invalidas")
		


-- EXECUTION TIME:
0.156683
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:

-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:22:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
	else:
		print("Entradas" , a, "e", b, "invalidas")
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:23:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and x < b):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
	else:
		print("Entradas" , a, "e", b, "invalidas")
else:
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.129883
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:25:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(a < x and b < x):
	if(b > a and a < x) or (a > b and b < x):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(b <= a):
		print(x , "nao pertence ao intervalo" , a, ",", b)
else:
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:00:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x , "nao pertence ao intervalo" , a, ",", b)
elif(b <= a):
	print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:00:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x , "nao pertence ao intervalo" , a, ",", b)
elif(b <= a):
	print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.16132
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:04:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
elif(b <= a):
	print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- ERROR:
File "XXXX", line 11
    elif(b <= a):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:04:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
	elif(b <= a):
		print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- ERROR:
File "XXXX", line 11
    elif(b <= a):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:05:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		elif(b <= a):
			print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- ERROR:
File "XXXX", line 11
    elif(b <= a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:06:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
elif(b <= a):
			print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- ERROR:
File "XXXX", line 11
    elif(b <= a):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:06:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
if(b <= a):
			print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- ERROR:
File "XXXX", line 11
    if(b <= a):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:09:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		if(x < a and a < b) or (a < b and b < x):
			print(x , "pentence ao intervalo" , a, ",", b)	
		elif(b <= a):
			print(x, "nao pertence ao intervalo" , a, ",", b)
else:	
	print("Entradas" , a, "e", b, "invalidas")


-- ERROR:
File "XXXX", line 11
    if(b <= a):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:12:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x, "nao pertence ao intervalo" , a, ",", b)
elif(b <= a):	
	print("Entradas" , a, "e", b, "invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:12:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b > a):
	if(a < x and x < b):
		print(x , "pentence ao intervalo" , a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x, "nao pertence ao intervalo" , a, ",", b)
elif(b <= a):	
	print("Entradas" , a, "e", b, "invalidas")


-- EXECUTION TIME:
0.128723
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:32:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x,"pentence ao intervalo", a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x,"nao pertence ao intervalo , a, ",", b)
elif(b <= a):	
	print("Entradas", a, "e", b, "invalidas")


-- EXECUTION TIME:
0.130979
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 12
    print(x,"nao pertence ao intervalo , a, ",", b)
                                                  ^
SyntaxError: EOL while scanning string literal

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:34:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b <= a):	
	print("Entradas",a,"e",b,"invalidas")


-- EXECUTION TIME:
0.215796
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:34:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b <= a):	
	print("Entradas",a,"e",b,"invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:34:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b <= a):	
	print("Entradas",a,"e",b,"invalidas")


-- EXECUTION TIME:
0.204618
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:36:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x, "pentence ao intervalo", a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x, "nao pertence ao intervalo", a, ",", b)
elif(b <= a):	
	print("Entradas", a, "e", b, "invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:37:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x, "pentence ao intervalo", a, ",", b)	
	elif(x < a and a < b) or (a < b and b < x):
		print(x, "nao pertence ao intervalo", a, ",", b)
elif(b <= a):	
	print("Entradas", a, "e", b, "invalidas")


-- EXECUTION TIME:
0.168867
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:40:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x, "pentence ao intervalo", a, ",", b)	
	elif((x < a and a < b) or (a < b and b < x)):
		print(x, "nao pertence ao intervalo", a, ",", b)
elif(b <= a):	
	print("Entradas", a, "e", b, "invalidas")


-- EXECUTION TIME:
0.125602
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:40:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x, "pentence ao intervalo", a, ",", b)	
	elif((x < a and a < b) or (a < b and b < x)):
		print(x, "nao pertence ao intervalo", a, ",", b)
elif(b <= a):	
	print("Entradas", a, "e", b, "invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:41:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))

if(b > a):
	if(a < x and x < b):
		print(x, "pentence ao intervalo", a, ",", b)	
	elif((x < a and a < b) or (a < b and b < x)):
		print(x, "nao pertence ao intervalo", a, ",", b)
elif(b <= a):	
	print("Entradas", a, "e", b, "invalidas")


-- EXECUTION TIME:
0.135434
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:43:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):	
	print("Entradas",a,"e",b,"invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:43:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):	
	print("Entradas",a,"e",b,"invalidas")


-- EXECUTION TIME:
0.247372
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:44:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):	
	print("Entradas",a,"e",b,"invalidas")


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:44:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):	
	print("Entradas",a,"e",b,"invalidas")


-- EXECUTION TIME:
0.144696
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:01:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero: "))
a=float(input("numero: "))
b=float(input("numero: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pentence ao intervalo",a,",",b)	
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):	
	print("Entradas",a,"e",b,"invalidas")


-- EXECUTION TIME:
0.183693
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pentence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:31:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e","invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:32:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.173883
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:32:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif(x<a and a<b) or (a<b and b<x):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.116804
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:33:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if (a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.15452
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:33:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if (a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e","invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:33:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if (a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.168763
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:48:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
if(b<=a):
	print("Entradas",a,"e","invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:48:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
if(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.166009
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:50:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	if((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
if(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.200555
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 14:50:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	if((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
if(b<=a):
	print("Entradas",a,"e","invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:50:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	if((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
if(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.132388
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 14:51:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
if(b<=a):
	print("Entradas",a,"e","invalidas")
-- EXECUTION TIME:
0.130002
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 15:04:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e",b,"invalidas")
-- EXECUTION TIME:
0.189
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 15:05:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e",b,"invalidas")
-- EXECUTION TIME:
0.167807
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 15:05:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e",b,"invalidas")
-- EXECUTION TIME:
0.164339
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:35:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input("numero real: "))
a=float(input("numero real: "))
b=float(input("numero real: "))
if(b>a):
	if(a<x and x<b):
		print(x,"pertence ao intervalo",a,",",b)
	elif((x<a and a<b) or (a<b and b<x)):
		print(x,"nao pertence ao intervalo",a,",",b)
elif(b<=a):
	print("Entradas",a,"e",b,"invalidas")
-- EXECUTION TIME:
0.156537
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
