== TEST (2019-04-23 17:10:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if (a==b) and (b==c) and (a==c)
	print("Tipo do triangulo: equilatero")
-- ERROR:
File "XXXX", line 14
    if (a==b) and (b==c) and (a==c)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:10:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if (a==b) and (b==c) and (a==c):
	print("Tipo do triangulo: equilatero")
-- ERROR:
File "XXXX", line 15
    print("Tipo do triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:10:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if (a==b) and (b==c) and (a==c):
		print("Tipo do triangulo: equilatero")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:17:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a==b) and (b==c) and (a==c)):
		print("Tipo do triangulo: equilatero")
	elif ((a==b) or (b==c) or (a==c)):
		print("Tipo do triangulo: isosceles")
	else :
		print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo do triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:17:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a==b) and (b==c) and (a==c)):
		print("Tipo do triangulo: equilatero")
	elif ((a==b) or (b==c) or (a==c)):
		print("Tipo do triangulo: isosceles")
	else :
		print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- EXECUTION TIME:
0.155479
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo do triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo do triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo do triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:17:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a==b) and (b==c) and (a==c)):
		print("Tipo do triangulo: equilatero")
	elif ((a==b) or (b==c) or (a==c)):
		print("Tipo do triangulo: isosceles")
	else :
		print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo do triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:18:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a < b + c) and(b < a + c) and(c < b + a)):
		if ((a==b) and (b==c) and (a==c)):
			print("Tipo do triangulo: equilatero")
		elif ((a==b) or (b==c) or (a==c)):
			print("Tipo do triangulo: isosceles")
		else :
			print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo do triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:19:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a < b + c) and(b < a + c) and(c < b + a)):
	if ((a==b) and (b==c) and (a==c)):
			print("Tipo do triangulo: equilatero")
	elif ((a==b) or (b==c) or (a==c)):
			print("Tipo do triangulo: isosceles")
	else :
			print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- ERROR:
File "XXXX", line 15
    if ((a==b) and (b==c) and (a==c)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:19:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a < b + c) and(b < a + c) and(c < b + a)):
	elif ((a==b) and (b==c) and (a==c)):
			print("Tipo do triangulo: equilatero")
	elif ((a==b) or (b==c) or (a==c)):
			print("Tipo do triangulo: isosceles")
	else :
			print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- ERROR:
File "XXXX", line 15
    elif ((a==b) and (b==c) and (a==c)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:19:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a < b + c) and(b < a + c) and(c < b + a)):
		elif ((a==b) and (b==c) and (a==c)):
			print("Tipo do triangulo: equilatero")
		elif ((a==b) or (b==c) or (a==c)):
			print("Tipo do triangulo: isosceles")
		else :
			print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- EXECUTION TIME:
0.19555
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 15
    elif ((a==b) and (b==c) and (a==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:19:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a < b + c) and(b < a + c) and(c < b + a)):
		elif ((a==b) and (b==c) and (a==c)):
			print("Tipo do triangulo: equilatero")
		elif ((a==b) or (b==c) or (a==c)):
			print("Tipo do triangulo: isosceles")
		else :
			print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- EXECUTION TIME:
0.202202
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 15
    elif ((a==b) and (b==c) and (a==c)):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:19:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a < b + c) and(b < a + c) and(c < b + a)):
		elif ((a==b) and (b==c) and (a==c)):
			print("Tipo do triangulo: equilatero")
		elif ((a==b) or (b==c) or (a==c)):
			print("Tipo do triangulo: isosceles")
		else :
			print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- ERROR:
File "XXXX", line 15
    elif ((a==b) and (b==c) and (a==c)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:22:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)

if (a and b and c > 0):
	if ((a < b + c) and(b < a + c) and(c < b + a)):
		elif ((a==b) and (b==c) and (a==c)):
			print("Tipo do triangulo: equilatero")
		elif ((a==b) or (b==c) or (a==c)):
			print("Tipo do triangulo: isosceles")
		else :
				print("Tipo do triangulo: escaleno")
else:
	print("Tipo do triangulo: invalido")
		
-- ERROR:
File "XXXX", line 15
    elif ((a==b) and (b==c) and (a==c)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:26:07) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print ("Entradas:" x "," , y ,"," , z)
-- ERROR:
File "XXXX", line 5
    print ("Entradas:" x "," , y ,"," , z)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:26:22) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print ("Entradas:" x "," , y ,"," , z)
-- ERROR:
File "XXXX", line 5
    print ("Entradas:" x "," , y ,"," , z)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:26:56) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print ("Entradas:", x "," , y ,"," , z)
-- ERROR:
File "XXXX", line 5
    print ("Entradas:", x "," , y ,"," , z)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:27:25) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:30:20) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:33:20) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

elif ((x==y) and (y==z)):
	print("Tipo de triangulo: equilatero")
elif ((x== y) or (y==z) or (z==x)):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:33:27) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

elif ((x==y) and (y==z)):
	print("Tipo de triangulo: equilatero")
elif ((x== y) or (y==z) or (z==x)):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:33:36) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

elif ((x==y) and (y==z)):
	print("Tipo de triangulo: equilatero")
elif ((x== y) or (y==z) or (z==x)):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:33:44) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

elif ((x==y) and (y==z)):
	print("Tipo de triangulo: equilatero")
elif ((x== y) or (y==z) or (z==x)):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.209109
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:36:33) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
	print("Tipo de triangulo: equilatero")
else:
	if((x== y) or (y==z) or (z==x)):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.214309
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 12
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:36:34) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
	print("Tipo de triangulo: equilatero")
else:
	if((x== y) or (y==z) or (z==x)):
	print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 12
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:36:43) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
		print("Tipo de triangulo: equilatero")
else:
	if((x== y) or (y==z) or (z==x)):
		print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:36:45) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
		print("Tipo de triangulo: equilatero")
else:
	if((x== y) or (y==z) or (z==x)):
		print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.147273
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 13
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:36:45) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
		print("Tipo de triangulo: equilatero")
else:
	if((x== y) or (y==z) or (z==x)):
		print("Tipo de triangulo: isoceles")
else:
	print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:37:12) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
		print("Tipo de triangulo: equilatero")
	else:
		if((x== y) or (y==z) or (z==x)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.184509
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:13) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
		print("Tipo de triangulo: equilatero")
	else:
		if((x== y) or (y==z) or (z==x)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:37:55) 
-- CODE:
x= float(input("Lado X:"))
y= float(input("Lado Y:"))
z= float(input("Lado Z:"))

print("Entradas:", x, ",", y, ",", z)

if ((x>= y+z) or (y>= x+z) or (z>= y+x)):
	print("Tipo de triangulo: invalido")

else: 
	if((x==y) and (y==z)):
		print("Tipo de triangulo: equilatero")
	else:
		if((x== y) or (y==z) or (z==x)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.12145
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
