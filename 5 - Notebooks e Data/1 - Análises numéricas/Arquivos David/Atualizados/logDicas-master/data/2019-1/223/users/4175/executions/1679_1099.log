== TEST (2019-05-02 00:09:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: "A,",",B,","C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: "A,",",B,","C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:09:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: "A,","B,","C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: "A,","B,","C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:10:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: " A,","B,","C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: " A,","B,","C)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:10:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: " A, "," B, "," C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: " A, "," B, "," C)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:10:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: " A "," B "," C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: " A "," B "," C)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:10:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: " A,B,C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: " A,B,C)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:10:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: " A , B ,C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: " A , B ,C)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:11:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: ", A , B ,C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif: a==b and b!=c or a!=b and b==c
		print("isosceles")
	elif: a!=b and b!=c and a!=c
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 12
    elif: a==b and b!=c or a!=b and b==c
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:11:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
c = float(input("digite o valor do triangulo: "))

print("Entradas: ", A , B ,C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif a==b and b!=c or a!=b and b==c:
		print("isosceles")
	elif a!=b and b!=c and a!=c:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print("Entradas: ", A , B ,C)
NameError: name 'C' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:11:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
C = float(input("digite o valor do triangulo: "))

print("Entradas: ", A , B ,C)

if (A>0) and (B>0) and (C>0):
	if a==b and b==c:
		print("equilatero")
	elif a==b and b!=c or a!=b and b==c:
		print("isosceles")
	elif a!=b and b!=c and a!=c:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if a==b and b==c:
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:12:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A , B ,C)

if (A>0) and (B>0) and (C>0):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 4.0 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:13:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:13:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.178263
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  4.0 , 4.0 , 2.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  5.5 , 4.4 , 3.3
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  7.0 , 2.0 , 1.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:13:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:14:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0) and (A+B > C) and (A+C > B) and (C+B > A):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.147983
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  4.0 , 4.0 , 2.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  5.5 , 4.4 , 3.3
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  7.0 , 2.0 , 1.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:14:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0) and (A+B > C) and (A+C > B) and (C+B > A):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:14:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0) and (A+B > C) and (A+C > B) and (C+B > A):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:14:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0) and (A+B > C) and (A+C > B) and (C+B > A):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:14:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0) and (A+B > C) and (A+C > B) and (C+B > A):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:15:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0) and (A < B+C) and (B < C+A) and (C < A+B):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:15:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0) and (A < B+C) and (B < C+A) and (C < A+B):
	if A==B and B==C:
		print("equilatero")
	elif A==B and B!=C or A!=B and B==C:
		print("isosceles")
	elif A!=B and B!=C and A!=C:
		print("escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:18:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A < B+C) and (B < A+C) and (C A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido"
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 10
    if (A < B+C) and (B < A+C) and (C A+B):
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:21:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido"
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 19
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:21:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:21:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:21:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:21:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("digite o valor do triangulo: "))
B = float(input("digite o valor do triangulo: "))
A = float(input("digite o valor do triangulo: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.16257
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  4.0 , 4.0 , 2.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  5.5 , 4.4 , 3.3
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  7.0 , 2.0 , 1.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:22:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("lado: A")
B = float(input("lado: B"))
A = float(input("lado: C"))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 4
    B = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:22:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("lado: A"))
B = float(input("lado: B"))
A = float(input("lado: C"))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:23:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("lado A: "))
B = float(input("lado B: "))
A = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:23:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
C = float(input("lado A: "))
B = float(input("lado B: "))
A = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  4.0 , 4.0 , 2.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:23:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:23:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.163679
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:24:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:24:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:24:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:24:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:24:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:24:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:24:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:25:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if A<(B+C) and B<(A+C) and C<(A+B):
		if A==B and B==C:
			print("equilatero")
		elif A==B and B!=C or A!=B and B==C:
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.127706
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:27:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:27:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:27:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:28:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:28:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:28:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:28:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:28:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.164276
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:28:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,","C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.141338
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 7
    print("Entradas: ", A,",",B,","C)
                                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:28:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ", A,",",B,","C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    print("Entradas: ", A,",",B,","C)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:28:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:28:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.130982
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:29:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		elif (A!=B and B!=C and A!=C):
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:29:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		elif (A!=B and B!=C and A!=C):
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:30:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or B==C):
			print("isosceles")
		elif (A!=B and B!=C and A!=C):
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.200387
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:48:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.165051
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:48:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:48:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.125714
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:48:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.125389
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:48:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A: "))
B = float(input("lado B: "))
C = float(input("lado C: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:48:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.167142
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:48:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:48:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:48:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:48:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:49:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:49:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:49:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:49:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:49:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado 1: "))
B = float(input("lado 2: "))
C = float(input("lado 3: "))

print("Entradas: ",A,",",B,",",C)

if (A>0) and (B>0) and (C>0):
	if (A+B>C and A+C>B and B+C>A):
		if (A==B and B==C):
			print("equilatero")
		elif (A==B or B==C or A==C):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.166721
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 07:37:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas: ",a,",",b,",",c)

if (a>0) and (b>0) and (c>0):
	if (a+b>c and a+c>b and b+c>a):
		if (a==b and b==c):
			print("equilatero")
		elif (a==b or b==c or a==c):
			print("isosceles")
		elif (a!=b and b!=c and c!=a) :
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.188942
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
lado 1: lado 2: lado 3: Entradas:  1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 07:37:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas: ",a,",",b,",",c)

if (a>0) and (b>0) and (c>0):
	if (a+b>c and a+c>b and b+c>a):
		if (a==b and b==c):
			print("equilatero")
		elif (a==b or b==c or a==c):
			print("isosceles")
		elif (a!=b and b!=c and c!=a) :
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 07:38:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas: ",a,",",b,",",c)

if (a>0) and (b>0) and (c>0):
	if (a+b>c and a+c>b and b+c>a):
		if (a==b and b==c):
			print("equilatero")
		elif (a==b or b==c or a==c):
			print("isosceles")
		elif (a!=b and b!=c and c!=a) :
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 07:38:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado 1: "))
b = float(input("lado 2: "))
c = float(input("lado 3: "))

print("Entradas: ",a,",",b,",",c)

if (a>0) and (b>0) and (c>0):
	if (a+b>c and a+c>b and b+c>a):
		if (a==b and b==c):
			print("Tipo de triangulo: equilatero")
		elif (a==b or b==c or a==c):
			print("Tipo de triangulo: isosceles")
		elif (a!=b and b!=c and c!=a) :
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.186093
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
