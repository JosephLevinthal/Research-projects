== TEST (2019-04-23 17:50:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>0)and(b>0)and(c>0):
   elif(a==b)and(b==c):
		print("equilatero")
		elif((a==b)or(a!=c))
		print("isosceles")
		elif(a!=b)or(b!=c)
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif(a==b)and(b==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:51:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>0)and(b>0)and(c>0):
   elif(a==b)or(b==c):
		print("equilatero")
		elif((a==b)or(a!=c))
		print("isosceles")
		elif(a!=b)or(b!=c)
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif(a==b)or(b==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:51:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>0)and(b>0)and(c>0):
   elif(a==b)or(b==c):
		print("equilatero")
	elif((a==b)or(a!=c))
		print("isosceles")
	elif(a!=b)or(b!=c)
		print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif(a==b)or(b==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:51:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>0)and(b>0)and(c>0):
elif(a==b)or(b==c):
print("equilatero")
elif((a==b)or(a!=c))
print("isosceles")
elif(a!=b)or(b!=c)
print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif(a==b)or(b==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:00:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>0)and(b>0)and(c>0):
elif(a==b)or(b==c):
print("equilatero")
elif((a==b)or(a!=c)):
print("isosceles")
elif(a!=b)or(b!=c):
print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif(a==b)or(b==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:01:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>0)and(b>0)and(c>0):
elif(a==b)and(b==c):
print("equilatero")
elif((a==b)or(a!=c)):
print("isosceles")
elif(a!=b)or(b!=c):
print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif(a==b)and(b==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:01:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>0)and(b>0)and(c>0):
   elif(a==b)and(b==c):
   print("equilatero")
   elif((a==b)or(a!=c)):
   print("isosceles")
   elif(a!=b)or(b!=c):
   print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 9
    elif(a==b)and(b==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:08:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a == b)or(b != c):
		print("isosceles")
		else:
			if (a!=b)or(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  
else:
	print("invalido")
-- ERROR:
File "XXXX", line 13
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:08:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a == b)or(b != c):
		print("isosceles")
		else:
			if (a!=b)or(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  
else:
	print("invalido")
-- ERROR:
File "XXXX", line 13
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:08:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a == b)or(b != c):
		print("isosceles")
		else:
			if (a!=b)or(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- ERROR:
File "XXXX", line 13
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:09:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a == b)or(b != c):
		print("isosceles")
		else:
			if (a!=b)or(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- ERROR:
File "XXXX", line 13
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:09:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a == b)or(b!=c):
		print("isosceles")
		else:
			if (a!=b)or(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- ERROR:
File "XXXX", line 13
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:09:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a ==b)or(b!=c):
		   print("isosceles")
		else:
			if (a!=b)or(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:11:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)or(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:12:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:13:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	if(a+b)>=c:
	print("invalido")
		
  

-- ERROR:
File "XXXX", line 19
    print("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:14:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0):
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
elif(a+b)>=c:
	print("invalido")
		
  

-- ERROR:
File "XXXX", line 18
    elif(a+b)>=c:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:15:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and(a+b)>c:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:15:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and(a+b)>c:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- EXECUTION TIME:
0.161221
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:15:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and(a+b)>c:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:16:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and(a+b)>c:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:17:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:17:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:18:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:19:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("equilatero")
	else:
		if (a==b)or(b==c):
		   print("isosceles")
		else:
			if (a!=b)and(b!=c):
				print("escaleno")
else:
	print("invalido")
		
  

-- EXECUTION TIME:
0.14507
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:21:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- EXECUTION TIME:
0.164897
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo:isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:21:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- EXECUTION TIME:
0.179887
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo:isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:21:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:21:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- EXECUTION TIME:
0.131885
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo:isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:21:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:24:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:24:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- EXECUTION TIME:
0.112483
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:24:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:24:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
else:
	print(a , b , c )
	print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:26:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if (a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
else:
	print(a , b , c )
	print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:28:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
else:
	print(a , b , c )
	print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:29:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
      else:
    	print(a , b , c )
   	print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:29:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(a , b , c )
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(a , b , c )
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(a , b , c )
				print("Tipo de triangulo:escaleno")
else:
	print(a , b , c )
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 15
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:30:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:35:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a+","+b+","+c
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print("Entradas":D)
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 10
    print("Entradas":D)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:35:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a+","+b+","+c
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(D)
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    D= a+","+b+","+c
TypeError: unsupported operand type(s) for +: 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 12:36:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(D)
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:29:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(sqrt w + D)
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 11
    print(sqrt w + D)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:30:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(sqrt(w) + D)
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:30:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(str(w) + D)
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:31:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str(D))
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:32:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str D)
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 11
    print(w +str D)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:32:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str(D))
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(w +str(D))
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(w +str(D))
				print("Tipo de triangulo:escaleno")
else:
	print(w +str(D))
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 16
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:33:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str(D))
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(w +str(D))
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print(w +str(D))
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 16
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:33:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str(D))
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
			print(w +str(D))
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- ERROR:
File "XXXX", line 16
    print("Tipo de triangulo:isosceles")
                                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:33:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str(D))
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:33:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"
if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str(D))
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- EXECUTION TIME:
0.250782
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo:isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:33:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))
D= a,b,c
w="Entradas:"

if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		print(w +str(D))
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:44:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- EXECUTION TIME:
0.123169
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:45:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo:equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo:isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo:escaleno")
else:
   print("Tipo de triangulo:invalido")
		
  

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:46:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo: equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo: isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo: escaleno")
else:
   print("Tipo de triangulo: invalido")
		
  

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:46:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo: equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo: isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo: escaleno")
else:
   print("Tipo de triangulo: invalido")
		
  

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 12:47:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo: equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo: isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo: escaleno")
else:
   print("Tipo de triangulo: invalido")
		
  

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 12:47:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo: equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo: isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo: escaleno")
else:
   print("Tipo de triangulo: invalido")
		
  

-- EXECUTION TIME:
0.205108
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 12:52:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo: equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo: isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo: escaleno")
else:
   print("Tipo de triangulo: invalido")
		
  

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 12:52:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("lado a: "))
b=float(input("lado b: "))
c=float(input("lado c: "))

print("Entradas:", a, ",", b, ",", c)


if(a>=0)and(b>=0)and(c>=0)and((a+b)>c)and(b+c)>a:
	if(a==b)and(b==c):
		
		print("Tipo de triangulo: equilatero")
	else:
		if (a==b)or(b==c):
		   print("Tipo de triangulo: isosceles")
		else:
			if (a!=b)or(b!=c):
				print("Tipo de triangulo: escaleno")
else:
   print("Tipo de triangulo: invalido")
		
  

-- EXECUTION TIME:
0.140497
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
