== TEST (2019-04-04 16:55:57) 
-- CODE:
a=input("Pontos de vida: ")
b=int(input("Numero D1 de 1 a 20: "))
c=int(input("Numero D2 de 1 a 20: "))

import pi from

dano= ((5*b)**1/2) + (pi*(c/3))

print(dano)
-- ERROR:
File "XXXX", line 5
    import pi from
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:56:17) 
-- CODE:
a=input("Pontos de vida: ")
b=int(input("Numero D1 de 1 a 20: "))
c=int(input("Numero D2 de 1 a 20: "))

from pi import

dano= ((5*b)**1/2) + (pi*(c/3))

print(dano)
-- ERROR:
File "XXXX", line 5
    from pi import
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:59:50) 
-- CODE:
a=input("Pontos de vida: ")
b=int(input("Numero D1 de 1 a 20: "))
c=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= ((5*b)**1/2) + (pi*(c/3))

print(dano)
-- OUTPUT:
8.783185307179586
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 17:01:40) 
-- CODE:
a=input("Pontos de vida: ")
b=int(input("Numero D1 de 1 a 20: "))
c=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= ((5*b)**1/2) + (pi * c/3)

print(dano)
-- OUTPUT:
8.783185307179586
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 17:03:14) 
-- CODE:
a=input("Pontos de vida: ")
b=int(input("Numero D1 de 1 a 20: "))
c=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= ((5*b)**1/2) + (pi * c/3)
f=int(dano)
print(f)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 17:10:34) 
-- CODE:
a=input("Pontos de vida: ")
b=int(input("Numero D1 de 1 a 20: "))
c=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= (5*b**(1/2)) + (pi * c/3)
f=int(dano)
print(f)
-- OUTPUT:
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 17:11:18) 
-- CODE:
a=input("Pontos de vida: ")
b=int(input("Numero D1 de 1 a 20: "))
c=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= ((5*b)**(1/2)) + (pi * c/3)
f=int(dano)
print(f)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 17:14:24) 
-- CODE:
a=input("Pontos de vida: ")
D1=int(input("Numero D1 de 1 a 20: "))
D2=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= ((5*D1)**(0.5)) + (pi * (D2/3))
f=int(dano)
print(f)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 17:14:34) 
-- CODE:
a=input("Pontos de vida: ")
D1=int(input("Numero D1 de 1 a 20: "))
D2=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= ((5*D1)**(0.5)) + (pi * (D2/3))
f=int(dano)
print(f)
-- EXECUTION TIME:
0.192746
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
8
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
11
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 17:16:23) 
-- CODE:
a=input("Pontos de vida: ")
D1=int(input("Numero D1 de 1 a 20: "))
D2=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= (5*D1)**(0.5) + pi * (D2/3)
f=int(dano)
print(f)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 17:17:31) 
-- CODE:
a=input("Pontos de vida: ")
D1=int(input("Numero D1 de 1 a 20: "))
D2=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= (5*D1)**(0.5) + pi * (D2/3)
f=int(dano)
print(f)
-- EXECUTION TIME:
0.212187
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
8
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
11
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 17:18:20) 
-- CODE:
a=input("Pontos de vida: ")
D1=int(input("Numero D1 de 1 a 20: "))
D2=int(input("Numero D2 de 1 a 20: "))

from math import pi

dano= (5*D1)**(1/2) + pi * (D2/3)
f=int(dano)
print(f)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
