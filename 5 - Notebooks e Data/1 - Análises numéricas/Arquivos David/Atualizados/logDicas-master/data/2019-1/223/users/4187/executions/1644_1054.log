== TEST (2019-04-09 17:17:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P(x,y)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    P(x,y)
NameError: name 'P' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:17:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P(x,y)
print(P)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    P(x,y)
NameError: name 'P' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:17:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P=(x,y)
print(P)

-- OUTPUT:
(20, -37)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:18:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P=(x,y)
print(P)

-- OUTPUT:
(20, -37)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:19:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P=(x,y)
reta= (2*x)+y=3

-- ERROR:
File "XXXX", line 9
    reta= (2*x)+y=3
         ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:19:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P=(x,y)
reta= (2*x)+y=3

-- ERROR:
File "XXXX", line 9
    reta= (2*x)+y=3
         ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:21:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P=(x,y)
y= (2*x)-3
x= 3*2+y

-- ERROR:
File "XXXX", line 9
    reta= (2*x)+y=3
         ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:21:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))

P=(x,y)
y= (2*x)-3
x= 3*2+y

-- ERROR:
File "XXXX", line 9
    reta= (2*x)+y=3
         ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:27:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= int(input("valor de x:"))
y= int(input("valor de y:"))
if( (2*x)-3==y) and (3*2+y==3):
	print("ponto pertence a reta")
	
else:
	print("ponto nao pertence a reta")

-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:27:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= float(input("valor de x:"))
y= float(input("valor de y:"))
if( (2*x)-3==y) and (3*2+y==3):
	print("ponto pertence a reta")
	
else:
	print("ponto nao pertence a reta")

-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 17:28:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x= float(input("valor de x:"))
y= float(input("valor de y:"))
if( (2*x)-3==y) and (3*2+y==3):
	print("ponto pertence a reta")
	
else:
	print("ponto nao pertence a reta")

-- EXECUTION TIME:
0.132217
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 15:48:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Valor de x: "))
y = float(input("Valor de y: "))

valor = 2 * x + y

if valor == 3:
	mensagem = "Ponto pertence a reta"
else:
	mensagem = "Ponto nao pertence a reta"
	
print (mensagem.lower())
-- EXECUTION TIME:
0.157601
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
