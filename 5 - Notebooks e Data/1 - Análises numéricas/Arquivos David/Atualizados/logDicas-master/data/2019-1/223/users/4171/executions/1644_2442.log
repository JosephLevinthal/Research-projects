== SUBMITION (2019-04-04 22:51:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.221189
-- ERROR:
  File "/home/codebench/codes/1644/2442/main.py", line 8
    mensagem = "Par"
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:52:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:52:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:52:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:53:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:53:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 22:53:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.171582
-- ERROR:
  File "/home/codebench/codes/1644/2442/main.py", line 7
    if (num % 2 == 0):
                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:53:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 != 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 != 0):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:53:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 = 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 = 0):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:53:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero: ")

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 22:54:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- EXECUTION TIME:
0.142841
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- OUTPUT:
Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 22:54:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- EXECUTION TIME:
0.145541
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
Digite um numero: par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:54:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:55:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:55:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 22:55:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(str(mensagem))

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 22:55:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(str(mensagem))

-- EXECUTION TIME:
0.203224
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
