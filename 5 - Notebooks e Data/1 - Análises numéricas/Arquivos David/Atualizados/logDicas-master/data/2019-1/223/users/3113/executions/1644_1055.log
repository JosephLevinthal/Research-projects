== TEST (2019-04-06 21:34:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8
P=abs(D)
R=((vi)**2*sin(2*a))/g

if(R==D):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=((vi)**2*sin(2*a))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:35:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8
P=abs(D)
R=((vi)**2*sin(2*a))/str(g)

if(R==D):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=((vi)**2*sin(2*a))/str(g)
TypeError: unsupported operand type(s) for /: 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:35:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8
P=abs(D)
R=((vi)**2*sin(2*a))/str(g)

if(R==D):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=((vi)**2*sin(2*a))/str(g)
TypeError: unsupported operand type(s) for /: 'float' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:37:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

vi=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8
P=abs(D)
R=(((vi)**2)*sin(2*a))/g

if(R==D):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=(((vi)**2)*sin(2*a))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:39:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8
P=abs(D)
R=(((v)**2)*sin(2*a))/g

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=(((v)**2)*sin(2*a))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:39:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8
P=abs(D)
R=float((((v)**2)*sin(2*a))/g)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=float((((v)**2)*sin(2*a))/g)
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:44:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8

R=((v)**2)*sin(2*a)/g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=((v)**2)*sin(2*a)/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:45:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9,8

R=((v)**2)*sin(2*a)//g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    R=((v)**2)*sin(2*a)//g
TypeError: unsupported operand type(s) for //: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:47:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.2

R=((v)**2)*sin(2*a)//g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 21:47:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.2

R=((v)**2)*sin(2*a)//g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.141928
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:48:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 21:48:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.157092
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:48:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:48:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g
P=abs(D-R)

if(R==P):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 21:49:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g


if(abs(R==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.276532
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
velocidade inicial:angulo do vetor:distancia entre passaro e porco:nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:49:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g


if(abs(R==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 21:49:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g


if(abs(R==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.130296
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:49:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)//g


if(abs(R==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:51:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g


if(abs(R==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 21:51:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g


if(abs(R==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.19339
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 21:51:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g


if(abs(R==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 00:47:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g
abs

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 00:47:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g
abs

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 00:47:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g
abs

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.137705
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 00:49:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g
abs

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.111102
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 00:49:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.148406
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 00:49:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=((v)**2)*sin(2*a)/g

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.156836
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 00:50:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(R==D):
	mensagem="sim"
	elif(D+0.1==R):
		mensagem="sim"
		elif(D-0.1==R):
			mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.228103
-- ERROR:
  File "/home/codebench/codes/1644/1055/main.py", line 15
    elif(D+0.1==R):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 00:50:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(R==D):
	mensagem="sim"
	elif(D+0.1==R):
		mensagem="sim"
		elif(D-0.1==R):
			mensagem='sim'
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
File "XXXX", line 15
    elif(D+0.1==R):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 00:50:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.200698
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 00:51:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
p=abs(D-R)
if(R==p):
	mensagem="sim"
elif(p+0.1==R):
	mensagem="sim"
elif(p-0.1==R):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.165892
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 00:51:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
p=abs(D-R)
if(R==p):
	mensagem="sim"
elif(p+0.1==R):
	mensagem="sim"
elif(p-0.1==R):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 00:55:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(R==p):
	mensagem="sim"
elif(p+0.1==R):
	mensagem="sim"
elif(p-0.1==R):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if(R==p):
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 00:55:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(R==D):
	mensagem="sim"
elif(D+0.1==R):
	mensagem="sim"
elif(D-0.1==R):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 02:13:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
abs(R)
if((R==DD) and (D+0.1==R) and (D-0.1==R)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if((R==DD) and (D+0.1==R) and (D-0.1==R)):
NameError: name 'DD' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 02:13:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R)
if((P==DD) and (D+0.1==P) and (D-0.1==P)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if((P==DD) and (D+0.1==P) and (D-0.1==P)):
NameError: name 'DD' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 02:14:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R)
if((P==D) and (D+0.1==P) and (D-0.1==P)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 02:14:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R)
if((P==D) and (D+0.1==P) and (D-0.1==P)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.118425
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 02:14:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R)
if((P==D) and (P+0.1==D) and (P-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 02:15:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R)
if((P==D) and (P+0.1==D) and (P-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.170511
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 02:15:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if((R==D) and (R+0.1==D) and (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 02:15:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if((R==D) and (R+0.1==D) and (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.121176
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-07 02:20:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=round((v)**2*sin(2*a)/g,2)

if((R==D) and (R+0.1==D) and (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-07 02:20:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=round((v)**2*sin(2*a)/g,2)

if((R==D) and (R+0.1==D) and (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.127864
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 01:47:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
p=abs(D-R)<=0.1
if((R==D) and (R+0.1==D) and (R-0.1==D) and(p)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:47:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g
p=abs(D-R)<=0.1
if((R==D) and (R+0.1==D) and (R-0.1==D) and(p)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.194877
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:53:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.174631
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
velocidade inicial:angulo do vetor:distancia entre passaro e porco:nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 01:53:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:53:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.116129
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 01:54:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 01:54:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:54:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.139165
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:55:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=radians(float(input("velocidade inicial:")))
a=radians(float(input("angulo do vetor:")))
D=radians(float(input("distancia entre passaro e porco:")))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.118329
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 01:57:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=(float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
File "XXXX", line 7
    a=radians(float(input()))
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:57:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.141874
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 01:57:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) and abs(R+0.1==D) and abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 01:59:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) or abs(R+0.1==D) or abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:59:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if(abs(R==D) or abs(R+0.1==D) or abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.126685
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:00:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if((R==D) or (R+0.1==D) or (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:00:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R1=(v)**2
R2=sin(2*a)
R=R1*R2/g

if((R==D) or (R+0.1==D) or (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.169326
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:01:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(abs(R==D) or abs(R+0.1==D) or abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:01:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(abs(R==D) or abs(R+0.1==D) or abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:02:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if(abs(R==D) or abs(R+0.1==D) or abs(R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.176578
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:02:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.175872
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:02:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:03:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:03:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:03:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D) ):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:07:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:07:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:08:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (R-0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.132879
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 02:09:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if((R==D) or (abs(R+0.1==D)) or (abs(R-0.1==D))):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:09:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if((R==D) or (abs(R+0.1==D)) or (abs(R-0.1==D))):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.119426
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:09:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if((R==D) or (abs(R+0.1==D)) or (abs(R-0.1==D))):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.18513
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:09:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=float(input("distancia entre passaro e porco:"))
g=9.8

R=(v)**2*sin(2*a)/g

if((R==D) or (abs(R+0.1==D)) or (abs(R-0.1==D))):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.149615
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 02:11:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=abs((v)**2*sin(2*a)/g)

if((R==D) or (R+0.1==D) or (abs(R-0.1==D))):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.199968
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 23:58:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
p=abs(R)<0.1
if((P==D) or (P-0.1==D) or (P+0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    if((P==D) or (P-0.1==D) or (P+0.1==D)):
NameError: name 'P' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 23:59:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R)<0.1
if((P==D) or (P-0.1==D) or (P+0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 23:59:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R)<0.1
if((P==D) or (P-0.1==D) or (P+0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.130281
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 23:59:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R-D)<0.1
if((R==P) or (R-0.1==P) or (R+0.1==P)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 00:00:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(R-D)<0.1
if((R==P) or (R-0.1==P) or (R+0.1==P)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.185112
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:00:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(D-R)<0.1
if((R==P) or (R-0.1==P) or (R+0.1==P)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:00:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(D-R)<0.1
if((R==P) or (R-0.1==P) or (R+0.1==P)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:00:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(D-R)<0.1
if((R==D) or (R-0.1==D) or (R+0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 00:00:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
P=abs(D-R)<0.1
if((R==D) or (R-0.1==D) or (R+0.1==D)):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.180385
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:21:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
p=abs(D-R)
if(p<0.1):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 00:21:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*

v=float(input("velocidade inicial:"))
a=radians(float(input("angulo do vetor:")))
D=abs(float(input("distancia entre passaro e porco:")))
g=9.8

R=(v)**2*sin(2*a)/g
p=abs(D-R)
if(p<0.1):
	mensagem="sim"
else:
	mensagem="nao"
print(mensagem)
-- EXECUTION TIME:
0.145367
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
