== TEST (2019-04-25 17:43:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado 1 :"))
y = float(input("lado 2 :"))
z = float(input("lado 3 :"))
if
((x >= y + z) or(y >= x + z) or(z >= y + x)):
print("Nao eh triangulo")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 6
    if
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:43:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado x :"))
y = float(input("lado y :"))
z = float(input("lado z :"))
if
((x >= y + z) or(y >= x + z) or(z >= y + x)):
print("Nao eh triangulo")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 6
    if
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:43:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado x :"))
y = float(input("lado y :"))
z = float(input("lado z :"))
if((x >= y + z) or(y >= x + z) or(z >= y + x)):
print("Nao eh triangulo")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado x :"))
y = float(input("lado y :"))
z = float(input("lado z :"))
if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
print("Nao eh triangulo")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:46:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado x :"))
y = float(input("lado y :"))
z = float(input("lado z :"))
if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
print("Nao eh triangulo")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if ((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:46:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado x :"))
y = float(input("lado y :"))
z = float(input("lado z :"))
if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
print ("Nao eh triangulo")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if ((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print ("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:46:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado x :"))
y = float(input("lado y :"))
z = float(input("lado z :"))
if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
print ("Nao eh triangulo")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if ((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print ("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:48:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("lado x :"))
y = float(input("lado y :"))
z = float(input("lado z :"))
if ((x >= y + z) or(y >= x + z) or(z >= y + x)):
print ("invalido")
else:
if((x == y) and(y == z)):
print("equilatero")
else:
if ((x == y) or(y == z) or(z == x)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print ("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 09:49:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((a >= b + c) or(a >= b + c) or(a >= b + c)):
print ("Nao eh triangulo")
else:
if((a == b) and(a == c)):
print("equilatero")
else:
if ((a == b) or(b == c) or(c == a)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print ("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 09:50:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((escaleno >= b + c) or(a >= b + c) or(a >= b + c)):
print ("Nao eh triangulo")
else:
if((a == b) and(a == c)):
print("equilatero")
else:
if ((a == b) or(b == c) or(c == a)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print ("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 09:53:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((a >= b + c) or(a >= b + c) or(a >= b + c)):
print ("nao eh triangulo")
else:
if((a == b) and(a == c)):
print("equilatero")
else:
if ((a == b) or(b == c) or(c == a)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print ("nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 09:56:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((a >= b + c) or (a >= b + c) or (a >= b + c)):
print("nao eh triangulo")
else:
if((a == b) and (a == c)):
print("equilatero")
else:
if ((a == b) or (b == c) or (c == a)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    print("nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 09:57:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((a >= b + c) or (a >= b + c) or (a >= b + c)):
else:
if((a == b) and (a == c)):
print("equilatero")
else:
if ((a == b) or (b == c) or (c == a)):
print("isosceles")
else:
print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 7
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 10:02:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((a >= b + c) or (a >= b + c) or (a >= b + c)):
   print("Nao eh triangulo")
else:
   if((a == b) and (a == c)):
      print("equilatero")
else:
   if ((a == b) or (b == c) or (c == a)):
       print("isosceles")
else:
        print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-26 10:03:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((a >= b + c) or (a >= b + c) or (a >= b + c)):
   print("Nao eh triangulo")
else:
   if((a == b) and (a == c)):
     print("equilatero")
else:
   if ((a == b) or (b == c) or (c == a)):
       print("isosceles")
else:
        print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:57:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("lado a :"))
b = float(input("lado b :"))
c = float(input("lado c :"))
if ((a >= b + c) or (a >= b + c) or (a >= b + c)):
   print("Nao eh triangulo")
else:
   if((a == b) and (a == c)):
      print("equilatero")
else:
   if ((a == b) or (b == c) or (c == a)):
       print("isosceles")
else:
        print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:54:37) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Nao eh triangulo")
else:
   if((a==b)and(a==c)):
      print("equilatero")
else:
   if((a == b)or(b == c)or(c == a)):
       print("isosceles")
else:
       print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:54:56) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Nao eh triangulo")
else:
   if((a==b)and(a==c)):
      print("equilatero")
   else:
   if((a == b)or(b == c)or(c == a)):
       print("isosceles")
else:
       print("escaleno")
			 
			 
-- ERROR:
File "XXXX", line 11
    if((a == b)or(b == c)or(c == a)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:55:48) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Nao eh triangulo")
else:
   if((a==b)and(a==c)):
      print("equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("isosceles")
      else:
         print("escaleno")
			 
			 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:56:10) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Nao eh triangulo")
else:
   if((a==b)and(a==c)):
      print("equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("isosceles")
      else:
         print("escaleno")
			 
			 
-- EXECUTION TIME:
0.172525
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:56:19) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Nao eh triangulo")
else:
   if((a==b)and(a==c)):
      print("equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("isosceles")
      else:
         print("escaleno")
			 
			 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:56:34) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Nao eh triangulo")
else:
   if((a==b)and(a==c)):
      print("equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("isosceles")
      else:
         print("escaleno")
			 
			 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:56:48) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Nao eh triangulo")
else:
   if((a==b)and(a==c)):
      print("equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("isosceles")
      else:
         print("escaleno")
			 
			 
-- EXECUTION TIME:
0.185338
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:59:09) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Tipo de triangulo: Invalido")
else:
   if((a==b)and(a==c)):
      print("Tipo de triangulo: equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("Tipo de triangulo: isosceles")
      else:
         print("Tipo de triangulo: escaleno")
			 
			 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:59:24) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Tipo de triangulo: Invalido")
else:
   if((a==b)and(a==c)):
      print("Tipo de triangulo: equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("Tipo de triangulo: isosceles")
      else:
         print("Tipo de triangulo: escaleno")
			 
			 
-- EXECUTION TIME:
0.165361
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: Invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 20:59:34) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Tipo de triangulo: invalido")
else:
   if((a==b)and(a==c)):
      print("Tipo de triangulo: equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("Tipo de triangulo: isosceles")
      else:
         print("Tipo de triangulo: escaleno")
			 
			 
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:59:53) 
-- CODE:
a=float(input("lado a :"))
b=float(input("lado b :"))
c=float(input("lado c :"))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
   print("Tipo de triangulo: invalido")
else:
   if((a==b)and(a==c)):
      print("Tipo de triangulo: equilatero")
   else:
      if((a == b)or(b == c)or(c == a)):
         print("Tipo de triangulo: isosceles")
      else:
         print("Tipo de triangulo: escaleno")
			 
			 
-- EXECUTION TIME:
0.135525
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
