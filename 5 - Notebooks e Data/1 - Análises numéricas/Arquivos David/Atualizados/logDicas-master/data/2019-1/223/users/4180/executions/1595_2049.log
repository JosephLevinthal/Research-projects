== TEST (2019-03-26 16:40:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(12)
y=(6)
print(x+y)
-- OUTPUT:
18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:40:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(12)
y=(6)
print(x//y)
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:40:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=input(12)
y=input(6)
print(x//y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x//y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:41:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x//y)
print()
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:41:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x//y)
print(x%y)
-- OUTPUT:
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:41:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.178034
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:47:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)
-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:47:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.174319
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:47:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)
-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:47:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.134812
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:47:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(13)
print(6)
print(x//y)
print(x%y)
-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:47:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(13)
print(6)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.093538
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:48:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(x=(13))
print(y=(6))
print(13)
print(6)
print(x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(x=(13))
TypeError: 'x' is an invalid keyword argument for this function
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:48:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(x=(13))
print(y=(6))
print(13)
print(6)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.195632
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/2049/main.py", line 4, in <module>
    print(x=(13))
TypeError: 'x' is an invalid keyword argument for this function

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:48:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(13)
print(6)
print(x//y)
print(x%y)
-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:48:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(13)
print(6)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.20429
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:48:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(13)
print(6)
print(x//y)
print(x%y)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:49:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(13)
print(6)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.146861
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:49:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:49:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.154038
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:04:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:04:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.216832
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:08:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
dividendo= print(x)
divisor= print(y)
quociente= print(x//y)
resto= print(x%y)
print(dividendo)
-- OUTPUT:
13
6
2
1
None
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:08:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
dividendo= print(x)
divisor= print(y)
quociente= print(x//y)
resto= print(x%y)
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.201518
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
None
None
None
None
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
None
None
None
None
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
None
None
None
None
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:08:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
dividendo= print(x)
divisor= print(y)
quociente= print(x//y)
resto= print(x%y)
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- OUTPUT:
13
6
2
1
None
None
None
None
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:09:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
dividendo= print(x)
divisor= print(int(y))
quociente= print(int(x//y))
resto= print(int(x%y))

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:10:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(13)
y=(6)
dividendo= print(x)
divisor= print(int(y))
quociente= print(int(x//y))
resto= print(int(x%y))

-- EXECUTION TIME:
0.12979
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:11:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(9)
y=(4)
dividendo= print(x)
divisor= print(int(y))
quociente= print(int(x//y))
resto= print(int(x%y))

-- OUTPUT:
9
4
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:12:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(9)
y=(4)
dividendo= print(int(x))
divisor= print(int(y))
quociente= print(int(x//y))
resto= print(int(x%y))

-- EXECUTION TIME:
0.132947
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
9
4
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
9
4
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
9
4
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:12:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(9)
y=(4)
dividendo= print(int(x))
divisor= print(int(y))
quociente= print(int(x//y))
resto= print(int(x%y))

-- OUTPUT:
9
4
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:14:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(9)
y=(4)
dividendo= print(int(x))
divisor= print(int(y))
quociente= print(int(x//y))




-- OUTPUT:
9
4
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:14:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(9)
y=(4)
dividendo= print(int(x))
divisor= print(int(y))
quociente= print(int(x//y))




-- EXECUTION TIME:
0.225021
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
9
4
2
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
9
4
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
9
4
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:15:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(9)
y=(4)
print(int(x))
print(int(y))
print(int(x//y))
-- EXECUTION TIME:
0.14395
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
9
4
2
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
9
4
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
9
4
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:18:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))
print(int(x))
print(int(y))
print(int(x//y))
-- OUTPUT:
8
5
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:18:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))
print(int(x))
print(int(y))
print(int(x//y))
-- EXECUTION TIME:
0.0990479
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:18:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))
print(int(x))
print(int(y))
print(int(x//y))
-- OUTPUT:
8
5
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:19:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))
print(int(x))
print(int(y))
print(int(x//y))
-- EXECUTION TIME:
0.20856
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:19:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))
print(int(x))
print(int(y))
print(int(x//y))
-- OUTPUT:
8
5
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:19:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))

print(int(x))
print(int(y))
print(int(x//y))
-- EXECUTION TIME:
0.14547
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:20:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))

print(x)
print(y)
print(x//y)
print(x%y)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:20:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input('x:'))
y=int(input('y:'))

print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.148524
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:19:29) 
-- CODE:
dividendo=int(input('dividendo'))
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:20:06) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:21:04) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- EXECUTION TIME:
0.130532
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/2049/main.py", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:21:08) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- EXECUTION TIME:
0.195638
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/2049/main.py", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:21:16) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:21:25) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:21:57) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 09:22:26) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- EXECUTION TIME:
0.130306
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/2049/main.py", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 09:22:29) 
-- CODE:
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:12:21) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- EXECUTION TIME:
0.202563
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/2049/main.py", line 3, in <module>
    dividendo=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:12:22) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
dividendo=int(input('dividendo'))
divisor=int(input('divisor'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    dividendo=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:12:46) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- EXECUTION TIME:
0.161062
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/2049/main.py", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:12:47) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%diviosor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(dividendo%diviosor)
NameError: name 'diviosor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:13:27) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- EXECUTION TIME:
0.169466
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
5
8
0
5
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
2
14
0
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
2
347
0
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:13:28) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- OUTPUT:
5
8
0
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:14:08) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
print(int(dividendo))
print(int(divisor))
print(int(dividendo//divisor))
print(int(dividendo%divisor))
-- EXECUTION TIME:
0.24682
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
5
8
0
5
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
2
14
0
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
2
347
0
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:14:10) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
print(int(dividendo))
print(int(divisor))
print(int(dividendo//divisor))
print(int(dividendo%divisor))
-- OUTPUT:
5
8
0
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:14:43) 
-- CODE:
divisor=int(input('21'))
dividendo=int(input('5'))
print(int(dividendo))
print(int(divisor))
print(int(dividendo//divisor))
print(int(dividendo%divisor))
-- OUTPUT:
5
8
0
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:15:04) 
-- CODE:
divisor=int(input('9'))
dividendo=int(input('4'))
print(int(dividendo))
print(int(divisor))
print(int(dividendo//divisor))
print(int(dividendo%divisor))
-- OUTPUT:
5
8
0
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:15:08) 
-- CODE:
divisor=int(input('9'))
dividendo=int(input('4'))
print(int(dividendo))
print(int(divisor))
print(int(dividendo//divisor))
print(int(dividendo%divisor))
-- EXECUTION TIME:
0.142788
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
5
8
0
5
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
2
14
0
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
2
347
0
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:15:10) 
-- CODE:
divisor=int(input('9'))
dividendo=int(input('4'))
print(int(dividendo))
print(int(divisor))
print(int(dividendo//divisor))
print(int(dividendo%divisor))
-- OUTPUT:
5
8
0
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:15:26) 
-- CODE:
divisor=int(input('9'))
dividendo=int(input('4'))
print(int(dividendo))
print(int(divisor))
print(int(dividendo//divisor))
print(int(dividendo%divisor))
-- OUTPUT:
5
8
0
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:16:59) 
-- CODE:
divisor=int(input('9'))
dividendo=int(input('4'))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- EXECUTION TIME:
0.212834
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
5
8
0
5
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
2
14
0
2
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
2
347
0
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 10:20:41) 
-- CODE:
dividendo=int(input("dividendo?"))
divisor=int(input("divisor?"))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- EXECUTION TIME:
0.179972
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 10:21:26) 
-- CODE:
dividendo=int(input("dividendo?"))
divisor=int(input("divisor?"))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:56:51) 
-- CODE:
dividendo=int(input("dividendo?"))
divisor=int(input("divisor?"))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:58:09) 
-- CODE:
 dividendo=int(input("dividendo?"))
divisor=int(input("divisor?"))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- ERROR:
File "XXXX", line 1
    dividendo=int(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:58:14) 
-- CODE:
dividendo=int(input("dividendo?"))
divisor=int(input("divisor?"))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 08:58:18) 
-- CODE:
dividendo=int(input("dividendo?"))
divisor=int(input("divisor?"))
print(dividendo)
print(divisor)
print(dividendo//divisor)
print(dividendo%divisor)
-- EXECUTION TIME:
0.184611
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
