== TEST (2019-05-02 15:52:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("pontoA: "))
b= float(input("pontoB: "))
c= float(input("pontoC: "))
d= float(input("pontoD"))

if (b < a or d < c):
	print("Entradas invalidas")
elif(b >= c or b>= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
-- OUTPUT:
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:53:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("pontoA: "))
b= float(input("pontoB: "))
c= float(input("pontoC: "))
d= float(input("pontoD"))

print("Intervalo:", a, ",", b)
print("Intervalo:", c, ",", d)

if (b < a or d < c):
	print("Entradas invalidas")
elif(b >= c or b>= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
-- OUTPUT:
Intervalo: 1.0 , 2.0
Intervalo: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:54:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a= float(input("pontoA: "))
b= float(input("pontoB: "))
c= float(input("pontoC: "))
d= float(input("pontoD"))

print("Intervalo:", a, ",", b)
print("Intervalo:", c, ",", d)

if (b < a or d < c):
	print("Entradas invalidas")
elif(b >= c or b>= d):
	print("Ha intersecao")
else:
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.129371
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo: 1.0 , 2.0
Intervalo: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo: 1.5 , 5.0
Intervalo: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo: -1.0 , -3.0
Intervalo: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
