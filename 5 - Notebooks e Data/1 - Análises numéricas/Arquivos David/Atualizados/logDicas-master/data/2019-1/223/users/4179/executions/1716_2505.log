== TEST (2019-05-14 16:16:20) 
-- CODE:
print(trancar curso)
-- ERROR:
File "XXXX", line 1
    print(trancar curso)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:16:30) 
-- CODE:
print("trancar curso)
-- ERROR:
File "XXXX", line 1
    print("trancar curso)
                        ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:16:35) 
-- CODE:
print("trancar curso")
-- OUTPUT:
trancar curso
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:36:56) 
-- CODE:
from math import
x = eval(input(""))
k = int(input(""))
contador = 1
sinal = -1
soma = x
expoente = 3
while (contador < k):
	soma  = soma + (sinal * (x**expoente/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
print(round(soma,10))
	
-- ERROR:
File "XXXX", line 1
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:37:15) 
-- CODE:
x = eval(input(""))
k = int(input(""))
contador = 1
sinal = -1
soma = x
expoente = 3
while (contador < k):
	soma  = soma + (sinal * (x**expoente/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
print(round(soma,10))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = eval(input(""))
  File "<string>", line 1, in <module>
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:37:22) 
-- CODE:
x = eval(input(""))
k = int(input(""))
contador = 1
sinal = -1
soma = x
expoente = 3
while (contador < k):
	soma  = soma + (sinal * (x**expoente/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
print(round(soma,10))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = eval(input(""))
  File "<string>", line 1, in <module>
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:38:19) 
-- CODE:
from math import *
x = eval(input(""))
k = int(input(""))
contador = 1
sinal = -1
soma = x
expoente = 3
while (contador < k):
	soma  = soma + (sinal * (x**expoente/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
print(round(soma,10))
	
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:38:46) 
-- CODE:
from math import *
x = eval(input("Qual valor de x: "))
k = int(input("Numero de termos: "))
contador = 1
sinal = -1
soma = x
expoente = 3
while (contador < k):
	soma  = soma + (sinal * (x**expoente/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
print(round(soma,10))
	
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:39:01) 
-- CODE:
from math import *
x = eval(input("Qual valor de x: "))
k = int(input("Numero de termos: "))
contador = 1
sinal = -1
soma = x
expoente = 3
while (contador < k):
	soma  = soma + (sinal * (x**expoente/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
print(round(soma,10))
	
-- EXECUTION TIME:
0.191731
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
