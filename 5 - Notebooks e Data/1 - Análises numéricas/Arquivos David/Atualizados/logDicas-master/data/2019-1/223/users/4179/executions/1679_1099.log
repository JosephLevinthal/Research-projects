== TEST (2019-04-25 16:26:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:14:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b > c and a + c > b and b + c > a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 3
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:16:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b >= c and a + c >=  b and b + c >= a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 3
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:16:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b > c and a + c > b and b + c > a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:17:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b > c and a + c > b and b + c > a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- EXECUTION TIME:
0.152351
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:17:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b > c and a + c > b and b + c > a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:17:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b > c and a + c > b and b + c > a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- EXECUTION TIME:
0.137688
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:18:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b < c and a + c < b and b + c < a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:18:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b < c and a + c < b and b + c < a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- EXECUTION TIME:
0.159217
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:18:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b <= c and a + c <= b and b + c <= a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:18:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0) or (a + b <= c and a + c <= b and b + c <= a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- EXECUTION TIME:
0.230399
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:20:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 and b < 0 and c < 0) or (a + b < c and a + c < b and b + c < a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:20:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 and b < 0 and c < 0) or (a + b > c and a + c > b and b + c > a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:20:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 and b < 0 and c < 0) or (a + b > c and a + c > b and b + c > a):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- EXECUTION TIME:
0.152601
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:22:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 and b < 0 and c < 0) or (a < b + c and b < c + a and c < a +b):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:23:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a <= b + c and b <= c + a and c <= a +b):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:23:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a <= b + c and b <= c + a and c <= a +b):
	print ("Tipo de triangulo: invalido")
elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- EXECUTION TIME:
0.23542
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:23:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a <= b + c and b <= c + a and c <= a +b):
	print ("Tipo de triangulo: invalido")
	elif (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
	elif (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 13
    elif (a == b and b == c): 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:23:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a <= b + c and b <= c + a and c <= a +b):
	print ("Tipo de triangulo: invalido")
	if (a == b and b == c): 
	print ("Tipo de triangulo: equilatero")
	if (a == b or b == c or a == c):
	print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- ERROR:
File "XXXX", line 14
    print ("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:24:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a <= b + c and b <= c + a and c <= a +b):
	print ("Tipo de triangulo: invalido")
	if (a == b and b == c): 
		print ("Tipo de triangulo: equilatero")
	if (a == b or b == c or a == c):
		print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:24:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída


a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a <= b + c and b <= c + a and c <= a +b):
	print ("Tipo de triangulo: invalido")
	if (a == b and b == c): 
		print ("Tipo de triangulo: equilatero")
	if (a == b or b == c or a == c):
		print ("Tipo de triangulo: isosceles")
else:
	print ("Tipo de triangulo: escaleno")


-- EXECUTION TIME:
0.158264
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:26:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas: " a, "," b, "," c)



-- ERROR:
File "XXXX", line 8
    print("Entradas: " a, "," b, "," c)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:27:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:32:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 or b < 0 or c < 0) or (a > b + c or b > a + c or c > a + b):
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:32:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 or b < 0 or c < 0) or (a > b + c or b > a + c or c > a + b):
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:32:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 or b < 0 or c < 0) or (a > b + c or b > a + c or c > a + b):
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:32:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a < 0 or b < 0 or c < 0) or (a > b + c or b > a + c or c > a + b):
	print("Tipo de triangulo: invalido")



-- EXECUTION TIME:
0.144069
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:42:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
elif (a == b and b ==c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
elif (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 11
    elif (a == b and b ==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:43:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0): and (a + b > c and a + c > b and b + c > a):
elif (a == b and b ==c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
elif (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 10
    if (a > 0 and b > 0 and c > 0): and (a + b > c and a + c > b and b + c > a):
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:43:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
elif (a == b and b ==c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
elif (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 11
    elif (a == b and b ==c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:44:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
elif (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 11
    elif (a == b and b == c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:44:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
elif (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 11
    elif (a == b and b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:44:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	elif (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
	elif (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 11
    elif (a == b and b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:44:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	elif (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
	elif (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 12
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:44:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	if (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
	if (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 12
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:45:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
	if (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
	
	if (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 12
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:46:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
	print("Tipo de triangulo: equilatero")
	
	if (a == b or b == c or c == a):
	print("Tipo de triangulo: isosceles")
	
	if (a != b and b != c):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 12
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:46:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	
	if (a == b or b == c or c == a):
		print("Tipo de triangulo: isosceles")
	
	if (a != b and b != c):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:46:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	
	if (a == b or b == c or c == a):
		print("Tipo de triangulo: isosceles")
	
	if (a != b and b != c):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- EXECUTION TIME:
0.265495
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:47:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
elif (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	
elif (a == b or b == c or c == a):
		print("Tipo de triangulo: isosceles")
	
elif (a != b and b != c):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 11
    elif (a == b and b == c):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:47:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	elif (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	
	elif (a == b or b == c or c == a):
		print("Tipo de triangulo: isosceles")
	
	elif (a != b and b != c):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- ERROR:
File "XXXX", line 11
    elif (a == b and b == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:47:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	
	if (a == b or b == c or c == a):
		print("Tipo de triangulo: isosceles")
	
	if (a != b and b != c):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:48:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input("Lado a: "))
b=float(input("Lado b: "))
c=float(input("Lado c: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0) and (a + b > c and a + c > b and b + c > a):
	if (a == b and b == c):
		print("Tipo de triangulo: equilatero")
	
	if (a == b or b == c or c == a):
		print("Tipo de triangulo: isosceles")
	
	if (a != b and b != c):
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")



-- EXECUTION TIME:
0.169541
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
