== TEST (2019-05-02 16:13:13) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

print (d1)
print (d2)
print (rodadas)

  
-- OUTPUT:
5
3
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:16:37) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

print (d1)
print (d2)
print (rodadas)

 if (d1 + d2 == 12):
		print ("CONSTRUCAO")
		pontosVida = d1 + d2 + 1
		print (pontosVida)
		
	
-- ERROR:
File "XXXX", line 12
    if (d1 + d2 == 12):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:17:28) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

print (d1)
print (d2)
print (rodadas)

if (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
		
	
-- OUTPUT:
5
3
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:41) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

print (d1)
print (d2)
print (rodadas)

if (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- OUTPUT:
5
3
8
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:21:11) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida


if (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.231142
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
FRAQUEZA
15
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:
FRAQUEZA
56
-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
POLEN
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:21:44) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- OUTPUT:
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:25:08) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if d1 >= 1 and d1 <= 6 and d2 >= 1 and d2 <= 6 rodadas < 0:
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.121281
-- ERROR:
  File "/home/codebench/codes/1715/3060/main.py", line 8
    if d1 >= 1 and d1 <= 6 and d2 >= 1 and d2 <= 6 rodadas < 0:
                                                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:25:47) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if d1 < 1 and d1 > 6 and d2 < 1 and d2 > 6 rodadas < 0:
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.223622
-- ERROR:
  File "/home/codebench/codes/1715/3060/main.py", line 8
    if d1 < 1 and d1 > 6 and d2 < 1 and d2 > 6 rodadas < 0:
                                                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:25:51) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if d1 < 1 and d1 > 6 and d2 < 1 and d2 > 6 rodadas < 0:
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- ERROR:
File "XXXX", line 8
    if d1 < 1 and d1 > 6 and d2 < 1 and d2 > 6 rodadas < 0:
                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:27:04) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 < 1) and (d1 > 6) and (d2 < 1) and (d2 > 6) and (rodadas < 0):
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.198831
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
FRAQUEZA
15
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:
FRAQUEZA
56
-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
POLEN
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:27:11) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 < 1) and (d1 > 6) and (d2 < 1) and (d2 > 6) and (rodadas < 0):
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- OUTPUT:
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:33:16) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 != 1) and (d1 != 2) and (d1 != 3) and (d1 !=4) and (d1 != 5) and (d1 != 6) and (d2 != 1) and (d2 != 2) and (d2 != 3) and (d2 !=4) and (d2 != 5) and (d2 != 6) and (rodada < 0):
		print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.201617
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
FRAQUEZA
15
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:

-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
POLEN
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:33:22) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 != 1) and (d1 != 2) and (d1 != 3) and (d1 !=4) and (d1 != 5) and (d1 != 6) and (d2 != 1) and (d2 != 2) and (d2 != 3) and (d2 !=4) and (d2 != 5) and (d2 != 6) and (rodada < 0):
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.171798
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
FRAQUEZA
15
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:

-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
POLEN
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:33:25) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 != 1) and (d1 != 2) and (d1 != 3) and (d1 !=4) and (d1 != 5) and (d1 != 6) and (d2 != 1) and (d2 != 2) and (d2 != 3) and (d2 !=4) and (d2 != 5) and (d2 != 6) and (rodada < 0):
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- OUTPUT:
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:33:46) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 != 1) and (d1 != 2) and (d1 != 3) and (d1 !=4) and (d1 != 5) and (d1 != 6) and (d2 != 1) and (d2 != 2) and (d2 != 3) and (d2 !=4) and (d2 != 5) and (d2 != 6) and (rodadas < 0):
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.145019
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
FRAQUEZA
15
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:
FRAQUEZA
56
-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
POLEN
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:33:48) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 != 1) and (d1 != 2) and (d1 != 3) and (d1 !=4) and (d1 != 5) and (d1 != 6) and (d2 != 1) and (d2 != 2) and (d2 != 3) and (d2 !=4) and (d2 != 5) and (d2 != 6) and (rodadas < 0):
	print ("Entrada invalida")
	
elif (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- OUTPUT:
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:34:30) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 != 1) and (d1 != 2) and (d1 != 3) and (d1 !=4) and (d1 != 5) and (d1 != 6) and (d2 != 1) and (d2 != 2) and (d2 != 3) and (d2 !=4) and (d2 != 5) and (d2 != 6) and (rodadas < 0):
	print ("Entrada invalida")
	
if (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- EXECUTION TIME:
0.143032
-- TEST CASE 1:
---- input:
5
3
8
---- correct output:
FRAQUEZA
15
---- user output:
FRAQUEZA
15
-- TEST CASE 2:
---- input:
7
8
5
---- correct output:
Entrada invalida
---- user output:
FRAQUEZA
56
-- TEST CASE 3:
---- input:
1
1
9
---- correct output:
POLEN
27
---- user output:
POLEN
27
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:34:33) 
-- CODE:
d1 = int(input("Dado 1: "))
d2 = int(input("Dado 2: "))
rodadas = int(input("Numero de Rodadas: "))

#Saída é o tipo de ataque realizado
#	E os pontos de vida

if (d1 != 1) and (d1 != 2) and (d1 != 3) and (d1 !=4) and (d1 != 5) and (d1 != 6) and (d2 != 1) and (d2 != 2) and (d2 != 3) and (d2 !=4) and (d2 != 5) and (d2 != 6) and (rodadas < 0):
	print ("Entrada invalida")
	
if (d1 + d2 == 12):
	print ("CONSTRUCAO")
	pontosVida = d1 + d2 + 1
	print (pontosVida)
	
elif (d1 + d2 < 5):
	print ("POLEN")
	pontosVida = (d1 + d2 +1) * rodadas
	print (pontosVida)

else:
	print ("FRAQUEZA")
	pontosVida = d1 * d2
	print (pontosVida)
		
	
-- OUTPUT:
FRAQUEZA
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
