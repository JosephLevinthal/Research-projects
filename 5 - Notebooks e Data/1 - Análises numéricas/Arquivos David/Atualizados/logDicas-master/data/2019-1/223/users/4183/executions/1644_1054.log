== TEST (2019-04-05 19:17:14) 
-- CODE:
reta = 2 * x + y = 3
X = float(input("x: "))
Y = float(input("y: "))

-- ERROR:
File "XXXX", line 1
    reta = 2 * x + y = 3
          ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:17:34) 
-- CODE:
reta = (2 * x + y = 3)
X = float(input("x: "))
Y = float(input("y: "))

-- ERROR:
File "XXXX", line 1
    reta = (2 * x + y = 3)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:17:48) 
-- CODE:
reta = (2 * x + y)
X = float(input("x: "))
Y = float(input("y: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    reta = (2 * x + y)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:20:57) 
-- CODE:
X = float(input("x: "))
Y = float(input("y: "))
reta = 2*X+Y


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    reta = (2 * x + y)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:23:32) 
-- CODE:
X = float(input("x: "))
Y = float(input("y: "))
reta = 2*X+Y
if (reta == 3):
	print("ponto pertence a reta")
else:
	print("ponto nao pertence a reta")
	

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 19:23:45) 
-- CODE:
X = float(input("x: "))
Y = float(input("y: "))
reta = 2*X+Y
if (reta == 3):
	print("ponto pertence a reta")
else:
	print("ponto nao pertence a reta")
	

-- EXECUTION TIME:
0.258495
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 19:24:50) 
-- CODE:
X = float(input("x: "))
Y = float(input("y: "))
reta = 2*X+Y
if (reta == 3):
	print("ponto pertence a reta")
else:
	print("ponto nao pertence a reta")
	

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
