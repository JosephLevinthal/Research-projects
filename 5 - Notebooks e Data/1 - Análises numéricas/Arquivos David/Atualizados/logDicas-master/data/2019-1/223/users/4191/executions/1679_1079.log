== TEST (2019-04-23 17:37:07) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A > 0) and (B > 0) and (C > 0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((A+B < C) and (B+C < A) and (A+C < B)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A > 0) and (B > 0) and (C > 0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((A+B < C) and (B+C < A) and (A+C < B)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A > 0) and (B > 0) and (C > 0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((A+B < C) and (B+C < A) and (A+C < B)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:30) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A > 0) and (B > 0) and (C > 0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((A+B < C) and (B+C < A) and (A+C < B)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A > 0) and (B > 0) and (C > 0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((A+B > C) and (B+C > A) and (A+C > B)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:38:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A > 0) and (B > 0) and (C > 0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((A+B > C) and (B+C > A) and (A+C > B)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 17:38:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

# Testa se pelo menos uma das entradas eh negativa 
if ((A > 0) and (B > 0) and (C > 0)):
	# Testa se medidas correspondem aas de um triangulo
	if ((A+B > C) and (B+C > A) and (A+C > B)):
		s = (A + B + C) / 2.0
		area = sqrt(s * (s-A) * (s-B) * (s-C))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.182565
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
