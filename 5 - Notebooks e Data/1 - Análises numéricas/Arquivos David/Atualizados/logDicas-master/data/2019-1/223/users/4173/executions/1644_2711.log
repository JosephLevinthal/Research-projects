== SUBMITION (2019-04-11 16:35:13) 
-- CODE:
valor= float(input())
tockets = float(input())
valort = float(input())
busao= float(input())
passe = float(input())
a = 100/20
print(a)
-- EXECUTION TIME:
0.130524
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
5.0
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
5.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:35:13) 
-- CODE:
valor= float(input())
tockets = float(input())
valort = float(input())
busao= float(input())
passe = float(input())
a = 100/20
print(a)
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:37:53) 
-- CODE:
valor= float(input())
tockets = float(input())
valort = float(input())
busao= float(input())
passe = float(input())

if (valor > tockets + valort + busao + passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.164236
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:37:56) 
-- CODE:
valor= float(input())
tockets = float(input())
valort = float(input())
busao= float(input())
passe = float(input())

if (valor > tockets + valort + busao + passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:38:57) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())

if (valor > tockets + valort + busao + passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.14125
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:39:37) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())

if (valor > tockets + valort + busao + passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.134818
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:40:54) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())

if (valor > (tockets*valort) + (busao*passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.213188
-- ERROR:
  File "/home/codebench/codes/1644/2711/main.py", line 7
    if (valor > (tockets*valort) + (busao*passe):
                                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:40:55) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())

if (valor > (tockets*valort) + (busao*passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.164337
-- ERROR:
  File "/home/codebench/codes/1644/2711/main.py", line 7
    if (valor > (tockets*valort) + (busao*passe):
                                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:41:01) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())

if (valor > (tockets*valort) + (busao*passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- ERROR:
File "XXXX", line 7
    if (valor > (tockets*valort) + (busao*passe):
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:41:03) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())

if (valor > (tockets*valort) + (busao*passe):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- ERROR:
File "XXXX", line 7
    if (valor > (tockets*valort) + (busao*passe):
                                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:41:27) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())
r = (tockets*valort) + (busao*passe)

if (valor > r:
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.1491
-- ERROR:
  File "/home/codebench/codes/1644/2711/main.py", line 8
    if (valor > r:
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:41:27) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())
r = (tockets*valort) + (busao*passe)

if (valor > r:
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- ERROR:
File "XXXX", line 8
    if (valor > r:
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:41:32) 
-- CODE:
valor= float(input())
tockets = int(input())
valort = float(input())
busao= int(input())
passe = float(input())
r = (tockets*valort) + (busao*passe)

if (valor > r):
	mensagem = "SUFICIENTE"
else:
	mensagem = "INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.151028
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
INSUFICIENTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
