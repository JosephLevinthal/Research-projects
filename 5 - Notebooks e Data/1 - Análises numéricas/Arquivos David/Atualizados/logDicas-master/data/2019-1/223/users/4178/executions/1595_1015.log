== TEST (2019-03-26 16:51:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
print vv
-- ERROR:
File "XXXX", line 9
    print vv
           ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(vv)?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:51:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
print (vv)
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:51:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
print (vv)
-- EXECUTION TIME:
0.161018
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:55:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
vv1= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print (vv)
-- EXECUTION TIME:
0.17339
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:55:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
vv1= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print (vv)
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:55:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
vv1= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print (vv, \nvv1, \nvv3)
-- EXECUTION TIME:
0.151321
-- ERROR:
  File "/home/codebench/codes/1595/1015/main.py", line 11
    print (vv, \nvv1, \nvv3)
                           ^
SyntaxError: unexpected character after line continuation character

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:55:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
vv1= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print (vv, \nvv1, \nvv3)
-- ERROR:
File "XXXX", line 11
    print (vv, \nvv1, \nvv3)
                           ^
SyntaxError: unexpected character after line continuation character
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:55:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
vv1= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print (vv, \n vv1, \n vv3)
-- ERROR:
File "XXXX", line 11
    print (vv, \n vv1, \n vv3)
                             ^
SyntaxError: unexpected character after line continuation character
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:56:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
vv1= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print ('vv', \n 'vv1', \n 'vv3')
-- ERROR:
File "XXXX", line 11
    print ('vv', \n 'vv1', \n 'vv3')
                                   ^
SyntaxError: unexpected character after line continuation character
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:56:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv= min(var1, var2, var3)
vv1= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print ('\nvv',  '\nvv1',  '\nvv3')
-- OUTPUT:
vv 
vv1 
vv3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:57:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print (vv1)
print (vv2)
print (vv3)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:57:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
vv3= var1 + var2 +var3 - var1 - var3
print (vv1)
print (vv2)
print (vv3)
-- EXECUTION TIME:
0.189452
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:58:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
vv3= var2 
print (vv1)
print (vv2)
print (vv3)
-- EXECUTION TIME:
0.194358
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:58:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
vv3= var2 
print (vv1)
print (vv2)
print (vv3)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:00:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
vv3= (var1 + var2 +var3)- vv1 + vv3
print (vv1)
print (vv2)
print (vv3)
-- EXECUTION TIME:
0.130612
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 10, in <module>
    vv3= (var1 + var2 +var3)- vv1 + vv3
NameError: name 'vv3' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:00:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
vv3= (var1 + var2 +var3)- vv1 + vv3
print (vv1)
print (vv2)
print (vv3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    vv3= (var1 + var2 +var3)- vv1 + vv3
NameError: name 'vv3' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 16:12:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))
v= ((var1+var2+var3)-var1-var3)
vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)

print (vv1)
print (vv2)
print (v)
-- EXECUTION TIME:
0.227791
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:12:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))
v= ((var1+var2+var3)-var1-var3)
vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)

print (vv1)
print (vv2)
print (v)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:14:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
v= ((var1+var2+var3)-var1-var3)
print (vv1)
print (vv2)
print (v)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 16:14:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
vv2= max (var1, var2, var3)
v= ((var1+var2+var3)-var1-var3)
print (vv1)
print (vv2)
print (v)
-- EXECUTION TIME:
0.123103
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:14:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
v= ((var1+var2+var3)-var1-var3)
vv2= max (var1, var2, var3)

print (vv1)
print (vv2)
print (v)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:15:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
v= ((var1+var2+var3)-var1-var3)
vv2= max (var1, var2, var3)

print (vv1)
print (v)
print (vv2)
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 16:15:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
v= ((var1+var2+var3)-var1-var3)
vv2= max (var1, var2, var3)

print (vv1)
print (v)
print (vv2)
-- EXECUTION TIME:
0.138292
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:16:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
v= ((var1+var2+var3)-var1-var3)
vv2= max (var1, var2, var3)

print (vv1)
print (v)
print (vv2)
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 16:16:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
v= ((var1+var2+var3)-var2-var3)
vv2= max (var1, var2, var3)

print (vv1)
print (v)
print (vv2)
-- EXECUTION TIME:
0.149887
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 16:17:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1= int(input("Num1:"))
var2= int(input("Num2:"))
var3= int(input("Num3:"))

vv1= min(var1, var2, var3)
v= ((var1+var2+var3)-var1-var2)
vv2= max (var1, var2, var3)

print (vv1)
print (v)
print (vv2)
-- EXECUTION TIME:
0.129543
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
