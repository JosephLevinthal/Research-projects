== TEST (2019-03-30 22:07:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

raio = input("Digite o raio")
r = float(raio)

A = math.pi * (r ** 2)

print (A)


-- OUTPUT:
63.61725123519331
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:12:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

raio = input("Digite o raio")
r = float(raio)

A = math.pi * (r ** 2)

print (round((A), 3))


-- OUTPUT:
63.617
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:14:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

raio = input("Digite o raio: ")
r = float(raio)

A = math.pi * (r ** 2)
V = (4/3) * math.pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:14:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

raio = input("Digite o raio: ")
r = float(raio)

A = math.pi * (r ** 2)
V = (4/3) * math.pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- EXECUTION TIME:
0.138414
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:15:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

From math import *

raio = input("Digite o raio: ")
r = float(raio)

A = pi * (r ** 2)
V = (4/3) * pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- ERROR:
File "XXXX", line 5
    From math import *
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:15:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

From math import *

raio = input("Digite o raio: ")
r = float(raio)

A = math.pi * (r ** 2)
V = (4/3) * math.pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- ERROR:
File "XXXX", line 5
    From math import *
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:16:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *

raio = input("Digite o raio: ")
r = float(raio)

A = math.pi * (r ** 2)
V = (4/3) * math.pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    A = math.pi * (r ** 2)
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:16:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *

raio = input("Digite o raio: ")
r = float(raio)

A = pi * (r ** 2)
V = (4/3) * pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:16:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import *

raio = input("Digite o raio: ")
r = float(raio)

A = pi * (r ** 2)
V = (4/3) * pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- EXECUTION TIME:
0.15331
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:17:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

math import

raio = input("Digite o raio: ")
r = float(raio)

A = math.pi * (r ** 2)
V = (4/3) * math.pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- ERROR:
File "XXXX", line 5
    math import
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:18:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

raio = input("Digite o raio: ")
r = float(raio)

A = math.pi * (r ** 2)
V = (4/3) * math.pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:18:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

raio = input("Digite o raio: ")
r = float(raio)

A = math.pi * (r ** 2)
V = (4/3) * math.pi * (r ** 3)

print (round((A), 3))
print (round((V), 3))


-- EXECUTION TIME:
0.143256
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
