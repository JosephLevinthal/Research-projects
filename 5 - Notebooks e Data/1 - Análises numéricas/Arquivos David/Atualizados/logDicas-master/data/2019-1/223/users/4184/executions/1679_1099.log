== TEST (2019-04-25 16:19:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("nao eh triangulo")
	
else:
	if ((x == y)) and ((y == z)):
		print("equilatero")
		
		else:
			if ((x == y)) or ((y == z)) or ((z == x)):
				print("isosceles")
				else:
					print("escaleno")
		
-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:21:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("nao eh triangulo")
	
else:
	if ((x == y)) and ((y == z)):
		print("equilatero")
		else:
			if ((x == y)) or ((y == z)) or ((z == x)):
				print("isosceles")
				else:
					print("escaleno")
		
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:21:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("nao eh triangulo")
	
else:
	if ((x == y)) and ((y == z)):
		print("equilatero")
		 else:
			if ((x == y)) or ((y == z)) or ((z == x)):
				print("isosceles")
				else:
					print("escaleno")
		
-- ERROR:
File "XXXX", line 13
    else:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:23:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("nao eh triangulo")
	
else:
	if ((x == y)) and ((y == z)):
		print("equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
				print("isosceles")
		else:
					print("escaleno")
		
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:24:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("nao eh triangulo")
	
else:
	if ((x == y)) and ((y == z)):
		print("equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
				print("isosceles")
		else:
					print("escaleno")
		
-- EXECUTION TIME:
0.135529
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:24:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
				print("isosceles")
		else:
					print("escaleno")
		
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:24:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
				print("isosceles")
		else:
					print("escaleno")
		
-- EXECUTION TIME:
0.18945
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:26:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
				print("Tipo de triangulo: isosceles")
		else:
					print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:26:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
				print("Tipo de triangulo: isosceles")
		else:
					print("Tipo de triangulo: escaleno")
		
-- EXECUTION TIME:
0.126966
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:27:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:27:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))

if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- EXECUTION TIME:
0.277909
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:30:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("entrada:" , a,","b,",",c)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
File "XXXX", line 6
    print("entrada:" , a,","b,",",c)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:30:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("entrada:" , a,",",b,",",c)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("entrada:" , a,",",b,",",c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:32:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("entradas:" , a,",",b,",",c)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("entradas:" , a,",",b,",",c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:33:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("entradas:" , x,",",y,",",z)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:33:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("entradas:" , x,",",y,",",z)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- EXECUTION TIME:
0.160146
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:33:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("entradas:" , x,",",y,",",z)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:34:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("Entradas:" , x,",",y,",",z)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:34:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input("t1: "))
y=float(input("t2: "))
z=float(input("t3: "))
print("Entradas:" , x,",",y,",",z)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- EXECUTION TIME:
0.213244
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 12:57:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input(""))
y=float(input(""))
z=float(input(""))
print("Entradas:" , x,",",y,",",z)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 12:57:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades 
x=float(input(""))
y=float(input(""))
z=float(input(""))
print("Entradas:" , x,",",y,",",z)
if ((x >= y + z)) or ((y >= x + z)) or ((z >= y + x)):
	print("Tipo de triangulo: invalido")
	
else:
	if ((x == y)) and ((y == z)):
		print("Tipo de triangulo: equilatero")
	else:
		if ((x == y)) or ((y == z)) or ((z == x)):
		   print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
		
-- EXECUTION TIME:
0.287863
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
