== TEST (2019-03-26 17:05:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371,1
d = R*mt.acost(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*cos(g1-g2))
print(d,2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    d = R*mt.acost(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*cos(g1-g2))
AttributeError: module 'math' has no attribute 'acost'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:05:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371
d = R*mt.acost(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*cos(g1-g2))
print(d,2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    d = R*mt.acost(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*cos(g1-g2))
AttributeError: module 'math' has no attribute 'acost'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:06:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371
d = R*acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
print(d,2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    d = R*acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
NameError: name 'acos' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:06:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371
d = R*mt.acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
print(d,2)

-- OUTPUT:
50.43784111966747 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:07:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371
d = R*mt.acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
print(d,2)

-- EXECUTION TIME:
0.201788
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.43784111966747 2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:07:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371.01
d = R*mt.acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
print(d,2)

-- OUTPUT:
50.43792028752357 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:07:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371.01
d = R*mt.acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
print(d,2)

-- EXECUTION TIME:
0.213971
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.43792028752357 2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:08:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371.01
d = R*mt.acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
print(round(d,2))

-- EXECUTION TIME:
0.136195
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 20:19:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("longitude de p1: ")))
t2 = mt.radians(float(input("latitude de p2: ")))
g2 = mt.radians(float(input("longitude de p2: ")))
R = 6371.01
d = R*mt.acos(mt.sin(t1)*mt.sin(t2) + mt.cos(t1)*mt.cos(t2)*mt.cos(g1-g2))
print(round(d,2))

-- EXECUTION TIME:
0.128896
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
