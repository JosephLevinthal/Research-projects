== TEST (2019-04-30 13:25:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x < a ) and ( x > b):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 13:25:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x < a ) and ( x > b):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.224438
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:25:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x < a ) and ( x > b):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:25:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x < a ) and ( x > b):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:28:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x < a ) and ( x > b):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:28:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x < a ) and ( x > b):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:30:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:30:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:30:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 13:30:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.208584
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 13:30:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 23
    elif((instalacao == 'I') and (consumo > 5000)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:50:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a<=x<=b ):
	if ( x => a ) and ( x <= b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x=>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.144289
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 10
    if ( x => a ) and ( x <= b ):
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:50:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a<=x<=b ):
	if ( x => a ) :
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x=>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.140308
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 10
    if ( x => a ) :
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:50:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a<=x<=b ):
	if ( x => a ) :
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x=>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 10
    if ( x => a ) :
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:51:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a<=x<=b ):
	if ( x >= a ) :
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x=>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.13161
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 12
    elif( x=>b ):
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:51:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a<=x<=b ):
	if ( x >= a ) :
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x=>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 12
    elif( x=>b ):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:51:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a<=x<=b ):
	if ( x >= a ) :
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>=b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.185763
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:51:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a<=x<=b ):
	if ( x >= a ) :
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>=b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:54:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( x > a ) and ( x < b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.201646
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:55:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:55:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:55:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.155491
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:55:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:58:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x=>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.227368
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 12
    elif( x=>b ):
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:58:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x=>b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 12
    elif( x=>b ):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:58:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>=b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.167904
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:58:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( b > a ):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>=b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 12
    elif( x=>b ):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:59:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>=b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.154477
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 11
    elif( x>=b ):
                ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:59:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x>=b ):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- ERROR:
File "XXXX", line 11
    elif( x>=b ):
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:00:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
elif( x>= b ):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:00:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
elif( x>= b ):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.125888
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:00:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
elif( x>= b ):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:00:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
elif( x>= b ):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
Entradas 3.0 e 4.0 invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:00:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
elif( x>= b ):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.187205
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
Entradas 3.0 e 4.0 invalidas
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:02:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if (b >a ):
		print( x , "pertence ao intervalo",a ,",",b )
elif( x>= b ):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.182533
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:02:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if (b >a ):
		print( x , "pertence ao intervalo",a ,",",b )
elif( x>= b ):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
2.0 pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:03:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
	print( x , "pertence ao intervalo",a ,",",b )
elif( x> b )or(a>x):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.149795
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:03:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
	print( x , "pertence ao intervalo",a ,",",b )
elif( x> b )or(a>x):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:04:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
	print( x , "pertence ao intervalo",a ,",",b )
elif( x> b )or(a>x):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.219435
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:04:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
	print( x , "pertence ao intervalo",a ,",",b )
elif( x> b )or(a>x):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:04:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
	print( x , "pertence ao intervalo",a ,",",b )
elif( x> b )or(a>x):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:05:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
	print( x , "pertence ao intervalo",a ,",",b )
elif( x> b )or(a>x):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:05:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if ( a <= x<=b ):
	print( x , "pertence ao intervalo",a ,",",b )
elif( x> b )or(a>x):
	print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:06:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if(b>a):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x> b )or(a>x):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:06:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float (input ("x: "))
a = float (input ("a: "))
b = float (input ("b: "))

if(b>a):
	if ( a <= x<=b ):
		print( x , "pertence ao intervalo",a ,",",b )
	elif( x> b )or(a>x):
		print( x , "nao pertence ao intervalo",a ,",",b )
else:
	print("Entradas" , a ,"e", b , "invalidas")	


-- EXECUTION TIME:
0.308355
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
