== TEST (2019-04-05 17:46:57) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de ônibus:"))
vp=float(input("valor dos passes:"))

d=q+va
p=d-va

if(v<=va):
	d
	print(d)
else:
	

-- ERROR:
File "XXXX", line 15
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 17:47:03) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de ônibus:"))
vp=float(input("valor dos passes:"))

d=q+va
p=d-va

if(v<=va):
	d
	print(d)
else:
	v

-- ERROR:
File "XXXX", line 15
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:47:06) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=d-v
s=qp * vp
f=p-s


if():
	
	p=
else:
	v
	p=
-- ERROR:
File "XXXX", line 15
    p=
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:51:55) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=v-d
s=qp * vp
f=p-s

if(f<v):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:52:15) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=v-d
s=qp * vp
f=p-s

if(f<v):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem.upper())
-- EXECUTION TIME:
0.194377
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:53:03) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=v-d
s=qp * vp
f=p-s

if(v>f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem.upper())
-- EXECUTION TIME:
0.205333
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:53:06) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=v-d
s=qp * vp
f=p-s

if(v>f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:53:23) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=v-d
s=qp * vp
f=p-s

if(v=>f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem.upper())
-- ERROR:
File "XXXX", line 12
    if(v=>f):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:53:32) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=v-d
s=qp * vp
f=p-s

if(v>=f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem.upper())
-- EXECUTION TIME:
0.15421
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:53:43) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
p=v-d
s=qp * vp
f=p-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.243644
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:55:00) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
s=(qp * vp)+d
f=p-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f=p-s
NameError: name 'p' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:55:11) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
s=(qp * vp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem)
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:55:13) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
s=(qp * vp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.233383
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:56:50) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=q*va
s=(qp * vp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.136326
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:58:02) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp * gp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    s=(vp * gp)+d
NameError: name 'gp' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:58:05) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp * gp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"
print(mensagem)
-- EXECUTION TIME:
0.226761
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/2711/main.py", line 8, in <module>
    s=(vp * gp)+d
NameError: name 'gp' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:58:48) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*gp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- EXECUTION TIME:
0.197538
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/2711/main.py", line 8, in <module>
    s=(vp*gp)+d
NameError: name 'gp' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:58:49) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*gp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    s=(vp*gp)+d
NameError: name 'gp' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:59:29) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 19:59:46) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- EXECUTION TIME:
0.162767
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 19:59:53) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=v-s

if(v >= f):
	mensagem="sUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:01:36) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:01:53) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=v-s

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:04:12) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=s-v

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- EXECUTION TIME:
0.176137
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
SUFICIENTE
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:04:13) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=s-v

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:04:21) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=s-v

if(v >= f):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 20:08:38) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=v-s
q=v-f

if(v >= q):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 20:08:38) 
-- CODE:
v=int(input("valor:"))
q=int(input("quantidade de tickets do RU:"))
va=float(input("valor dos tickets:"))
qp=int(input("quantidade de passes de onibus:"))
vp=float(input("valor dos passes:"))

d=va*q
s=(vp*qp)+d
f=v-s
q=v-f

if(v >= q):
	mensagem="SUFICIENTE"
else:
	mensagem="INSUFICIENTE"

print(mensagem.upper())
-- EXECUTION TIME:
0.153591
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
INSUFICIENTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
