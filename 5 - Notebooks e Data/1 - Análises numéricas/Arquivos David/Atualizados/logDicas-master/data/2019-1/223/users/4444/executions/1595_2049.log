== TEST (2019-03-26 16:47:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

div=int(input("digite um valor para o dividendo"))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:52:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(print%divis)
-- EXECUTION TIME:
0.1409
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/2049/main.py", line 10, in <module>
    print(print%divis)
TypeError: unsupported operand type(s) for %: 'builtin_function_or_method' and 'int'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:54:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(print % divis)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(print % divis)
TypeError: unsupported operand type(s) for %: 'builtin_function_or_method' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:55:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(print%divis)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(print%divis)
TypeError: unsupported operand type(s) for %: 'builtin_function_or_method' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:55:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(div%divis)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:55:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(div%divis)
-- EXECUTION TIME:
0.145379
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:40:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(div%divis)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 20:41:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(div%divis)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:57:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(div%divis)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-25 21:55:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nadiv=o se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
div=int(input("digite um valor para o dividendo:  "))
divis=int(input("digite um valor para o divisor:  "))
print(div)
print(divis)
print(div//divis)
print(div%divis)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
