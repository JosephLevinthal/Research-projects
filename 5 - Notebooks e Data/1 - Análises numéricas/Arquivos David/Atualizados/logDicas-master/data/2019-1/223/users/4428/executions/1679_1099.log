== TEST (2019-05-02 01:00:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c)
		print("equilatero")
		elif(a == b or b == c or c == a)
		print("isosceles")
		else("escaleno"):
	else:
		print("invalido")
else:
	print("invalido")

-- ERROR:
File "XXXX", line 14
    if(a == b and b == c)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:01:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
		print("equilatero")
		elif(a == b or b == c or c == a)
		print("isosceles")
		else("escaleno"):
	else:
		print("invalido")
else:
	print("invalido")

-- ERROR:
File "XXXX", line 15
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:01:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
		print("equilatero")
		elif(a == b or b == c or c == a):
		print("isosceles")
		else("escaleno"):
	else:
		print("invalido")
else:
	print("invalido")

-- ERROR:
File "XXXX", line 15
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:02:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else("escaleno"):
	else:
		print("invalido")
else:
	print("invalido")

-- ERROR:
File "XXXX", line 18
    else("escaleno"):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:02:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:03:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:03:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:03:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:04:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:04:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:05:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.151151
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:05:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- EXECUTION TIME:
0.186565
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:10:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input ("Lado A: "))
b = float(input ("Lado B: "))
c = float(input ("Lado C: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:13:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input ("Lado A: "))
b = float(input ("Lado B: "))
c = float(input ("Lado C: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("equilatero")
		elif(a == b or b == c or c == a):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:14:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input ("Lado A: "))
b = float(input ("Lado B: "))
c = float(input ("Lado C: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("Tipo de triangulo: equilatero")
		elif(a == b or b == c or c == a):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:14:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input ("Lado A: "))
b = float(input ("Lado B: "))
c = float(input ("Lado C: "))

print("Entradas:", a, ",", b, ",", c)

if (a > 0 and b > 0 and c > 0):
	if (a + b > c and a + c > b and c + b > a):
		if(a == b and b == c):
			print("Tipo de triangulo: equilatero")
		elif(a == b or b == c or c == a):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")

-- EXECUTION TIME:
0.149399
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
