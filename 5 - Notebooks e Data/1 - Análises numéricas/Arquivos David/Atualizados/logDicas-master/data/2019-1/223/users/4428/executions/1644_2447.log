== TEST (2019-04-15 23:57:55) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta" + " " + x, 2))

else:
	print(round("Troco de" + " " + y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta" + " " + x, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:59:36) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta" + " " + x, 2))

else:
	print (round("Troco de" + " " + y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta" + " " + x, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:00:41) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta" + " " + x, 2))

else:
	print (round("Troco de" + " " + y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta" + " " + x, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:01:37) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print ("Falta" + " " + x)

else:
	print (round("Troco de" + " " + y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print ("Falta" + " " + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:04:35) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	x = preco - pagamento
	print ("Falta" + " " + x)

else:
	print (round("Troco de" + " " + y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print ("Falta" + " " + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:06:38) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	x = preco - pagamento
	print ("Falta" + x)

else:
	print (round("Troco de" + " " + y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print ("Falta" + x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:08:46) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	x = preco - pagamento
	print ("Falta", x)

else:
	print (round("Troco de" + " " + y, 2))

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:10:35) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta", x, 2))

else:
	print (round("Troco de", y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta", x, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:11:25) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta", x), 2)

else:
	print (round("Troco de", y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta", x), 2)
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:12:11) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta" +x, 2))

else:
	print (round("Troco de", y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta" +x, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:12:35) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta" + x, 2))

else:
	print (round("Troco de", y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta" + x, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:13:09) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print (round("Falta" + x), 2)

else:
	print (round("Troco de", y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (round("Falta" + x), 2)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:14:51) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	x1 = ("Falta", x)
	print (round(x1, 2))

else:
	print (round("Troco de", y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round(x1, 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:15:39) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	x1 = ("Falta", x)
	print(round(x1, 2))

else:
	print (round("Troco de", y, 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(x1, 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:18:17) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print("Falta", x)
	
else:
	print("Troco de", y)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:18:37) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print("Falta", x)
	
else:
	print("Troco de", y)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:19:26) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = preco - pagamento
y = pagamento - preco

if(preco > pagamento):
	print("Falta", x)
	
else:
	print(round("Troco de", y), 2)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:22:17) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = round(preco - pagamento, 2)
y = pagamento - preco

if(preco > pagamento):
	print("Falta", x)
	
else:
	print(round("Troco de", y), 2)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:23:12) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = round(preco - pagamento, 2)
y = round(pagamento - preco, 2)

if(preco > pagamento):
	print("Falta", x)
	
else:
	print(round("Troco de", y)

-- ERROR:
File "XXXX", line 12
    
                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:23:30) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = round(preco - pagamento, 2)
y = round(pagamento - preco, 2)

if(preco > pagamento):
	print("Falta", x)
	
else:
	print("Troco de", y)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:24:20) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = round(preco - pagamento, 2)
y = round(pagamento - preco, 2)

if(preco > pagamento):
	print("Falta", x)
	
else:
	print("Troco de", y)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 00:24:59) 
-- CODE:
preco = float(input("Digite o preco "))
pagamento = float(input("Digite o valor do pagamento: "))

x = round(preco - pagamento, 2)
y = round(pagamento - preco, 2)

if(preco > pagamento):
	print("Falta", x)
	
else:
	print("Troco de", y)

-- EXECUTION TIME:
0.12473
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
