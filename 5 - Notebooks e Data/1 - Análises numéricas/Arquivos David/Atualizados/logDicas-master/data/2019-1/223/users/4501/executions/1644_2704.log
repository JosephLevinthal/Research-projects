== TEST (2019-04-12 21:20:59) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0==10):
   print("S")
else:
	print("N")
-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 21:21:51) 
-- CODE:
n=float(input("nota do aluno: "))
m=float(input("bonificacao: "))
if(0==10):
   print("S")
else:
	print("N")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    m=float(input())
ValueError: could not convert string to float: 'S'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 21:22:28) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: "))
if(0==10):
   print("S")
else:
	print("N")
-- ERROR:
File "XXXX", line 2
    m=input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 21:22:38) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0==10):
   print("S")
else:
	print("N")
-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 21:29:18) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0 >= 10):
   a=n*0.10
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 21:31:24) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0 >= 10):
   a=n*0.10
   print("S")
else:
   print("N")

-- OUTPUT:
N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 21:38:58) 
-- CODE:
n=float(input("nota do aluno: "))
m=float(input("bonificacao: "))
if(0 >= 10):
   a=n*0.10
   print("S")
else:
   print("N")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    m=float(input())
ValueError: could not convert string to float: 'S'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:28:38) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0 >= 10):
   a=n*0.10
   print(a , "S")
else:
   print(a , "N")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a , "N")
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:29:56) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0 >= 10):
   a=n + 0.10
   print(a , "S")
else:
   print(a , "N")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a , "N")
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:32:49) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0 >= 10):
   a=n + 0.10
   print(a)
else:
   print(a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:23:22) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0 >= 10):
   a=n + 0.10
   print(a)
else:
   print(a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:24:05) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(0 == 10):
   a=n + 0.10
   print(a, "S")
else:
   print(a, "N")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a, "N")
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:39:48) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: (S/N)")
if(m .upper() == "S"):
   a=n + 0.10
   print(a)
else:
   print(a)

-- OUTPUT:
5.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:40:40) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: (S/N)")
if(m .upper() == "S"):
   a=n + 0.10
   print(a)


-- OUTPUT:
5.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 14:41:11) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: (S/N)")
if(m .upper() == "S"):
   a=n + 0.10
   print(a)


-- EXECUTION TIME:
0.259732
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.1
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.1
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:41:27) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: (S/N)")
if(m .upper() == "S"):
   a=n * 0.10
   print(a)


-- OUTPUT:
0.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:42:30) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: (S/N)")
if(m .upper() == "S"):
   a=n * 0.10
   print(a)
else:
	print(a)

-- OUTPUT:
0.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:43:49) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: (S/N)")
if(n):
   a=n * 0.10
   print(a)
else:
	print(a)

-- OUTPUT:
0.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:44:36) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: (S/N)")
if(n):
   a=n + 0.10
   print(a)
else:
	print(a)

-- OUTPUT:
5.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 14:45:16) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(n):
   a=n + 0.10
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.190422
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.1
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.1
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:45:20) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(n):
   a=n + 0.10
   print(a)
else:
	print(a)

-- OUTPUT:
5.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:36:03) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(n >= 10):
   a=n + 0.10
   print(a)
else:
	print(a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:06:12) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if(n >= 10):
   a=n - (n * 10/100)
   print(a)
else:
	print(a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:08:37) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a=n - (n * 10/100)
if(n >= 10):
   print(a,"S")
else:
	print(a,"N")

-- OUTPUT:
4.5 N
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:09:26) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a=n - (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
4.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:10:50) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a=n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:10:50) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a=n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:12:34) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a=n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.309863
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:12:40) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a=n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.189455
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:13:28) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.19634
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:13:35) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:13:56) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:14:53) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(n >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
39.2087
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:15:22) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(0 >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:16:04) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(0 >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.228457
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:31:16) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(0 == 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:31:32) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n + (n * 10/100)
if(0 == 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.155211
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 10:49:20) 
-- CODE:
n=float(input("nota do aluno: "))
m=float(input("bonificacao: ")
a= n + (n * 10/100)
if(0 == 10):
   print(a)
else:
	print(a)

-- ERROR:
File "XXXX", line 3
    a= n + (n * 10/100)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 10:49:43) 
-- CODE:
n=float(input("nota do aluno: "))
m=float(input("bonificacao: "))
a= n + (n * 10/100)
if(0 == 10):
   print(a)
else:
	print(a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    m=float(input())
ValueError: could not convert string to float: 'S'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 10:54:40) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
a= n / (n * 10/100)
if(0 >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 10:58:59) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a= n + (n * B)
if(0 >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 10:59:13) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a= n + (n * B)
if(0 >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.157795
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:55:44) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
if(0 >= 10):
a=n+(n*b)
   print(a)
else:
	print(a)

-- ERROR:
File "XXXX", line 5
    a=n+(n*b)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:56:06) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
if(0 >= 10):
a= n + (n * b)
   print(a)
else:
	print(a)

-- ERROR:
File "XXXX", line 5
    a= n + (n * b)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:56:22) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
if(0 >= 10):
a= n + (n * B)
   print(a)
else:
	print(a)

-- ERROR:
File "XXXX", line 5
    a= n + (n * B)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:57:03) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(0 >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:58:05) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n = 0 >= 10):
   print(a)
else:
	print(a)

-- ERROR:
File "XXXX", line 5
    if(n = 0 >= 10):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:58:25) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n >= 0 >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:58:46) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n >= 0 >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.183726
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 13:59:03) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n == 0 >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 13:59:27) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n == 0 >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.187155
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:22:59) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:23:19) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 14:23:26) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 14:23:58) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n >= 10):
   print(a)
else:
	print(a)

-- EXECUTION TIME:
0.302271
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 16:01:56) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n >= 10):
   print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:05:18) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=10/100
a=n+(n*B)
if(n.upper()== "S"):
   print(a)
else:
	print(a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(n.upper()== "S"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:07:01) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n+10/100
if(n.upper()== "S"):
   print(a)
else:
	print(a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    if(n.upper()== "S"):
AttributeError: 'float' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:07:58) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n+10/100
if(m.upper()=="S" ):
   print(B)
else:
	print(B)

-- OUTPUT:
5.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:08:34) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n+(n*10/100
if(m.upper()=="S" ):
   print(B)
else:
	print(B)

-- ERROR:
File "XXXX", line 4
    if(m.upper()=="S" ):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:08:55) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n+(n*10/100)
if(m.upper()=="S" ):
   print(B)
else:
	print(B)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:09:11) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n+(n*10/100)
if(m.upper()=="S" ):
   print(B)
else:
	print(B)

-- EXECUTION TIME:
0.192091
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:16:29) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n + (n*(10/100))
if(m.upper()== "S" ):
   print(B)
else:
	print(B)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:17:39) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n + (n*(10/100))
if(m.upper()== "S" ):
   print(B)
else:
	print(B)

-- EXECUTION TIME:
0.179391
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:18:50) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n + n*(10/100)
if(m.upper()== "S" ):
   print(B)
else:
	print(B)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:19:28) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
B=n + n*(10/100)
if(m.upper()== "S" ):
   print(B)
else:
	print(B)

-- EXECUTION TIME:
0.204648
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:19:59) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n=n + n*(10/100)
if(m.upper()== "S" ):
   print(n)
else:
	print(n)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:20:52) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n=n + n*(10/100)
if(m.upper()== "S" ):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.143176
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:24:12) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n= n + n * (10/100)
if(m.upper() == "S" ):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.218057
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:24:25) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n= n + n * (10/100)
if(m.upper() == "S" ):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.142291
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:24:31) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n= n + n * (10/100)
if(m.upper() == "S" ):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.138239
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:24:44) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n= n + n * (10/100)
if(m.upper() == "S" ):
   print(n)
else:
	print(n)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:25:07) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n= n + n * (10/100)
if(m.upper() == "S" ):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.121165
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:27:49) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="S"):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.124521
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:28:07) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="S"):
   print(n)
else:
	print(n)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:28:37) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="S"):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.151095
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:28:52) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="N"):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.139192
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:28:59) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="N"):
   print(n)
else:
	print(n)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:29:20) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="S"):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.136185
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:29:23) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="S"):
   print(n)
else:
	print(n)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:29:47) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="S"):
   print(n)
else:
	print(n)

-- EXECUTION TIME:
0.109356
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.840000000000001
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:31:59) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
n = n + n * (10/100)
if (m.upper()=="S"):
   print(n)
else:
	print(n)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:33:46) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")

if (m.upper()=="S"):
	n= n + n*(10/100)
   print(n)
else:
	print(n)

-- ERROR:
File "XXXX", line 6
    print(n)
           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:34:00) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	n= n + n*(10/100)
   print(n)
else:
	print(n)

-- ERROR:
File "XXXX", line 5
    print(n)
           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:35:39) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	n = n + n*(10/100)
   print(n)
else:
	print(n)

-- ERROR:
File "XXXX", line 5
    print(n)
           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:35:54) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	n = n + n*(10/100)
    print(n)
else:
	 print(n)

-- ERROR:
File "XXXX", line 5
    print(n)
           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:38:32) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	a = n + n*(10/100)
   print(a)
else:
   print(a)

-- ERROR:
File "XXXX", line 5
    print(a)
           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:40:44) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	a = n + n*(10/100)
	print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:41:06) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	a = n + n*(10/100)
	print(a)
else:
	print(a)

-- EXECUTION TIME:
0.145575
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:41:24) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	a = n + n*(10/100)
	print(a)
else:
	print(a)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:42:19) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	a = n + n*(10/100)
	print(a)
else:
	print(n)

-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:42:41) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	a = n + n*(10/100)
	print(a)
else:
	print(n)

-- EXECUTION TIME:
0.193405
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:44:30) 
-- CODE:
n=float(input("nota do aluno: "))
m=input("bonificacao: ")
if (m.upper()=="S"):
	n = n + n*(10/100)
	print(n)
else:
	print(n)

-- EXECUTION TIME:
0.169474
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
