== SUBMITION (2019-06-12 20:54:39) 
-- CODE:
from numpy import *

medias = array(eval(input()))
pre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias))
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	elif(pre>mcarg):
		rf=rf+1
		vet[2] = rf
	else:
		a=a+1
print(vet)
-- EXECUTION TIME:
0.647633
-- ERROR:
  File "/home/codebench/codes/1807/2565/main.py", line 12
    for x in range (size(medias))
                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 20:54:55) 
-- CODE:
from numpy import *

medias = array(eval(input()))
pre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias))
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	elif(pre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	else:
		a=a+1
print(vet)
-- EXECUTION TIME:
0.699394
-- ERROR:
  File "/home/codebench/codes/1807/2565/main.py", line 12
    for x in range (size(medias))
                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 20:55:18) 
-- CODE:
from numpy import *

medias = array(eval(input()))
pre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias))
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	elif(pre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	else:
		a=a+1
		vet[0]=a
print(vet)
-- EXECUTION TIME:
0.814423
-- ERROR:
  File "/home/codebench/codes/1807/2565/main.py", line 12
    for x in range (size(medias))
                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 20:55:24) 
-- CODE:
from numpy import *

medias = array(eval(input()))
pre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias))
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	elif(pre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
File "XXXX", line 12
    for x in range (size(medias))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 20:55:45) 
-- CODE:
from numpy import *

medias = array(eval(input()))
pre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	elif(pre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	else:
		a=a+1
		vet[0]=a
print(vet)
-- EXECUTION TIME:
1.18414
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2565/main.py", line 16, in <module>
    elif(pre[x]>mcarg):
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 20:55:52) 
-- CODE:
from numpy import *

medias = array(eval(input()))
pre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	elif(pre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 20:58:20) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	elif(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 20:59:56) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
for x in range size(fre):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
print(vet)
-- EXECUTION TIME:
0.830957
-- ERROR:
  File "/home/codebench/codes/1807/2565/main.py", line 19
    for x in range size(fre):
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 21:00:00) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
for x in range size(fre):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
print(vet)
-- ERROR:
File "XXXX", line 19
    for x in range size(fre):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 21:00:31) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
for x in range (size(fre)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
print(vet)
-- EXECUTION TIME:
1.05664
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2565/main.py", line 20, in <module>
    if(fre[x]>mcarg):
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 21:00:32) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
for x in range (size(fre)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 21:01:43) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
for x in range (size(fre)):
	if(fre[x]<mcarg):
		rf=rf+1
		vet[2] = rf
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:32:12) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0,75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	elif(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:37:12) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	elif(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
print(vet)
-- EXECUTION TIME:
1.10186
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[4 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[3 0 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 5]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:37:16) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	elif(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:37:48) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	elif(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
print(vet)
-- EXECUTION TIME:
0.913177
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[4 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[3 0 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 5]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:38:15) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	elif(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:38:42) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	elif(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:38:59) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
a = 0
rn = 0
rf = 0
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		rf=rf+1
		vet[2] = rf
	elif(medias[x] < 5):
		rn=rn+1
		vet[1] = rn
	else:
		a=a+1
		vet[0]=a
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:40:13) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		vet[2] = vet[2] +1
	elif(medias[x] < 5):
		vet[1] = vet[1] +1
	else:
		vet[0]=vet[0] +1
print(vet)
-- EXECUTION TIME:
1.19602
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[4 0 1]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[3 0 4]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 0 5]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:40:20) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]>mcarg):
		vet[2] = vet[2] +1
	elif(medias[x] < 5):
		vet[1] = vet[1] +1
	else:
		vet[0]=vet[0] +1
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:43:18) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]<mcarg):
		vet[2] = vet[2] +1
	elif(medias[x] < 5):
		vet[1] = vet[1] +1
	elif((medias[x] >5 and fre[x]>=mcarg):
		vet[0]=vet[0] +1
print(vet)
-- ERROR:
File "XXXX", line 14
    elif((medias[x] >5 and fre[x]>=mcarg):
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 22:43:35) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]<mcarg):
		vet[2] = vet[2] +1
	elif(medias[x] < 5):
		vet[1] = vet[1] +1
	elif(medias[x] >5 and fre[x]>=mcarg):
		vet[0]=vet[0] +1
print(vet)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 22:43:43) 
-- CODE:
from numpy import *

medias = array(eval(input()))
fre = array(eval(input()))
ch = int(input())

vet = zeros(3,dtype=int)
mcarg = ch * 0.75
for x in range (size(medias)):
	if(fre[x]<mcarg):
		vet[2] = vet[2] +1
	elif(medias[x] < 5):
		vet[1] = vet[1] +1
	elif(medias[x] >5 and fre[x]>=mcarg):
		vet[0]=vet[0] +1
print(vet)
-- EXECUTION TIME:
1.14067
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
