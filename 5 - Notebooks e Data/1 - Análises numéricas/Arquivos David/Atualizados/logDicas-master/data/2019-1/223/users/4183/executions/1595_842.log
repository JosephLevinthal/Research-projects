== TEST (2019-03-26 21:12:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = 2
digito2 = 3
digito3 = 4
digito4 = 5
print(digito1 + digito2 + digito3 + digito4)
-- OUTPUT:
14
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 21:12:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = 2
digito2 = 3
digito3 = 4
digito4 = 5
print(digito1 + digito2 + digito3 + digito4)
-- EXECUTION TIME:
0.193251
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
14
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
14
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:13:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = int(10)
digito2 = int(12)
digito3 = int(14)
digito4 = int(16)
print(digito1 + digito2 + digito3 + digito4)
-- OUTPUT:
52
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 21:13:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = int(10)
digito2 = int(12)
digito3 = int(14)
digito4 = int(16)
print(digito1 + digito2 + digito3 + digito4)
-- EXECUTION TIME:
0.19358
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
52
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
52
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:15:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = int(input'digito')
digito2 = int(input'digito')
digito3 = int(input'digito')
digito4 = int(input'digito')
print(digito1 + digito2 + digito3 + digito4)
-- ERROR:
File "XXXX", line 4
    digito1 = int(input'digito')
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:15:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = int((input'digito'))
digito2 = int((input'digito'))
digito3 = int((input'digito'))
digito4 = int((input'digito')0
print(digito1 + digito2 + digito3 + digito4)
-- ERROR:
File "XXXX", line 4
    digito1 = int((input'digito'))
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:16:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = int(input'digito')
digito2 = int(input'digito')
digito3 = int(input'digito')
digito4 = int(input'digito')
print(digito1 + digito2 + digito3 + digito4)
-- ERROR:
File "XXXX", line 4
    digito1 = int(input'digito')
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:18:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
digito1 = int(input//'digito'//)
digito2 = int(input//'digito'//)
digito3 = int(input//'digito'//)
digito4 = int(input//'digito'//)
print(digito1 + digito2 + digito3 + digito4)
-- ERROR:
File "XXXX", line 4
    digito1 = int(input//'digito'//)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:21:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dig1 = int(input'digito')
dig2 = int(input'digito')
dig3 = int(input'digito')
dig4 = int(input'digito')
print(dig1 + dig2 + dig3 + dig4)
-- ERROR:
File "XXXX", line 4
    dig1 = int(input'digito')
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:22:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dig1 = int(input('digito'))
dig2 = int(input('digito'))
dig3 = int(input('digito'))
dig4 = int(input('digito'))
print(dig1 + dig2 + dig3 + dig4)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dig2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 21:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dig1 = int(input('digito'))
dig2 = int(input('digito'))
dig3 = int(input('digito'))
dig4 = int(input('digito'))
print(dig1 + dig2 + dig3 + dig4)
-- EXECUTION TIME:
0.190238
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/842/main.py", line 5, in <module>
    dig2 = int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:24:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dig1 = input('digito')
dig2 = input('digito')
dig3 = input('digito')
dig4 = input('digito')
print(dig1 + dig2 + dig3 + dig4)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dig2 = input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 21:25:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dig1 = input('digito')
dig2 = input('digito')
dig3 = input('digito')
dig4 = input('digito')
print(dig1 + dig2 + dig3 + dig4)
-- EXECUTION TIME:
0.208682
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/842/main.py", line 5, in <module>
    dig2 = input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:27:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dig = input('digito1' // 'digito2' // 'digito3' // 'digito4')
print(dig)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    dig = input('digito1' // 'digito2' // 'digito3' // 'digito4')
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 21:32:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
d1 = int(input("digito"))
d2 = int(input("digito"))
d3 = int(input("digito"))
d4 = int(input("digito"))
total = d1 + d2 + d3 + d4
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 21:33:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
d1 = int(input("digito"))
d2 = int(input("digito"))
d3 = int(input("digito"))
d4 = int(input("digito"))
total = d1 + d2 + d3 + d4
print(total)
-- EXECUTION TIME:
0.144952
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/842/main.py", line 5, in <module>
    d2 = int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 11:53:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
d1 = int(input("digito"))
a = (d1//1000)%10
b = (d1//100)%10
c = (d1//10)%10
d = (d1//1)%10
total = a+b+c+d
print(total)
-- EXECUTION TIME:
0.169288
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 23:08:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
dig = int(input("digito"))
a = (dig//1000)%10
b = (dig//100)%10
c = (dig//10)%10
d = (dig//1)%10
total = a+b+c+d
print(total)
-- EXECUTION TIME:
0.190952
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:41:10) 
-- CODE:
dig = int(input("digito"))
a = (dig//1000)%10
b = (dig//100)%10
c = (dig//10)%10
d = (dig//1)%10
total = a+b+c+d
print(a)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 22:41:30) 
-- CODE:
dig = int(input("digito"))
a = (dig//1000)%10
b = (dig//100)%10
c = (dig//10)%10
d = (dig//1)%10
total = a+b+c+d
print(d)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 22:41:41) 
-- CODE:
dig = int(input("digito"))
a = (dig//1000)%10
b = (dig//100)%10
c = (dig//10)%10
d = (dig//1)%10
total = a+b+c+d
print(total)
-- EXECUTION TIME:
0.116834
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
