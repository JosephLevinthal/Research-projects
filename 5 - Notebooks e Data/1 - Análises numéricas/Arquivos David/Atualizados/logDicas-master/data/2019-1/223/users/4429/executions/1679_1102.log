== TEST (2019-04-29 05:36:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3))
-- OUTPUT:
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:38:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:",vol,3)"litros")
-- ERROR:
File "XXXX", line 21
    print(round("Volume:",vol,3)"litros")
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:38:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:",vol,3),"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(round("Volume:",vol,3),"litros")
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:39:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:",vol"litros",3)
-- ERROR:
File "XXXX", line 21
    print(round("Volume:",vol"litros",3)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:39:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:",vol,3"litros")
-- ERROR:
File "XXXX", line 21
    print(round("Volume:",vol,3"litros")
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:39:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:",vol,3"litros"))
-- ERROR:
File "XXXX", line 21
    print(round("Volume:",vol,3"litros"))
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:39:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:",vol,3,"litros"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(round("Volume:",vol,3,"litros"))
TypeError: round() takes at most 2 arguments (4 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:40:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:"(vol,3)"litros"))
-- ERROR:
File "XXXX", line 21
    print(round("Volume:"(vol,3)"litros"))
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 05:40:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:"(vol,3)"litros"))
-- EXECUTION TIME:
0.148234
-- ERROR:
  File "/home/codebench/codes/1679/1102/main.py", line 21
    print(round("Volume:"(vol,3)"litros"))
                                       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:41:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round"Volume:"vol,3"litros")
-- ERROR:
File "XXXX", line 21
    print(round"Volume:"vol,3"litros")
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:41:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round"Volume:"vol,3,"litros")
-- ERROR:
File "XXXX", line 21
    print(round"Volume:"vol,3,"litros")
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:41:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:", vol,3,"litros")
-- ERROR:
File "XXXX", line 22
    
                                          ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:42:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round("Volume:", vol,3 "litros")
-- ERROR:
File "XXXX", line 21
    print(round("Volume:", vol,3 "litros")
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:42:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print("Volume"(round(vol,3 "litros")))
-- ERROR:
File "XXXX", line 21
    print("Volume"(round(vol,3 "litros")))
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:42:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print("Volume"(round(vol,3 ,"litros")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print("Volume"(round(vol,3 ,"litros")))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:43:23) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+oi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:43:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+pi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:44:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+pi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print str(round("Volume:",vol,3 ))
-- ERROR:
File "XXXX", line 21
    print str(round("Volume:",vol,3 ))
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:45:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+pi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print (str(round("Volume:",vol,3 )))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print (str(round("Volume:",vol,3 )))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:45:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+pi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print (round(,vol,3 ))
-- ERROR:
File "XXXX", line 21
    print (round(,vol,3 ))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:45:40) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+pi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print (round(,vol,3 ))
-- ERROR:
File "XXXX", line 21
    print (round(,vol,3 ))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:45:48) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+pi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(,vol,3 ))
-- ERROR:
File "XXXX", line 21
    print(round(,vol,3 ))
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:45:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*pi*h**2*(3*r-h))
elif(h<H-r):
	vol=((2./3)*pi*r**3+pi*r**2*(h-r))
elif(h<=H):
	vol=(4./3)*pi*r**3+pi*r**2*(h-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:47:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*(pi*h**2)*(3*r-h))
elif(h<H-r):
	vol=((2./3)*(pi*r**3)+(pi*r**2)*(h-r))
elif(h<=H):
	vol=(4./3)*(pi*r**3)+(pi*r**2)*(h-2*r)-(1/3)*pi*((H-h)**2)*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:40:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*(pi*h**2)*(3*r-h))
elif(h<H-r):
	vol=((2./3)*(pi*r**3)+(pi*r**2)*(h-r))
elif(h<=H):
	vol=(4./3)*(pi*r**3)+(pi*r**2)*(h-2*r)-(1/3)*pi*((H-h)**2)*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:41:50) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*(pi*h**2)*(3*r-h))
elif(h<H-r):
	vol=((2./3)*(pi*r**3)+(pi*r**2)*(h-r))
elif(h<=H):
	vol=(4./3)*(pi*r**3)+(pi*r**2)*(h-2*r)-(1/3)*pi*((H-h)**2)*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol*6,3 ))
-- EXECUTION TIME:
0.151776
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
491.923
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
799.799
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
753.982
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:41:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1./3)*(pi*h**2)*(3*r-h))
elif(h<H-r):
	vol=((2./3)*(pi*r**3)+(pi*r**2)*(h-r))
elif(h<=H):
	vol=(4./3)*(pi*r**3)+(pi*r**2)*(h-2*r)-(1/3)*pi*((H-h)**2)*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol*6,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
491.923
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:42:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1/3)*(pi*h**2)*(3*r-h))
elif(h<H-r):
	vol=((2/3)*(pi*r**3)+(pi*r**2)*(h-r))
elif(h<=H):
	vol=(4/3)*(pi*r**3)+(pi*r**2)*(h-2*r)-(1/3)*pi*((H-h)**2)*(3*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:43:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1/3)*(pi*h**2)*(3*r-h))
elif(h<H-r):
	vol=((2/3)*(pi*r**3)+(pi*r**2)*(h-r))
elif(h<=H):
	vol=(4/3)*(pi*r**3)+(pi*r**2)*(h-2*r)-(1/3)*pi*((H-h)**2)*(6*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:43:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
H=float(input("Digite a altura: "))
r=float(input("Digite o raio: "))
h=float(input("Digite o nivel de combustivel: "))
print("Entradas:", H, ",", r, ",", h)
if(h<0 or H<0 or r<0):
	vol=("Entradas invalidas")
elif(h<r):
	vol=((1/3)*(pi*h**2)*(3*r-h))
elif(h<H-r):
	vol=((2/3)*(pi*r**3)+(pi*r**2)*(h-r))
elif(h<=H):
	vol=(4/3)*(pi*r**3)+(pi*r**2)*(h-2*r)-(1/3)*pi*((H-h)**2)*(6*r-H+h)
else:
	vol=("Entradas invalidas")
print(round(vol,3 ))
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.987
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:54:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H = float(input("altura do tanque: "))
h = float(input("altura do combustivel no tanque: "))
raio = float(input("raio semiesfericos: "))

Vesfera = ((4/3)*pi*(raio**3))
se = (2/3*pi*(raio**3))

if((H <= 0) or (h <=0) or (raio <= 0) or (H <= h) or (H <= 2*raio)):
	print("Entradas:", H,",", h,",", raio)
	print("Entradas invalidas")
elif(h >= raio):
	cil = (pi*(raio**2)*(h-raio)) + se 	
	vcil = 1000*cil
	print("Entradas:", H,",", h,",", raio)
	print("Volume:", round(vcil, 3), "litros")
	
elif(h < raio):
	si = pi/3*(h**2)*(3*raio-h) 	
	vsi = 1000*si
	print("Entradas:", H,",", h,",", raio)
	print("Volume:", round(vsi, 3), "litros")
	
elif(raio > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H,",", h,",", raio)
	print("Volume:", round(vss, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:54:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
H = float(input("altura do tanque: "))
h = float(input("altura do combustivel no tanque: "))
raio = float(input("raio semiesfericos: "))

Vesfera = ((4/3)*pi*(raio**3))
se = (2/3*pi*(raio**3))

if((H <= 0) or (h <=0) or (raio <= 0) or (H <= h) or (H <= 2*raio)):
	print("Entradas:", H,",", h,",", raio)
	print("Entradas invalidas")
elif(h >= raio):
	cil = (pi*(raio**2)*(h-raio)) + se 	
	vcil = 1000*cil
	print("Entradas:", H,",", h,",", raio)
	print("Volume:", round(vcil, 3), "litros")
	
elif(h < raio):
	si = pi/3*(h**2)*(3*raio-h) 	
	vsi = 1000*si
	print("Entradas:", H,",", h,",", raio)
	print("Volume:", round(vsi, 3), "litros")
	
elif(raio > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H,",", h,",", raio)
	print("Volume:", round(vss, 3), "litros")
	

-- EXECUTION TIME:
0.222367
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
