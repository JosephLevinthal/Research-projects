== TEST (2019-05-28 13:24:44) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase")

numero_de_letras = len(frase)

normal = frase[0:numero_de_letras]

inverso = frase[numero_de_letras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:26:05) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]

inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:28:05) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

print (replace((frase.upper()))

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
File "XXXX", line 8
    qtdeLetras = len(frase)
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:28:20) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

print (replace((frase.upper())))

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:29:02) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

fraseEmM = frase.upper()
print (replace((frase.upper())))

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:29:29) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

fraseEmM = frase.upper()
print (replace(fraseemM))

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:30:43) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

fraseEmM = frase.upper()
print (fraseEmM.replace())

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:32:29) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (fraseEmM.replace(frase.upper()))

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:32:47) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (frase.replace(frase.upper()))

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 13:32:59) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (replace(frase.upper()))

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 16:17:29) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (frase.upper())

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-28 16:17:54) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (frase.upper())

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- EXECUTION TIME:
0.497604
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 16:19:23) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (frase.upper())

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-28 16:19:35) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (frase.upper())

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- EXECUTION TIME:
0.517846
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 16:33:50) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
print (frase.upper())

# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 16:37:22) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
frase = frase.replace(" ","").upper()


# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 16:37:37) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
frase = frase.replace(" ","").upper()
print (frase)


# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-28 16:37:46) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")

#fraseEmM = 
frase = frase.replace(" ","").upper()
print (frase)


# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-30 10:28:59) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")
 
frase = frase.replace(" ","").upper()
print (frase)


# Verifica se a frase e ou nao palindroma
#qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[len(frase::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- EXECUTION TIME:
0.146682
-- ERROR:
  File "/home/codebench/codes/1764/1189/main.py", line 13
    inverso = frase[len(frase::-1]
                             ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-30 10:29:21) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")
 
frase = frase.replace(" ","").upper()
print (frase)


# Verifica se a frase e ou nao palindroma
#qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[len(frase)::-1])

if normal == inverso :
    print (1)
else:
    print (0)
-- EXECUTION TIME:
0.152254
-- ERROR:
  File "/home/codebench/codes/1764/1189/main.py", line 13
    inverso = frase[len(frase)::-1])
                                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-30 10:29:24) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")
 
frase = frase.replace(" ","").upper()
print (frase)


# Verifica se a frase e ou nao palindroma
#qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[len(frase)::-1])

if normal == inverso :
    print (1)
else:
    print (0)
-- ERROR:
File "XXXX", line 13
    inverso = frase[len(frase)::-1])
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-30 10:32:33) 
-- CODE:
from numpy import *

frase  = input("Digite uma frase: ")
 
frase = frase.replace(" ","").upper()
print (frase)


# Verifica se a frase e ou nao palindroma
qtdeLetras = len(frase)

normal = frase[0:qtdeLetras]
inverso = frase[qtdeLetras::-1]

if normal == inverso :
    print (1)
else:
    print (0)
-- EXECUTION TIME:
0.355197
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
