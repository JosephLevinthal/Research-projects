== TEST (2019-03-21 16:42:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(3^2)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:42:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(3**2)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:43:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(3^2)
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:43:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(3^1)
-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:43:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(3^0)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:43:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(3^4)
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:43:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(3^3)
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:43:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

3^2
-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:44:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

print(9^2)
-- OUTPUT:
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:02:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:03:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente // 100
print(notas100a)
-- OUTPUT:
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:03:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100
print(notas100a)
-- OUTPUT:
9
90
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:04:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50
print(notas50)
-- OUTPUT:
9
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:04:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50

notas10 = notas50 // 10

print(notas10)
-- OUTPUT:
9
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:05:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50
print(notas50)

notas10 = notas50 // 1

print(notas10)
-- OUTPUT:
9
1
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:05:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50
print(notas50)

notas10 = notas100a // 10

print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:05:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50
print(notas50)

notas10 = notas100a // 10

print(notas10)
-- EXECUTION TIME:
0.181158
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:05:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50
print(notas50)

notas10 = notas100a // 10

print(notas10)
-- EXECUTION TIME:
0.143931
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:05:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50
print(notas50)

notas10 = notas100a // 10

print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:05:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
print(notas100)

notas100a = valorcliente % 100

notas50 = notas100a // 50
print(notas50)

notas10 = notas100a // 10

print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:05:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:05:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.144126
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:05:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:06:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100 = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    notas50 = notas100a // 50
NameError: name 'notas100a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:06:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:06:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:06:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:06:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:06:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100a = valorcliente % 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:07:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.213234
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1594/588/main.py", line 8, in <module>
    notas50 = notas100a // 50
NameError: name 'notas100a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:07:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas50 = notas100a // 50
notas10 = notas100a // 10

print(notas100)
print(notas50)
print(notas10)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    notas50 = notas100a // 50
NameError: name 'notas100a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:07:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas50 = notas100 // 50
notas10 = notas100 // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:07:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas50 = notas100 // 50
notas10 = notas100 // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:07:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas50 = notas100 // 50
notas10 = notas100 // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:07:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas50 = notas100 // 50
notas10 = notas100 // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:07:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas50 = notas100 // 50
notas10 = notas100 // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:08:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100 // 50
notas10 = notas100 // 10

print(notas100)
print(notas100e)
print(notas50)
print(notas10)
-- OUTPUT:
9
90
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:08:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas10 = notas100 // 10

print(notas100)
print(notas100e)
print(notas50)
print(notas10)
-- OUTPUT:
9
90
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:08:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas10 = notas100e // 10

print(notas100)
print(notas100e)
print(notas50)
print(notas10)
-- OUTPUT:
9
90
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:08:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:08:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.154065
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:08:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:08:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:09:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e % 50
notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
40
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:09:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas10 = notas100e % 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:10:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100
notas50 = notas100e // 50
notas50e = notas100e % 50
notas10 = notas100e % 10
notas10e = notas1

print(notas100)
print(notas50)
print(notas10)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    notas10e = notas1
NameError: name 'notas1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:10:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e % 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:10:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:10:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e % 50

notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
40
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:10:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e % 50

notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
40
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:10:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e % 50

notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
40
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:11:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:11:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas50 // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:11:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas50 // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:12:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e 10

prints(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- ERROR:
File "XXXX", line 12
    notas10 = notas100e 10
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:12:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

prints(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    prints(notas100e)
NameError: name 'prints' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:13:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:14:50) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas10e = notas 100e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- ERROR:
File "XXXX", line 7
    notas10e = notas 100e % 10
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:14:52) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas10e = notas 100e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- ERROR:
File "XXXX", line 7
    notas10e = notas 100e % 10
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:14:56) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10e = notas100e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:15:46) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:15:49) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 18:26:29) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.13144
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
90
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:26:30) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 18:27:23) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.12453
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:27:23) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:27:25) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:27:29) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50

notas10 = notas100e // 10

print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:28:27) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10 = notas100e // 10

print(notas50e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:28:40) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10 = notas100e // 10

print(notas50e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:28:42) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10 = notas100e // 10

print(notas50e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:28:59) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 10
notas10 = notas100e // 10

print(notas50e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:29:10) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 10
notas10 = notas100e // 10

print(notas50e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:29:14) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:29:19) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:29:20) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:29:23) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:29:31) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 10
notas10 = notas100e // 10

print(notas10e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:29:43) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 50
notas10 = notas100e // 10

print(notas10e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:31:02) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 50
notas10 = notas100e // 10

print(notas10e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 18:31:53) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 50
notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.154892
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:31:54) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 50
notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 18:31:59) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 50
notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.139247
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:32:13) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 50
notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 18:32:14) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100
notas100e = valorcliente % 100

notas50 = notas100e // 50
notas50e = notas100e % 50

notas10e = notas50e % 50
notas10 = notas100e // 10


print(notas100)
print(notas50)
print(notas10)
-- EXECUTION TIME:
0.183699
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:43:12) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 50 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
40
9
0
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:43:18) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 10 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:43:30) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 10 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
0
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:43:37) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:44:03) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:44:46) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:44:52) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 18:44:55) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

notas100 = valorcliente // 100 # quantidade notas de cem
notas100e = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100e // 50 # quantidade notas de cinquenta
notas50e = notas100e % 50

notas10e = notas50e % 50 # 
notas10 = notas100e // 10 # quantidade notas de dez

print(notas100e)
print(notas100)
print(notas50)
print(notas10)
-- OUTPUT:
90
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:26:01) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:26:04) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:29:04) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

# valor restante com notas menores q 50
notas100 = notas100 % 10

# quantidade de notas de 50
notas50 = notas100 // 10
# valor restante com notas menores que 10
resto50 = notas100 % 10

#quantidade notas 10
notas10 = resto50 // 10



print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:30:19) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

# valor restante com notas menores q 50
notas100 = notas100 % 10

# quantidade de notas de 50
notas50 = notas100a // 10
# valor restante com notas menores que 10
resto50 = notas100a % 10

#quantidade notas 10
notas10 = resto50 // 10

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:30:22) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

# valor restante com notas menores q 50
notas100 = notas100 % 10

# quantidade de notas de 50
notas50 = notas100a // 10
# valor restante com notas menores que 10
resto50 = notas100 % 10

#quantidade notas 10
notas10 = resto50 // 10

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:30:27) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

# valor restante com notas menores q 50
notas100 = notas100 % 10

# quantidade de notas de 50
notas50 = notas100 // 10
# valor restante com notas menores que 10
resto50 = notas100a % 10

#quantidade notas 10
notas10 = resto50 // 10

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 19:31:20) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

# valor restante com notas menores q 50
notas100 = notas100 % 10

# quantidade de notas de 50
notas50 = notas100 // 10
# valor restante com notas menores que 10
resto50 = notas100a % 10

#quantidade notas 10
notas10 = resto50 // 10

print(int(notas100a)
print(int(notas50)
print(int(notas10)

-- EXECUTION TIME:
0.193591
-- ERROR:
  File "/home/codebench/codes/1594/588/main.py", line 19
    print(int(notas50)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 19:31:29) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100a)
print(notas50)
print(notas10)

-- EXECUTION TIME:
0.114258
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:31:30) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:31:48) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:31:49) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente % 100
notas100a = valorcliente // 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:31:59) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100a)
print(notas50)
print(notas10)

-- OUTPUT:
90
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:32:06) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(notas100)
print(notas50)
print(notas10)

-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 19:32:17) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(int(notas100)
print(int(notas50)
print(int(notas10)

-- EXECUTION TIME:
0.14176
-- ERROR:
  File "/home/codebench/codes/1594/588/main.py", line 14
    print(int(notas50)
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:32:17) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(int(notas100)
print(int(notas50)
print(int(notas10)

-- ERROR:
File "XXXX", line 14
    print(int(notas50)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 19:32:23) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(int(notas100)
print(int(notas50))
print(int(notas10))

-- EXECUTION TIME:
0.170403
-- ERROR:
  File "/home/codebench/codes/1594/588/main.py", line 14
    print(int(notas50))
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:32:24) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(int(notas100)
print(int(notas50))
print(int(notas10))

-- ERROR:
File "XXXX", line 14
    print(int(notas50))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:32:42) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(int(notas100))
print(int(notas50))
print(int(notas10))

-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 19:32:46) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(int(notas100))
print(int(notas50))
print(int(notas10))

-- EXECUTION TIME:
0.14869
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:32:49) 
-- CODE:
valorcliente = int(input("valor p sacar: "))

# Quantidade de nottas de 100
notas100 = valorcliente // 100
notas100a = valorcliente % 100 # quantia restante pra entregar

notas50 = notas100a // 50 # quantidade notas de cinquenta
notas50a = notas100a % 50

notas10a = notas50a % 50 # 
notas10 = notas100a // 10 # quantidade notas de dez

print(int(notas100))
print(int(notas50))
print(int(notas10))

-- OUTPUT:
9
1
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 19:40:42) 
-- CODE:
valor = int(input("Qual o valor do saque?"))

# Quantidade de notas de R$ 50
notas100 = valor % 100
notas100a = valor // 100
# Valor restante a ser sacado com notas menores que R$ 50
notas100 = notas100 % 100

# Quantidade de notas de R$ 10
notas50 = notas100 // 50

# Valor restante a ser sacado com notas menores que R$ 50
resto50 = notas100 % 50

# Quantidade de notas de R$ 2
notas10 = resto50 // 10

print(int(notas50a))
print(int(notas10))
print(int(notas2))
-- EXECUTION TIME:
0.150713
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1594/588/main.py", line 18, in <module>
    print(int(notas50a))
NameError: name 'notas50a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:40:43) 
-- CODE:
valor = int(input("Qual o valor do saque?"))

# Quantidade de notas de R$ 50
notas100 = valor % 100
notas100a = valor // 100
# Valor restante a ser sacado com notas menores que R$ 50
notas100 = notas100 % 100

# Quantidade de notas de R$ 10
notas50 = notas100 // 50

# Valor restante a ser sacado com notas menores que R$ 50
resto50 = notas100 % 50

# Quantidade de notas de R$ 2
notas10 = resto50 // 10

print(int(notas50a))
print(int(notas10))
print(int(notas2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print(int(notas50a))
NameError: name 'notas50a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 19:40:51) 
-- CODE:
valor = int(input("Qual o valor do saque?"))

# Quantidade de notas de R$ 50
notas100 = valor % 100
notas100a = valor // 100
# Valor restante a ser sacado com notas menores que R$ 50
notas100 = notas100 % 100

# Quantidade de notas de R$ 10
notas50 = notas100 // 50

# Valor restante a ser sacado com notas menores que R$ 50
resto50 = notas100 % 50

# Quantidade de notas de R$ 2
notas10 = resto50 // 10

print(int(notas100a))
print(int(notas50))
print(int(notas10))
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 19:40:51) 
-- CODE:
valor = int(input("Qual o valor do saque?"))

# Quantidade de notas de R$ 50
notas100 = valor % 100
notas100a = valor // 100
# Valor restante a ser sacado com notas menores que R$ 50
notas100 = notas100 % 100

# Quantidade de notas de R$ 10
notas50 = notas100 // 50

# Valor restante a ser sacado com notas menores que R$ 50
resto50 = notas100 % 50

# Quantidade de notas de R$ 2
notas10 = resto50 // 10

print(int(notas100a))
print(int(notas50))
print(int(notas10))
-- EXECUTION TIME:
0.156851
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:02:37) 
-- CODE:
valor = int(input("Qual o valor do saque?"))

# Quantidade de notas de R$ 50
notas100 = valor % 100
notas100a = valor // 100
# Valor restante a ser sacado com notas menores que R$ 50
notas100 = notas100 % 100

# Quantidade de notas de R$ 10
notas50 = notas100 // 50

# Valor restante a ser sacado com notas menores que R$ 50
resto50 = notas100 % 50

# Quantidade de notas de R$ 2
notas10 = resto50 // 10

print(int(notas100a))
print(int(notas50))
print(int(notas10))
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:19:04) 
-- CODE:
valor = int(input("Qual o valor do saque? "))

# Quantidade de notas de R$ 100
notas100 = valor % 100
notas100u = valor // 100
# Valor restante a ser sacado com notas menores que R$ 100
notas100 = notas100 % 100

# Quantidade de notas de R$ 50
notas50 = notas100 // 50

# Valor restante a ser sacado com notas menores que R$ 50
resto50 = notas100 % 50

# Quantidade de notas de R$ 10
notas10 = resto50 // 10

print(int(notas100u))
print(int(notas50))
print(int(notas10))
-- EXECUTION TIME:
0.196832
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:09) 
-- CODE:
valor = int(input("Qual o valor do saque? "))

# Quantidade de notas de R$ 100
notas100 = valor % 100
notas100u = valor // 100
# Valor restante a ser sacado com notas menores que R$ 100
notas100 = notas100 % 100

# Quantidade de notas de R$ 50
notas50 = notas100 // 50

# Valor restante a ser sacado com notas menores que R$ 50
resto50 = notas100 % 50

# Quantidade de notas de R$ 10
notas10 = resto50 // 10

print(int(notas100u))
print(int(notas50))
print(int(notas10))
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
