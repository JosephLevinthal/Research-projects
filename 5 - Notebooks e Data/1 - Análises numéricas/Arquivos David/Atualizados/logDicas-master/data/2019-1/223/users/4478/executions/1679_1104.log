== TEST (2019-05-02 09:54:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if(b>a):
	print("Intervalo 1:", a,",", b)
elif(d>c):
	print("Intervalo 2:", c,",", d)


-- OUTPUT:
Intervalo 1: 1.0 , 2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:55:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)


-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:05:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if(((a,b) in (c,d))or((c,d)in(a,b))):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if(((a,b) in (c,d))or((c,d)in(a,b))):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:06:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if(((a) and (b) in (c)and(d))or((c)and(d)in(a)and(b))):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if(((a) and (b) in (c)and(d))or((c)and(d)in(a)and(b))):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 10:07:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if(((a) and (b) in (c) and (d)):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- EXECUTION TIME:
0.165439
-- ERROR:
  File "/home/codebench/codes/1679/1104/main.py", line 12
    if(((a) and (b) in (c) and (d)):
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:07:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if(((a) and (b) in (c) and (d)):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if(((a) and (b) in (c) and (d)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:07:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if(((a)and(b) in (c)and(d)):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if(((a)and(b) in (c)and(d)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:08:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if([a,b]and[c,d]):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if([a,b]and[c,d]):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:10:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if(([a,b])in([c,d]):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if(([a,b])in([c,d]):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:11:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if([a,b]in[c,d]:
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if([a,b]in[c,d]:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:13:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if[(a)and(b)]in[(c)and(d)]:
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 12
    if[(a)and(b)]in[(c)and(d)]:
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:16:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))
int1=[a,b]
int2=[c,d]
if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if(int1 in int2):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 13
    if(int1 in int2):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:17:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))
int1=[a,b]
int2=[c,d]
if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if((int1) in (int2)):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 13
    if((int1) in (int2)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 10:17:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))
int1=[a,b]
int2=[c,d]
if((b>a)and(d>c)):
	print("Intervalo 1:", a,",", b)
	print("Intervalo 2:", c,",", d)
		if((int1) or (int2)):
			print("Ha intersecao")
		else:
			print("Nao ha intersecao")

-- ERROR:
File "XXXX", line 13
    if((int1) or (int2)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-09 11:09:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("valor de a: "))
b=float(input("valor de b: "))
c=float(input("valor de c: "))
d=float(input("valor de d: "))

if (b < a or d < c):
	print ("Intervalo 1:",a,",",b)
	print ("Intervalo 2:",c,",",d)
	print("Entradas invalidas")
elif((c>=a) and (c<=b) or (d>=a)and(d<=b)):
	print ("Intervalo 1:",a,",",b)
	print ("Intervalo 2:",c,",",d)
	print("Ha intersecao")
else:
	print ("Intervalo 1:",a,",",b)
	print ("Intervalo 2:",c,",",d)
	print("Nao ha intersecao")
-- EXECUTION TIME:
0.553284
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
