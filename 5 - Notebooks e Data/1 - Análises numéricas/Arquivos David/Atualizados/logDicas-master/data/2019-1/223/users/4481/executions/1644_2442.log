== TEST (2019-04-09 16:11:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero: ")

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:31:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=(input("Digite um numero: "))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:31:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:34:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:37:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem.lewo())

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:37:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem.lower())

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (num % 2 == 0):
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:38:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem.lower())

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:38:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem.lower())

-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:39:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num=int(input("Digite um numero: "))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(mensagem.lower())

-- EXECUTION TIME:
0.166187
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
