== TEST (2019-04-23 17:41:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , "a",",","b",",","c")
-- OUTPUT:
Entradas: a , b , c
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:42:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:52:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if((a+b<c)or(a+c<b)or(b+c<a)):
	print("Tipo de triangulo: " "invalido")
	else:
		if((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
			else:
				if((a==b)or(b==c)or(a==c)):
					print("Tipo de triangulo: isoceles")
					else:
						print("Tipo de triangulo: escaleno")
			

-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 15:54:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if((a+b<c)or(a+c<b)or(b+c<a)):
	print("Tipo de triangulo: " "invalido")
	else:
		if((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
			else:
				if((a==b)or(b==c)or(a==c)):
					print("Tipo de triangulo: isoceles")
					else:
						print("Tipo de triangulo: escaleno")
			

-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 15:55:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if((a+b<c)or(a+c<b)or(b+c<a)):
	print("Tipo de triangulo: " "invalido")
	else:
		if((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
			else:
				if((a==b)or(b==c)or(a==c)):
					print("Tipo de triangulo: isoceles")
					else:
						print("Tipo de triangulo: escaleno")
			

-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 15:56:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if((a+b<c)or(a+c<b)or(b+c<a)):
	print("Tipo de triangulo: " "invalido")
	else:
		if((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
			else:
				if((a==b)or(b==c)or(a==c)):
					print("Tipo de triangulo: isoceles")
					else:
						print("Tipo de triangulo: escaleno")
			

-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 15:57:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if((a+b<c)or(a+c<b)or(b+c<a)):
	print("Tipo de triangulo: " "invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
		print("Tipo de triangulo: isoceles")
			else:
			print("Tipo de triangulo: escaleno")
			

-- ERROR:
File "XXXX", line 14
    print("Tipo de triangulo: isoceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 15:57:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if((a+b<c)or(a+c<b)or(b+c<a)):
	print("Tipo de triangulo: " "invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
			

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 15:58:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if((a+b<c)or(a+c<b)or(b+c<a)):
	print("Tipo de triangulo: " "invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(a==c)):
			print("Tipo de triangulo: isoceles")
		else:
			print("Tipo de triangulo: escaleno")
			

-- EXECUTION TIME:
0.288915
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:10:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a==b)and(b==c)):
	print("Tipo de triangulo: equilatero")
else:
	if((a==b)or(a==c)or(b==c)):
		print("Tipo de triangulo: isosceles")
	else:
		if:(a != b)and(a != c)and(b != c)
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")

			

-- ERROR:
File "XXXX", line 13
    if:(a != b)and(a != c)and(b != c)
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:10:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a==b)and(b==c)):
	print("Tipo de triangulo: equilatero")
else:
	if((a==b)or(a==c)or(b==c)):
		print("Tipo de triangulo: isosceles")
	else:
		if:((a != b)and(a != c)and(b != c)):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")

			

-- ERROR:
File "XXXX", line 13
    if:((a != b)and(a != c)and(b != c)):
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:11:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a==b)and(b==c)):
	print("Tipo de triangulo: equilatero")
else:
	if((a==b)or(a==c)or(b==c)):
		print("Tipo de triangulo: isosceles")
	else:
		if((a != b)and(a != c)and(b != c)):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")

			

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:11:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a==b)and(b==c)):
	print("Tipo de triangulo: equilatero")
else:
	if((a==b)or(a==c)or(b==c)):
		print("Tipo de triangulo: isosceles")
	else:
		if((a != b)and(a != c)and(b != c)):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")

			

-- EXECUTION TIME:
0.177288
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b)or(a == c)or(b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

			

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b)or(a == c)or(b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

			

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b)or(a == c)or(b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

			

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:19:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b)or(a == c)or(b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

			

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:20:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("Lado 1: "))
b=float(input("Lado 2: "))
c=float(input("Lado 3: "))
print("Entradas:" , a,",",b,",",c)
if ((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a == b)or(a == c)or(b == c)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

			

-- EXECUTION TIME:
0.147573
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
