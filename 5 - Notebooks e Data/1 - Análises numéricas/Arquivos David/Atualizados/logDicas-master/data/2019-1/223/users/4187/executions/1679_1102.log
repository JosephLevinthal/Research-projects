== SUBMITION (2019-04-27 16:10:52) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
jjfjrfrkmf
-- EXECUTION TIME:
0.127373
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 6, in <module>
    jjfjrfrkmf
NameError: name 'jjfjrfrkmf' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 21:48:14) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0):
	print("Entradas invalidas")
volumecombustivel= ((pi * (h ** 2)) * ((3 * r) - h)) / 3



-- OUTPUT:
Entradas: 11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 21:54:45) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0):
	print("Entradas invalidas")
volumecombustivel= ((pi * (h ** 2)) * ((3 * r) - h)) / 3



-- OUTPUT:
Entradas: 11.3 5.7 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 21:59:50) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H <= 0 or h <= h or r <= 0):
	print("Entradas invalidas")
vc= ((pi * (h ** 2)) * ((3 * r) - h)) / 3


print("Volume:",round(vc,3),"litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Entradas invalidas
Volume: 40.828 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:01:06) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0):
	print("Entradas invalidas")
vc= ((pi * (h ** 2)) * ((3 * r) - h)) / 3


print("Volume:",round(vc,3),"litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 40.828 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:03:54) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= ((pi * (h ** 2)) * ((3 * r) - h)) / 3


print("Volume:",round(vc,3),"litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 40.828 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:05:14) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= ((pi * (h ** 2)) * ((3 * r) - h)) / 3


print("Volume:",round(vc,3),"litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 40.828 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:25:29) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= (pi) * (r**2) *  h

else:
	print("Volume:",round(vc,3),"litros")
-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:25:53) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= (pi) * (r**2) *  h
else:
	print("Volume:",round(vc,3),"litros")
-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:26:25) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,h,r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= (pi) * (r**2) *  h

print("Volume:",round(vc,3),"litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 94.728 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:29:03) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,",",","h,",",r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= (pi) * (r**2) *  h

print("Volume:",round(vc,3),"litros")
-- ERROR:
File "XXXX", line 6
    print("Entradas:",H,",",","h,",",r)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:29:57) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,",",h,",",r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= (pi) * (r**2) *  h

print("Volume:",round(vc,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 94.728 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 22:30:30) 
-- CODE:
from math import*
H = float(input("altura do tanque:"))
h = float(input("nivel de combustivel no tanque:"))
r = float(input("raio dos bojos semisfericos inferior e suerior:"))

print("Entradas:",H,",",h,",",r)

if( H < 0 or h < h or r < 0 or (H < h and H < (2*r)) ):
	print("Entradas invalidas")
vc= (pi) * (r**2) *  h

print("Volume:",round(vc,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 94.728 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 20:57:05) 
-- CODE:
# H é altura total do tanque
# h é o nível de combustível no tanque
# r é o raio dos bojos semiesféricos interior e superior
# V é o volume do combustível

# saída:
# Calcular volume do combustível em litros com 3 casas decimais

from math import *

H = float(input("Altura do tanque: "))
h = float(input("Nivel de Combustivel do tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > (2 * r)):
	if (h < r):
		V = ((1./3) * pi * h**2 * (3 * r - h)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
		
	elif (h < H - r):
		V = ((2./3) * pi * h**3 + pi * r**2 * (h - r)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	elif (h <= H):
		V = ((4./3) * pi * r**3 + pi * r**2 * (H - 2 * r) - (1/3) * pi * (H - h)**2 * (3  * r - H + h)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	else:
		#entrada inválida
		print ("Entradas:",H,",",h,",",r)
		print ("Entradas invalidas")
			
else:
	#entrada inválida
	print ("Entradas:",H,",",h,",",r)
	print ("Entradas invalidas")
-- EXECUTION TIME:
0.150203
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 444371.998 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 13:43:49) 
-- CODE:
# H é altura total do tanque
# h é o nível de combustível no tanque
# r é o raio dos bojos semiesféricos interior e superior
# V é o volume do combustível

# saída:
# Calcular volume do combustível em litros com 3 casas decimais

from math import *

H = float(input("Altura do tanque: "))
h = float(input("Nivel de Combustivel do tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > (2 * r)):
	if (h < r):
		V = ((pi/3) * pi * h**2 * (3 * r - h)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
		
	elif (h <= H - r):
		V = (4 * pi * (r**3) / 6) + (pi * (r**2)) * (h - r) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	elif (h <= H):
		V = ((4 * pi * (r**3)/6) + (pi/3 * ((r**2) * (h - r)) * 2)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	else:
		#entrada inválida
		print ("Entradas:",H,",",h,",",r)
		print ("Entradas invalidas")
			
else:
	#entrada inválida
	print ("Entradas:",H,",",h,",",r)
	print ("Entradas invalidas")
-- EXECUTION TIME:
0.231975
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 56530.168 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 13:48:59) 
-- CODE:
# H é altura total do tanque
# h é o nível de combustível no tanque
# r é o raio dos bojos semiesféricos interior e superior
# V é o volume do combustível

# saída:
# Calcular volume do combustível em litros com 3 casas decimais

from math import *

H = float(input("Altura do tanque: "))
h = float(input("Nivel de Combustivel do tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > (2 * r)):
	if (h < r):
		V = ((pi/3) * pi * h**2 * (3 * r - h)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
		
	elif (h <= H - r):
		V = (4 * pi * (r**3) / 6) + (pi * (r**2)) * (h - r) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	elif (h <= H):
		V = ((4 * pi * (r ** 3)) / 6) + ((pi/3) * ((r **2 ) * (h - r)) * 2) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	else:
		#entrada inválida
		print ("Entradas:",H,",",h,",",r)
		print ("Entradas invalidas")
			
else:
	#entrada inválida
	print ("Entradas:",H,",",h,",",r)
	print ("Entradas invalidas")
-- EXECUTION TIME:
0.15872
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 56530.168 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 13:50:20) 
-- CODE:
# H é altura total do tanque
# h é o nível de combustível no tanque
# r é o raio dos bojos semiesféricos interior e superior
# V é o volume do combustível

# saída:
# Calcular volume do combustível em litros com 3 casas decimais

from math import *

H = float(input("Altura do tanque: "))
h = float(input("Nivel de Combustivel do tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > (2 * r)):
	if (h < r):
		V = ((pi/3) * (h**2) * (3 * r - h)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
		
	elif (h <= H - r):
		V = (4 * pi * (r**3) / 6) + (pi * (r**2)) * (h - r) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	elif (h <= H):
		V = ((4 * pi * (r ** 3)) / 6) + ((pi/3) * ((r **2 ) * (h - r)) * 2) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	else:
		#entrada inválida
		print ("Entradas:",H,",",h,",",r)
		print ("Entradas invalidas")
			
else:
	#entrada inválida
	print ("Entradas:",H,",",h,",",r)
	print ("Entradas invalidas")
-- EXECUTION TIME:
0.213273
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 56530.168 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 13:50:24) 
-- CODE:
# H é altura total do tanque
# h é o nível de combustível no tanque
# r é o raio dos bojos semiesféricos interior e superior
# V é o volume do combustível

# saída:
# Calcular volume do combustível em litros com 3 casas decimais

from math import *

H = float(input("Altura do tanque: "))
h = float(input("Nivel de Combustivel do tanque: "))
r = float(input("Raio dos bojos semiesfericos inferior e superior: "))

if (H > 0) and (h > 0) and (r > 0) and (H > h) and (H > (2 * r)):
	if (h < r):
		V = ((pi/3) * (h**2) * (3 * r - h)) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
		
	elif (h <= H - r):
		V = (4 * pi * (r**3) / 6) + (pi * (r**2)) * (h - r) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	elif (h <= H):
		V = ((4 * pi * (r ** 3)) / 6) + ((pi/3) * ((r **2 ) * (h - r)) * 2) * 1000
		#entrada válida
		print ("Entradas:",H,",",h,",",r)
		print ("Volume:",round(V,3),"litros")
			
	else:
		#entrada inválida
		print ("Entradas:",H,",",h,",",r)
		print ("Entradas invalidas")
			
else:
	#entrada inválida
	print ("Entradas:",H,",",h,",",r)
	print ("Entradas invalidas")
-- EXECUTION TIME:
0.139624
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 56530.168 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:36:15) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - NivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- EXECUTION TIME:
0.124507
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Volume: 217817.091 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:36:52) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH > 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - NivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH > alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH >= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- EXECUTION TIME:
0.118111
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 12, in <module>
    volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - NivelH)) * 1000
NameError: name 'NivelH' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:36:58) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH > 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - NivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH > alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH > alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- EXECUTION TIME:
0.217009
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 12, in <module>
    volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - NivelH)) * 1000
NameError: name 'NivelH' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:37:05) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH > 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - NivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH > alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH >= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - NivelH)) * 1000
NameError: name 'NivelH' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:39:42) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH > 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH > alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH >= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 40828.138 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:40:05) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH > 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH > alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH >= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 40828.138 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:42:11) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:42:35) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- EXECUTION TIME:
0.129626
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Volume: 217817.091 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:42:48) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:43:17) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:43:35) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) and (nivelH < 0) and (raio < 0) and (alturaH < nivelH) and (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 15:44:11) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) or (nivelH < 0) or (raio < 0) or (alturaH < nivelH) or (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:44:49) 
-- CODE:
from math import *
alturaH = float(input("Altura do tanque: "))
nivelH = float(input("Nivel de Combustivel do tanque: "))
raio = float(input("Raio dos bojos semiesfericos inferior e superior: "))

print("Entradas:", alturaH, ",", nivelH, ",", raio)

if(alturaH < 0) or (nivelH < 0) or (raio < 0) or (alturaH < nivelH) or (alturaH < (2*raio)):
	print("Entradas invalidas")

elif (nivelH < 0):
		volume = ((1/3) * pi * nivelH ** 2 * (3 * raio - nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH < alturaH - raio):
		volume = ((2/3) * pi * raio ** 3 + pi * raio ** 2 * (nivelH - raio)) * 1000
		print("Volume:",round(volume,3),"litros")
		
elif (nivelH <= alturaH):
		volume = ((4/3) * pi * raio ** 3 + pi * raio ** 2 * (alturaH - 2 * raio) - (1/3) * pi * (alturaH - nivelH) ** 2 * (3 * raio - alturaH + nivelH)) * 1000
		print("Volume:",round(volume,3),"litros")
-- EXECUTION TIME:
0.200829
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
