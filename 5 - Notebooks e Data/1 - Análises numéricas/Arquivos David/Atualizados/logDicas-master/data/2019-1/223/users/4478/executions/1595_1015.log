== TEST (2019-03-31 03:43:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor = min(a,b,c)
maior = max(a,b,c)
print(a+b+c-menor-maior)
-- OUTPUT:
210.15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 03:43:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor = min(a,b,c)
maior = max(a,b,c)
print(a+b+c-menor-maior)
-- EXECUTION TIME:
0.196846
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 03:44:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
print(min(a,b,c))
print(max(a,b,c))
print(a+b+c-menor-maior)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(a+b+c-menor-maior)
NameError: name 'menor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 03:46:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor = min(a,b,c)
print(menor)
maior = max(a,b,c)
print(maior)
print(a+b+c-menor-maior)
-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 03:46:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor = min(a,b,c)
print(menor)
maior = max(a,b,c)
print(maior)
print(a+b+c-menor-maior)
-- EXECUTION TIME:
0.133088
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 03:47:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
min(a,b,c)
max(a,b,c)

-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 03:50:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor= min(a,b,c)
print(menor)
maior=max(a,b,c)
print(maior)
interm = a+b+c-menor-maior
print(interm)
-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 03:51:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor= min(a,b,c)
print(menor)
maior=max(a,b,c)
print(maior)
interm = a+b+c-menor-maior
print(interm)
-- EXECUTION TIME:
0.17731
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 03:51:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))

-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 14:48:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor = min(a,b,c)
maior = max(a,b,c)
inter = a+b+c-menor-maior
print(menor)
print(inter)
print(maior)
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 14:48:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("a:"))
b = int(input("b:"))
c = int(input("c:"))
menor = min(a,b,c)
maior = max(a,b,c)
inter = a+b+c-menor-maior
print(menor)
print(inter)
print(maior)
-- EXECUTION TIME:
0.136836
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
