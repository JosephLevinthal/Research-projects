== TEST (2019-04-13 11:35:23) 
-- CODE:
C=float(input("temperatura: "))
c=5/9(F-32)
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    C=float(input())
ValueError: could not convert string to float: 'C'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:37:54) 
-- CODE:
C=float(input("temperatura: "))
F=float(input("digite: "))
c=5/9(F-32)
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    C=float(input())
ValueError: could not convert string to float: 'C'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:38:21) 
-- CODE:
C=int(input("temperatura: "))
F=float(input("digite: "))
c=5/9(F-32)
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    C=int(input())
ValueError: invalid literal for int() with base 10: 'C'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:38:45) 
-- CODE:
C=input("temperatura: "))
F=float(input("digite: "))
c=5/9(F-32)
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- ERROR:
File "XXXX", line 1
    C=input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:38:55) 
-- CODE:
C=input("temperatura: ")
F=float(input("digite: "))
c=5/9(F-32)
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    c=5/9(F-32)
TypeError: 'int' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:39:48) 
-- CODE:
C=input("temperatura: ")
F=float(input("digite: "))
c=((5/9 )* (F-32))
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 11:40:26) 
-- CODE:
C=input("temperatura: ")
F=float(input("digite: "))
c=((5/9 )* (F-32))
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- EXECUTION TIME:
0.216168
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
160.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
-17.78
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:40:43) 
-- CODE:
C=input("temperatura: ")
F=float(input("digite: "))
c=((5/9 )* (F-32))
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 11:41:04) 
-- CODE:
C=input("temperatura: ")
F=float(input("digite: "))
c=((5/9 )* (F-32))
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- EXECUTION TIME:
0.176636
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
160.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
-17.78
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:41:25) 
-- CODE:
C=input("temperatura: ")
F=float(input("digite: "))
c=(5/9 )* (F-32)
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 11:41:39) 
-- CODE:
C=input("temperatura: ")
F=float(input("digite: "))
c=(5/9 )* (F-32)
if(c==F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- EXECUTION TIME:
0.160968
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
160.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
-17.78
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:43:31) 
-- CODE:
C=input("ESCALA: ")
F=float(input("TEMPERATURA: "))
c=(5/9 )* (F-32)
if(c == F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:44:08) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
c=(5/9 )* (F-32)
if(c == F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 11:44:26) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
c=(5/9 )* (F-32)
if(c == F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- EXECUTION TIME:
0.200928
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
160.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
-17.78
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:44:48) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
c=(5/9 )* (F-32)
if(c == F):
	print(round(c, 2))
else:
	print(round(c, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:01:06) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
F=(5/9 )* (C-32)
if(c == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    F=(5/9 )* (C-32)
TypeError: unsupported operand type(s) for -: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:03:44) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
(F-32)=(5/9)
if(c == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
File "XXXX", line 4
    (F-32)=(5/9)
    ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:04:31) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
F=(5/9 )* (F-32)

if(c == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(c == F):
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:06:36) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:07:11) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)

if(C == F):
	print(round(C, 2))
else:
	print(round(C, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 13:07:26) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)

if(C == F):
	print(round(C, 2))
else:
	print(round(C, 2))
-- EXECUTION TIME:
0.136887
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
160.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
-17.78
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:11:52) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
F=5/9 * C+32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:12:42) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
F=9/5 * C+32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:13:23) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
F=(5/9 * C)+32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:13:46) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
F=(9/5 * C)+32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:17:51) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
F=C*(9/5 )+32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:18:32) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
F=((C*(9/5 ))+32)

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:19:55) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=(5/9 )* (F-32)
F=(C*(5/9 ))+32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:22:46) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:25:00) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 - 32

if(C == F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
56.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:28:04) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32

if(C != F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:28:51) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32

if(C < F):
	print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:29:27) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32
	print(round(F, 2))
-- ERROR:
File "XXXX", line 5
    print(round(F, 2))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:29:36) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32
print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:14:44) 
-- CODE:
C=int(input("ESCALA: "))
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    C=int(input())
ValueError: invalid literal for int() with base 10: 'C'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:49:47) 
-- CODE:
C=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=(C * 9/5) + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    C=int(input())
ValueError: invalid literal for int() with base 10: 'C'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:51:53) 
-- CODE:
F=input("ESCALA: ")
C=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=(C * 9/5) + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    C=5/9 * (F-32)
TypeError: unsupported operand type(s) for -: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:52:38) 
-- CODE:
F=input("ESCALA: ")
c=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=(C * 9/5) + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    C=5/9 * (F-32)
TypeError: unsupported operand type(s) for -: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:53:13) 
-- CODE:
F=input("ESCALA: ")
c=int(input("TEMPERATURA: "))

F=(C * 9/5) + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    F=(C * 9/5) + 32
NameError: name 'C' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:58:07) 
-- CODE:
F=input("ESCALA: ")
c=int(input("TEMPERATURA: "))
C=5/9* (F-32)
F=((C * 9)/5) + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    C=5/9* (F-32)
TypeError: unsupported operand type(s) for -: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:58:53) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9* (F-32)
F=((C * 9)/5) + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:59:56) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9* (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:00:26) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(C, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:00:47) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(C, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:01:24) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C,F, 2))
else:
	print(round(C,F, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(C,F, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:01:59) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(C, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 15:02:19) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(C, 2))
-- EXECUTION TIME:
0.204589
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
160.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
-17.78
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:02:56) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:03:15) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 15:05:29) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)=F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(C, 2))
-- ERROR:
File "XXXX", line 3
    C=5/9 * (F-32)=F=C * 9/5 + 32
     ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:22:38) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(C, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 14:23:04) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(C, 2))
else:
	print(round(C, 2))
-- EXECUTION TIME:
0.177093
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
160.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
-17.78
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:23:26) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 9/5 + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
320.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:29:07) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 14:29:08) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
F=C * 5/9 + 32
if(C == F):
   print(round(F, 2))
else:
	print(round(F, 2))
-- OUTPUT:
120.89
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:31:34) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
if(C == F):
	F=(C * 9/5) + 32
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
File "XXXX", line 6
    print(round(F, 2))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:35:39) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
if(C == F):
	F=(C * 9/5) + 32
   print(round(F, 2))
else:
	print(round(F, 2))
-- ERROR:
File "XXXX", line 6
    print(round(F, 2))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:43:00) 
-- CODE:
C=input("ESCALA: ")
F=int(input("TEMPERATURA: "))
C=5/9 * (F-32)
if(C.upper() == "F"):
	F=(C * 9/5) + 32
   print(round(F, 2))
if(F.upper() == "C"):
	C=5/9 * (F-32)
	print(round(C, 2))
-- ERROR:
File "XXXX", line 6
    print(round(F, 2))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:47:12) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	F=(T * 9/5) + 32
   print(round(F, 2))
if(F.upper() == "C"):
	C=5/9 * (T-32)
	print(round(C, 2))
-- ERROR:
File "XXXX", line 6
    print(round(F, 2))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:48:27) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	V=(T * 9/5) + 32
   print(round(V, 2))
if(F.upper() == "C"):
	C=5/9 * (T-32)
	print(round(C, 2))
-- ERROR:
File "XXXX", line 6
    print(round(V, 2))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:49:44) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	V=(T * 9/5) + 32
   print(round(V,2))
if(F.upper() == "C"):
	C=5/9 * (T-32)
	print(round(C, 2))
-- ERROR:
File "XXXX", line 6
    print(round(V,2))
                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:51:17) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	v=(T * 9/5) + 32
   print(round(v,2))
if(F.upper() == "C"):
	C=5/9 * (T-32)
	print(round(C, 2))
-- ERROR:
File "XXXX", line 6
    print(round(v,2))
                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:51:28) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	v=(T * 9/5) + 32
   print(round(v, 2))
if(F.upper() == "C"):
	C=5/9 * (T-32)
	print(round(C, 2))
-- ERROR:
File "XXXX", line 6
    print(round(v, 2))
                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:55:14) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	v=(T * 9/5) + 32
	print(round(v, 2))
if(F.upper() == "C"):
	C=5/9 * (T-32)
	print(round(C, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if(F.upper() == "C"):
NameError: name 'F' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 19:57:41) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	v=(T * 9/5) + 32
	print(round(v, 2))
if(C.upper() == "C"):
	C=5/9 * (T-32)
	print(round(C, 2))
-- OUTPUT:
160.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:02:57) 
-- CODE:
C=input("ESCALA: ")
T=int(input("TEMPERATURA: "))

if(C.upper() == "F"):
	C=5/9 * (T-32)
	print(round(C, 2))
if(C.upper() == "C"):
	v=(T * 9/5) + 32
	print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(V, 2))
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:04:26) 
-- CODE:
C=input("ESCALA: ")
T=float(input("TEMPERATURA: "))

if(C.upper() == "F"):
	C=5/9 * (T-32)
	print(round(C, 2))
if(C.upper() == "C"):
	v=(T * 9/5) + 32
	print(round(V, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(V, 2))
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:09:50) 
-- CODE:
C=input("ESCALA: ")
T=float(input("TEMPERATURA: "))

if(C.upper() == "F"):
	C=5/9 * (T-32)
	print(round(C, 2))
if(C.upper() == "C"):
	v=(T * 9/5) + 32
	print(round(v, 2))
-- OUTPUT:
608.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:12:48) 
-- CODE:
c=input("ESCALA: ")
T=float(input("TEMPERATURA: "))

if(c.upper() == "F"):
	C=5/9 * (T-32)
	print(round(C, 2))
if(c.upper() == "C"):
	v=(T * 9/5) + 32
	print(round(v, 2))
-- OUTPUT:
608.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 20:13:06) 
-- CODE:
c=input("ESCALA: ")
T=float(input("TEMPERATURA: "))

if(c.upper() == "F"):
	C=5/9 * (T-32)
	print(round(C, 2))
if(c.upper() == "C"):
	v=(T * 9/5) + 32
	print(round(v, 2))
-- EXECUTION TIME:
0.21352
-- TEST CASE 1:
---- input:
C
320
---- correct output:
608.0
---- user output:
608.0
-- TEST CASE 2:
---- input:
F
320
---- correct output:
160.0
---- user output:
160.0
-- TEST CASE 3:
---- input:
C
0
---- correct output:
32.0
---- user output:
32.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
