== TEST (2019-04-18 22:55:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:55:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:55:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:55:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:56:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:58:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:58:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 22:58:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:24:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:24:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if a <= x <= b == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:24:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("a")
else:
	print("b")
-- OUTPUT:
b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:26:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo" a,","b)
else:
	print("x nao pertence ao intervalo" a,","b)
elif b <= a:
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 9
    print("x pertence ao intervalo" a,","b)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:26:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo" a,",",b)
else:
	print("x nao pertence ao intervalo" a,","b)
elif b <= a:
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 9
    print("x pertence ao intervalo" a,",",b)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:26:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,","b)
elif b <= a:
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 11
    print("x nao pertence ao intervalo", a,","b)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:26:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
elif b <= a:
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 12
    elif b <= a:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:26:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 12
    elif (b <= a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:26:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- OUTPUT:
x nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:27:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.130852
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
x nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
x nao pertence ao intervalo 6.5 , 1.1
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:27:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.181002
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
x nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
x nao pertence ao intervalo 2.0 , 3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:27:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.149701
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
x nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
x nao pertence ao intervalo 5.5 , 6.5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:27:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.148725
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
x nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
x nao pertence ao intervalo 6.5 , 1.1
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:27:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- OUTPUT:
x nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:27:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- OUTPUT:
x nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:27:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print("x pertence ao intervalo", a,",",b)
else:
	print("x nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- OUTPUT:
x nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:28:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x "pertence ao intervalo", a,",",b)
else:
	print(x "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.205646
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 9
    print(x "pertence ao intervalo", a,",",b)
                                  ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:28:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x "pertence ao intervalo", a,",",b)
else:
	print(x "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 9
    print(x "pertence ao intervalo", a,",",b)
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:31:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.198031
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
22.2 nao pertence ao intervalo 6.5 , 1.1
Entradas 6.5 e 1.1 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:38:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.201211
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:38:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.204517
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:38:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.195346
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
3.5 nao pertence ao intervalo 5.5 , 6.5
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
4.0 nao pertence ao intervalo 2.0 , 3.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:38:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.188109
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1679/1103/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:38:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("a: "))
b = float(input("b: "))
x = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- OUTPUT:
4.0 nao pertence ao intervalo 2.0 , 3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:39:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("a: "))
a = float(input("b: "))
b = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.12425
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
5.5 nao pertence ao intervalo 6.5 , 3.5
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:39:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("a: "))
a = float(input("b: "))
b = float(input("x: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
if (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:43:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- EXECUTION TIME:
0.191946
-- ERROR:
  File "/home/codebench/codes/1679/1103/main.py", line 12
    elif (b <= a):
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:43:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 12
    elif (b <= a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:43:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
else:
	print(x, "nao pertence ao intervalo", a,",",b)
	elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 12
    elif (b <= a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 23:46:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
elif:
	print(x, "nao pertence ao intervalo", a,",",b)
else (b <= a):
	print("Entradas", a, "e", b, "invalidas")
-- ERROR:
File "XXXX", line 10
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 23:47:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b) == True:
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.129352
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.131093
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.12818
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.127584
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
Entradas 6.5 e 3.5 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.096205
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.0950539
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
x: a: b: 2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
x: a: b: Entradas 6.5 e 3.5 invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.122275
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
x: a: b: 2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.184254
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:

-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 00:08:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("x: "))
a = float(input("a: "))
b = float(input("b: "))

if (a <= x <= b):
	print(x, "pertence ao intervalo", a,",",b)
elif (b <= a):
	print("Entradas", a, "e", b, "invalidas")
else:
	print(x, "nao pertence ao intervalo", a,",",b)
-- EXECUTION TIME:
0.159764
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
