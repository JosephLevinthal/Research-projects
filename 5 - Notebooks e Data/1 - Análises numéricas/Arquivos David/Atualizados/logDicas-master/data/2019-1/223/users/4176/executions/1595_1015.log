== TEST (2019-03-21 17:57:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(3,5,9)
print(min(3,5,9))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    input(3,5,9)
TypeError: input expected at most 1 arguments, got 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:13:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(3,5,9)
print(min(3,5,9))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    input(3,5,9)
TypeError: input expected at most 1 arguments, got 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:13:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("3,5,9")
print(min(3,5,9))
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:13:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("3,5,9")
print(min(3,5,9))
-- EXECUTION TIME:
0.139563
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:13:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("3,5,9")
print(min("3,5,9"))
-- OUTPUT:
,
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:13:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("3,5,9")
print(min("3,5,9"))
-- EXECUTION TIME:
0.138905
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
,
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:14:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(int("3,5,9"))
print(min("3,5,9"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    input(int("3,5,9"))
ValueError: invalid literal for int() with base 10: '3,5,9'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:14:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(int("3,5,9")
print(min("3,5,9"))
-- ERROR:
File "XXXX", line 5
    print(min("3,5,9"))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:15:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(int("3,5,9")
print(int(min("3,5,9"))
-- ERROR:
File "XXXX", line 5
    print(int(min("3,5,9"))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:15:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(print(int("3,5,9")
print(int(min("3,5,9"))
-- ERROR:
File "XXXX", line 5
    print(int(min("3,5,9"))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:16:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(print(int(3,5,9)
print(int(min(3,5,9)
-- ERROR:
File "XXXX", line 5
    print(int(min(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:16:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(print(int(3,5,9)
print(min(3,5,9)
-- ERROR:
File "XXXX", line 5
    print(min(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:17:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n= input(print(int(3,5,9)
print(n(3,5,9)
-- ERROR:
File "XXXX", line 5
    print(n(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:18:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(print(int(3,5,9)
print(int(max(3,5,9)
-- ERROR:
File "XXXX", line 5
    print(int(max(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:18:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(print(int(3,5,9)
input(print(max(3,5,9)
-- ERROR:
File "XXXX", line 5
    input(print(max(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:18:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(print(int(min(3,5,9)
input(print(max(3,5,9)
-- ERROR:
File "XXXX", line 5
    input(print(max(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:19:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(input(int(min(3,5,9)
input(print(max(3,5,9)
-- ERROR:
File "XXXX", line 5
    input(print(max(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:19:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(input(int(min(3,5,9)
print(input(int(max(3,5,9)
-- ERROR:
File "XXXX", line 5
    print(input(int(max(3,5,9)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:21:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
menorvalor=min(a,b,c)
pmaiorvalor=max(a,b,c)
intermediario= a+b+c-menorvalor-maiorvalor
print(menorvalor)
print(intermediario)
print(maiorvalor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    menorvalor=min(a,b,c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:22:10) 
-- CODE:

menorvalor=min(a,b,c)
maiorvalor=max(a,b,c)
intermediario= a+b+c-menorvalor-maiorvalor
print(menorvalor)
print(intermediario)
print(maiorvalor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    menorvalor=min(a,b,c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:22:39) 
-- CODE:

menorvalor=min(a,b,c)
maiorvalor=max(a,b,c)
intermediario= a+b+c-menorvalor-maiorvalor

print(menorvalor)
print(intermediario)
print(maiorvalor)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    menorvalor=min(a,b,c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:22:42) 
-- CODE:

menorvalor=min(a,b,c)
maiorvalor=max(a,b,c)
intermediario= a+b+c-menorvalor-maiorvalor

print(menorvalor)
print(intermediario)
print(maiorvalor)
-- EXECUTION TIME:
0.184655
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 2, in <module>
    menorvalor=min(a,b,c)
NameError: name 'a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:45:44) 
-- CODE:
a=int(inout("vai: "))
b=int(input("te: "))
c=int(input("laska: "))
print(min(a,b,c),(a+b+c)-min(a,b,c)-max(a,b,c),max(a,b,c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(inout("vai: "))
NameError: name 'inout' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 16:45:54) 
-- CODE:
a=int(input("vai: "))
b=int(input("te: "))
c=int(input("laska: "))
print(min(a,b,c),(a+b+c)-min(a,b,c)-max(a,b,c),max(a,b,c))
-- OUTPUT:
-2 0 10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 16:45:58) 
-- CODE:
a=int(input("vai: "))
b=int(input("te: "))
c=int(input("laska: "))
print(min(a,b,c),(a+b+c)-min(a,b,c)-max(a,b,c),max(a,b,c))
-- EXECUTION TIME:
0.150715
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2 0 10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
