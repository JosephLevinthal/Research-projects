== TEST (2019-05-11 15:30:13) 
-- CODE:
from math import*
k=float(input("Insira o valor de K"))
i= 1
e= 0

while(i<k):
		e= 1 + (1/factorial(i))
	i=i+1
print(round(e,8))
-- ERROR:
File "XXXX", line 8
    i=i+1
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:30:28) 
-- CODE:
from math import*
k=float(input("Insira o valor de K"))
i= 1
e= 0

while(i<k):
	e= 1 + (1/factorial(i))
	i=i+1
print(round(e,8))
-- OUTPUT:
1.00138889
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 15:31:34) 
-- CODE:
from math import*
k=float(input("Insira o valor de K"))
i= 1
e= 0

while(i<k):
	   if(i == 1):
        	res = 1 + (1/factorial(i))
    	else:
			e = res + (1/factorial(i))
	i=i+1
print(round(e,8))
-- EXECUTION TIME:
0.177501
-- ERROR:
  File "/home/codebench/codes/1716/2499/main.py", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:31:36) 
-- CODE:
from math import*
k=float(input("Insira o valor de K"))
i= 1
e= 0

while(i<k):
	   if(i == 1):
        	res = 1 + (1/factorial(i))
    	else:
			e = res + (1/factorial(i))
	i=i+1
print(round(e,8))
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:31:49) 
-- CODE:
from math import*
k=float(input("Insira o valor de K"))
i= 1
e= 0

while(i<k):
	   if(i == 1):
        		res = 1 + (1/factorial(i))
    	else:
				e = res + (1/factorial(i))
	i=i+1
print(round(e,8))
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:32:22) 
-- CODE:
from math import*
k=float(input("Insira o valor de K"))
i= 1
e= 0

while(i<k):
	if(i == 1):
		res = 1 + (1/factorial(i))
	else:
		e = res + (1/factorial(i))
	i=i+1
print(round(e,8))
-- OUTPUT:
2.00138889
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:33:39) 
-- CODE:
from math import *
k = float(input(""))
i = 1
res = 0
while(i < k):
	if(i == 1):
		res = 1 + (1/factorial(i))
	else:
		res = res + (1/factorial(i))
i+=1

print(round(res, 8))
-- OUTPUT:
2.00138889
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:33:45) 
-- CODE:
from math import *
k = float(input(""))
i = 1
res = 0
while(i < k):
	if(i == 1):
		res = 1 + (1/factorial(i))
	else:
		res = res + (1/factorial(i))
i+=1

print(round(res, 8))
-- OUTPUT:
2.00138889
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:34:00) 
-- CODE:
from math import *
k = float(input(""))
i = 1
res = 0
while(i < k):
	if(i == 1):
		res = 1 + (1/factorial(i))
	else:
		res = res + (1/factorial(i))
i=i+1

print(round(res, 8))
-- OUTPUT:
2.00138889
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:46:21) 
-- CODE:
from math import *
k = float(input("Insira o valor de k:"))
cont=1
soma=1
while(k > cont):
	e= 1 + 1 / factorial(soma)
	soma= soma + 1
	cont +=1
print(round(e,8))



-- OUTPUT:
1.00138889
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:47:28) 
-- CODE:
from math import *
k = int(input("Insira o valor de k:"))
cont=1
soma=1
while(k > cont):
	e= 1 + 1 / factorial(soma)
	soma= soma + 1
	cont +=1
print(round(e,8))



-- OUTPUT:
1.00138889
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:54:07) 
-- CODE:
from math import *
k = int(input("Insira o valor de k:"))
cont=1
den=1
e=1
while(k > cont):
	e= e + 1 / factorial(den)
	den = den + 1
	cont +=1
print(round(e,8))



-- OUTPUT:
2.71805556
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:54:14) 
-- CODE:
from math import *
k = int(input("Insira o valor de k:"))
cont=1
den=1
e=1
while(k > cont):
	e= e + 1 / factorial(den)
	den = den + 1
	cont +=1
print(round(e,8))



-- EXECUTION TIME:
0.144204
-- TEST CASE 1:
---- input:
7
---- correct output:
2.71805556
---- user output:
2.71805556
-- TEST CASE 2:
---- input:
15
---- correct output:
2.71828183
---- user output:
2.71828183
-- TEST CASE 3:
---- input:
6
---- correct output:
2.71666667
---- user output:
2.71666667
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
