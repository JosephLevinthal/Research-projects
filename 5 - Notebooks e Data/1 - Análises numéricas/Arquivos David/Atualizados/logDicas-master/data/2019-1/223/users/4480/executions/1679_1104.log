== TEST (2019-05-01 19:06:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a, ",", b)
print("Intervalo 2:", c, ",", d)
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:07:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:12:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>a) or (d>c):
	print("Ha intersecao")
if (b<a) or (d<c):
	print("Nao ha intersecao")
else:
	print(Entradas invalidas)
-- ERROR:
File "XXXX", line 15
    print(Entradas invalidas)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:12:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>a) or (d>c):
	print("Ha intersecao")
if (b<a) or (d<c):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 19:13:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>a) or (d>c):
	print("Ha intersecao")
if (b<a) or (d<c):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.313767
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:

-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1 , -3
Intervalo 2: 1 , 3
Ha intersecao
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 19:13:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>a) or (d>c):
	print("Ha intersecao")
if (b<a) or (d<c):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.188402
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:

-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1 , -3
Intervalo 2: 1 , 3
Ha intersecao
Nao ha intersecao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 19:51:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>a) or (d>c):
	print("Ha intersecao")
if (b<a) or (d<c):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:07:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
if (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:07:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
if (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.187701
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:

-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1 , -3
Intervalo 2: 1 , 3
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:07:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
if (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:07:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
if (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:07:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
if (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:08:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:08:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.227818
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:

-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1 , -3
Intervalo 2: 1 , 3
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:08:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:27:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = int(input(""))
b = int(input(""))
c = int(input(""))
d = int(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1 , 2
Intervalo 2: 4 , 5
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:28:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:45:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 22:01:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 22:02:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.163302
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 23:28:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 15:55:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.163563
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-12 20:10:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-12 20:10:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a = float(input(""))
b = float(input(""))
c = float(input(""))
d = float(input(""))
print("Intervalo 1:", a,",", b)
print("Intervalo 2:", c,",", d)
if (b>=a) and (d>=c):
	print("Ha intersecao")
elif (c>= a and c <=b) or (d>=a and d <=b):
	print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.608498
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
