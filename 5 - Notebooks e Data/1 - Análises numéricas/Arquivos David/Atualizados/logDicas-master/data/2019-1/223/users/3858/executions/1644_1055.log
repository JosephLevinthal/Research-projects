== SUBMITION (2019-04-11 16:29:55) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = abs( ((vo**2)*sin(2a)) / g )

if(d == r or d == (r-0.1) or d == (r+0.1) ):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.15494
-- ERROR:
  File "/home/codebench/codes/1644/1055/main.py", line 10
    r = abs( ((vo**2)*sin(2a)) / g )
                           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:29:59) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = abs( ((vo**2)*sin(2a)) / g )

if(d == r or d == (r-0.1) or d == (r+0.1) ):
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 10
    r = abs( ((vo**2)*sin(2a)) / g )
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:31:16) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r or d == (r-0.1) or d == (r+0.1) ):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.145468
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:31:56) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r or d == (r-0.1) or d == (r+0.1) ):
	print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:32:14) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r or d == (r-0.1) or d == (r+0.1) ):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.193078
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:32:29) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) ):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.13405
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:40:25) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) ):
	print("sim")
else:
	print("nao")
print(r2)

-- OUTPUT:
nao
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:40:47) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) ):
	print("sim")
else:
	print("nao")
print(r2)

-- OUTPUT:
nao
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:41:28) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) ):
	print("sim")
else:
	print("nao")
print(abs(r2))

-- OUTPUT:
nao
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:42:35) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) or d<r2):
	print("sim")
else:
	print("nao")
print(abs(r2))

-- EXECUTION TIME:
0.176359
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:42:51) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) or r2>d):
	print("sim")
else:
	print("nao")
print(abs(r2))

-- EXECUTION TIME:
0.13168
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:42:57) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) or r2>d):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.132688
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:43:22) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ((vo**2)*sin(2*a)) / g 
r2 = abs(r)
if(d == r2 or d == (r2-0.1) or d == (r2+0.1) or d>r2):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.147948
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:46:16) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
if(abs(d-r)==0 or abs(d-r)=0.1 or abs(d-r)==-0.1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.153929
-- ERROR:
  File "/home/codebench/codes/1644/1055/main.py", line 11
    if(abs(d-r)==0 or abs(d-r)=0.1 or abs(d-r)==-0.1):
                              ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:46:48) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
if(abs(d-r)==0 or abs(d-r)=0.1 or abs(d-r)==-0.1):
	print("sim")
else:
	print("nao")
print(d-r)
print(abs(d-r))


-- ERROR:
File "XXXX", line 11
    if(abs(d-r)==0 or abs(d-r)=0.1 or abs(d-r)==-0.1):
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:47:09) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
if(abs(d-r)==0 or abs(d-r)==0.1 or abs(d-r)==-0.1):
	print("sim")
else:
	print("nao")
print(d-r)
print(abs(d-r))


-- EXECUTION TIME:
0.156521
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
0.05171342949060076
0.05171342949060076
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
1.0864224922636083
1.0864224922636083
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:47:14) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
if(abs(d-r)==0 or abs(d-r)==0.1 or abs(d-r)==-0.1):
	print("sim")
else:
	print("nao")
print(d-r)
print(abs(d-r))


-- OUTPUT:
nao
0.05171342949060076
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:52:57) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
r2 = abs(r)
if(d == r2 or d>r2):
	print("sim")
elif((d-r2)<=0,1 or (d-r2)>= -0,1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.139723
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:44:48) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
r2 = abs(r)
if(d == r2 or d>r2):
	print("sim")
elif((d-r2)<=0,1 or (d-r2)>= -0,1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.131311
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:44:53) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
r2 = abs(r)
if(d == r2 or d>r2):
	print("sim")
elif((d-r2)<=0,1 or (d-r2)>= -0,1):
	print("sim")
else:
	print("nao")


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:46:05) 
-- CODE:
from math import *
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
vo = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r =  ( (vo**2)*(sin(2*a)) ) / g 
r2 = abs(r)
if(d == r2 or d>r2 or abs(d-r)<0.1):
	print("sim")
else:
	print("nao")


-- EXECUTION TIME:
0.252808
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:17:08) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:17:33) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
-- OUTPUT:
sim
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:17:40) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
-- OUTPUT:
sim
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:18:05) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(d)
print(r)
-- OUTPUT:
sim
0.05171342949060076
11.3
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:20:23) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(d)
print(r)
print(vi**2)
-- OUTPUT:
sim
0.05171342949060076
11.3
11.2482865705094
110.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:22:28) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(d)
print(r)
print(vi**2)
-- OUTPUT:
sim
0.05171342949060076
11.3
11.2482865705094
110.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:23:21) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
-- OUTPUT:
sim
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:24:05) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
-- OUTPUT:
sim
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:24:22) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1):
	print("sim")
else:
	print("nao")
print(abs(d-r))
-- OUTPUT:
sim
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:24:37) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1 or d>r):
	print("sim")
else:
	print("nao")
print(abs(d-r))
-- OUTPUT:
sim
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:25:02) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1 or d>r):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- OUTPUT:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:25:18) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r) < 0.1 or d>r):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- OUTPUT:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:36:01) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)>=0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- EXECUTION TIME:
0.136685
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
0.05171342949060076
11.2482865705094
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
1.0864224922636083
49.91357750773639
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:36:48) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<=0.1 or (r-d)<=0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- OUTPUT:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:36:50) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<=0.1 or (r-d)<=0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- EXECUTION TIME:
0.147162
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
1.0864224922636083
49.91357750773639
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:36:54) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<=0.1 or (r-d)<=0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- EXECUTION TIME:
0.148495
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
1.0864224922636083
49.91357750773639
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:37:12) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 or (r-d)<0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- OUTPUT:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:37:16) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 or (r-d)<0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- EXECUTION TIME:
0.158579
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
1.0864224922636083
49.91357750773639
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:37:22) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 or (r-d)>0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- OUTPUT:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:37:25) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 or (r-d)>0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- EXECUTION TIME:
0.163743
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
1.0864224922636083
49.91357750773639
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:37:28) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 or (r-d)>0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- EXECUTION TIME:
0.161409
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
1.0864224922636083
49.91357750773639
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:37:36) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- OUTPUT:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:37:39) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- OUTPUT:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:37:42) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 ):
	print("sim")
else:
	print("nao")
print(abs(d-r))
print(r)
print(abs(r))
-- EXECUTION TIME:
0.186576
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
0.05171342949060076
11.2482865705094
11.2482865705094
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
1.0864224922636083
49.91357750773639
49.91357750773639
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:37:58) 
-- CODE:
from math import *

vi = float(input())
a = radians(float(input()))
d = float(input())
g=9.8

r = ((vi**2)*sin(2*a))/g

if(abs(d-r)<0.1 ):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.211182
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
