== TEST (2019-03-31 10:27:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000





print(x1)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:27:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000





print(x1)
print(rest1)
-- OUTPUT:
9
173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:29:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%100
x3 = rest2//10
rest3 = x3%10
x4 = rest2//1





print(x1+x2+x3+x4)

-- OUTPUT:
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:30:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%100
x3 = rest2//10
rest3 = x3%10
x4 = rest2//1





print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
1
0
0
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:32:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%10
x3 = rest2//10
rest3 = x3%10
x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
1
0
0
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:33:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%10
x3 = rest2%10
rest3 = x3%10
x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
1
1
1
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:33:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%10
x3 = rest2//10
rest3 = x3%10
x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
1
0
0
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:33:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%100
x3 = rest2//10
rest3 = x3%10
x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
1
0
0
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 10:35:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%100
x3 = rest2//10
#rest3 = x3%10
#x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
#print(rest3)
#print(x4)

-- OUTPUT:
9
173
1
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:58:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2%100
x3 = rest2//10
#rest3 = x3%10
#x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
#print(rest3)
#print(x4)

-- OUTPUT:
9
173
1
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:59:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = x2//100
x3 = rest2//10
#rest3 = x3%10
#x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
#print(rest3)
#print(x4)

-- OUTPUT:
9
173
1
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:59:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
#rest3 = x3%10
#x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
#print(rest3)
#print(x4)

-- OUTPUT:
9
173
1
73
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:00:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = x3%10
#x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
#print(x4)

-- OUTPUT:
9
173
1
73
7
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:00:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = x3%10
x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
73
7
7
73
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:00:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = x3%10
x4 = rest2//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
73
7
7
73
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:01:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = x3%10
x4 = rest3//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
73
7
7
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:02:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = x3%10
x4 = rest3//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
73
7
7
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:04:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = rest2%10
x4 = rest3//1


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- OUTPUT:
9
173
1
73
7
3
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:05:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = rest2%10
print (x1+x2+x3+rest3)


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)
print(x4)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print(x4)
NameError: name 'x4' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 13:05:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = rest2%10
print (x1+x2+x3+rest3)


print(x1)
print(rest1)
print(x2)
print(rest2)
print(x3)
print(rest3)


-- OUTPUT:
20
9
173
1
73
7
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 13:05:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x = int(input())

x1 = x//1000
rest1 = x%1000
x2 = rest1//100
rest2 = rest1%100
x3 = rest2//10
rest3 = rest2%10
print (x1+x2+x3+rest3)



-- EXECUTION TIME:
0.134036
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
