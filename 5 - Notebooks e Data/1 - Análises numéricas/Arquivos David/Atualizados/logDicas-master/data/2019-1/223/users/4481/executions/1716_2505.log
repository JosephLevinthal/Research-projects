== TEST (2019-05-14 16:37:04) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * (x ** expoente / factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente = + 2
	contador + = 1
print(round(soma , 10))

-- ERROR:
File "XXXX", line 12
    contador + = 1
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:38:21) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * (x ** expoente / factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente = + 2
	contador +=1
print(round(soma , 10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(round(soma , 10))
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:38:50) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * (x ** expoente / factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente = + 2
	contador +=1
print(round(result, 10))
-- OUTPUT:
2.1585327794
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:40:50) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * ((x) ** expoente) / factorial(expoente))
	sinal = sinal * (-1)
	expoente = expoente = + 2
	contador +=1
print(round(result, 10))
-- OUTPUT:
2.1585327794
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:41:41) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * ((x) ** expoente) / factorial(expoente))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador +=1
print(round(result, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:41:57) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * ((x) ** expoente) / factorial(expoente))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador +=1
print(round(result, 10))
-- EXECUTION TIME:
0.295987
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:44:15) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * (x ** expoente / factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador +=1
print(round(result, 10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:44:24) 
-- CODE:
from math import *
x = eval(input(" digite o valor de x: "))
k = int(input("digite o valor de y: "))
contador = 1
sinal = -1
result = x
expoente = 3
while(contador < k):
	result = result + (sinal * (x ** expoente / factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador +=1
print(round(result, 10))
-- EXECUTION TIME:
0.130697
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
