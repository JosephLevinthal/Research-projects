== TEST (2019-04-25 16:32:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("isosceles")
		if (A!=B and B!=C):
			print("escaleno")
		else:
			print("invalido")
	else:
		print("invalido")
			
-- OUTPUT:
isosceles
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:42:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
pritn("Entradas: "A "," B "," C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 6
    pritn("Entradas: "A "," B "," C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:42:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
pritn("Entradas: " A "," B "," C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 6
    pritn("Entradas: " A "," B "," C)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:43:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
pritn("Entradas: ", A, "," B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- ERROR:
File "XXXX", line 6
    pritn("Entradas: ", A, "," B, ",", C)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:43:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
pritn("Entradas: ", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    pritn("Entradas: ", A, ",", B, ",", C)
NameError: name 'pritn' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:44:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas: ", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:48:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.160024
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:49:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas: ", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.229967
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:50:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas: ", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.106995
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:50:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas: ", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.137762
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:50:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas: ", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:51:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.2083
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:51:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:54:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: invalido")
	else:
		print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:00:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
	if (A+B<C or A+C<B or B+C<A):
			print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
	if (A+B<C or A+C<B or B+C<A):
			print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
	if (A+B<C or A+C<B or B+C<A):
			print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:02:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
	if (A+B<C or A+C<B or B+C<A):
			print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:03:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
	if (A+B<C or A+C<B or B+C<A):
			print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:09:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A=float(input("L1: "))
B=float(input("L2: "))
C=float(input("L3: "))
print("Entradas:", A, ",", B, ",", C)
if(A>0 and B>0 and C>0):
	if (A+B>C and A+C>B and B+C>A):
		if( A==B and B==C):
			print("Tipo de triangulo: equilatero")
		if ((A==B and B!=C) or (A!=B and B==C)):
			print("Tipo de triangulo: isosceles")
		if (A!=B and B!=C):
			print("Tipo de triangulo: escaleno")
	if (A+B<C or A+C<B or B+C<A):
			print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
			
-- EXECUTION TIME:
0.173772
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
