== TEST (2019-04-30 16:04:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor de x: "))
A=float(input("Valor de a: "))
B=float(input("Valor de b: "))
if((A<=X)and(B>=X)):
	print(X, 'pertence ao intervalo' A, ',', B)
elif(B<=A):
	print('Entradas', A, 'e', B, 'invalidas')
elif((A>=X)or(B<=x)):
	print(X, 'nao pertence ao intervalo', A, ',', B)
-- ERROR:
File "XXXX", line 8
    print(X, 'pertence ao intervalo' A, ',', B)
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:05:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor de x: "))
A=float(input("Valor de a: "))
B=float(input("Valor de b: "))
if((A<=X)and(B>=X)):
	print(X, "pertence ao intervalo", A, ",", B)
elif(B<=A):
	print('Entradas', A, 'e', B, 'invalidas')
elif((A>=X)or(B<=x)):
	print(X, 'nao pertence ao intervalo', A, ',', B)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:05:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor de x: "))
A=float(input("Valor de a: "))
B=float(input("Valor de b: "))
if((A<=X)and(B>=X)):
	print(X, "pertence ao intervalo", A, ",", B)
elif(B<=A):
	print('Entradas', A, 'e', B, 'invalidas')
elif((A>=X)or(B<=x)):
	print(X, 'nao pertence ao intervalo', A, ',', B)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:06:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor de x: "))
A=float(input("Valor de a: "))
B=float(input("Valor de b: "))
if((A<=X)and(B>=X)):
	print(X, "pertence ao intervalo", A, ",", B)
elif(B<=A):
	print('Entradas', A, 'e', B, 'invalidas')
elif((A>=X)or(B<=X)):
	print(X, 'nao pertence ao intervalo', A, ',', B)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:06:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor de x: "))
A=float(input("Valor de a: "))
B=float(input("Valor de b: "))
if((A<=X)and(B>=X)):
	print(X, "pertence ao intervalo", A, ",", B)
elif(B<=A):
	print('Entradas', A, 'e', B, 'invalidas')
elif((A>=X)or(B<=X)):
	print(X, 'nao pertence ao intervalo', A, ',', B)
-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:06:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X=float(input("Valor de x: "))
A=float(input("Valor de a: "))
B=float(input("Valor de b: "))
if((A<=X)and(B>=X)):
	print(X, "pertence ao intervalo", A, ",", B)
elif(B<=A):
	print('Entradas', A, 'e', B, 'invalidas')
elif((A>=X)or(B<=X)):
	print(X, 'nao pertence ao intervalo', A, ',', B)
-- EXECUTION TIME:
0.153193
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
