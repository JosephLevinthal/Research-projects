== SUBMITION (2019-04-20 01:56:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Valor de a: "))
b = float(input("Valor de b: "))
c = float(input("Valor de c: "))
d = float(input("Valor de d: "))

print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)

if((b>a)and(d>c)):
	if(a == c or a == d or b == c or b == d):
		print("Ha intersecao")
	elif(a != c and a != d and b != c and b != d):
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.195152
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 01:57:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Valor de a: "))
b = float(input("Valor de b: "))
c = float(input("Valor de c: "))
d = float(input("Valor de d: "))

print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)

if((b>a)and(d>c)):
	if(a == c or a == d or b == c or b == d):
		print("Ha intersecao")
	elif(a != c and a != d and b != c and b != d):
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 02:00:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Valor de a: "))
b = float(input("Valor de b: "))
c = float(input("Valor de c: "))
d = float(input("Valor de d: "))

print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)

if((b>a)and(d>c)):
	if((a == c or a == d) or (b == c or b == d)):
		print("Ha intersecao")
	elif((a != c and a != d) and (b != c and b != d)):
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.137473
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 02:02:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Valor de a: "))
b = float(input("Valor de b: "))
c = float(input("Valor de c: "))
d = float(input("Valor de d: "))

print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)

if(b > a and d > c):
	if((a == c or a == d) or (b == c or b == d)):
		print("Ha intersecao")
	elif((a != c and a != d) and (b != c and b != d)):
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.17852
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-20 03:11:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Valor de a: "))
b = float(input("Valor de b: "))
c = float(input("Valor de c: "))
d = float(input("Valor de d: "))

print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)

if(b > a and d > c):
	if((c >= a and c <= b) or (d >= a and d <= b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-20 03:12:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input("Valor de a: "))
b = float(input("Valor de b: "))
c = float(input("Valor de c: "))
d = float(input("Valor de d: "))

print("Intervalo 1:",a,",",b)
print("Intervalo 2:",c,",",d)

if(b > a and d > c):
	if((c >= a and c <= b) or (d >= a and d <= b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")
-- EXECUTION TIME:
0.210312
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
