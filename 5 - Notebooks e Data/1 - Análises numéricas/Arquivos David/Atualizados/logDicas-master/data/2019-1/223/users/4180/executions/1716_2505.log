== TEST (2019-05-14 16:41:22) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal *(x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:41:23) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal *(x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- EXECUTION TIME:
0.177854
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:43:51) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal *(x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:59:31) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:59:44) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:59:51) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:59:56) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:00:02) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:00:14) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:09:57) 
-- CODE:
from math import*
x = eval(66input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- ERROR:
File "XXXX", line 2
    x = eval(66input())
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:10:01) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:10:11) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:10:23) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:11:45) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:11:57) 
-- CODE:
from math import*
x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 17:12:33) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 17:12:34) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- EXECUTION TIME:
0.142777
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:34:55) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont += 1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:35:40) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 0
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	
print(round(resultado, 10))
	
	
	
	
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    resultado = resultado + (sinal * (x ** exp / factorial (exp)))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:36:30) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	
print(round(resultado, 10))
	
	
	
	
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    resultado = resultado + (sinal * (x ** exp / factorial (exp)))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:36:58) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont=1
print(round(resultado, 10))
	
	
	
	
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    resultado = resultado + (sinal * (x ** exp / factorial (exp)))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:37:18) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont+=1
print(round(resultado, 10))
	
	
	
	
	
	

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:37:34) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1
resultado = x
exp = 3

while( cont < k ):
	resultado = resultado + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont=1
print(round(resultado, 10))
	
	
	
	
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    resultado = resultado + (sinal * (x ** exp / factorial (exp)))
OverflowError: int too large to convert to float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:40:00) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1

exp = 3

while( cont < k ):
	x = x + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont+=1
print(round(resultado, 10))
	
	
	
	
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    print(round(resultado, 10))
NameError: name 'resultado' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 09:40:25) 
-- CODE:
from math import*

x = eval(input("Valor de x:" ))
k = int(input("Valor de k: "))

cont = 1
sinal = -1

exp = 3

while( cont < k ):
	x = x + (sinal * (x ** exp / factorial (exp)))
	sinal = sinal * -1
	exp = exp + 2
	cont+=1
print(round(x, 10))
	
	
	
	
	
	

-- OUTPUT:
0.9303519698
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
