== TEST (2019-03-21 17:57:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)2,4,3)
print(min(2))
print(max(4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)2,4,3)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:57:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)"2,4,3:")
print(min(2))
print(max(4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)"2,4,3:")
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:57:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)"2,4,3":)
print(min(2))
print(max(4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)"2,4,3":)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:57:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)"2,4,3":)
print(min(2))
print(max(4))
-- EXECUTION TIME:
0.218868
-- ERROR:
  File "/home/codebench/codes/1595/1015/main.py", line 4
    string=(int(input)"2,4,3":)
                            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:57:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)"2,4,3")
print(min(2))
print(max(4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)"2,4,3")
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:57:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)"2,4,3")
print(min(2))
print(max(4))
-- EXECUTION TIME:
0.169474
-- ERROR:
  File "/home/codebench/codes/1595/1015/main.py", line 4
    string=(int(input)"2,4,3")
                            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:24:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)2,4,3:)
print(min(2))
print(max(4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)2,4,3:)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:42:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)2,4,3))
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)2,4,3))
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:42:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)2,4,3)
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)2,4,3)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:42:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string=(int(input)2,4,3)
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 4
    string=(int(input)2,4,3)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:43:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input)2,4,3)
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 4
    string = (int(input)2,4,3)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:44:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input("2,4,3:")))
print(max(2,3,4))
print(min(2,3,4))
-- OUTPUT:
4
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 21:44:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input("2,4,3:")))
print(max(2,3,4))
print(min(2,3,4))
-- EXECUTION TIME:
0.239428
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
4
2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 21:44:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input("2,4,3:"))
print(max(2,3,4))
print(min(2,3,4))
-- EXECUTION TIME:
0.216442
-- ERROR:
  File "/home/codebench/codes/1595/1015/main.py", line 5
    print(max(2,3,4))
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:45:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input(2,4,3:))
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 4
    string = (int(input(2,4,3:))
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:45:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input(2,4,3))
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 5
    print(max(2,3,4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:45:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input(2,3,4.))
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 5
    print(max(2,3,4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 21:45:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
string = (int(input(2,3,4))
print(max(2,3,4))
print(min(2,3,4))
-- ERROR:
File "XXXX", line 5
    print(max(2,3,4))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:07:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(max(1,3,4,2))
print(min(4,2,3,1))
-- OUTPUT:
4
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:07:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.166763
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
4
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:08:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("1,2,3,4"))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.219402
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput("1,2,3,4"))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:08:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("1,2,3,4"))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput("1,2,3,4"))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:09:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("1,2,3,4:"))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.122901
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput("1,2,3,4:"))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:09:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("1,2,3,4"))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.138146
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput("1,2,3,4"))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:09:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("a,b,c,d"))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.15011
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput("a,b,c,d"))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:09:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("a,b,c,d "))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.169055
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput("a,b,c,d "))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:09:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("a,b,c,d "))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput("a,b,c,d "))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:10:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("a,b,c,d:1,2,3,4"))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.187734
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput("a,b,c,d:1,2,3,4"))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:10:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput("a,b,c,d:1,2,3,4"))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput("a,b,c,d:1,2,3,4"))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:10:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(""))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput(""))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:10:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(""))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.156915
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput(""))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:10:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput))
print(max(1,3,4,2))
print(min(4,2,3,1))
-- EXECUTION TIME:
0.211313
-- ERROR:
  File "/home/codebench/codes/1595/1015/main.py", line 4
    var= int(imput))
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:10:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput)
print(max(1,3,4,2))
print(min(4,2,3,1))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput)
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:11:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(a,b,c))
print(max(b,a,c))
print(min(c,b,a))
-- EXECUTION TIME:
0.200799
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput(a,b,c))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:11:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(a,b,c))
print(max(b,a,c))
print(min(c,b,a))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput(a,b,c))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:12:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput())
print(max())
print(min())
-- EXECUTION TIME:
0.142672
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput())
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:21:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(2,4,6))
print(max(4,6,2))
print(min(6,4,2))
-- EXECUTION TIME:
0.107025
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput(2,4,6))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:21:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(2,4,6))
print(max(4,6,2))
print(min(6,4,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput(2,4,6))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:21:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= (int(imput(2,4,6)))
print(max(4,6,2))
print(min(6,4,2))

-- EXECUTION TIME:
0.193161
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= (int(imput(2,4,6)))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:21:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= (int(imput(2,4,6)))
print(max(4,6,2))
print(min(6,4,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= (int(imput(2,4,6)))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:22:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(2,4,6))
print(max(4,6,2))
print(min(6,4,2))
print(max(min))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput(2,4,6))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:22:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(2,4,6))
print(max(4,6,2))
print(min(6,4,2))
print(max(min))
-- EXECUTION TIME:
0.143125
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput(2,4,6))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:44:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(a))
var= int(imput(b))
var= int(imput(b))
print(max(4,6,2))
print(min(6,4,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(imput(a))
NameError: name 'imput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:44:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(imput(a))
var= int(imput(b))
var= int(imput(b))
print(max(4,6,2))
print(min(6,4,2))

-- EXECUTION TIME:
0.198039
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 4, in <module>
    var= int(imput(a))
NameError: name 'imput' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:03:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var= int(input(a))
var= int(input(b))
var= int(input(b))
print(max(4,6,2))
print(min(6,4,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var= int(input(a))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:05:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("digite a:"))
b= int(input("digite b:"))
c= int(input("digite c:"))
print(max(a,b,c))
print(min(a,b,c))

-- OUTPUT:
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:12:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("digite a:"))
b= int(input("digite b:"))
c= int(input("digite c:"))

menorvalor=min(a,b,c)
maiorvalor=max(a,b,c)
intermediario= a+b+c-menorvalor-maiorvalor
print(menorvalor)
print(intermediario)
print(maiorvalor)



-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:12:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("digite a:"))
b= int(input("digite b:"))
c= int(input("digite c:"))

menorvalor=min(a,b,c)
maiorvalor=max(a,b,c)
intermediario= a+b+c-menorvalor-maiorvalor
print(menorvalor)
print(intermediario)
print(maiorvalor)



-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:14:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("digite a:"))
b= int(input("digite b:"))
c= int(input("digite c:"))

menorvalor = min(a,b,c)
maiorvalor = max(a,b,c)
intermediario = a+b+c-menorvalor-maiorvalor

print(menorvalor)
print(intermediario)
print(maiorvalor)



-- EXECUTION TIME:
0.149286
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:19:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("digite a:"))
b= int(input("digite b:"))
c= int(input("digite c:"))

menorvalor = min(a,b,c)
maiorvalor = max(a,b,c)
intermediario = a+b+c-menorvalor-maiorvalor

print(menorvalor)
print(intermediario)
print(maiorvalor)



-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 21:32:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("digite a:"))
b= int(input("digite b:"))
c= int(input("digite c:"))

menorvalor = min(a,b,c)
maiorvalor = max(a,b,c)
intermediario = a+b+c-menorvalor-maiorvalor

print(menorvalor)
print(intermediario)
print(maiorvalor)



-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 21:33:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("digite a:"))
b= int(input("digite b:"))
c= int(input("digite c:"))

menorvalor = min(a,b,c)
maiorvalor = max(a,b,c)
intermediario = a+b+c-menorvalor-maiorvalor

print(menorvalor)
print(intermediario)
print(maiorvalor)



-- EXECUTION TIME:
0.180724
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
