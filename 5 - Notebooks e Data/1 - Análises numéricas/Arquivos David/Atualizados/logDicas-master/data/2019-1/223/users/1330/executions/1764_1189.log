== TEST (2019-05-29 22:55:29) 
-- CODE:
a = input()
x = a.replace()
i = 0
j = -1
while(i<size(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	else:
		print(x.upper())
		print(0)
-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:56:07) 
-- CODE:
a = input()
x = a.replace()
i = 0
j = -1
while(i<size(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	#else:
	#	print(x.upper())
	#	print(0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    x = a.replace()
TypeError: replace() takes at least 2 arguments (0 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:56:39) 
-- CODE:
a = input()
x = a.replace(" ")
i = 0
j = -1
while(i<size(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	#else:
	#	print(x.upper())
	#	print(0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    x = a.replace(" ")
TypeError: replace() takes at least 2 arguments (1 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:56:59) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<size(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	#else:
	#	print(x.upper())
	#	print(0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    while(i<size(x)):
NameError: name 'size' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:57:13) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<len(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	#else:
	#	print(x.upper())
	#	print(0)
-- OUTPUT:
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:57:59) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<len(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	else:
		print(x.upper())
		print(0)
-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 22:59:48) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<len(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	elif(x[i]=!x[j]):
		print(x.upper())
		print(0)
-- ERROR:
File "XXXX", line 11
    elif(x[i]=!x[j]):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 23:00:22) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<len(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
print(x.upper())
print(1)
	elif(x[i]=!x[j]):
		print(x.upper())
		print(0)
-- ERROR:
File "XXXX", line 11
    elif(x[i]=!x[j]):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-29 23:01:08) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<len(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	#elif(x[i]=!x[j]):
	#	print(x.upper())
	#	print(0)
-- OUTPUT:
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-30 13:05:05) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<len(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	#elif(x[i]=!x[j]):
	#	print(x.upper())
	#	print(0)
-- EXECUTION TIME:
0.194603
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-30 13:12:05) 
-- CODE:
a = input()
x = a.replace(" ","")
i = 0
j = -1
while(i<len(x)):
	if(x[i]==x[j]):
		i = i + 1
		j = j -1
	print(x.upper())
	print(1)
	#elif(x[i]=!x[j]):
	#	print(x.upper())
	#	print(0)
-- EXECUTION TIME:
0.1925
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
CACHORRO
1
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
AMALANADANALAMA
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
