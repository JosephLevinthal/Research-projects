== TEST (2019-07-02 16:03:16) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

for x in range(shape(M)):
	for y in range(shape(M))
	if M[x,y] == 'B':
		print("BOMBA")
	if M[x,y] == "L":
		print("LIVRE")
		
-- ERROR:
File "XXXX", line 10
    for y in range(shape(M))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:03:16) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

for x in range(shape(M)):
	for y in range(shape(M))
	if M[x,y] == 'B':
		print("BOMBA")
	if M[x,y] == "L":
		print("LIVRE")
		
-- ERROR:
File "XXXX", line 10
    for y in range(shape(M))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:03:54) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

for x in range(M.shape(0)):
	for y in range(shape(1))
	if M[x,y] == 'B':
		print("BOMBA")
	if M[x,y] == "L":
		print("LIVRE")
		
-- ERROR:
File "XXXX", line 10
    for y in range(shape(1))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:04:43) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

for x in range(M.shape(0)):
	for y in range(shape(1))
	if M[x,y] == 'B' and (i,j) == M[x,y]:
		print("BOMBA")
	if M[x,y] == "L":
		print("LIVRE")
		
-- ERROR:
File "XXXX", line 10
    for y in range(shape(1))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:05:21) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n)
	if M[x,y] == 'B' and (i,j) == M[x,y]:
		print("BOMBA")
	if M[x,y] == "L":
		print("LIVRE")
		
-- ERROR:
File "XXXX", line 13
    for y in range(n)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:05:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
		print("BOMBA")
		if M[x,y] == "L":
		print("LIVRE")
		
-- ERROR:
File "XXXX", line 15
    print("BOMBA")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:05:58) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:06:11) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:06:19) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:07:58) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:08:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")
		print(M[x,y])
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 16:09:14) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and [i,j] == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and [i,j] == M[x,y]:
			print("LIVRE")
		print(M[x,y])
-- EXECUTION TIME:
1.24327
-- TEST CASE 1:
---- input:
[['B','L','L'],['L','L','L'],['L','B','B']]
2
1
---- correct output:
BOMBA
---- user output:
B
L
L
L
L
L
L
B
B
-- TEST CASE 2:
---- input:
[['B','L','L'],['L','L','L'],['L','B','B'],['L','B','L']]
3
2
---- correct output:
LIVRE
---- user output:
B
L
L
L
L
L
L
B
B
L
B
L
-- TEST CASE 3:
---- input:
[['B','L','L'],['B','B','B'],['L','B','B'],['L','B','L']]
2
2
---- correct output:
BOMBA
---- user output:
B
L
L
B
B
B
L
B
B
L
B
L
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:09:15) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and [i,j] == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and [i,j] == M[x,y]:
			print("LIVRE")
		print(M[x,y])
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 16:09:26) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and [i,j] == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and [i,j] == M[x,y]:
			print("LIVRE")
		
-- EXECUTION TIME:
1.11813
-- TEST CASE 1:
---- input:
[['B','L','L'],['L','L','L'],['L','B','B']]
2
1
---- correct output:
BOMBA
---- user output:

-- TEST CASE 2:
---- input:
[['B','L','L'],['L','L','L'],['L','B','B'],['L','B','L']]
3
2
---- correct output:
LIVRE
---- user output:

-- TEST CASE 3:
---- input:
[['B','L','L'],['B','B','B'],['L','B','B'],['L','B','L']]
2
2
---- correct output:
BOMBA
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:19:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and [i,j] == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and [i,j] == M[x,y]:
			print("LIVRE")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:19:53) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:20:02) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:20:20) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == M[x,y]:
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == M[x,y]:
			print("LIVRE")
		print(i,j)
		print(M[x,y])

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 16:21:00) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == (x,y):
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == (x,y):
			print("LIVRE")
		print(i,j)
		print(M[x,y])

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 16:21:13) 
-- CODE:
from numpy import *
from numpy.linalg import *

M = array(eval(input("")))

i = int(input(""))
j = int(input(""))

m = shape(M)[0]
n = shape(M)[1]

for x in range(m):
	for y in range(n):
		if M[x,y] == 'B' and (i,j) == (x,y):
			print("BOMBA")
		if M[x,y] == "L" and (i,j) == (x,y):
			print("LIVRE")

-- EXECUTION TIME:
0.982325
-- TEST CASE 1:
---- input:
[['B','L','L'],['L','L','L'],['L','B','B']]
2
1
---- correct output:
BOMBA
---- user output:
BOMBA
-- TEST CASE 2:
---- input:
[['B','L','L'],['L','L','L'],['L','B','B'],['L','B','L']]
3
2
---- correct output:
LIVRE
---- user output:
LIVRE
-- TEST CASE 3:
---- input:
[['B','L','L'],['B','B','B'],['L','B','B'],['L','B','L']]
2
2
---- correct output:
BOMBA
---- user output:
BOMBA
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
