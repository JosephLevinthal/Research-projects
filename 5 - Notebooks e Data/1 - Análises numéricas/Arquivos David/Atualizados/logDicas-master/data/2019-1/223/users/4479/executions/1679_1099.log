== TEST (2019-04-30 16:41:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b:"))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:41:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b:"))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.175242
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:42:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.150073
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:43:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.16074
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:43:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:43:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.186382
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:44:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas: a, b, c: ")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.195295
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: a, b, c: 
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: a, b, c: 
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: a, b, c: 
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:46:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas: a, b, c: ")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.224267
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: a, b, c: 
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: a, b, c: 
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: a, b, c: 
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:46:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas: a, b, c: ")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: a, b, c: 
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:46:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas: a, b, c: ")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.159695
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: a, b, c: 
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: a, b, c: 
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: a, b, c: 
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:47:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: "))
b = float(input( "valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.132446
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:48:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: 1.0 "))
b = float(input( "valor de b: 2.0 "))
c = float(input("valor de c: 3.0 "))
print("Entradas: a, b, c")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.206582
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: a, b, c
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: a, b, c
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: a, b, c
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:48:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: 1.0 "))
b = float(input( "valor de b: 2.0 "))
c = float(input("valor de c: 3.0 "))
print("Entradas: a, b, c")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: a, b, c
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:49:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a:"))
b = float(input( "valor de b:"))
c = float(input("valor de c:"))
print("Entradas: a, b, c")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.284495
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: a, b, c
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: a, b, c
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: a, b, c
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:49:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a:"))
b = float(input( "valor de b:"))
c = float(input("valor de c:"))
print("Entradas: a, b, c")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: a, b, c
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:51:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( a = 1.0 ))
b = float(input( b = 2.0 ))
c = float(input( c = 3.0 ))
print("Entradas: a, b, c")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.180085
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 3, in <module>
    a = float(input( a = 1.0 ))
TypeError: input() takes no keyword arguments

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:51:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( a = 1.0 ))
b = float(input( b = 2.0 ))
c = float(input( c = 3.0 ))
print("Entradas: a, b, c")

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.212523
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 3, in <module>
    a = float(input( a = 1.0 ))
TypeError: input() takes no keyword arguments

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:56:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( a = 1.0 ))
b = float(input( b = 2.0 ))
c = float(input( c = 3.0 ))
print("Entradas:" ,a,",", b,"," c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 6
    print("Entradas:" ,a,",", b,"," c)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:56:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( a = 1.0 ))
b = float(input( b = 2.0 ))
c = float(input( c = 3.0 ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a = float(input( a = 1.0 ))
TypeError: input() takes no keyword arguments
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:57:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:58:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:58:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.138135
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:58:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")

elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.159883
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:02:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")
	
elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.163849
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:02:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")
	
elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:02:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")
	
elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:02:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("tipo de triangulo: invalido")
	
elif (a==b and b==c):
	print("tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("tipo de triangulo: isosceles")
	
else:
	print("tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.153157
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:26:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<=0 or b<=0 or c<=0):
	print("Tipo de triangulo: invalido")
	
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("Tipo de triangulo: isosceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:26:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de 
a = float(input( "valor de a: " ))
b = float(input( "valor de b: " ))
c = float(input( "valor de c: " ))
print("Entradas:" ,a,",", b,",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<=0 or b<=0 or c<=0):
	print("Tipo de triangulo: invalido")
	
elif (a==b and b==c):
	print("Tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("Tipo de triangulo: isosceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.165836
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
