== TEST (2019-05-14 16:13:11) 
-- CODE:
a=float(int("Número de habitantes de uma cidade A: "))
b=float(int("Número de habitantes de uma cidade b: "))
pca=float(int("Percentual de crescimento populacional da cidade A: "))
pcb=float(int("Percentual de crescimento populacional da cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("Número de habitantes de uma cidade A: "))
ValueError: invalid literal for int() with base 10: 'Número de habitantes de uma cidade A: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:13:29) 
-- CODE:
a=float(int("Numero de habitantes de uma cidade A: "))
b=float(int("Numero de habitantes de uma cidade b: "))
pca=float(int("Percentual de crescimento populacional da cidade A: "))
pcb=float(int("Percentual de crescimento populacional da cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("Numero de habitantes de uma cidade A: "))
ValueError: invalid literal for int() with base 10: 'Numero de habitantes de uma cidade A: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:13:59) 
-- CODE:
a=float(int("numero de habitantes de uma cidade A: "))
b=float(int("numero de habitantes de uma cidade b: "))
pca=float(int("nercentual de crescimento populacional da cidade A: "))
pcb=float(int("nercentual de crescimento populacional da cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("numero de habitantes de uma cidade A: "))
ValueError: invalid literal for int() with base 10: 'numero de habitantes de uma cidade A: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:14:16) 
-- CODE:
a=float(int("numero de habitantes de uma cidade a: "))
b=float(int("numero de habitantes de uma cidade b: "))
pca=float(int("nercentual de crescimento populacional da cidade A: "))
pcb=float(int("nercentual de crescimento populacional da cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("numero de habitantes de uma cidade a: "))
ValueError: invalid literal for int() with base 10: 'numero de habitantes de uma cidade a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:14:18) 
-- CODE:
a=float(int("numero de habitantes de uma cidade a: "))
b=float(int("numero de habitantes de uma cidade b: "))
pca=float(int("nercentual de crescimento populacional da cidade A: "))
pcb=float(int("nercentual de crescimento populacional da cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("numero de habitantes de uma cidade a: "))
ValueError: invalid literal for int() with base 10: 'numero de habitantes de uma cidade a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:43:29) 
-- CODE:
a=float(int("numero de habitantes de uma cidade a: "))
b=float(int("numero de habitantes de uma cidade b: "))
pca=float(int("nercentual de crescimento populacional da cidade A: "))
pcb=float(int("nercentual de crescimento populacional da cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("numero de habitantes de uma cidade a: "))
ValueError: invalid literal for int() with base 10: 'numero de habitantes de uma cidade a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:44:51) 
-- CODE:
a=float(int("hab a: "))
b=float(int("hab b: "))
pca=float(int("cidade A: "))
pcb=float(int("cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("hab a: "))
ValueError: invalid literal for int() with base 10: 'hab a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:52:21) 
-- CODE:
a=float(int("hab a: "))
b=float(int("hab b: "))
pca=float(int("cidade A: "))
pcb=float(int("cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=float(int("hab a: "))
ValueError: invalid literal for int() with base 10: 'hab a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:53:04) 
-- CODE:
a=int(int("hab a: "))
b=float(int("hab b: "))
pca=float(int("cidade A: "))
pcb=float(int("cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(int("hab a: "))
ValueError: invalid literal for int() with base 10: 'hab a: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:53:37) 
-- CODE:
a=int(intput("hab a: "))
b=float(input("hab b: "))
pca=float(input("cidade A: "))
pcb=float(input("cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=int(intput("hab a: "))
NameError: name 'intput' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:53:50) 
-- CODE:
a=int(input("hab a: "))
b=float(input("hab b: "))
pca=float(input("cidade A: "))
pcb=float(input("cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:54:23) 
-- CODE:
a=int(input("hab a: "))
b=float(input("hab b: "))
pca=float(input("cidade A: "))
pcb=float(input("cidade B: "))
t=0
while(a<=b):
	a=a+(a*pca/100)
	b=b+(b*pcb/100)
	t=t+1
print(t)
-- EXECUTION TIME:
0.197728
-- TEST CASE 1:
---- input:
250150
580000
35.5
10.5
---- correct output:
5
---- user output:
5
-- TEST CASE 2:
---- input:
180250
1200000
10.25
5.7
---- correct output:
45
---- user output:
45
-- TEST CASE 3:
---- input:
1000000
1650000
12.75
3.2
---- correct output:
6
---- user output:
6
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
