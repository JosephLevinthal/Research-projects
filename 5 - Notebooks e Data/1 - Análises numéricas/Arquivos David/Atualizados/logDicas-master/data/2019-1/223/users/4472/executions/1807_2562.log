== TEST (2019-06-10 19:42:43) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-numpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 19:43:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-numpar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 19:44:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.15186
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2562/main.py", line 7, in <module>
    while (size(vet) > npar):
NameError: name 'npar' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 19:44:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 19:46:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   nimpar = size(vet) - npar
	print(nimpar)

   # No. total de elementos
	tamanho = len(vet)
   print(tamanho)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 21
    print(nimpar)
                ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 19:48:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
	# Zera contador de elementos pares
	npar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
		npar = npar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	nimpar = size(vet) - npar
	print(nimpar)

   # No. total de elementos
	tamanho = len(vet)
	print(tamanho)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    npar = npar + 1
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 19:50:18) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > npar):
	# Zera contador de elementos pares
	npar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
		print(npar)

   # No. de elementos impares
		nimpar = size(vet) - npar
		print(nimpar)

   # No. total de elementos
		tamanho = len(vet)
		print(tamanho)

   # Leitura do proximo vetor
		vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 19:51:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 0):
	# Zera contador de elementos pares
	npar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1

   # No. de elementos pares
		print(npar)

   # No. de elementos impares
		nimpar = size(vet) - npar
		print(nimpar)

   # No. total de elementos
		tamanho = len(vet)
		print(tamanho)

   # Leitura do proximo vetor
		vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.19392
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2562/main.py", line 28, in <module>
    vet = array(eval(input()))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 15:32:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	
	# Zera contador de elementos pares
	npar = 0
	
	# Zera contador de elementos ímpares
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
		print(npar)

   # No. de elementos impares
		print(nimpar)

   # No. total de elementos
		print(tamanho)

   # Leitura do proximo vetor
		vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.800132
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2562/main.py", line 29, in <module>
    print(tamanho)
NameError: name 'tamanho' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 15:32:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	
	# Zera contador de elementos pares
	npar = 0
	
	# Zera contador de elementos ímpares
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
		print(npar)

   # No. de elementos impares
		print(nimpar)

   # No. total de elementos
		print(tamanho)

   # Leitura do proximo vetor
		vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 15:33:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	
	# Zera contador de elementos pares
	npar = 0
	
	# Zera contador de elementos ímpares
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
		print(npar)

   # No. de elementos impares
		print(nimpar)

   # No. total de elementos
		print(size(vet))

   # Leitura do proximo vetor
		vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.954802
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2562/main.py", line 32, in <module>
    vet = array(eval(input()))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 15:35:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	
	# Zera contador de elementos pares
	npar = 0
	
	# Zera contador de elementos ímpares
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
		print(npar)

   # No. de elementos impares
		print(nimpar)

   # No. total de elementos
		print(size(vet))

   # Leitura do proximo vetor
		vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 15:37:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > 1):
	
	# Zera contador de elementos pares
	npar = 0
	
	# Zera contador de elementos ímpares
	nimpar = 0

   # Conta quantidade de elementos pares
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
		else:
			nimpar = nimpar + 1

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.19501
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
