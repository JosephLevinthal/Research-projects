== TEST (2019-05-02 16:22:40) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if (-1 <= x < -1/2) or (1/2 < x <= 1):
	print(asin(degrees(round(x),2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:22:49) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if ((-1 <= x < -1/2) or (1/2 < x <= 1)):
	print(asin(degrees(round(x),2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:23:12) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if ((-1 <= x < -1/2) or (1/2 < x <= 1)):
	print(asin(degrees(round(x),2)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:23:58) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if ((-1 <= x < -1/2) or (1/2 < x <= 1)):
	print(asin(degrees(round(x),2)))
else:
	print("entrada invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:24:10) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if ((-1 <= x < -1/2) or (1/2 < x <= 1)):
	print(asin(degrees(round(x),2)))
else:
	print("entrada invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:24:36) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if ((-1 <= x < -0.5) or (0.5 < x <= 1)):
	print(asin(degrees(round(x),2)))
else:
	print("entrada invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:25:12) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if (((-1) <= x < (-0.5) or (0.5 < x <= 1)):
	print(asin(degrees(round(x),2)))
else:
	print("entrada invalida")
-- ERROR:
File "XXXX", line 5
    if (((-1) <= x < (-0.5) or (0.5 < x <= 1)):
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:25:19) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if (((-1) <= x < (-0.5) or (0.5 < x <= 1))):
	print(asin(degrees(round(x),2)))
else:
	print("entrada invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 17:11:45) 
-- CODE:
from math import*

x= float(input("Valor para x: "))

if (((-1) <= x < (-0.5) or (0.5 < x <= 1))):
	print(asin(degrees(round(x),2)))
else:
	print("entrada invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(asin(degrees(round(x),2)))
TypeError: degrees() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
