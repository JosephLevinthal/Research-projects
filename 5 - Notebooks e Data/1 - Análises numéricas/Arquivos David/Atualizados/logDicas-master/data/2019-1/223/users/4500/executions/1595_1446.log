== TEST (2019-04-16 13:51:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:51:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- EXECUTION TIME:
0.204066
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:51:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:51:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- EXECUTION TIME:
0.117696
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:51:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:51:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- EXECUTION TIME:
0.148307
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:51:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:52:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- EXECUTION TIME:
0.174056
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:52:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:52:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- EXECUTION TIME:
0.234527
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:52:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:52:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- EXECUTION TIME:
0.175457
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:52:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:53:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto))

-- EXECUTION TIME:
0.168069
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:53:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto(x, 3))

-- ERROR:
File "XXXX", line 12
    
                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:54:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto(x, 3)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(round(resto(x, 3)))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:54:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto(x, 3)))

-- EXECUTION TIME:
0.147861
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1446/main.py", line 11, in <module>
    print(round(resto(x, 3)))
NameError: name 'x' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:55:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto, 3))

-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:56:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

comprar = float(input("Quantos litros comprou: "))

doar =comprar * (2/3)

resto = comprar - doar

print(round(resto, 3))

-- EXECUTION TIME:
0.18625
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
