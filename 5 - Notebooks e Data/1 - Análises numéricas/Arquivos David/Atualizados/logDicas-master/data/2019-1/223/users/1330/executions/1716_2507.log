== TEST (2019-05-16 15:14:04) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- OUTPUT:
MAXIMO
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:25) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.148435
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
1
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
MAXIMO
1
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:
MAXIMO
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:27) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.139688
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
1
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
MAXIMO
1
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:
MAXIMO
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:28) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.247145
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
1
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
MAXIMO
1
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:
MAXIMO
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:28) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.227587
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
1
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
MAXIMO
1
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:
MAXIMO
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:28) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.372801
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
1
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
MAXIMO
1
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:
MAXIMO
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:28) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.520559
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
1
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
MAXIMO
1
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:
MAXIMO
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:28) 
-- CODE:
qi = int(input())
pc = float(input())

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.651906
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
1
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
MAXIMO
1
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:14:35) 
-- CODE:
qi = int(input())
pc = float(input())/100

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- OUTPUT:
MAXIMO
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:14:50) 
-- CODE:
qi = int(input())
pc = float(input())/100

c = 0
while(qi>0 and qi<8000):
	qi = qi + (qi*pc)
	qr = int(input())
	if(qi>=0 and qi<=8000):
		qi = qi - qr
		mensagem = "ZERO"
	else:
		mensagem = "MAXIMO"
	c = c +1
print(mensagem)
print(c)
-- EXECUTION TIME:
0.165923
-- TEST CASE 1:
---- input:
1234
56
7
8
9
10
11
---- correct output:
MAXIMO
5
---- user output:
MAXIMO
5
-- TEST CASE 2:
---- input:
5432
1
987
654
4321
---- correct output:
ZERO
3
---- user output:
ZERO
3
-- TEST CASE 3:
---- input:
2468
35
1234
900
1
2
3
4
5
---- correct output:
MAXIMO
7
---- user output:
MAXIMO
7
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
