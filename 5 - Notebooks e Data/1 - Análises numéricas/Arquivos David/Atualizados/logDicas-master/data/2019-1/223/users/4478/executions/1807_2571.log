== TEST (2019-06-13 09:13:07) 
-- CODE:
s = input("string de entrada: ")

sv = ""
for i in size(s):
	if(s[i] != a and e and i and o and u):
		ret = s.replace('a'and'e'and'i'and'o'and'u',"")
	print(ret)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    for i in size(s):
NameError: name 'size' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 09:14:29) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in (s):
	if(s[i] != a and e and i and o and u):
		ret = s.replace('a'and'e'and'i'and'o'and'u',"")
	print(ret)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(s[i] != a and e and i and o and u):
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 09:15:05) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in (s):
	if(s[i] == (a and e and i and o and u):
		ret = s.replace('a'and'e'and'i'and'o'and'u',"")
	print(ret)
	
-- ERROR:
File "XXXX", line 6
    if(s[i] == (a and e and i and o and u):
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 09:15:14) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in (s):
	if(s[i] == (a and e and i and o and u)):
		ret = s.replace('a'and'e'and'i'and'o'and'u',"")
	print(ret)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(s[i] == (a and e and i and o and u)):
TypeError: string indices must be integers
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 09:15:50) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in (s):
	ret = s.replace('a'and'e'and'i'and'o'and'u',"")
print(ret)
	
-- OUTPUT:
Institto_de_Comptacao-ICOMP-UFAM
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 09:16:12) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in (s):
	ret = s.replace('a',"")
print(ret)
	
-- OUTPUT:
Instituto_de_Computco-ICOMP-UFAM
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 09:17:29) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in s:
	ret = s.replace('a',"")
	ret = s.replace('e',sv)
print(ret)
	
-- OUTPUT:
Instituto_d_Computacao-ICOMP-UFAM
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 09:56:19) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in range(len(s)):
	if(s[i] != "a" and s[i] != "A"):
		sv = sv + s[i]
print(sv)
	
-- OUTPUT:
Instituto_de_Computco-ICOMP-UFM
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-13 09:56:31) 
-- CODE:

s = input("string de entrada: ")

sv = ""
for i in range(len(s)):
	if(s[i] != "a" and s[i] != "A"):
		sv = sv + s[i]
print(sv)
	
-- EXECUTION TIME:
0.897301
-- TEST CASE 1:
---- input:
Instituto_de_Computacao-ICOMP-UFAM
---- correct output:
Instituto_de_Computco-ICOMP-UFM
---- user output:
Instituto_de_Computco-ICOMP-UFM
-- TEST CASE 2:
---- input:
a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-a-aa-a-a-a-a-a-a-a-a-a-a
---- correct output:
-----------------------------
---- user output:
-----------------------------
-- TEST CASE 3:
---- input:
.aaaaaaaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb.aaaaaaaaaaaaaaaaa.
---- correct output:
..bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb..
---- user output:
..bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccc.bbbbbbbbbbbbbbbbbb..
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
