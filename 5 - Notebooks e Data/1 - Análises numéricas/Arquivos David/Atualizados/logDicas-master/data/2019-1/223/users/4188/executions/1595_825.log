== TEST (2019-03-26 16:16:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
print(pi)

r=int(input("DIGITE O VALOR DO RAIO: "))
a=
-- ERROR:
File "XXXX", line 8
    a=
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:16:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
print(pi)

r=int(input("DIGITE O VALOR DO RAIO: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:19:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=int(input("DIGITE O VALOR DO RAIO: "))
a=pi*r**2
v=(4/3)*pi*r**3
print(a)
print(v)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:24:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=int(input("DIGITE O VALOR DO RAIO: "))
a=pi*r**2
v=(4/3)*pi*r**3
print(round(a,3))
print(round(v,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:25:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=int(input("DIGITE O VALOR DO RAIO: "))
a=pi*r**2
v=(4/3)*pi*r**3
print(round(a,3))
print(round(v,3))

-- EXECUTION TIME:
0.179863
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 5, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:26:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=int(input("DIGITE O VALOR DO RAIO: "))
a=pi*(r**2)
v=(4/3)*pi*(r**3)
print(round(a,3))
print(round(v,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:26:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=int(input("DIGITE O VALOR DO RAIO: "))
a=pi*(r**2)
v=(4/3)*pi*(r**3)
print(round(a,3))
print(round(v,3))

-- EXECUTION TIME:
0.14564
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 5, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:26:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=int(input("DIGITE O VALOR DO RAIO: "))
a=pi*(r**2)
v=(4/3)*pi*(r**3)
print(round(a,3))
print(round(v,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:26:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=int(input("DIGITE O VALOR DO RAIO: "))
a=pi*(r**2)
v=(4/3)*pi*(r**3)
print(round(a,3))
print(round(v,3))

-- EXECUTION TIME:
0.162692
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 5, in <module>
    r=int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:27:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=float(input("DIGITE O VALOR DO RAIO: "))
a=pi*(r**2)
v=(4/3)*pi*(r**3)
print(round(a,3))
print(round(v,3))

-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:27:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import pi
r=float(input("DIGITE O VALOR DO RAIO: "))
a=pi*(r**2)
v=(4/3)*pi*(r**3)
print(round(a,3))
print(round(v,3))

-- EXECUTION TIME:
0.186315
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
