== TEST (2019-06-11 16:50:51) 
-- CODE:
from numpy import *

media= array(eval(input('mÃ©dia alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=float)
soma=0
for i in range (size(media)):
	if ((media)>= 5 and (nhoras)>= (carga*0.75)):
		vet= soma + 1
print(vet)		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:51:14) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=float)
soma=0
for i in range (size(media)):
	if ((media)>= 5 and (nhoras)>= (carga*0.75)):
		vet= soma + 1
print(vet)		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:53:09) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=float)
soma=0
for i in range (size(media)):
	if ((media)>= 5 and (nhoras)>= (carga*0.75)):
		soma= vet[i] +1
print(soma)		
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:03:09) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=int2)
 
for i in range (size(media)):
	if ((media[i])>= 5 and (nhoras[i])>= (carga*0.75)):
		vet[0]=vet[0] + 1
	elif((media[i] <5 and (nhoras[i])>= (carga*0.75)):
		vet[1]= vet[1] + 1
	elif(((nhoras[i]) < (carga*0.75)))
		vet[2]= vet[2]+ 1
	print(vet)
			
-- ERROR:
File "XXXX", line 11
    elif((media[i] <5 and (nhoras[i])>= (carga*0.75)):
                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:03:27) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=int2)
 
for i in range (size(media)):
	if ((media[i])>= 5 and (nhoras[i])>= (carga*0.75)):
		vet[0]=vet[0] + 1
	elif((media[i]) <5 and (nhoras[i])>= (carga*0.75)):
		vet[1]= vet[1] + 1
	elif(((nhoras[i]) < (carga*0.75)))
		vet[2]= vet[2]+ 1
	print(vet)
			
-- ERROR:
File "XXXX", line 13
    elif(((nhoras[i]) < (carga*0.75)))
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:03:38) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=int2)
 
for i in range (size(media)):
	if ((media[i])>= 5 and (nhoras[i])>= (carga*0.75)):
		vet[0]=vet[0] + 1
	elif((media[i]) <5 and (nhoras[i])>= (carga*0.75)):
		vet[1]= vet[1] + 1
	elif((nhoras[i]) < (carga*0.75))
		vet[2]= vet[2]+ 1
	print(vet)
			
-- ERROR:
File "XXXX", line 13
    elif((nhoras[i]) < (carga*0.75))
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:03:43) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=int2)
 
for i in range (size(media)):
	if ((media[i])>= 5 and (nhoras[i])>= (carga*0.75)):
		vet[0]=vet[0] + 1
	elif((media[i]) <5 and (nhoras[i])>= (carga*0.75)):
		vet[1]= vet[1] + 1
	elif((nhoras[i]) < (carga*0.75)):
		vet[2]= vet[2]+ 1
	print(vet)
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:04:05) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=int)
 
for i in range (size(media)):
	if ((media[i])>= 5 and (nhoras[i])>= (carga*0.75)):
		vet[0]=vet[0] + 1
	elif((media[i]) <5 and (nhoras[i])>= (carga*0.75)):
		vet[1]= vet[1] + 1
	elif((nhoras[i]) < (carga*0.75)):
		vet[2]= vet[2]+ 1
	print(vet)
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 17:05:57) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=int)
 
for i in range (size(media)):
	if ((media[i])>= 5 and (nhoras[i])>= (carga*0.75)):
		vet[0]=vet[0] + 1
	elif((media[i]) <5 and (nhoras[i])>= (carga*0.75)):
		vet[1]= vet[1] + 1
	elif((nhoras[i]) < (carga*0.75)):
		vet[2]= vet[2]+ 1
print(vet)
			
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 17:06:15) 
-- CODE:
from numpy import *

media= array(eval(input('media alunos:')))
nhoras = array(eval(input('numero de horas:')))
carga = array(eval(input('carga horaria:')))
vet= zeros(3, dtype=int)
 
for i in range (size(media)):
	if ((media[i])>= 5 and (nhoras[i])>= (carga*0.75)):
		vet[0]=vet[0] + 1
	elif((media[i]) <5 and (nhoras[i])>= (carga*0.75)):
		vet[1]= vet[1] + 1
	elif((nhoras[i]) < (carga*0.75)):
		vet[2]= vet[2]+ 1
print(vet)
			
-- EXECUTION TIME:
1.06975
-- TEST CASE 1:
---- input:
[6.2,7.3,7.0,7.5,8.9]
[75,76,74,73,72]
100
---- correct output:
[2 0 3]
---- user output:
[2 0 3]
-- TEST CASE 2:
---- input:
[7.4,7.6,7.5,7.2,7.2,7.3,7.8]
[60,80,55,58,61,70,79]
80
---- correct output:
[5 0 2]
---- user output:
[5 0 2]
-- TEST CASE 3:
---- input:
[8.2,6.9,7.0,6.5,7.4,8.5,7.6,6.9,4.5,5.5]
[90,40,70,35,100,110,85,99,100,110]
120
---- correct output:
[5 1 4]
---- user output:
[5 1 4]
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
