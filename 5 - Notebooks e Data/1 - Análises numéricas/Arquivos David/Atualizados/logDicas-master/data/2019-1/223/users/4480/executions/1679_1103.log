== TEST (2019-04-30 17:00:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(""))
b = float(input(""))
c = float(input(""))
print(a, "pertence ao intervalo", b, c)
-- OUTPUT:
2.0 pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:01:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(""))
b = float(input(""))
c = float(input(""))
print(a, "pertence ao intervalo", b ",", c)
-- ERROR:
File "XXXX", line 7
    print(a, "pertence ao intervalo", b ",", c)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:01:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(""))
b = float(input(""))
c = float(input(""))
print(a, "pertence ao intervalo", b, c)
-- OUTPUT:
2.0 pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:01:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(""))
b = float(input(""))
c = float(input(""))
print(a, "pertence ao intervalo", b,"," c)
-- ERROR:
File "XXXX", line 7
    print(a, "pertence ao intervalo", b,"," c)
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:02:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input(""))
b = float(input(""))
c = float(input(""))
print(a, "pertence ao intervalo", b, c)
-- OUTPUT:
2.0 pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:16:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a ",", b)

-- ERROR:
File "XXXX", line 10
    print(x, "pertence ao intervalo", a ",", b)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:16:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)

-- ERROR:
File "XXXX", line 10
    print(x, "pertence ao intervalo", a ",", b)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:17:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)

-- ERROR:
File "XXXX", line 10
    print(x, "pertence ao intervalo", a ",", b)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:18:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)

-- ERROR:
File "XXXX", line 10
    print(x, "pertence ao intervalo", a ",", b)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:18:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)

-- ERROR:
File "XXXX", line 10
    print(x, "pertence ao intervalo", a ",", b)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:20:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
-- ERROR:
File "XXXX", line 10
    print(x, "pertence ao intervalo", a ",", b)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:24:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
		else(b<=a):
			print("entradas", a,"e",b, "invalidas")
-- ERROR:
File "XXXX", line 13
    else(b<=a):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:24:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
		else:
			print("entradas", a,"e",b, "invalidas")
-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:25:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
		if(b<=a)
-- ERROR:
File "XXXX", line 13
    if(b<=a)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:27:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)

		
-- ERROR:
File "XXXX", line 13
    if(b<=a)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:27:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
-- ERROR:
File "XXXX", line 13
    if(b<=a)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:29:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
		if(b<=a):
			print("")
-- ERROR:
File "XXXX", line 13
    if(b<=a)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:30:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
		if(b<=a):
			print("Entradas", a, "e", b)
-- ERROR:
File "XXXX", line 13
    if(b<=a)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:30:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
		if(b<=a):
			print("Entradas", a, "e", b)
-- EXECUTION TIME:
0.169368
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:

-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:

-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	elif (x>b) or (x>a):
		print(x, "nao pertence ao intervalo", a, ",", b)
		if(b<=a):
			print("Entradas", a, "e", b)
-- ERROR:
File "XXXX", line 13
    if(b<=a)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:33:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input(""))
a = float(input(""))
b = float(input(""))

if(b>a):
	if(a<= x <=b):
		print(x, "pertence ao intervalo", a, ",", b)
	else:
		print(x, "nao pertence ao intervalo", a, ",", b)
else:
	print("Entradas" ,a, "e", b, "invalidas")
-- EXECUTION TIME:
0.199422
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
