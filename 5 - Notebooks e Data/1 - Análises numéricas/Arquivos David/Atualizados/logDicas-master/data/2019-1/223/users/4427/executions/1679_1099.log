== TEST (2019-04-30 10:58:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

if X > (B + C) or B > (A + C) or C > (A + B):
	print "Não pode ser um triangulo"
elif A == B == C:
	print "Equilatero"
elif A == B or A == C or B == l3:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 9
    print "Não pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Não pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:58:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

if X > (B + C) or B > (A + C) or C > (A + B):
	print "Nao pode ser um triangulo"
elif A == B == C:
	print "Equilatero"
elif A == B or A == C or B == l3:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 9
    print "Nao pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Nao pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:59:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

if A > (B + C) or B > (A + C) or C > (A + B):
	print "Nao pode ser um triangulo"
elif A == B == C:
	print "Equilatero"
elif A == B or A == C or B == l3:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 9
    print "Nao pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Nao pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 10:59:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

if A > (B + C) or B > (A + C) or C > (A + B):
	print "Invalido"
elif A == B == C:
	print "Equilatero"
elif A == B or A == C or B == l3:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 9
    print "Invalido"
                   ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Invalido")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:00:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

if A > (B + C) or B > (A + C) or C > (A + B):
	print "Invalido"
elif A == B == C:
	print "Equilatero"
elif A == B or A == C or B == C:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 9
    print "Invalido"
                   ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Invalido")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:01:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

if A > (B + C) or B > (A + C) or C > (A + B):
	print "Invalido"
elif A == B == C:
	print "Equilatero"
elif A == B or A == C or B == C:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 11
    print "Invalido"
                   ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Invalido")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:14:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A > (B + C) or B > (A + C) or C > (A + B):
	print "Invalido"
	elif A == B == C:
	print "Equilatero"
	elif A == B or A == C or B == C:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 13
    print "Invalido"
                   ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Invalido")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:46:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A > (B + C) or B > (A + C) or C > (A + B):
	print "Escaleno"
	elif A == B == C:
	print "Equilatero"
	elif A == B or A == C or B == C:
	print "Isósceles"
else:
	print "Escaleno"
-- ERROR:
File "XXXX", line 13
    print "Escaleno"
                   ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Escaleno")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 11:46:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A > (B + C) or B > (A + C) or C > (A + B):
	print "Escaleno"
	elif A == B == C:
	print "Equilatero"
	elif A == B or A == C or B == C:
	print "Isósceles"
else:
	print "Invalido"
-- ERROR:
File "XXXX", line 13
    print "Escaleno"
                   ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Escaleno")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 12:06:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
    if A == B and A == C:
        print 'Triângulo Equilátero'
    elif A == B or B == C or A == C:
        print 'Triângulo Isósceles'
    elif A != B and C or B != A and C or A != C:
        print 'Triângulo Escaleno'
else:
   		print 'É impossivel ser um triângulo'
	
#if A > (B + C) or B > (A + C) or C > (A + B):
	#print "Escaleno"
	#elif A == B == C:
	#print "Equilatero"
	#elif A == B or A == C or B == C:
	#print "Isósceles"
#else:
#	print "Invalido"
-- ERROR:
File "XXXX", line 14
    print 'Triângulo Equilátero'
                               ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print('Triângulo Equilátero')?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 12:07:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
    if A == B and A == C:
      print 'Triângulo Equilátero'
   elif A == B or B == C or A == C:
        print 'Triângulo Isósceles'
   elif A != B and C or B != A and C or A != C:
        print 'Triângulo Escaleno'
else:
	print 'É impossivel ser um triângulo'
	
#if A > (B + C) or B > (A + C) or C > (A + B):
	#print "Escaleno"
	#elif A == B == C:
	#print "Equilatero"
	#elif A == B or A == C or B == C:
	#print "Isósceles"
#else:
#	print "Invalido"
-- ERROR:
File "XXXX", line 14
    print 'Triângulo Equilátero'
                               ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print('Triângulo Equilátero')?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 12:08:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
    if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("É impossivel ser um triângulo")
	
#if A > (B + C) or B > (A + C) or C > (A + B):
	#print "Escaleno"
	#elif A == B == C:
	#print "Equilatero"
	#elif A == B or A == C or B == C:
	#print "Isósceles"
#else:
#	print "Invalido"
-- ERROR:
File "XXXX", line 15
    elif A == B or B == C or A == C:
                                   ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 12:13:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triângulo: invalido")
	

-- OUTPUT:
Entradas: 2 , 4 , 4
Triângulo Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 12:13:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = int(input("Lado 1: "))
B = int(input("Lado 2: "))
C = int(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triangulo: invalido")
	

-- OUTPUT:
Entradas: 2 , 4 , 4
Triângulo Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 12:14:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triangulo: invalido")
	

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Triângulo Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 12:14:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triangulo: invalido")
	

-- EXECUTION TIME:
0.216585
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 16, in <module>
    print ("Tri\xe2ngulo Is\xf3sceles")
UnicodeEncodeError: 'ascii' codec can't encode character '\xe2' in position 3: ordinal not in range(128)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:22:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triangulo: invalido")
	

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Triângulo Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 14:23:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triangulo: invalido")
	

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Triângulo Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:24:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Triângulo Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:25:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("Triângulo Equilátero")
   elif A == B or B == C or A == C:
      print ("Triângulo Isósceles")
   elif A != B and C or B != A and C or A != C:
      print ("Triângulo Escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- EXECUTION TIME:
0.145095
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 16, in <module>
    print ("Tri\xe2ngulo Is\xf3sceles")
UnicodeEncodeError: 'ascii' codec can't encode character '\xe2' in position 3: ordinal not in range(128)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:25:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if A + B > C:
   if A == B and A == C:
      print ("equilatero")
   elif A == B or B == C or A == C:
      print ("isosceles")
   elif A != B and C or B != A and C or A != C:
      print ("escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- EXECUTION TIME:
0.135297
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:27:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if (A + B > C):
   if (A == B) and (A == C):
      print ("equilatero")
   elif (A == B) or (B == C) or (A == C):
      print ("isosceles")
   elif (A != B and C or B != A and C or A != C):
      print ("escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- EXECUTION TIME:
0.194703
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:35:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if (A + B > C):
   if (A == B) and (A == C):
      print ("equilatero")
   elif (A == B) or (B == C) or (A == C):
      print ("isosceles")
   elif A != B and C or B != A and C or A != C:
      print ("escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if (A + B > C):
   if (A == B) and (A == C):
      print ("equilatero")
   elif (A == B) or (B == C) or (A == C):
      print ("isosceles")
   elif A != B and C or B != A and C or A != C:
      print ("escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:37:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if (A + B > C):
   if (A == B) and (A == C):
      print ("equilatero")
   elif (A == B) or (B == C) or (A == C):
      print ("isosceles")
   elif A != B and C or B != A and C or A != C:
      print ("escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:38:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

from math import *

A = float(input("Lado 1: "))
B = float(input("Lado 2: "))
C = float(input("Lado 3: "))

print("Entradas:", A, ",", B, ",", C)

if (A + B > C):
   if (A == B) and (A == C):
      print ("Tipo de triangulo: equilatero")
   elif (A == B) or (B == C) or (A == C):
      print ("Tipo de triangulo: isosceles")
   elif A != B and C or B != A and C or A != C:
      print ("Tipo de triangulo: escaleno")
else:
	print ("Tipo de triangulo: invalido")
	
	
	

-- EXECUTION TIME:
0.196057
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
