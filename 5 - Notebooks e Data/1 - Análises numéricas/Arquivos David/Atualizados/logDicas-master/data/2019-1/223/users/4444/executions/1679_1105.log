== TEST (2019-04-27 18:46:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
if variavel < 10:
   variavel = 1
else:
    if variavel >= 10 and <15:
       variavel = 2
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 6
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:46:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variaval=int(imput('aaaa'))
if variavel < 10:
   variavel = 1
else:
    if variavel >= 10 and <15:
       variavel = 2
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:46:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(imput('aaaa'))
if variavel < 10:
   variavel = 1
else:
    if variavel >= 10 and <15:
       variavel = 2
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:46:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel= int(input('aaaa'))
if variavel < 10:
   variavel = 1
else:
    if variavel >= 10 and <15:
       variavel = 2
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:47:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(input('aaaa'))
if variavel < 10:
   variavel == 1
else:
    if variavel >= 10 and <15:
       variavel == 2
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:48:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(input('aaaa'))
if variavel < 10:
   print(variavel == 1)
else:
    if variavel >= 10 and <15:
      print(variavel == 2)
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:48:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(input('aaaa'))
if variavel < 10:
   print(variavel == 1)
else:
    if variavel >= 10 and <15:
      print(variavel == 2)
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:48:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(input('aaaa'))
if variavel < 10:
   print(variavel == 1)
else:
    if variavel >= 10 and <15:
      print(variavel == 2)
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:48:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(input('aaaa'))
if variavel < 10:
   print(variavel == 1)
else:
    if variavel >= 10 and <15:
      print(variavel == 2)
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:48:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(input('aaaa'))
if variavel < 10:
   print(variavel == 1)
else:
    if variavel >= 10 and <15:
      print(variavel == 2)
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if variavel >= 10 and <15:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:49:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
variavel=int(input('aaaa'))
if variavel < 10:
   print(variavel == 1)
else:
    if(variavel >= 10 and <15):
      print(variavel == 2)
   
else: 
       variavel = 0
-- ERROR:
File "XXXX", line 7
    if(variavel >= 10 and <15):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:58:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a=float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:58:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a=float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 18:58:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a=float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:02:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
else:
	print('os segmentos acima nao podem formar triangulo')
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a=float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:03:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
else:
	print('os segmentos acima nao podem formar triangulo')
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a=float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:18:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a=b=c:
		print('Equilatero')
	print('os segmentos acima nao podem formar triangulo')
	
	
-- ERROR:
File "XXXX", line 9
    if a=b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:19:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if (a == b= c==):
		print('Equilatero')
	print('os segmentos acima nao podem formar triangulo')
	
	
-- ERROR:
File "XXXX", line 9
    if (a == b= c==):
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:19:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a=b and b=c:
		print('Equilatero')
	print('os segmentos acima nao podem formar triangulo')
	
	
-- ERROR:
File "XXXX", line 9
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:20:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a=b and b=c:
		print('Equilatero')
		
-- ERROR:
File "XXXX", line 9
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:20:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a=b and b=c:
		print('Equilatero')
		
-- ERROR:
File "XXXX", line 9
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:23:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
else:
	print('os segmentos acima nao podem formar um triangulo')
	if a=b and b=c:
		print('Equilatero')
	elif a=b and b=c and a=c:
		print('escaleno')
else: 
	print('isoscele')
-- ERROR:
File "XXXX", line 11
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:23:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
else:
	print('os segmentos acima nao podem formar um triangulo')
	if a=b and b=c:
		print('Equilatero')
	elif a=b and b=c and a=c:
		print('escaleno')
	else: 
		print('isoscele')
-- ERROR:
File "XXXX", line 11
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:25:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a=b=c:
		print('equilatero')
else:
	print('os segmentos acima nao podem formar um triangulo')

	if a=b and b=c:
		print('Equilatero')
	elif a=b and b=c and a=c:
		print('escaleno')
	else: 
		print('isoscele')
-- ERROR:
File "XXXX", line 9
    if a=b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:26:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a=b=c:
		print('equilatero')
else:
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if a=b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:26:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a = b = c:
		print('equilatero')
else:
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if a = b = c:
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:26:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if a = b = c:
		print('equilatero')
else:
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if a = b = c:
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:26:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if( a = b = c):
		print('equilatero')
else:
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if( a = b = c):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:26:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if(a = b = c):
		print('equilatero')
else:
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:26:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if(a = b = c):
		print('equilatero')
else:
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:28:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if(a = b = c):
		print('equilatero')
	if(a=!b and b=!c and c=!a):
		print('escaleno')
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:30:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if a < b + c and b < a + c and c < a + b:
	print('os segmentos acima podem formar triangulo')
	if(a = b = c):
		print('equilatero')
	if(a=!b=!c=!a):
		print('escaleno')
	print('os segmentos acima nao podem formar um triangulo')
-- ERROR:
File "XXXX", line 9
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:32:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b + c and b < a + c and c < a + b:
	if(a = b = c):
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 9
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:32:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b + c and b < a + c and c < a + b:
	if(a = b = c):
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 9
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:32:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))
if (a < b + c and b < a + c and c < a + b):
	if(a = b = c):
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 8
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:33:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	if(a = b = c):
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 9
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:34:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if(a = b = c):
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 10
    if(a = b = c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:42:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a=b and b=c:
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 10
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:42:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a=b and b=c:
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 10
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:42:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a=b and b=c:
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 10
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a=b and b=c:
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 10
    if a=b and b=c:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif(a=!b=!c=!a):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif(a=!b=!c=!a):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif(a=!b=!c=!a):
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif(a=!b=!c=!a):
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif (a=! and b=!and c=!a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif (a=! and b=!and c=!a:
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a=! and b=!and c=!a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif a=! and b=!and c=!a:
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a=! and b=!and c=!a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif a=! and b=!and c=!a:
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a=! and b=!and c=!a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif a=! and b=!and c=!a:
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:43:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a=!b and b=!and c=!a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif a=!b and b=!and c=!a:
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:44:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a=!b and b=!and c=!a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif a=!b and b=!and c=!a:
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:44:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a=!b and b=!c and c=!a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif a=!b and b=!c and c=!a:
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:44:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a =! b and b =! c and c =! a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 12
    elif a =! b and b =! c and c =! a:
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:45:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a != b and b != c and c!= a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 18
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:46:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a != b and b != c and c!= a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')
else
-- ERROR:
File "XXXX", line 18
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:46:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a != b and b != c and c!= a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 19:46:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a=float(input('primeiro segmento: '))
b=float(input('segundo segmento: '))
c=float(input('terceiro segmento: '))

if a < b+c and b < a+c and c < a+b:
	print('triangulo')
	if a==b and b==c:
		print('equilatero')
	elif a != b and b != c and c!= a:
		print('escaleno')
	else:
		print('isosceles')
else:
	print('os segmentos acima nao podem formar um triangulo')

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:38:20) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
else:
	print("equilatero")
else:
print("Nao eh triangulo")

-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:07) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
	else:
		print("equilatero")
else:
print("Nao eh triangulo")

-- ERROR:
File "XXXX", line 11
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:14) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
print("Nao eh triangulo")

-- ERROR:
File "XXXX", line 14
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:17) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
print("Nao eh triangulo")

-- ERROR:
File "XXXX", line 14
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:18) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
print("Nao eh triangulo")

-- ERROR:
File "XXXX", line 14
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:18) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
print("Nao eh triangulo")

-- ERROR:
File "XXXX", line 14
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:18) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
print("Nao eh triangulo")

-- ERROR:
File "XXXX", line 14
    print("Nao eh triangulo")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:25) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:30) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 21:39:41) 
-- CODE:
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))

if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    x = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:54:31) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto".upper())
else:
	print("Nao Bissexto".upper()
-- ERROR:
File "XXXX", line 8
    
                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:54:39) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto".upper())
else:
	print("Nao Bissexto".upper()
-- ERROR:
File "XXXX", line 8
    
                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:54:47) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto".upper())
else:
	print("Nao Bissexto".upper()
-- ERROR:
File "XXXX", line 8
    
                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:54:54) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto".upper())
else:
	print("Nao Bissexto").upper()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    ano = int(input())
ValueError: invalid literal for int() with base 10: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:55:04) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto".upper())
else:
	print("Nao Bissexto").upper()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    ano = int(input())
ValueError: invalid literal for int() with base 10: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:55:36) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto").upper())
else:
	print("Nao Bissexto").upper()
-- ERROR:
File "XXXX", line 5
    print("Bissexto").upper())
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:55:45) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto").upper()
else:
	print("Nao Bissexto").upper()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    ano = int(input())
ValueError: invalid literal for int() with base 10: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:56:33) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0)):
	print("Bissexto").upper()
else:
	print("Nao Bissexto").upper()
-- ERROR:
File "XXXX", line 4
    elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0)):
                                                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:56:50) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif (((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto").upper()
else:
	print("Nao Bissexto").upper()
-- EXECUTION TIME:
0.238152
-- ERROR:
  File "/home/codebench/codes/1679/1105/main.py", line 4
    elif (((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
                                                                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:56:53) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif (((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto").upper()
else:
	print("Nao Bissexto").upper()
-- ERROR:
File "XXXX", line 4
    elif (((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
                                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:57:10) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto").upper()
else:
	print("Nao Bissexto").upper()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    ano = int(input())
ValueError: invalid literal for int() with base 10: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:57:40) 
-- CODE:
ano = int(input("Ano: "))
if (ano <= 0):
	print("Entrada invalida")
elif ((ano % 400 == 0) or ((ano % 100 != 0) and (ano % 4 == 0))):
	print("Bissexto").upper()
elif:print("Nao Bissexto").upper()
-- ERROR:
File "XXXX", line 6
    elif:print("Nao Bissexto").upper()
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:01:12) 
-- CODE:
r = float(input("Digite sua renda: "))
f1 = 1903.98
f2 = 2826.65
f3 = 3751.05
f4 = 4664.68
print( {}, {} {} {} format(:1f)[f1])


-- ERROR:
File "XXXX", line 6
    print( {}, {} {} {} format(:1f)[f1])
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:01:16) 
-- CODE:
r = float(input("Digite sua renda: "))
f1 = 1903.98
f2 = 2826.65
f3 = 3751.05
f4 = 4664.68
print( {}, {} {} {} format(:1f)[f1])


-- ERROR:
File "XXXX", line 6
    print( {}, {} {} {} format(:1f)[f1])
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:01:59) 
-- CODE:
r = float(input("Digite sua renda: "))
f1 = 1903.98
f2 = 2826.65
f3 = 3751.05
f4 = 4664.68
print('f1')


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    r = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:11:19) 
-- CODE:
r = float(input("Digite sua renda: "))
f1 = 1903.98
f2 = 2826.65
f3 = 3751.05
f4 = 4664.68
if (r <= f1):
	imp = 0.0
elif (r <= f2):
	imp = 0.075*(r-f1)
elif (r <= f3):
	imp = 0.075*(f2-f1) + 0.15*(r-f2)
elif (r <= f4):
	imp = 0.075*(f2-f1) + 0.15*(f3-f2) + 0.225*(r-f3)
else:
	imp = 0.075*(f2-f1)+0.15*(f3-f2)+0.225*(f4-f3)+0.275*(r-f4)
print(round(imp, 2))




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    r = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:11:31) 
-- CODE:
r = float(input("Digite sua renda: "))
f1 = 1903.98
f2 = 2826.65
f3 = 3751.05
f4 = 4664.68
if (r <= f1):
	imp = 0.0
elif (r <= f2):
	imp = 0.075*(r-f1)
elif (r <= f3):
	imp = 0.075*(f2-f1) + 0.15*(r-f2)
elif (r <= f4):
	imp = 0.075*(f2-f1) + 0.15*(f3-f2) + 0.225*(r-f3)
else:
	imp = 0.075*(f2-f1)+0.15*(f3-f2)+0.225*(f4-f3)+0.275*(r-f4)
print(round(imp, 2))




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    r = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:11:41) 
-- CODE:
r = float(input("Digite sua renda: "))
f1 = 1903.98
f2 = 2826.65
f3 = 3751.05
f4 = 4664.68
if (r <= f1):
	imp = 0.0
elif (r <= f2):
	imp = 0.075*(r-f1)
elif (r <= f3):
	imp = 0.075*(f2-f1) + 0.15*(r-f2)
elif (r <= f4):
	imp = 0.075*(f2-f1) + 0.15*(f3-f2) + 0.225*(r-f3)
else:
	imp = 0.075*(f2-f1)+0.15*(f3-f2)+0.225*(f4-f3)+0.275*(r-f4)
print(round(imp, 2))




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    r = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:11:47) 
-- CODE:
r = float(input("Digite sua renda: "))
f1 = 1903.98
f2 = 2826.65
f3 = 3751.05
f4 = 4664.68
if (r <= f1):
	imp = 0.0
elif (r <= f2):
	imp = 0.075*(r-f1)
elif (r <= f3):
	imp = 0.075*(f2-f1) + 0.15*(r-f2)
elif (r <= f4):
	imp = 0.075*(f2-f1) + 0.15*(f3-f2) + 0.225*(r-f3)
else:
	imp = 0.075*(f2-f1)+0.15*(f3-f2)+0.225*(f4-f3)+0.275*(r-f4)
print(round(imp, 2))




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    r = float(input())
ValueError: could not convert string to float: 'lula'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:19:34) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
print(b)
-- OUTPUT:
lula
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:21:22) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == lobo):
	print("Entrada:",b)
	print('Stark')
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (b == lobo):
NameError: name 'lobo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:22:08) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == "lobo'):
	print("Entrada:",b)
	print('Stark')
-- ERROR:
File "XXXX", line 3
    if (b == "lobo'):
                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:22:33) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == "lobo'):
	 print("Entrada:",b)
	 print('Stark')
-- ERROR:
File "XXXX", line 3
    if (b == "lobo'):
                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:23:13) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Stark')
-- ERROR:
File "XXXX", line 3
    if (b == "lobo'):
                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:29:02) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:29:11) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 16:29:19) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- EXECUTION TIME:
0.146623
-- TEST CASE 1:
---- input:
lula
---- correct output:
Entrada: lula
Casa: Greyjoy
---- user output:
Entrada: lula
Greyjoy
-- TEST CASE 2:
---- input:
tambaqui
---- correct output:
Entrada: tambaqui
Brasao invalido
---- user output:
Entrada: tambaqui
Brasao invalido
-- TEST CASE 3:
---- input:
dragao
---- correct output:
Entrada: dragao
Casa: Targaryen
---- user output:
Entrada: dragao
Targaryen
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:32:18) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:32:27) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:32:54) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:34:48) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:35:29) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:",b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:36:21) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:", b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:36:50) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:", b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:37:08) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:", b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:37:30) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:", b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 16:37:47) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:", b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 16:40:16) 
-- CODE:
b=input('digite brasao:  ')
b=b.lower()
if (b == 'lobo'):
	print("Entrada:", b)
	print('Casa: Stark')
elif(b == 'leao'):
	print("Entrada:",b)
	print('Casa: Lannister')
elif(b == 'veado'):
	print("Entrada:",b)
	print('Casa: Baratheon')
elif(b == 'dragao'):
	print("Entrada:",b)
	print('Casa: Targaryen')
elif(b == 'rosa'):
	print("Entrada:",b)
	print('Casa: Tyrell')
elif(b == 'sol'):
	print("Entrada:",b)
	print('Casa: Martell')
elif(b == 'lula'):
	print("Entrada:",b)
	print('Casa: Greyjoy')
elif(b == 'esfolado'):
	print("Entrada:",b)
	print('Casa: Bolton')
elif(b == 'turta'):
	print("Entrada:",b)
	print('Casa: Tully')
else:
	print("Entrada:",b)
	print('Brasao invalido')
	

	
	
-- EXECUTION TIME:
0.162087
-- TEST CASE 1:
---- input:
lula
---- correct output:
Entrada: lula
Casa: Greyjoy
---- user output:
Entrada: lula
Casa: Greyjoy
-- TEST CASE 2:
---- input:
tambaqui
---- correct output:
Entrada: tambaqui
Brasao invalido
---- user output:
Entrada: tambaqui
Brasao invalido
-- TEST CASE 3:
---- input:
dragao
---- correct output:
Entrada: dragao
Casa: Targaryen
---- user output:
Entrada: dragao
Casa: Targaryen
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
