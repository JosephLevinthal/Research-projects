== TEST (2019-04-08 00:11:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = (vo)**2*sen(2*a)/g
print(round(R,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (vo)**2*sen(2*a)/g
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 00:11:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sen(2*a)/g)
print(round(R,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = ((vo)**2*sen(2*a)/g)
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 00:12:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))

-- OUTPUT:
11.25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 00:15:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))
if (R >= 19.9):
	print("sim")
else: 
	print("nao")
-- OUTPUT:
11.25
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:15:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))
if (R >= 19.9):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.109502
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
11.25
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
49.91
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 00:15:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))
if (R >= 0.1):
	print("sim")
else: 
	print("nao")
-- OUTPUT:
11.25
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:16:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))
if (R >= 0.1):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.132695
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
11.25
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
49.91
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:16:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))
if (D >= 0.1):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.208079
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
11.25
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
49.91
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:17:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))
if (R >= 0.1):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.150483
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
11.25
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
49.91
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:42:44) 
-- CODE:
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
print(round(R,2))
if (D - R < 0.1):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.128089
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
11.25
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
49.91
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 00:44:27) 
-- CODE:
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
if (R >= 0.1):
	print("sim")
else: 
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:44:51) 
-- CODE:
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
if (R >= 0.1):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.138833
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-08 00:45:04) 
-- CODE:
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
if (D >= 0.1):
	print("sim")
else: 
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:45:08) 
-- CODE:
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
if (D >= 0.1):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.127068
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 00:45:23) 
-- CODE:
from math import * 
vo = float(input("Valocidade inicial: "))
a = radians(float(input("Angulo: ")))
D = abs(float(input("Distancia: ")))
g = 9.8
R = ((vo)**2*sin(2*a)/g)
if (D - R < 0.1):
	print("sim")
else: 
	print("nao")
-- EXECUTION TIME:
0.137526
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
