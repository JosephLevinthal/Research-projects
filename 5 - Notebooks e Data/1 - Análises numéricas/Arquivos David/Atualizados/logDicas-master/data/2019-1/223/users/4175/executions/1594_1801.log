== TEST (2019-03-21 16:49:57) 
-- CODE:
nome_do_objeto(Input("insira nome do objeto: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nome_do_objeto(Input("insira nome do objeto: "))
NameError: name 'nome_do_objeto' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:50:05) 
-- CODE:
nome_do_objeto = (Input("insira nome do objeto: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    nome_do_objeto = (Input("insira nome do objeto: "))
NameError: name 'Input' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:50:24) 
-- CODE:
Nome = (Input("insira nome do objeto: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    Nome = (Input("insira nome do objeto: "))
NameError: name 'Input' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:50:33) 
-- CODE:
Nome = Input("insira nome do objeto: ")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    Nome = Input("insira nome do objeto: ")
NameError: name 'Input' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:50:48) 
-- CODE:
Nome = input("insira nome do objeto: ")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    Nome = Input("insira nome do objeto: ")
NameError: name 'Input' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:53:25) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numerio de vezes: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    Nome = Input("insira nome do objeto: ")
NameError: name 'Input' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:54:35) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(str(Nome)*Qty)
-- OUTPUT:
livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:55:26) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(str(Nome) *' '* Qty)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(str(Nome) *' '* Qty)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:56:02) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(str(Nome) *' '* Qty)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(str(Nome) *' '* Qty)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:58:24) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(str(Nome) + " " +Qty)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(str(Nome) + " " +Qty)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 16:58:51) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(str(Nome) + " " +
-- EXECUTION TIME:
0.137703
-- ERROR:
  File "/home/codebench/codes/1594/1801/main.py", line 4
    
                           ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:58:57) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(str(Nome) + " " +Qty)
TypeError: must be str, not int
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:01:17) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(('abra' + " " + Nome)*Qty)
-- OUTPUT:
abra livroabra livroabra livroabra livroabra livroabra livroabra livroabra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:01:44) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(('abra' + " " + Nome)*Qty)
-- EXECUTION TIME:
0.24492
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
abra livroabra livroabra livroabra livroabra livroabra livroabra livroabra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
abra carroabra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
abra caixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:02:06) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(('Abra' + " " + Nome)*Qty)
-- OUTPUT:
Abra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livroAbra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:02:33) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(('Abra' + " " + Nome + " ")*Qty)
-- OUTPUT:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:02:44) 
-- CODE:
Nome = input("insira nome do objeto: ")
Qty =  int(input("insira o numero de vezes: "))
print(('Abra' + " " + Nome + " ")*Qty)
-- EXECUTION TIME:
0.171905
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carro Abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
