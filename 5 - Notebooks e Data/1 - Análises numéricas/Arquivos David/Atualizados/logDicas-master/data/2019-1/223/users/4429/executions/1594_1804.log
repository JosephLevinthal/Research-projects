== TEST (2019-04-22 00:55:51) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=(((xb-xa)**2)+((yb-ya)**2))**0.5
print (round(r,3))
-- OUTPUT:
30.806
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 00:57:28) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=((((xb-xa)**2)+((yb-ya)**2))**0.5)
print (round(r,3))
-- OUTPUT:
30.806
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 00:58:30) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=((((xb-xa)**2)+((yb-ya)**2))**0.5)
print (round(r,3))
-- OUTPUT:
30.806
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 00:59:52) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=(((xb-xa)**2)**0.5)+(((yb-ya)**2)**1.5)
print (round(r,3))
-- OUTPUT:
5857.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:00:56) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=((((xb-xa)**2)**0.5))+((((yb-ya)**2)**1.5))
print (round(r,3))
-- OUTPUT:
5857.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:01:52) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=(((xb-xa)**2)**0.5)+(((yb-ya)**2)**1.5)
print (round(r,3))
-- OUTPUT:
5857.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:03:06) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=((((xb-xa)**2)+(((yb-ya)**2))**1.5))
print (round(r,3))
-- OUTPUT:
6457.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:04:19) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=((((xb-xa)**2))+(((yb-ya)**2))**1.5)
print (round(r,3))
-- OUTPUT:
6457.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:04:45) 
-- CODE:
xa=float(input("digite xa: "))
xb=float(input("digite xa: "))
ya=float(input("digite xa: "))
yb=float(input("digite xa: "))

r= float((((xb-xa)**2))+(((yb-ya)**2))**1.5)
print (round(r,3))
-- OUTPUT:
6457.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:05:52) 
-- CODE:
xa=float(input("digite xa: "))
ya=float(input("digite xa: "))
xb=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=((((xb-xa)**2))+(((yb-ya)**2))**1.5)
print (round(r,3))
-- OUTPUT:
12567.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:07:53) 
-- CODE:
xa=float(input("digite xa: "))
ya=float(input("digite xa: "))
xb=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=(((xb-xa)**2)+((yb+ya)**2))**0.5
print (round(r,3))
-- OUTPUT:
75.69
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:08:16) 
-- CODE:
xa=float(input("digite xa: "))
ya=float(input("digite xa: "))
xb=float(input("digite xa: "))
yb=float(input("digite xa: "))

r=(((xb-xa)**2)+((yb-ya)**2))**0.5
print (round(r,3))
-- OUTPUT:
30.48
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 01:08:49) 
-- CODE:
xa=float(input("digite xa: "))
ya=float(input("digite ya: "))
xb=float(input("digite xb: "))
yb=float(input("digite yb: "))

r=(((xb-xa)**2)+((yb-ya)**2))**0.5
print (round(r,3))
-- OUTPUT:
30.48
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-22 01:09:02) 
-- CODE:
xa=float(input("digite xa: "))
ya=float(input("digite ya: "))
xb=float(input("digite xb: "))
yb=float(input("digite yb: "))

r=(((xb-xa)**2)+((yb-ya)**2))**0.5
print (round(r,3))
-- EXECUTION TIME:
0.160796
-- TEST CASE 1:
---- input:
50
25
30
48
---- correct output:
30.48
---- user output:
30.48
-- TEST CASE 2:
---- input:
2.5
3.0
5.0
1.8
---- correct output:
2.773
---- user output:
2.773
-- TEST CASE 3:
---- input:
1.22
2.33
3.44
4.55
---- correct output:
3.14
---- user output:
3.14
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
