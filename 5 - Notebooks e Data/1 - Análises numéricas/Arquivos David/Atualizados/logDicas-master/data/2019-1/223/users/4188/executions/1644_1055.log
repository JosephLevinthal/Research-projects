== TEST (2019-04-09 16:53:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
R= (v**2)*sin(2*a)/g
if (R==D-0.01 or R==D+0.01 or R==D):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:54:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
R= (v**2)*sin(2*a)/g
if (R==D-0.01 or R==D+0.01 or R==D):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.160811
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:25:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
R= (v**2)*sin(2*a)/g
if (R==D-0.1 or R==D+0.1 or R==D):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 20:26:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
R= (v**2)*sin(2*a)/g
if (R==D-0.1 or R==D+0.1 or R==D):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.141632
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:37:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
R= abs((v**2)*sin(2*a)/g)
if (R==D-0.1 or R==D+0.1 or R==D):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:39:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=radians(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= abs((v**2)*sin(2*radians(a))/g)
if (R==D-0.1 or R==D+0.1 or R==D):
	print("sim")
else:
	print("nao")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:40:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= abs((v**2)*sin(2*radians(a))/g)
if (R==D-0.1 or R==D+0.1 or R==D):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 20:40:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= abs((v**2)*sin(2*radians(a))/g)
if (R==D-0.1 or R==D+0.1 or R==D):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.132604
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 20:44:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= abs((v**2)*sin(2*radians(a))/g)
if ((D-R-0.1)<=R<=(D-R+0.1)):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 20:45:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= abs((v**2)*sin(2*radians(a))/g)
if ((D-R-0.1)<=R<=(D-R+0.1)):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.150563
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 20:57:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= (v**2)*sin(2*radians(a))/g
if (abs(D-R-0.1)<=R<=abs(D-R+0.1)):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.210651
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 21:33:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= (v**2)*sin(2*radians(a))/g
d=abs(D-R)
if (d==D and d==D+0.1 or d==D-0.1):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.171606
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 21:33:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= (v**2)*sin(2*radians(a))/g
d=abs(D-R)
if (d==D and d==D+0.1 or d==D-0.1):
	print("sim")
else:
	print("nao")
	
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 21:34:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= (v**2)*sin(2*radians(a))/g
d=abs(D-R)
if (d==D and d==D+0.1 or d==D-0.1):
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.198196
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 22:55:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v=float(input("velocidade inicial: "))
a=(float(input("angulo de lancamento: ")))
D=float(input("distancia inicial: "))
g=9.8
from math import *
R= (v**2)*sin(2*radians(a))/g
d=abs(D-R)
if R+0.1>D:
	print("sim")
else:
	print("nao")
	
-- EXECUTION TIME:
0.149324
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
