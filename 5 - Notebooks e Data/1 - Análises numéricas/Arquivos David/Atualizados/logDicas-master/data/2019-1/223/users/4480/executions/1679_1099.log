== TEST (2019-04-23 17:31:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:31:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:32:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

if()
-- ERROR:
File "XXXX", line 7
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

-- ERROR:
File "XXXX", line 7
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:37:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

-- ERROR:
File "XXXX", line 7
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:46:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))
-- ERROR:
File "XXXX", line 7
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 15:59:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

-- ERROR:
File "XXXX", line 7
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 15:59:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

-- ERROR:
File "XXXX", line 7
    if()
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:54:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:56:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
-- EXECUTION TIME:
0.151068
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:56:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:57:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
	print "Não pode ser um triangulo"
elif a == b == c:
	print "Equilatero"
elif a == b or a == c or b == c:
	print "Isósceles"
else:
print "Escaleno"
-- ERROR:
File "XXXX", line 9
    print "Não pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Não pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:58:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
	print "Nao pode ser um triangulo"
elif a == b == c:
	print "Equilatero"
elif a == b or a == c or b == c:
	print "Isosceles"
else:
print "Escaleno"
-- ERROR:
File "XXXX", line 9
    print "Nao pode ser um triangulo"
                                    ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print("Nao pode ser um triangulo")?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:59:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
	print ("Nao pode ser um triangulo")
elif a == b == c:
	print ("Equilatero")
elif a == b or a == c or b == c:
	print ("Isosceles")
else:
print ("Escaleno")
-- ERROR:
File "XXXX", line 15
    print ("Escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:59:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
	print ("Nao pode ser um triangulo")
elif a == b == c:
	print ("Equilatero")
elif a == b or a == c or b == c:
	print ("Isosceles")
else:
   print ("Escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:59:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
	print ("Nao pode ser um triangulo")
elif a == b == c:
	print ("Equilatero")
elif a == b or a == c or b == c:
	print ("Isosceles")
else:
   print ("Escaleno")
-- EXECUTION TIME:
0.15617
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Nao pode ser um triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:00:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
	print ("Nao pode ser um triangulo")
elif a == b == c:
	print ("Equilatero")
elif a == b or a == c or b == c:
	print ("Isosceles")
else:
   print ("Escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:00:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
elif a == b == c:
elif a == b or a == c or b == c:
else:

-- ERROR:
File "XXXX", line 9
    elif a == b == c:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
   elif a == b == c:
elif a == b or a == c or b == c:
else:

-- ERROR:
File "XXXX", line 9
    elif a == b == c:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
   elif a == b == c:


-- ERROR:
File "XXXX", line 9
    elif a == b == c:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:01:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):

-- ERROR:
File "XXXX", line 9
    
                                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):

-- ERROR:
File "XXXX", line 9
    
                                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a > (b + c) or b > (a + c) or c > (a + b):
-- ERROR:
File "XXXX", line 9
    
                                                 ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
	if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

else:
   print("Triangulo escaleno.")
-- ERROR:
File "XXXX", line 11
    if a>=b+c or b>=c+a or c>=a+b :
                                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Triangulo inexistente.")
   quit()

if a==b and b==c :
   print("Triangulo equilatero.")

elif a==b or b==c or c==a :
   print("Triangulo isosceles.")

else:
   print("Triangulo escaleno.")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Triangulo isosceles.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:07:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("invalido")
   quit()

if a==b and b==c :
   print("equilatero")

elif a==b or b==c or c==a :
   print("isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:07:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("invalido")
   quit()

if a==b and b==c :
   print("equilatero")

elif a==b or b==c or c==a :
   print("isosceles")

else:
   print("escaleno")
-- EXECUTION TIME:
0.195914
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:07:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("invalido")
   quit()

if a==b and b==c :
   print("equilatero")

elif a==b or b==c or c==a :
   print("isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:07:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("invalido")
   quit()

if a==b and b==c :
   print("equilatero")

elif a==b or b==c or c==a :
   print("isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:07:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("invalido")
   quit()

if a==b and b==c :
   print("equilatero")

elif a==b or b==c or c==a :
   print("isosceles")

else:
   print("escaleno")
-- EXECUTION TIME:
0.137028
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:08:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("invalido")
   quit()

if a==b and b==c :
   print("equilatero")

elif a==b or b==c or c==a :
   print("isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:08:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("invalido")
   quit()

if a==b and b==c :
   print("equilatero")

elif a==b or b==c or c==a :
   print("isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:09:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:09:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:09:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:09:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("escaleno")
-- EXECUTION TIME:
0.157991
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:10:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:10:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:10:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:10:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input('lado a: '))
b = float(input('lado b: '))
c = float(input('lado c: '))

print("Entradas:", a, ",", b, ",", c)
if a<=0 or b<=0 or c<=0 :
   print("Lados nulos ou negativos nao sao aceitos.")
   quit()
if a>=b+c or b>=c+a or c>=a+b :
   print("Tipo de triangulo: invalido")
   quit()

if a==b and b==c :
   print("Tipo de triangulo: equilatero")

elif a==b or b==c or c==a :
   print("Tipo de triangulo: isosceles")

else:
   print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.171192
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
