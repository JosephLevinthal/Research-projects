== TEST (2019-04-02 08:53:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input(" % % // "))
print(var+)
-- ERROR:
File "XXXX", line 5
    print(var+)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:56:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input(" % % // "))
print(var+var)
-- OUTPUT:
18346
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:56:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Nun1: ", "Nun2: ", "Nun3: ", "Nun4: "))
print(var+var)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var=int(input("Nun1: ", "Nun2: ", "Nun3: ", "Nun4: "))
TypeError: input expected at most 1 arguments, got 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:58:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Nun1: "%"Nun2: "%"Nun3: "//"Nun4: "))
print(var+var)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var=int(input("Nun1: "%"Nun2: "%"Nun3: "//"Nun4: "))
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:26:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "
soma=0
While (var>0):
		resto= var%10
		var=var//10
	   soma=soma+resto
print(soma)
-- EXECUTION TIME:
0.122049
-- ERROR:
  File "/home/codebench/codes/1595/842/main.py", line 5
    soma=0
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:30:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
	   soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.149491
-- ERROR:
  File "/home/codebench/codes/1595/842/main.py", line 5
    soma=0
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:31:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
	   soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.157148
-- ERROR:
  File "/home/codebench/codes/1595/842/main.py", line 5
    soma=0
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:32:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
	   soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.187384
-- ERROR:
  File "/home/codebench/codes/1595/842/main.py", line 9
    soma = soma + resto
                      ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:33:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
	   soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.150398
-- ERROR:
  File "/home/codebench/codes/1595/842/main.py", line 9
    soma = soma + resto
                      ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:33:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
	   soma = soma + resto
print(soma)
-- ERROR:
File "XXXX", line 9
    soma = soma + resto
                      ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:41:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
      soma= soma+ resto
print(soma)
-- ERROR:
File "XXXX", line 9
    soma= soma+ resto
                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:51:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
      soma= soma+ resto
print(soma)
-- ERROR:
File "XXXX", line 9
    soma= soma+ resto
                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:52:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
soma=0
while(var>0):
		resto = var % 10
		var = var // 10
      soma= soma+ resto
print(soma)
-- ERROR:
File "XXXX", line 9
    soma= soma+ resto
                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:58:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
a=var // 1%10
b=var // 10%10
c=var // 100%10
d=var // 1000%10
soma= a+b+c+d
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:01:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
a=var // 1%10
b=var // 10%10
c=var // 100%10
d=var // 1000%10
soma= a+b+c+d
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:03:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
a=var // 1%10
b=var // 10%10
c=var // 100%10
d=var // 1000%10
soma= a+b+c+d
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:03:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
a=var // 1%10
b=var // 10%10
c=var // 100%10
d=var // 1000%10
soma= a+b+c+d
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:05:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Digite um número com quatro dígitos: "))
a=var // 1%10
b=var // 10%10
c=var //100%10
d=var //1000%10
ab= a+b+c+d
print(ab)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:08:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Número: "))
a=var // 1%10
b=var // 10%10
c=var //100%10
d=var //1000%10
ab= a+b+c+d
print(ab)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:08:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Número: "))
a=var // 1%10
b=var // 10%10
c=var //100%10
d=var //1000%10
ab= a+b+c+d
print(ab)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:10:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Número: "))
a=var // 1%10
b=var // 10%10
c=var //100%10
d=var //1000%10
ab= a+b+c+d
print(ab)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:10:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Número: "))
a=var // 1%10
b=var // 10%10
c=var //100%10
d=var //1000%10
ab= a+b+c+d
print(ab)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 11:11:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Número: "))
a=var // 1%10
b=var // 10%10
c=var //100%10
d=var //1000%10
ab= a+b+c+d
print(ab)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 11:12:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var=int(input("Número: "))
a=var // 1%10
b=var // 10%10
c=var //100%10
d=var //1000%10
ab= a+b+c+d
print(ab)
-- EXECUTION TIME:
0.139014
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
