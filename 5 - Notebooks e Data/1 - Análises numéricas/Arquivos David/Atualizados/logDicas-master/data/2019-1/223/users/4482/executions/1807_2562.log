== TEST (2019-06-11 16:22:29) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size>(vet) ):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(if)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 20
    print(if)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:23:23) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size> (vet)):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:24:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size> (vet)):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:25:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:26:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:26:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
 			 npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:26:37) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  par = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    par = 0
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:27:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = npar + 1

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = npar + 1
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:27:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = npar + 1 = 0
		

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = npar + 1 = 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:27:45) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar == 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar == 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:27:55) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:27:56) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:27:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 16:28:01) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.37941
-- ERROR:
  File "/home/codebench/codes/1807/2562/main.py", line 9
    npar = 0
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 16:28:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.89102
-- ERROR:
  File "/home/codebench/codes/1807/2562/main.py", line 9
    npar = 0
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:28:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar=0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar=0
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:28:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)
   # Zera contador de elementos pares
  npar = 1

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 9
    npar = 1
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:30:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size > (vet)):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:33:45) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > (vet)):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:38:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet2)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:40:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 16:41:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.00161
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1807/2562/main.py", line 27, in <module>
    vet2 = array(eval(input()))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:41:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet2 = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:43:31) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 16:44:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.02219
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
[ -2  -3  -5  -6  -7  -8  -9 -10]
4
[ -2  -3  -5  -6  -7  -8  -9 -10]
[ 1  3  5  7  9 11 13 15 17 19 21]
0
[ 1  3  5  7  9 11 13 15 17 19 21]
[ 2  6 10 14 18 22]
6
[ 2  6 10 14 18 22]
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
[1 1 1 1 1 1 1 1 1 1 1 1 0]
1
[1 1 1 1 1 1 1 1 1 1 1 1 0]
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
16
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
[   2    8   16   32   64  128  256  512 1024 2048]
10
[   2    8   16   32   64  128  256  512 1024 2048]
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
[-1  1 -2  2 -3  3 -4  4 -5  5 -6  6 -7  7 -8  8 -9  9]
8
[-1  1 -2  2 -3  3 -4  4 -5  5 -6  6 -7  7 -8  8 -9  9]
[-200  100 -201  101]
2
[-200  100 -201  101]
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:45:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
 	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 16:45:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
 	
-- EXECUTION TIME:
1.26372
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
[ -2  -3  -5  -6  -7  -8  -9 -10]
4
[ -2  -3  -5  -6  -7  -8  -9 -10]
[ 1  3  5  7  9 11 13 15 17 19 21]
0
[ 1  3  5  7  9 11 13 15 17 19 21]
[ 2  6 10 14 18 22]
6
[ 2  6 10 14 18 22]
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
Primeiro vetor: [1 1 1 1 1 1 1 1 1 1 1 1 0]
1
[1 1 1 1 1 1 1 1 1 1 1 1 0]
Proximo vetor: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
16
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
Proximo vetor: [   2    8   16   32   64  128  256  512 1024 2048]
10
[   2    8   16   32   64  128  256  512 1024 2048]
Proximo vetor:
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: [-1  1 -2  2 -3  3 -4  4 -5  5 -6  6 -7  7 -8  8 -9  9]
8
[-1  1 -2  2 -3  3 -4  4 -5  5 -6  6 -7  7 -8  8 -9  9]
Proximo vetor: [-200  100 -201  101]
2
[-200  100 -201  101]
Proximo vetor:
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:46:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
 	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:46:12) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
 	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 16:46:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
#print(size(vet))

# Verifica se o programa vai terminar
while (size(vet) > 1):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(vet)

   # No. de elementos impares
   print(npar)

   # No. total de elementos
   print(vet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))
 	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
