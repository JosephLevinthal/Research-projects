== TEST (2019-05-02 16:03:30) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
vs = int(input("valores sorteados"))


-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:11:20) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:12:26) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf= (d1 + d2 + d3)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:12:33) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf= (d1 + d2 + d3)


-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:12:57) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf= (d1 + d2 + d3)
print(sf)



-- OUTPUT:
25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:14:56) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:")
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf= (d1 + d2 + d3)
print(sf)
var1 = n * sf
		  




-- ERROR:
File "XXXX", line 3
    d1 = int(input())
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:15:26) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:")
da= int(input("valor do dado1:"))
db= int(input("valor do dado2:"))
dc= int(input("valor do dado3:"))

sf= (da+ db+ dc
print(sf)
var1 = n * sf
		  




-- ERROR:
File "XXXX", line 3
    da= int(input())
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:18:20) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")

sf= (d1 + d2 + d3)
print(sf)
var1 = n * sf
		  




-- ERROR:
File "XXXX", line 7
    sf= (d1 + d2 + d3)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:18:46) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")

sf = (d1 + d2 + d3)
print(sf)
var1 = n * sf
		  




-- ERROR:
File "XXXX", line 7
    sf = (d1 + d2 + d3)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:18:48) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")

sf = (d1 + d2 + d3)
print(sf)
var1 = n * sf
		  




-- ERROR:
File "XXXX", line 7
    sf = (d1 + d2 + d3)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:18:50) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")

sf = (d1 + d2 + d3)
print(sf)
var1 = n * sf
		  




-- EXECUTION TIME:
0.163413
-- ERROR:
  File "/home/codebench/codes/1715/3066/main.py", line 7
    sf = (d1 + d2 + d3)
     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:18:51) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")

sf = (d1 + d2 + d3)
print(sf)
var1 = n * sf
		  




-- ERROR:
File "XXXX", line 7
    sf = (d1 + d2 + d3)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:19:07) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")



		  




-- ERROR:
File "XXXX", line 13
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:19:08) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")



		  




-- ERROR:
File "XXXX", line 13
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:19:11) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")



		  




-- ERROR:
File "XXXX", line 13
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:19:19) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")



		  




-- ERROR:
File "XXXX", line 13
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:09) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")



		  




-- ERROR:
File "XXXX", line 13
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:12) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")
			



		  




-- ERROR:
File "XXXX", line 14
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:12) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")
			



		  




-- ERROR:
File "XXXX", line 14
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:13) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")
			



		  




-- ERROR:
File "XXXX", line 14
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:13) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:")
			



		  




-- ERROR:
File "XXXX", line 14
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:27) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:34) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:21:15) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf = ( d1 + d2 + d3)


			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:21:27) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
db = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf = ( d1 + d2 + d3)
print(sf)



			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:22:22) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf = ( d1 + d2 + d3)
print(sf)



			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:25:58) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida ate ser resgatado:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf = ( d1 + d2 + d3)
print(sf)

pr = ( n - qipv )
print(pr)



			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:26:19) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida ate ser resgatado:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf = ( d1 + d2 + d3)
print(sf)

pr = ( n - qipv )
print(pr)



			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:26:42) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida ate ser resgatado:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

sf = ( d1 + d2 + d3)
print(sf)

pr = ( qipv - n )
print(pr)




			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:29:30) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida ate ser resgatado:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)
print(N)

pr = ( qipv - n )
print(pr)




			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:29:38) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida ate ser resgatado:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)
print(N)

pr = ( qipv - N)
print(pr)




			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:29:42) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
n = int(input("quantidade de pontos de vida ate ser resgatado:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)
print(N)

pr = ( qipv - N)
print(pr)




			



		  




-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    d3 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:33:32) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)
print(N)

x = ( 10 * N )







			



		  




-- OUTPUT:
25
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:34:24) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)

x = ( 10 * N )
print(x)






			



		  




-- OUTPUT:
250
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:37:27) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)

x = ( 10 * N )
print(x)

if (x > 0):
	print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:37:53) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)

x = ( 10 * N )
print(x)

if (x > 0):
	print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- EXECUTION TIME:
0.143261
-- TEST CASE 1:
---- input:
120
6
9
10
---- correct output:
0
MORTO
---- user output:
250
VIVO
-- TEST CASE 2:
---- input:
200
15
20
3
---- correct output:
Entrada invalida
---- user output:
380
VIVO
-- TEST CASE 3:
---- input:
260
2
1
2
---- correct output:
210
VIVO
---- user output:
50
VIVO
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:37:57) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)

x = ( 10 * N )
print(x)

if (x > 0):
	print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:40:13) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = (d1 + d2 + d3)

x = ( 10 * N )
print(x)

if (x > 0):
	print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:44:29) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
if ( N == 3 or N <= 36)
	
x = ( 10 * N )
print(x)

if (x > 0):
	print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- ERROR:
File "XXXX", line 7
    if ( N == 3 or N <= 36)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:44:34) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
if ( N == 3 or N <= 36):
	
x = ( 10 * N )
print(x)

if (x > 0):
	print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- ERROR:
File "XXXX", line 9
    x = ( 10 * N )
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:48:21) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
if ( N > 3 and N <= 36 ):
	if (x > 0):
	print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- ERROR:
File "XXXX", line 10
    print("VIVO")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:48:33) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:49:12) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
print(x)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:49:32) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
print(x)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:49:59) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
print(x)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 17:11:19) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
print(x)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 17:11:46) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
print(x)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-13 17:13:14) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
print(x)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 15:55:17) 
-- CODE:
qipv = int(input("quantidade inicial de pontos de vida:"))
d1 = int(input("valor do dado1:"))
d2 = int(input("valor do dado2:"))
d3 = int(input("valor do dado3:"))

N = d1 + d2 + d3
x = (10 * N)
print(x)
if ( N > 3 and N <= 36 ):
	if (x > 0):
		print("VIVO")
else:
	print("MORTO")
	
	






			



		  




-- OUTPUT:
250
VIVO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
