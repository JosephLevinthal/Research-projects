== TEST (2019-03-24 22:06:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))




R = 6371,1

-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:15:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))
t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P1: ")))

R = 6371,1


-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:21:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

d=R.acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2)

print(round(d,2)

-- ERROR:
File "XXXX", line 16
    print(round(d,2)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:21:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

d=R.acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2)

print(round(d,2))

-- ERROR:
File "XXXX", line 16
    print(round(d,2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:22:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

d=R.acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2)

print(round(d,2))

-- ERROR:
File "XXXX", line 16
    print(round(d,2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:23:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

D=R.acos(sin(t1)*sin(t2)+cos(t1)*cos(t2)*cos(g1-g2)

print(round(D,2))

-- ERROR:
File "XXXX", line 16
    print(round(D,2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:29:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

D=R*(acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
File "XXXX", line 16
    print(round(D,2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:31:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:32:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:34:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:34:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1

D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:36:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

R = 6371,1
from math import*

D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    D= R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 22:38:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T = 6371,1

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- EXECUTION TIME:
0.154429
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 14, in <module>
    D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:38:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T = 6371,1

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:38:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T = 6371,1

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 22:40:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T = 6371,01

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(D,2))

-- EXECUTION TIME:
0.117807
-- ERROR:
  File "/home/codebench/codes/1595/1017/main.py", line 12
    T = 6371,01
              ^
SyntaxError: invalid token

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 22:41:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T = 6371,01

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- EXECUTION TIME:
0.152274
-- ERROR:
  File "/home/codebench/codes/1595/1017/main.py", line 12
    T = 6371,01
              ^
SyntaxError: invalid token

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 22:41:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =float(6371,01)

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- EXECUTION TIME:
0.125998
-- ERROR:
  File "/home/codebench/codes/1595/1017/main.py", line 12
    T =float(6371,01)
                   ^
SyntaxError: invalid token

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:42:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =float(6371,01)

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- ERROR:
File "XXXX", line 12
    T =float(6371,01)
                   ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:42:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =6371,01

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- ERROR:
File "XXXX", line 12
    T =6371,01
             ^
SyntaxError: invalid token
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 22:43:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =6371

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- EXECUTION TIME:
0.185282
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 22:44:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =6371

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 13:16:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =6371

D= T * acos( sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- EXECUTION TIME:
0.200277
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 13:16:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =6371

D= T * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 13:16:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T =6371

D= T * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- EXECUTION TIME:
0.293988
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 13:17:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T=6371

D= T * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- EXECUTION TIME:
0.123191
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 13:17:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T=6371

D= T * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 13:17:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import*

t1 = radians(float(input("Latitude de P1: ")))
g1=radians(float(input("longitude de P1: ")))

t2=radians(float(input("Latitude de P2: ")))
g2=radians(float(input("longitude de P2 ")))

T=6371

D= T * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(D,2))

-- EXECUTION TIME:
0.206097
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
