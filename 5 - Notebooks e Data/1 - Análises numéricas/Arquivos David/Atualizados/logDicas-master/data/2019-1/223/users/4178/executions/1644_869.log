== TEST (2019-04-09 16:27:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*100
	print(num - var1)
else:
	print("impar")


-- OUTPUT:
197.59
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:27:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*400
	print(num - var1)
else:
	print("impar")


-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:28:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/100)*2 * 100
	print(num - var1)
else:
	print("impar")


-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:28:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(num - var1)
else:
	print("impar")


-- OUTPUT:
175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:28:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round(num - var1, 2))
else:
	print("impar")


-- OUTPUT:
175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:29:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round("valor da  p" + num - var1, 2))
else:
	print("ivalor"+ num)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round("valor da  p" + num - var1, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:30:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round("valor da  p", num - var1, 2))
else:
	print("valor sem p", num)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round("valor da  p", num - var1, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:30:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round("valor da  p", num - var1, 2))
else:
	print("valor sem p", num)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round("valor da  p", num - var1, 2))
TypeError: round() takes at most 2 arguments (3 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:30:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
else:
	print("valor sem p", num)


-- OUTPUT:
valor da  p 175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:30:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
else:
	print("valor sem p", num)


-- OUTPUT:
valor da  p 175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:31:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
else:
	print("valor sem p", num)


-- EXECUTION TIME:
0.118312
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
valor da  p 175.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
valor da  p 175.53
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:31:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
else:
	print("valor sem p", num)


-- OUTPUT:
valor da  p 175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:31:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
else:
	print("valor sem p", num)


-- OUTPUT:
valor da  p 175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:32:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
else:
	print("valor sem p",round(num, 2))


-- OUTPUT:
valor da  p 175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:32:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
else:
	print("valor sem p",round(num, 2))


-- EXECUTION TIME:
0.154198
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
valor da  p 175.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
valor da  p 175.53
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:32:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
e


-- EXECUTION TIME:
0.133672
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 9, in <module>
    e
NameError: name 'e' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:32:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))
e


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    e
NameError: name 'e' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:32:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))



-- OUTPUT:
valor da  p 175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:33:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print("valor da  p",round( num - var1, 2))



-- EXECUTION TIME:
0.143635
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
valor da  p 175.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
valor da  p 175.53
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:33:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round( num - var1, 2))
	lse:
	print(round(num, 2))



-- ERROR:
File "XXXX", line 9
    lse:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:33:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round( num - var1, 2))
	else:
	print(round(num, 2))



-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:33:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round( num - var1, 2))
else:
	print(round(num, 2))



-- OUTPUT:
175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:34:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round( num - var1, 2))
else:
	print(round(num, 2))



-- EXECUTION TIME:
0.17526
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
175.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
175.53
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:43:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5/200)*1000
	print(round( num - var1, 2))
else:
	print(round(num, 2))



-- OUTPUT:
175.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 16:44:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5*num)/100
	print(round( num - var1, 2))
else:
	print(round(num, 2))



-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 16:44:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
num = float(input("Digite um preco: "))

if num >= 200:
	var1 = (5*num)/100
	print(round( num - var1, 2))
else:
	print(round(num, 2))



-- EXECUTION TIME:
0.152725
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
