== TEST (2019-04-29 05:16:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("a: "))
b=float(input("b: "))
c=float(input("c: "))
d=float(input("d: "))
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print(1)
	else:
		print(0)
else:
	print(-1)

-- ERROR:
File "XXXX", line 2
    questão 6
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 05:17:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("a: "))
b=float(input("b: "))
c=float(input("c: "))
d=float(input("d: "))
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- EXECUTION TIME:
0.188441
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
a: b: c: d: entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:17:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("a: "))
b=float(input("b: "))
c=float(input("c: "))
d=float(input("d: "))
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- OUTPUT:
nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:20:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("a: "))
b=float(input("b: "))
c=float(input("c: "))
d=float(input("d: "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 05:21:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input("a: "))
b=float(input("b: "))
c=float(input("c: "))
d=float(input("d: "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- EXECUTION TIME:
0.133627
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:22:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input(" "))
b=float(input(" "))
c=float(input(" "))
d=float(input(" "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:22:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input(" "))
b=float(input(" "))
c=float(input(" "))
d=float(input(" "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 05:22:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input(" "))
b=float(input(" "))
c=float(input(" "))
d=float(input(" "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>=a and d>=c):
	if((c>=a and c<=b) or (d>=a and d<=b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- EXECUTION TIME:
0.125383
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 05:23:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input(" "))
b=float(input(" "))
c=float(input(" "))
d=float(input(" "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>a and d>c):
	if((c>a and c<b) or (d>a and d<b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 05:23:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input(" "))
b=float(input(" "))
c=float(input(" "))
d=float(input(" "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>a and d>c):
	if((c>a and c<b) or (d>a and d<b)):
		print("ha intersecao")
	else:
		print("nao ha intersecao")
else:
	print("entradas invalidas")

-- EXECUTION TIME:
0.191644
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 05:24:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input(" "))
b=float(input(" "))
c=float(input(" "))
d=float(input(" "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>a and d>c):
	if((c>a and c<b) or (d>a and d<b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")

-- EXECUTION TIME:
0.148362
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 12:38:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a=float(input(" "))
b=float(input(" "))
c=float(input(" "))
d=float(input(" "))
print("Intervalo 1:", a, ",", b, )
print("Intervalo 2:", c, ",", d, )
if (b>a and d>c):
	if((c>a and c<b) or (d>a and d<b)):
		print("Ha intersecao")
	else:
		print("Nao ha intersecao")
else:
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
