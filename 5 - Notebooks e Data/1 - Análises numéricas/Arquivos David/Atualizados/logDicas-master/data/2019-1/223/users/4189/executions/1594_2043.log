== TEST (2019-03-31 11:40:26) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 4)
print(s)
-- OUTPUT:
55.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:41:00) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 4)
print(round(s,2)
-- ERROR:
File "XXXX", line 7
    
                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:41:11) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 4)
print(round(s,2))
-- OUTPUT:
55.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 11:41:34) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 4)
print(round(s,2))
-- EXECUTION TIME:
0.147663
-- TEST CASE 1:
---- input:
8
8.5
7
9
---- correct output:
8.2
---- user output:
55.0
-- TEST CASE 2:
---- input:
7
7
7
7
---- correct output:
7.0
---- user output:
49.0
-- TEST CASE 3:
---- input:
5.75
6.9
7.95
8.99
---- correct output:
7.94
---- user output:
51.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:42:50) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 1 + 2 + 3 + 4)
print(round(s,2))
-- OUTPUT:
91.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:42:52) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 1 + 2 + 3 + 4)
print(round(s,2))
-- OUTPUT:
91.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 11:43:09) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 1 + 2 + 3 + 4)
print(round(s,2))
-- EXECUTION TIME:
0.223183
-- TEST CASE 1:
---- input:
8
8.5
7
9
---- correct output:
8.2
---- user output:
91.0
-- TEST CASE 2:
---- input:
7
7
7
7
---- correct output:
7.0
---- user output:
79.0
-- TEST CASE 3:
---- input:
5.75
6.9
7.95
8.99
---- correct output:
7.94
---- user output:
87.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:45:23) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 / 1 + 2 + 3 + 4)
print(round(s,2))
-- OUTPUT:
91.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:45:45) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 1 + 2 + 3 + 4)
print(round(s,2))
-- OUTPUT:
91.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:47:20) 
-- CODE:
n1 = int(input("n1:"))
n2 = int(input("n2:"))
n3 = int(input("n3:"))
n4 = int(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 1 + 2 + 3 + 4)
print(round(s,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n2 = int(input())
ValueError: invalid literal for int() with base 10: '8.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:48:44) 
-- CODE:
n1 = int(input("n1:"))
n2 = int(input("n2:"))
n3 = int(input("n3:"))
n4 = int(input("n4:"))
s = (n1*1 + n2*2 + n3*3 + n4*4 // 1+2+3+4)
print(round(s,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    n2 = int(input())
ValueError: invalid literal for int() with base 10: '8.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 11:50:49) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 // 1+2+3+4)
print(round(s,2))
-- OUTPUT:
91.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:01:05) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 // 1+2+3+4)
print(round(s,2))
-- OUTPUT:
91.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:01:45) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(round(s,2))
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:02:11) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(round(s,2))
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:02:32) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(round(s,2))
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:02:33) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(round(s,2))
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:04:03) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(s)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:04:59) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(round(s,2))
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:05:09) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(round(s,2))
-- EXECUTION TIME:
0.137973
-- TEST CASE 1:
---- input:
8
8.5
7
9
---- correct output:
8.2
---- user output:
8.0
-- TEST CASE 2:
---- input:
7
7
7
7
---- correct output:
7.0
---- user output:
7.0
-- TEST CASE 3:
---- input:
5.75
6.9
7.95
8.99
---- correct output:
7.94
---- user output:
7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:06:12) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) 
print(s)
-- OUTPUT:
82.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:07:04) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) / (1 + 2 + 3 + 4)
print(s)
-- OUTPUT:
8.2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:07:34) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) / (1+2+3+4)
print(s)
-- OUTPUT:
8.2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:07:49) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) // (1+2+3+4)
print(s)
-- OUTPUT:
8.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:08:12) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) / (1+2+3+4)
print(round(s,2))
-- OUTPUT:
8.2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:08:19) 
-- CODE:
n1 = float(input("n1:"))
n2 = float(input("n2:"))
n3 = float(input("n3:"))
n4 = float(input("n4:"))
s = ( n1*1 + n2*2 + n3*3 + n4*4 ) / (1+2+3+4)
print(round(s,2))
-- EXECUTION TIME:
0.148877
-- TEST CASE 1:
---- input:
8
8.5
7
9
---- correct output:
8.2
---- user output:
8.2
-- TEST CASE 2:
---- input:
7
7
7
7
---- correct output:
7.0
---- user output:
7.0
-- TEST CASE 3:
---- input:
5.75
6.9
7.95
8.99
---- correct output:
7.94
---- user output:
7.94
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
