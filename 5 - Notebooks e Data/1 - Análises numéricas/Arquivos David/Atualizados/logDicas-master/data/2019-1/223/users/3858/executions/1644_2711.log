== SUBMITION (2019-04-11 16:23:11) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- EXECUTION TIME:
0.154215
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
INSUFICIENTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 15:39:34) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- EXECUTION TIME:
0.035845
-- ERROR:
Error response from daemon: Container 27eeb55358c5059b1cf0cc764b6235bd40c11fed7e96f61cf4fe8618ca558ad6 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 15:39:38) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- EXECUTION TIME:
0.0363538
-- ERROR:
Error response from daemon: Container 27eeb55358c5059b1cf0cc764b6235bd40c11fed7e96f61cf4fe8618ca558ad6 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 15:40:07) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- EXECUTION TIME:
0.034692
-- ERROR:
Error response from daemon: Container b0fa2e00e7ae2d35077340e422887c5035b5de555cfa11f0e34ad46da53389a6 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 15:41:16) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- EXECUTION TIME:
0.038461
-- ERROR:
Error response from daemon: Container b0fa2e00e7ae2d35077340e422887c5035b5de555cfa11f0e34ad46da53389a6 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 15:44:12) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- EXECUTION TIME:
0.0312581
-- ERROR:
Error response from daemon: Container b0fa2e00e7ae2d35077340e422887c5035b5de555cfa11f0e34ad46da53389a6 is not running

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:15:04) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 12:04:38) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- OUTPUT:
SUFICIENTE
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 12:05:11) 
-- CODE:
valor = float(input())
qt = int(input())
valortiket = float(input())
qpasses = int(input())
valorpasses = float(input())

t = valor - ((valortiket*qt) + (valorpasses*qpasses))
if(t>=0):
	print("SUFICIENTE")
else:
	print("INSUFICIENTE")
-- EXECUTION TIME:
0.770828
-- TEST CASE 1:
---- input:
400
15
1.20
30
1.50
---- correct output:
SUFICIENTE
---- user output:
SUFICIENTE
-- TEST CASE 2:
---- input:
90
22
1.20
44
1.50
---- correct output:
INSUFICIENTE
---- user output:
INSUFICIENTE
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
