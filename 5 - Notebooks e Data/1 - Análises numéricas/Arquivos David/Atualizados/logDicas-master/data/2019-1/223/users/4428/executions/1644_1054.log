== TEST (2019-04-15 23:00:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = (x,y)
reta = ((2*x)+y)==3

if(p == reta)
	mensagem = ("ponto pertence a reta")
-- ERROR:
File "XXXX", line 11
    if(p == reta)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:01:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = (x,y)
reta = ((2*x)+y)==3

if(p = reta)
	mensagem = ("ponto pertence a reta")
-- ERROR:
File "XXXX", line 11
    if(p = reta)
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:01:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = (x,y)
reta = ((2*x)+y)==3

if(p = reta):
	mensagem = ("ponto pertence a reta")
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:02:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = (x,y)
reta = ((2*x)+y)==3

if(p == reta):
	mensagem = ("ponto pertence a reta")
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:04:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = (x,y)
reta = ((2*x)+y)==3

if(p == reta):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:05:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = (x,y)
reta = ((2*x)+y)=3

if(p == reta):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 9
    reta = ((2*x)+y)=3
          ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:08:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = ((2*x)+y)
reta = p==3

if(p == reta):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 9
    reta = ((2*x)+y)=3
          ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 02:15:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = ((2*x)+y)
reta = 3

if(p == reta):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 9
    reta = ((2*x)+y)=3
          ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 02:18:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = ((2*x)+y)
reta = 3

if(p = reta):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 02:18:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

p = ((2*x)+y)
reta = 3

if(p == reta):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 09:15:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

if(2*x + y ==3):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:19:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

if(2*x + y ==3):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:24:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

if(2*x + y ==3):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	
-- ERROR:
File "XXXX", line 11
    if(p = reta):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:29:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

if(2*x + y ==3):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	

print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:31:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

x = float(input("Digite o valor da variavel x: "))
y = float(input("Digite o valor da variavel y: "))

if(2*x + y ==3):
	mensagem = ("ponto pertence a reta")
else:
	mensagem = ("ponto nao pertence a reta")	

print(mensagem)
-- EXECUTION TIME:
0.204394
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
