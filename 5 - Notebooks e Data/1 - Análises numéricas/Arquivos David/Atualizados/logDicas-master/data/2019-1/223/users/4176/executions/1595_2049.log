== TEST (2019-03-26 16:40:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= input(12)
y= input(6)

-- OUTPUT:
126
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:40:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= input(12)
y= input(6)

-- OUTPUT:
126
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:40:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= input(12)
y= input(6)
print(x%y)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x%y)
TypeError: not all arguments converted during string formatting
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:41:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= input(12)
y= input(6)
print(x//y)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x//y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:41:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (12)
y= (6)
print(x//y)

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:41:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (12)
y= (6)
print(x%y)

-- OUTPUT:
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:43:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:43:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.176644
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:44:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:44:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(x)
print(y)
print(x//y)
print(13%6)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:44:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(x)
print(y)
print(x//y)
print(13%6)

-- EXECUTION TIME:
0.19145
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:45:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print=(x)
print=(y)
print=(x//y)
print=(13%6)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:45:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print=(x)
print=(y)
print=(x//y)
print=(13%6)

-- EXECUTION TIME:
0.099762
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:

-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:

-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:45:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(13)
print(6)
print(13//6)
print(13%6)

-- OUTPUT:
13
6
2
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:46:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(13)
print(6)
print(13/6)
print(13%6)

-- OUTPUT:
13
6
2.1666666666666665
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:46:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (13)
y= (6)
print(13)
print(6)
print(13/6)
print(13%6)

-- EXECUTION TIME:
0.170526
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
13
6
2.1666666666666665
1
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
13
6
2.1666666666666665
1
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
13
6
2.1666666666666665
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:48:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
print(x)
print(y)
print(x//y)
print(x % y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 16:48:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
print(x)
print(y)
print(x//y)
print(x % y)

-- EXECUTION TIME:
0.15659
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
130
60
2
10
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
130
60
2
10
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
130
60
2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:48:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
print(x)
print(y)
print(x//y)
print(x % y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:50:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
a =print(x)
b= print(y)
c= print(x//y)
d= print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 16:50:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:04:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:05:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
dividendo= print(x)
divisor= print(y)
quociente= print(x//y)
resto= print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:05:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
dividendo= print(x)
divisor= print(y)
quociente= print(x//y)
resto= print(x%y)

-- EXECUTION TIME:
0.16106
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
130
60
2
10
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
130
60
2
10
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
130
60
2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:05:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)
dividendo= print(x)
divisor= print(y)
quociente= print(x//y)
resto= print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:13:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:15:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:15:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)

print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.203929
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
130
60
2
10
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
130
60
2
10
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
130
60
2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:15:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)

print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.19075
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
130
60
2
10
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
130
60
2
10
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
130
60
2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:15:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
130
60
2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:15:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= (130)
y= (60)

print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.142023
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
130
60
2
10
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
130
60
2
10
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
130
60
2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:16:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input())
y= int(input())

print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.144422
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:16:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input())
y= int(input())

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:17:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input())
y= int(input())

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:17:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x= int(input('x: '))
y= int(input('y: '))

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
