== TEST (2019-04-09 00:09:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
R=float(input("raio do tanque:"))
A=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada 1 ou 2:"))

if(N=="1"):
	v=4*pi*R**3/3
else(N=="2"):
	v=pi*x**2*(3*R-A)/3
print(round(v,4)
-- ERROR:
File "XXXX", line 11
    else(N=="2"):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:11:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
R=float(input("raio do tanque:"))
A=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada 1 ou 2:"))

if((N=="1")):
	v=4*pi*R**3/3
else((N=="2")):
	v=pi*x**2*(3*R-A)/3
print(round(v,4)
-- ERROR:
File "XXXX", line 11
    else((N=="2")):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:13:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
R=float(input("raio do tanque:"))
A=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada 1 ou 2:"))

if((N=="1")):
	
	v=4*pi*R**3/3

else:
	v=pi*x**2*(3*R-A)/3
print(round(v,4)
-- ERROR:
File "XXXX", line 16
    
                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:13:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
R=float(input("raio do tanque:"))
A=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada 1 ou 2:"))

if((N=="1")):
	
	v=4*pi*R**3/3

else:
	v=pi*x**2*(3*R-A)/3

print(round(v,4)
-- ERROR:
File "XXXX", line 17
    
                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:13:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
R=float(input("raio do tanque:"))
A=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada 1 ou 2:"))

if((N=="1")):
	
	v=4*pi*R**3/3

else:
	v=pi*x**2*(3*R-A)/3

print(round(v,4))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    v=pi*x**2*(3*R-A)/3
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:14:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
R=float(input("raio do tanque:"))
A=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada 1 ou 2:"))

if((N=="1")):
	
	v=4*pi*R**3/3

else:
	v=pi*A**2*(3*R-A)/3

print(round(v,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:28:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio do tanque:"))
x=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada:"))

v=pi*x**2*(3*r-x)/3
r=4*pi*r**3/3
s=r-v
if((N=="1")):
	p=v
else:
	p=s

print(round(p,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 00:28:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio do tanque:"))
x=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada:"))

v=pi*x**2*(3*r-x)/3
r=4*pi*r**3/3
s=r-v
if((N=="1")):
	p=v
else:
	p=s

print(round(p,4))
-- EXECUTION TIME:
0.158926
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:28:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio do tanque:"))
x=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada:"))

v=pi*x**2*(3*r-x)/3
r=4*pi*r**3/3
s=r-v
if(N=="1"):
	p=v
else:
	p=s

print(round(p,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:30:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio do tanque:"))
x=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada:"))

v=pi*x**2*(3*r-x)/3
r=4*pi*r**3/3
s=v-r

if(N=="1"):
	p=v
else:
	p=s

print(round(p,4))
-- OUTPUT:
-170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:30:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio do tanque:"))
x=float(input("altura da coluna de ar na parte superior do tanque:"))
N=int(input("opcao desejada:"))

v=pi*x**2*(3*r-x)/3
r=4*pi*r**3/3
s=v-r

if(N=="1"):
	p=v
else:
	p=s

print(round(p,4))
-- OUTPUT:
-170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 00:30:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio do tanque:"))
x=float(input("altura da coluna de ar na parte superior do tanque:"))
N=input("opcao desejada:")

v=pi*x**2*(3*r-x)/3
r=4*pi*r**3/3
s=r-v

if(N=="1"):
	p=v
else:
	p=s

print(round(p,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 00:31:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("raio do tanque:"))
x=float(input("altura da coluna de ar na parte superior do tanque:"))
N=input("opcao desejada:")

v=pi*x**2*(3*r-x)/3
r=4*pi*r**3/3
s=r-v

if(N=="1"):
	p=v
else:
	p=s

print(round(p,4))
-- EXECUTION TIME:
0.133837
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
