== TEST (2019-03-26 17:15:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("Dividendo"))
var2 = int(input("Divisor"))
print = 
-- ERROR:
File "XXXX", line 6
    print = 
           ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(=)?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:15:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("Dividendo"))
var2 = int(input("Divisor"))
-- ERROR:
File "XXXX", line 6
    print = 
           ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(=)?
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:18:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("Dividendo"))
var2 = int(input("Divisor"))
print = var1//var2

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = var1//var2
NameError: name 'var1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:18:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var = int(input("Dividendo"))
var2 = int(input("Divisor"))
print = var1//var2

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = var1//var2
NameError: name 'var1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:19:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
total = var1//var2

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = var1//var2
NameError: name 'var1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:20:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = var1//var2
total = var3
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print = var1//var2
NameError: name 'var1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:22:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = var1//var2
var4 = 

-- ERROR:
File "XXXX", line 7
    var4 = 
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:23:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = var1//var2
var4 = var1%var2

-- ERROR:
File "XXXX", line 7
    var4 = 
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:26:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(input("Quociente" var1//var2))
var4 = int(input("Resto" var1%var2))

-- ERROR:
File "XXXX", line 6
    var3 = int(input("Quociente" var1//var2))
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:26:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(input("Quociente" var1//var2))
var4 = int(input("Resto" var1%var2))

-- ERROR:
File "XXXX", line 6
    var3 = int(input("Quociente" var1//var2))
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:26:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(input(var1//var2))
var4 = int(input("Resto" var1%var2))

-- ERROR:
File "XXXX", line 7
    var4 = int(input("Resto" var1%var2))
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:26:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(input(var1//var2))
var4 = int(input(var1%var2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3 = int(input(var1//var2))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:27:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(input(var1//var2))
var4 = int(input(var1%var2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3 = int(input(var1//var2))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:27:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(input(var1//var2))
var4 = int(input(var1%var2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3 = int(input(var1//var2))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:28:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(var1//var2)
var4 = int(var1%var2)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    var3 = int(input(var1//var2))
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:30:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(var1//var2)
var4 = int(var1%var2)
print(var1)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:31:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(var1//var2)
var4 = int(var1%var2)
print(var1)
print(var2)
print(var3)
print(var4)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:33:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1 = int(input("Dividendo"))
var2 = int(input("Divisor"))
var3 = int(var1//var2)
var4 = int(var1%var2)
print(var1)
print(var2)
print(var3)
print(var4)
-- EXECUTION TIME:
0.136711
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
