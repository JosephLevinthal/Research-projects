== TEST (2019-03-22 23:19:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
x=int(input("terceiro: "))

print(a>b>c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(a>b>c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:20:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(x>y>z)
-- OUTPUT:
False
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:23:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(x)
print(y)
print(z)
-- OUTPUT:
10
-2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:23:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(x)
print(y)
print(z)
-- EXECUTION TIME:
0.149252
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:24:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(max(min(x,y,z)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(max(min(x,y,z)))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:24:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(int(max(min(x,y,z))))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(int(max(min(x,y,z))))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:26:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))
print(min(x,y,z))
print(max(x,y,z))


-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:26:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))
print(min(x,y,z))
print(max(x,y,z))


-- EXECUTION TIME:
0.135294
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:28:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))
M=print(min(x,y,z))
print(int(x+y+z/m-M))
m=print(max(x,y,z))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(int(x+y+z/m-M))
NameError: name 'm' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:28:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))
M=print(min(x,y,z))
print(x+y+z/m-M)
m=print(max(x,y,z))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(x+y+z/m-M)
NameError: name 'm' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:29:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))
M=print(min(x,y,z))
print(x+y+z/3-1)
m=print(max(x,y,z))


-- OUTPUT:
-2
7.0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:30:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))
M=print(min(x,y,z))
print(x+y+z/3-1)
m=print(max(x,y,z))


-- EXECUTION TIME:
0.138113
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
7.0
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:31:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))
M=print(min(x,y,z))
print(x+y+z/min-max)
m=print(max(x,y,z))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(x+y+z/min-max)
TypeError: unsupported operand type(s) for /: 'int' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:33:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

M=print(min(x,y,z))
print(x+y+z-x-z)
m=print(max(x,y,z))


-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:34:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

M=print(min(x,y,z))
print(x+y+z-x-z)
m=print(max(x,y,z))


-- EXECUTION TIME:
0.181021
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:34:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))
print(x+y+z-x-z)
print(max(x,y,z))


-- EXECUTION TIME:
0.123134
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:34:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))
print(x+y+z-x-z)
print(max(x,y,z))


-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:35:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))
print(x+y+z-(x-z))
print(max(x,y,z))


-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:35:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))
print(x+y+z-(x-z))
print(max(x,y,z))


-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:35:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))
print(x+y+z-z)
print(max(x,y,z))


-- OUTPUT:
-2
8
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:36:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))
print(x+y+z-x-z)
print(max(x,y,z))


-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:36:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))
print(x+y+z-x-z)
print(max(x,y,z))


-- EXECUTION TIME:
0.155542
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:36:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))


print(max(x,y,z))

print(x+y+z-x-z)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:38:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))


print(max(x,y,z))

print(y)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:38:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

print(min(x,y,z))


print(max(x,y,z))

print(y)
-- OUTPUT:
-2
10
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:50:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

mx=(min(x,y,z))
mn=(max(x,y,z))
it=((x+y+z)-mn-mx)

print(mn)
print(it)
print(mx)

-- OUTPUT:
10
0
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 23:51:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

mn=(min(x,y,z))
mx=(max(x,y,z))
it=((x+y+z)-mn-mx)

print(mn)
print(it)
print(mx)

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 23:51:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("primeiro: "))
y=int(input("segundo: "))
z=int(input("terceiro: "))

mn=(min(x,y,z))
mx=(max(x,y,z))
it=((x+y+z)-mn-mx)

print(mn)
print(it)
print(mx)

-- EXECUTION TIME:
0.127931
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:47:11) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(b)
print(max-min)
print(min)
-- EXECUTION TIME:
0.145147
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1015/main.py", line 7, in <module>
    print(max-min)
TypeError: unsupported operand type(s) for -: 'builtin_function_or_method' and 'builtin_function_or_method'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:47:28) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(b)
print(b-a)
print(a)
-- EXECUTION TIME:
0.2021
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
12
-2
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:47:42) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(b)
print(a-b)
print(a)
-- OUTPUT:
10
-12
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:48:11) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(b-a)
print(b)
-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:48:18) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(b-a)
print(b)
-- EXECUTION TIME:
0.13854
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:49:16) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+x-z-y)
print(b)
-- EXECUTION TIME:
0.197364
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
20
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:49:18) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+x-z-y)
print(b)
-- EXECUTION TIME:
0.173808
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
20
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:49:18) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+x-z-y)
print(b)
-- OUTPUT:
-2
20
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:50:04) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+z-z-y)
print(b)
-- EXECUTION TIME:
0.166246
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:50:05) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+z-z-y)
print(b)
-- OUTPUT:
-2
10
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:50:15) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+z-z-x)
print(b)
-- EXECUTION TIME:
0.175805
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:50:16) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+z-z-x)
print(b)
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 12:51:09) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+z-a-b)
print(b)
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 12:51:11) 
-- CODE:
x=int(input("n1: "))
y=int(input("n2: "))
z=int(input("n3: "))
a=min(x,y,z)
b=max(x,y,z)
print(a)
print(x+y+z-a-b)
print(b)
-- EXECUTION TIME:
0.263924
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
