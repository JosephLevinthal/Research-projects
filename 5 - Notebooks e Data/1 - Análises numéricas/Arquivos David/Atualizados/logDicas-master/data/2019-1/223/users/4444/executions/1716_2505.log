== SUBMITION (2019-05-14 13:38:02) 
-- CODE:
# Valores iniciais
H = int(input("No. inicial de habitantes: "))
V = int(input("No. inicial de vampiros: "))
M = int(input("No. de vampiros mortos: "))

# Variavel contadora
dia = 0

# Laco de acumulacao
while (V > 0 and H > 0):
	H = H - V
	V = 2 * V - M
	dia = dia + 1

if (H > 0):
	msg = "LIVRE"
else:
	msg = "VAMPIRIZADA"
print(msg)
print(dia)
-- EXECUTION TIME:
0.131875
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1716/2505/main.py", line 2, in <module>
    H = int(input())
ValueError: invalid literal for int() with base 10: 'pi/2'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:31:56) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

ang = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))


senx = ang
i=1
while ( i< k):
	soma = ((-1) **i)*(x**(2*i+1))factorial(2+i+1)
	senx=senx + soma
	i=i+1
print((round(senx,10))
		
-- EXECUTION TIME:
0.164262
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 10
    soma = ((-1) **i)*(x**(2*i+1))factorial(2+i+1)
                                          ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:33:15) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

ang = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))


senang = ang
i=1
while ( i< k):
	soma = ((-1) **i)*(senang**(2*i+1))factorial(2+i+1)
	senang=senang+ soma
	i=i+1
print((round(senx,10))
		
-- EXECUTION TIME:
0.129243
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 10
    soma = ((-1) **i)*(senang**(2*i+1))factorial(2+i+1)
                                               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:34:11) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))


senx = x
i=1
while ( i< k):
	soma = ((-1) **i)*(x**(2*i+1))factorial(2+i+1)
	senx=senx+ soma
	i=i+1
print((round(senx,10))
		
-- EXECUTION TIME:
0.12921
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 10
    soma = ((-1) **i)*(x**(2*i+1))factorial(2+i+1)
                                          ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:34:41) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))


senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))factorial(2+i+1)
	senx=senx+ soma
	i=i+1
print((round(senx,10))
		
-- EXECUTION TIME:
0.157627
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 10
    soma = ((-1)**i)*(x**(2*i+1))factorial(2+i+1)
                                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:34:49) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))


senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2+i+1)
	senx=senx+ soma
	i=i+1
print((round(senx,10))
		
-- EXECUTION TIME:
0.201471
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 15
    
      ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:35:03) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))


senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx=senx+ soma
	i=i+1
print((round(senx,10))
		
-- EXECUTION TIME:
0.301943
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 15
    
      ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:35:33) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))


senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.124487
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:40:03) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)
from math factorial
from math pi
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contado < k):
	resultado= resultado + (sinal*(x**expoente)/factorial(expoente)))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(soma,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.159511
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 2
    from math factorial
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:40:46) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)
from math factorial
from math pi
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contado < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(soma,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.144148
-- ERROR:
  File "/home/codebench/codes/1716/2505/main.py", line 2
    from math factorial
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:40:48) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)
from math factorial
from math pi
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contado < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(soma,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- ERROR:
File "XXXX", line 2
    from math factorial
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:40:59) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)
from math pi
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contado < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(soma,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- ERROR:
File "XXXX", line 2
    from math pi
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:41:09) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)
from math phi
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contado < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(soma,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- ERROR:
File "XXXX", line 2
    from math phi
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:41:15) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contado < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(soma,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    while (contado < k):
NameError: name 'contado' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:41:24) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(soma,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print(round(soma,10))
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:42:16) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- OUTPUT:
1.5707963268
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:42:20) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador+=1
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.193852
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.5707963268
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9248322293
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
1.0471975512
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:42:34) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador += 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- OUTPUT:
1.5707963268
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:42:35) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal=sinal*(-1)
	expoente- expoente + 2
	contador += 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.126714
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.5707963268
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9248322293
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
1.0471975512
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:43:13) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3

while (contador < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.203659
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:43:59) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)

x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3

while (contador < k):
	resultado = resultado + (sinal*(x**expoente)/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- ERROR:
File "XXXX", line 11
    resultado = resultado + (sinal*(x**expoente)/factorial(expoente)))
                                                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:47:41) 
-- CODE:
from math import *   # precisamos de pi  - eval(para receber o valor PI)
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3

while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal * (-1)
	expoente = expoente + 2
	contador += 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.14897
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
digite o angulo em radianos:    digite o numero de termos:  1.0000035426
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
digite o angulo em radianos:    digite o numero de termos:  -0.9998431014
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
digite o angulo em radianos:    digite o numero de termos:  0.8662952838
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:48:35) 
-- CODE:
from math import *   
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal*(-1)
	expoente = expoente + 2
	contador = contador + 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.210321
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:48:37) 
-- CODE:
from math import *   
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal*(-1)
	expoente = expoente + 2
	contador = contador + 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- OUTPUT:
1.0000035426
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:48:41) 
-- CODE:
from math import *   
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal*(-1)
	expoente = expoente + 2
	contador = contador + 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- OUTPUT:
1.0000035426
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:48:52) 
-- CODE:
from math import *   
x = eval(input('digite o angulo em radianos:    '))
k = int(input('digite o numero de termos:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal*(-1)
	expoente = expoente + 2
	contador = contador + 1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.192291
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:50:37) 
-- CODE:
from math import *   
x = eval(input('digite    '))
k = int(input('digite s:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal*(-1)
	expoente = expoente +2
	contador = contador +1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.268228
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:51:10) 
-- CODE:
from math import *   
x = eval(input('digite    '))
k = int(input('digite s:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal*(-1)
	expoente = expoente +2
	contador = contador +1
	
print(round(resultado,10))












senx = x
i=1
while ( i< k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i + 1
print(round(senx,10))
		
-- EXECUTION TIME:
0.11712
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:51:23) 
-- CODE:
from math import *   
x = eval(input('digite    '))
k = int(input('digite s:  '))
contador = 1
sinal = -1 
resultado = x
expoente = 3
while (contador < k):
	resultado = resultado + (sinal*(x**expoente/factorial(expoente)))
	sinal = sinal*(-1)
	expoente = expoente +2
	contador = contador +1
	
print(round(resultado,10))











-- EXECUTION TIME:
0.166275
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
