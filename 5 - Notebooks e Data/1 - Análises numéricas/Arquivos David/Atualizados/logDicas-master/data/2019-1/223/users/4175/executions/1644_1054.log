== TEST (2019-04-11 20:36:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2x + y == 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if (2x + y == 3):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:36:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2x + y = 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if (2x + y = 3):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:36:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2X + Y = 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if (2X + Y = 3):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:36:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2X + Y = 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if (2X + Y = 3):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:36:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2X + Y == 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if (2X + Y == 3):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:36:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2*X + Y == 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 20:36:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2*X + Y == 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- EXECUTION TIME:
0.149221
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta.
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:36:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2*X + Y = 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if (2*X + Y = 3):
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:37:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
X =(float(input("digite a coordenada: ")))
Y =(float(input("digite a coordenada: ")))

P = (X,Y)

if (2*X + Y == 3):
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:37:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (X,Y)
x = 
if : 2*x + y = 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 8
    x = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:37:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (X,Y)
x = 
if : (2*x + y) == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 8
    x = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:37:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (X,Y)
x = 
if : (2*x + y) == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 8
    x = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:37:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (X,Y)
 
if : (2*x + y) == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if : (2*x + y) == 3:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:37:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (X,Y)
 
if (2*x + y) == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    P = (X,Y)
NameError: name 'X' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:38:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)
 
if (2*x + y) == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 20:38:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)
 
if (2*x + y) == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- EXECUTION TIME:
0.181367
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta.
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:38:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)
 
if (2*x + y) == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 20:38:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)
 
if (2*x + y) = 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- EXECUTION TIME:
0.225079
-- ERROR:
  File "/home/codebench/codes/1644/1054/main.py", line 9
    if (2*x + y) = 3:
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:38:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)
 
if (2*x + y) = 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- ERROR:
File "XXXX", line 9
    if (2*x + y) = 3:
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:41:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 20:41:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else:
	print("ponto nao pertence a reta.")
-- EXECUTION TIME:
0.182923
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta.
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:42:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:42:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:42:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:42:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:43:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:43:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:43:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

xp = 2*x
XP = xp+y

if XP == 3:
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:46:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

if ((2*x) + y) ==3: 
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 20:46:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))

P = (x,y)

if ((2*x) + y) ==3: 
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- EXECUTION TIME:
0.187548
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta.
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 20:46:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))


if ((2*x) + y) ==3: 
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- OUTPUT:
ponto pertence a reta.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 20:46:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))


if ((2*x) + y) ==3: 
	print("ponto pertence a reta.")
else: 
	print("ponto nao pertence a reta.")
-- EXECUTION TIME:
0.174224
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta.
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta.
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 20:47:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x =(float(input("digite a coordenada: ")))
y =(float(input("digite a coordenada: ")))


if ((2*x) + y) ==3: 
	print("ponto pertence a reta")
else: 
	print("ponto nao pertence a reta")
-- EXECUTION TIME:
0.137699
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
