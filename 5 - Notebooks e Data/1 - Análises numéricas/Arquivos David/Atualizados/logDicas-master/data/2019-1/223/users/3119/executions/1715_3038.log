== TEST (2019-05-02 17:24:14) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = module(sqrt(x))
elif()

-- ERROR:
File "XXXX", line 7
    elif()
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:24:19) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = module(sqrt(x))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    v = module(sqrt(x))
NameError: name 'module' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:24:24) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = module(sqrt(x))
print(x)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    v = module(sqrt(x))
NameError: name 'module' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:24:28) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = module(sqrt(x))
print(v)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    v = module(sqrt(x))
NameError: name 'module' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:24:39) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = (sqrt(x))
print(v)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    v = (sqrt(x))
ValueError: math domain error
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:25:00) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = sqrt(x)
print(abs(v))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    v = sqrt(x)
ValueError: math domain error
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:25:38) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**1/2
print(abs(v))

-- OUTPUT:
0.995
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:26:20) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**(1/2)

print(v)
-- OUTPUT:
(8.637884531957315e-17+1.4106735979665885j)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:26:29) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**(1/2)

print(abs(v))
-- OUTPUT:
1.4106735979665885
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:26:47) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**(1/2)

print(round(abs(v),2))
-- OUTPUT:
1.41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:28:47) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**(1/2)
elif(x > -1 and x < 0 or x > 0 and x < 1):
	v = x
elif(x == 0):
	v = 0

print(round(abs(v),2))
-- OUTPUT:
1.41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:28:57) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**(1/2)
elif(x > -1 and x < 0 or x > 0 and x < 1):
	v = x
elif(x == 0):
	v = 0

print(round(abs(v),2))
-- OUTPUT:
1.41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 17:29:03) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**(1/2)
elif(x > -1 and x < 0 or x > 0 and x < 1):
	v = x
elif(x == 0):
	v = 0

print(round(abs(v),2))
-- OUTPUT:
1.41
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 17:29:09) 
-- CODE:
from math import*

x = float(input("Digite x: "))

if(x <= -1 or x >= 1):
	v = x**(1/2)
elif(x > -1 and x < 0 or x > 0 and x < 1):
	v = x
elif(x == 0):
	v = 0

print(round(abs(v),2))
-- EXECUTION TIME:
0.207849
-- TEST CASE 1:
---- input:
-1.99
---- correct output:
1.41
---- user output:
1.41
-- TEST CASE 2:
---- input:
0.01
---- correct output:
0.01
---- user output:
0.01
-- TEST CASE 3:
---- input:
-256.0
---- correct output:
16.0
---- user output:
16.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
