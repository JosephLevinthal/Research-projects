== TEST (2019-04-23 16:45:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import *
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 16:45:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import *
-- EXECUTION TIME:
0.290133
-- TEST CASE 1:
---- input:
420
20
---- correct output:
420.0 extras e 20.0 de falta
R$ 500.0
---- user output:

-- TEST CASE 2:
---- input:
400.5
100
---- correct output:
400.5 extras e 100.0 de falta
R$ 100.0
---- user output:

-- TEST CASE 3:
---- input:
300
44
---- correct output:
300.0 extras e 44.0 de falta
R$ 100.0
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:18:16) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

# Entrada de dados
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if ((x < y + z)and(y < x + z)and(z < y + x)):
if ((x != y)and (y != z) and(z != x)):
print("escaleno")
else:
if((x != y)or(y != z)):
print("isosceles") 
else:
print("equilatero")
else:
print("Nao é triangulo")

-- ERROR:
File "XXXX", line 8
    if ((x != y)and (y != z) and(z != x)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:20:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

# Entrada de dados
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y)and (y != z) and(z != x)):
	print("escaleno")
   else:
		if((x != y)or(y != z)):
		print("isosceles") 
else:
print("equilatero")
else:
print("Nao é triangulo")

-- ERROR:
File "XXXX", line 9
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:30:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

# Entrada de dados
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y)and (y != z) and(z != x)):
	print("escaleno")
   else:
		if((x != y)or(y != z)):
		print("isosceles") 
else:
print("equilatero")
else:
print("Nao é triangulo")

-- EXECUTION TIME:
0.187113
-- ERROR:
  File "/home/codebench/codes/1679/1879/main.py", line 9
    print("escaleno")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:31:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

# Entrada de dados
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y)and (y != z) and(z != x)):
	print("escaleno")
   else:
		if((x != y)or(y != z)):
		print("isosceles") 
else:
print("equilatero")
else:
print("Nao é triangulo")

-- ERROR:
File "XXXX", line 9
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:31:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

# Entrada de dados
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y)and (y != z) and(z != x)):
	print("escaleno")
   else:
		if((x != y)or(y != z)):
		print("isosceles") 
else:
print("equilatero")
else:
print("Nao é triangulo")

-- EXECUTION TIME:
0.200445
-- ERROR:
  File "/home/codebench/codes/1679/1879/main.py", line 9
    print("escaleno")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:31:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

# Entrada de dados
x = float(input("Lado x: "))
y = float(input("Lado y: "))
z = float(input("Lado z: "))
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y)and (y != z) and(z != x)):
	print("escaleno")
   else:
		if((x != y)or(y != z)):
		print("isosceles") 
else:
print("equilatero")
else:
print("Nao é triangulo")

-- EXECUTION TIME:
0.196748
-- ERROR:
  File "/home/codebench/codes/1679/1879/main.py", line 9
    print("escaleno")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:13:44) 
-- CODE:
extra=float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   ')
print(extra,"extras e", faltas,"de falta")
h = extra - 0.25 * falta
if(h > 400):
	print('RS',round(500,2))
else:
	print('RS',round(100,2))
				 


-- ERROR:
File "XXXX", line 3
    print(extra,"extras e", faltas,"de falta")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:16:21) 
-- CODE:
extra=float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   ')
print(str(extra),"extras e", str(faltas),"de falta")
h = extra - 0.25 * falta
if(h > 400):
	print('RS',round(500,2))
else:
	print('RS',round(100,2))
				 


-- ERROR:
File "XXXX", line 3
    print(str(extra),"extras e", str(faltas),"de falta")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:17:21) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   ')
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * falta
if(h > 400):
	print('RS',round(500,2))
else:
	print('RS',round(100,2))
				 


-- ERROR:
File "XXXX", line 3
    print(str(extra),'extras e',str(faltas),'de falta')
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:17:42) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * falta
if(h > 400):
	print('RS',round(500,2))
else:
	print('RS',round(100,2))
				 


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    h = extra - 0.25 * falta
NameError: name 'falta' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:18:20) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('RS',round(500,2))
else:
	print('RS',round(100,2))
				 


-- OUTPUT:
420.0 extras e 20.0 de falta
RS 500
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:19:26) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('RS',round(500.00,2))
else:
	print('RS',round(100.00,2))
				 


-- OUTPUT:
420.0 extras e 20.0 de falta
RS 500.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:19:44) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('RS',round(500.00,2))
else:
	print('RS',round(100.00,2))
				 


-- OUTPUT:
420.0 extras e 20.0 de falta
RS 500.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:20:05) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('RS',round(500.0, 2))
else:
	print('RS',round(100.0, 2))
				 


-- OUTPUT:
420.0 extras e 20.0 de falta
RS 500.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:20:16) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('RS',round(500.0, 2))
else:
	print('RS',round(100.0, 2))
				 


-- EXECUTION TIME:
0.20249
-- TEST CASE 1:
---- input:
420
20
---- correct output:
420.0 extras e 20.0 de falta
R$ 500.0
---- user output:
420.0 extras e 20.0 de falta
RS 500.0
-- TEST CASE 2:
---- input:
400.5
100
---- correct output:
400.5 extras e 100.0 de falta
R$ 100.0
---- user output:
400.5 extras e 100.0 de falta
RS 100.0
-- TEST CASE 3:
---- input:
300
44
---- correct output:
300.0 extras e 44.0 de falta
R$ 100.0
---- user output:
300.0 extras e 44.0 de falta
RS 100.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:20:24) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('RS',round(500.0, 2))
else:
	print('RS',round(100.0, 2))
				 


-- OUTPUT:
420.0 extras e 20.0 de falta
RS 500.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:20:42) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('R$',round(500.0, 2))
else:
	print('R$',round(100.0, 2))
				 


-- OUTPUT:
420.0 extras e 20.0 de falta
R$ 500.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:20:49) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(str(extra),'extras e',str(faltas),'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('R$',round(500.0, 2))
else:
	print('R$',round(100.0, 2))
				 


-- EXECUTION TIME:
0.215958
-- TEST CASE 1:
---- input:
420
20
---- correct output:
420.0 extras e 20.0 de falta
R$ 500.0
---- user output:
420.0 extras e 20.0 de falta
R$ 500.0
-- TEST CASE 2:
---- input:
400.5
100
---- correct output:
400.5 extras e 100.0 de falta
R$ 100.0
---- user output:
400.5 extras e 100.0 de falta
R$ 100.0
-- TEST CASE 3:
---- input:
300
44
---- correct output:
300.0 extras e 44.0 de falta
R$ 100.0
---- user output:
300.0 extras e 44.0 de falta
R$ 100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 16:21:30) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(extra,'extras e',faltas,'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('R$',round(500.0, 2))
else:
	print('R$',round(100.0, 2))
				 


-- OUTPUT:
420.0 extras e 20.0 de falta
R$ 500.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:21:37) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(extra,'extras e',faltas,'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('R$',round(500.0, 2))
else:
	print('R$',round(100.0, 2))
				 


-- EXECUTION TIME:
0.175275
-- TEST CASE 1:
---- input:
420
20
---- correct output:
420.0 extras e 20.0 de falta
R$ 500.0
---- user output:
420.0 extras e 20.0 de falta
R$ 500.0
-- TEST CASE 2:
---- input:
400.5
100
---- correct output:
400.5 extras e 100.0 de falta
R$ 100.0
---- user output:
400.5 extras e 100.0 de falta
R$ 100.0
-- TEST CASE 3:
---- input:
300
44
---- correct output:
300.0 extras e 44.0 de falta
R$ 100.0
---- user output:
300.0 extras e 44.0 de falta
R$ 100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:21:46) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(extra,'extras e',faltas,'de falta')
h = extra - 0.25 * faltas
if(h1 > 400):
	print('R$',round(500.0, 2))
else:
	print('R$',round(100.0, 2))
				 


-- EXECUTION TIME:
0.281533
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1879/main.py", line 5, in <module>
    if(h1 > 400):
NameError: name 'h1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:21:53) 
-- CODE:
extra = float(input('digite o numero de horas extras: '))
faltas=float(input('digite faltas:   '))
print(extra,'extras e',faltas,'de falta')
h = extra - 0.25 * faltas
if(h > 400):
	print('R$',round(500.0, 2))
else:
	print('R$',round(100.0, 2))
				 


-- EXECUTION TIME:
0.16386
-- TEST CASE 1:
---- input:
420
20
---- correct output:
420.0 extras e 20.0 de falta
R$ 500.0
---- user output:
420.0 extras e 20.0 de falta
R$ 500.0
-- TEST CASE 2:
---- input:
400.5
100
---- correct output:
400.5 extras e 100.0 de falta
R$ 100.0
---- user output:
400.5 extras e 100.0 de falta
R$ 100.0
-- TEST CASE 3:
---- input:
300
44
---- correct output:
300.0 extras e 44.0 de falta
R$ 100.0
---- user output:
300.0 extras e 44.0 de falta
R$ 100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
