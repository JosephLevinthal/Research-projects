== TEST (2019-03-30 22:22:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B")
var3 = input("Digite o lado C")

a = (var1)
b = (var2)
c = (var3)

s = (a + b + c) / 2

print (s)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    s = (a + b + c) / 2
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:23:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2

print (s)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:24:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2

A = sqrt(s(s-a)(s-b)(s-c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:25:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2

A = sqrt(s(s-a)(s-b)(s-c))

print (A)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:25:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2

A = (sqrt(s(s-a)(s-b)(s-c)))

print (A)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:27:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2

A = (sqrt(s(s-a)(s-b)(s-c)))

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:27:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2

A = sqrt(s(s-a)(s-b)(s-c))

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:28:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2

A = math.sqrt(s(s-a)(s-b)(s-c))

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:29:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

A = math.sqrt(d(d-a)(d-b)(d-c))

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:30:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

A = math.sqrt(d * (d-a) * (d-b) *(d-c))

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:30:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

A = math.sqrt(d * (d-a) * (d-b) *(d-c))

print (round((A), 5))
-- EXECUTION TIME:
0.169103
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:31:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

A = math.sqrt((d * (d-a)) * (d * (d-b)) *(d * (d-c))

print (round((A), 5))
-- ERROR:
File "XXXX", line 20
    print (round((A), 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:39:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

sa = d * (d - a)
sb = d * (d - b)
sc = d * (d - c)

Area = math.sqrt(sa * sb * sc)
A = float(Area)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:40:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

sa = d * (d - a)
sb = d * (d - b)
sc = d * (d - c)

Area = math.sqrt(sa * sb * sc)
A = float(Area)

print (round((A), 5))
-- EXECUTION TIME:
0.1469
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:41:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

sa = d * (d - a)
sb = d * (d - b)
sc = d * (d - c)

Area = math.sqrt(sa * sb * sc)
A = float(Area)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:41:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

sa = d * (d - a)
sb = d * (d - b)
sc = d * (d - c)

Area = math.sqrt(sa * sb * sc)
A = float(Area)

print (round((A), 5))
-- EXECUTION TIME:
0.165667
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:44:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

Area = math.sqrt( (d * (d - a) *  (d * (d - b) *  (d * (d - c))
A = float(Area)

print (round((A), 5))
-- ERROR:
File "XXXX", line 19
    A = float(Area)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:45:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

Area = math.sqrt( (d * (d - a) *  (d * (d - b) *  (d * (d - c))
A = int(Area)

print (round((A), 5))
-- ERROR:
File "XXXX", line 19
    A = int(Area)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:46:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

Area = math.sqrt( (d * (d - a) *  (d * (d - b) *  (d * (d - c))
area = (Area)

print (round((A), 5))
-- ERROR:
File "XXXX", line 19
    area = (Area)
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:46:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

Area = math.sqrt( (d * (d - a) *  (d * (d - b) *  (d * (d - c)))
area = (Area)

print (round((A), 5))
-- ERROR:
File "XXXX", line 19
    area = (Area)
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:47:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

Area = math.sqrt( (d * (d - a) *  (d * (d - b) *  (d * (d - c)))
area = float(Area)

print (round((area), 5))
-- ERROR:
File "XXXX", line 19
    area = float(Area)
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:48:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

Area = math.sqrt( (d * (d - a)) *  (d * (d - b)) *  (d * (d - c)))
area = float(Area)

print (round((area), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:48:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

var1 = input("Digite o lado A: ")
var2 = input("Digite o lado B: ")
var3 = input("Digite o lado C: ")

a = int(var1)
b = int(var2)
c = int(var3)

s = (a + b + c) / 2
d = float(s)

Area = math.sqrt( (d * (d - a)) *  (d * (d - b)) *  (d * (d - c)))
area = float(Area)

print (round((area), 5))
-- EXECUTION TIME:
0.125388
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 11, in <module>
    a = int(var1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:56:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

lado1 = input("Digite o lado A: ")
lado2 = input("Digite o lado B: ")
lado3 = input("Digite o lado C: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = math.sqrt( (s * (s - l1)) * (s * (s - l2)) * (s * (s - l3)) )

print (round((A), 5))
-- OUTPUT:
1516.81989
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:56:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

lado1 = input("Digite o lado A: ")
lado2 = input("Digite o lado B: ")
lado3 = input("Digite o lado C: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = math.sqrt( (s * (s - l1)) * (s * (s - l2)) * (s * (s - l3)) )

print (round((A), 5))
-- EXECUTION TIME:
0.130545
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
1516.81989
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
36000.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
46450.40865
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 22:57:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = ((l1 + l2 + l3) / 2)

A = math.sqrt( (s * (s - l1)) * (s * (s - l2)) * (s * (s - l3)) )

print (round((A), 5))
-- OUTPUT:
1516.81989
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 22:58:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = ((l1 + l2 + l3) / 2)

A = math.sqrt( (s * (s - l1)) * (s * (s - l2)) * (s * (s - l3)) )

print (round((A), 5))
-- EXECUTION TIME:
0.130398
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
1516.81989
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
36000.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
46450.40865
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-30 23:14:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = math.sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- OUTPUT:
204.16939
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-30 23:15:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = math.sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- EXECUTION TIME:
0.138168
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
204.16939
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
1897.3666
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
2297.96224
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:54:08) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    A = sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)
NameError: name 'sqrt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:54:28) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = math.sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- OUTPUT:
204.16939
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:54:39) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

l1 = float(lado1)
l2 = float(lado2)
l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = math.sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- EXECUTION TIME:
0.216537
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
204.16939
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
1897.3666
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
2297.96224
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:55:26) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

#l1 = float(lado1)
#l2 = float(lado2)
#l3 = float(lado3)

s = (l1 + l2 + l3) / 2

A = math.sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    s = (l1 + l2 + l3) / 2
NameError: name 'l1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:55:52) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

#l1 = float(lado1)
#l2 = float(lado2)
#l3 = float(lado3)

s = (lado1 + lado2 + lado3) / 2

A = math.sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    s = (lado1 + lado2 + lado3) / 2
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:57:14) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = math.sqrt( (s * (s - l1)) * (s - l2)) * (s - l3)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:57:44) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = math.sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:57:52) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = math.sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- EXECUTION TIME:
0.21336
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:06:19) 
-- CODE:
import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = math.Sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:06:43) 
-- CODE:
From import math

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = Sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- ERROR:
File "XXXX", line 1
    From import math
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:07:22) 
-- CODE:
From import math *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- ERROR:
File "XXXX", line 1
    From import math *
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:07:54) 
-- CODE:
From math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- ERROR:
File "XXXX", line 1
    From math import *
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:18:42) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:18:51) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3)

print (round((A), 5))
-- EXECUTION TIME:
0.213856
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:19:29) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3))

print (round((A), 5))
-- ERROR:
File "XXXX", line 13
    A = sqrt( (s * (s - lado1)) * (s - lado2)) * (s - lado3))
                                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:19:57) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print (round((A), 5))
-- ERROR:
File "XXXX", line 15
    print (round((A), 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:20:52) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print (A)
-- ERROR:
File "XXXX", line 15
    print (A)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:21:20) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print (A)
-- ERROR:
File "XXXX", line 15
    print (A)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:22:22) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print round((A), 5)
-- ERROR:
File "XXXX", line 15
    print round((A), 5)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:23:11) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print (round((A), 5))
-- ERROR:
File "XXXX", line 15
    print (round((A), 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:24:07) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print (round((A), 5))
-- ERROR:
File "XXXX", line 15
    print (round((A), 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:25:04) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print (round(A, 5))
-- ERROR:
File "XXXX", line 15
    print (round(A, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:25:49) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print(round(A, 5))
-- ERROR:
File "XXXX", line 15
    print(round(A, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:26:37) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3))

print(round(A,5))
-- ERROR:
File "XXXX", line 15
    print(round(A,5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:28:14) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:28:22) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- EXECUTION TIME:
0.129404
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:30:47) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = float(lado1)
lado2 = float(lado2)
lado3 = float(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:30:54) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = float(lado1)
lado2 = float(lado2)
lado3 = float(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- EXECUTION TIME:
0.123905
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:32:27) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:32:37) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = int(lado1)
lado2 = int(lado2)
lado3 = int(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- EXECUTION TIME:
0.158944
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1016/main.py", line 7, in <module>
    lado1 = int(lado1)
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:32:57) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = float(lado1)
lado2 = float(lado2)
lado3 = float(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:33:06) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 3: ")

lado1 = float(lado1)
lado2 = float(lado2)
lado3 = float(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- EXECUTION TIME:
0.179434
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:37:24) 
-- CODE:
from math import *

lado1 = input(float("Digite o lado 1: "))
lado2 = input(float("Digite o lado 2: "))
lado3 = input(float("Digite o lado 3: "))

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    lado1 = input(float("Digite o lado 1: "))
ValueError: could not convert string to float: 'Digite o lado 1: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:38:35) 
-- CODE:
from math import *

lado1 = input(float("Digite o lado 1: "))
lado2 = input(float("Digite o lado 2: "))
lado3 = input (float("Digite o lado 2: "))

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    lado1 = input(float("Digite o lado 1: "))
ValueError: could not convert string to float: 'Digite o lado 1: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:39:10) 
-- CODE:
from math import *

lado1 = input(float("Digite o lado 1: "))
lado2 = input(float("Digite o lado 2: "))
lado3 = input(float("Digite o lado 2: "))



s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    lado1 = input(float("Digite o lado 1: "))
ValueError: could not convert string to float: 'Digite o lado 1: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:39:45) 
-- CODE:
from math import *

lado1 = input(float("Digite o lado 1: "))
lado2 = input(float("Digite o lado 2: "))
lado3 = input(float("Digite o lado 2: "))

lado1 = float(lado1)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    lado1 = input(float("Digite o lado 1: "))
ValueError: could not convert string to float: 'Digite o lado 1: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:39:59) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input(float("Digite o lado 2: "))
lado3 = input(float("Digite o lado 2: "))

lado1 = float(lado1)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    lado2 = input(float("Digite o lado 2: "))
ValueError: could not convert string to float: 'Digite o lado 2: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:40:51) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 2: ")

lado1 = float(lado1)
lado2 = float(lado2)
lado3 = float(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:40:58) 
-- CODE:
from math import *

lado1 = input("Digite o lado 1: ")
lado2 = input("Digite o lado 2: ")
lado3 = input("Digite o lado 2: ")

lado1 = float(lado1)
lado2 = float(lado2)
lado3 = float(lado3)

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- EXECUTION TIME:
0.175305
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 20:03:32) 
-- CODE:
from math import *

lado1 = float(input("Digite o lado 1: "))
lado2 = float(input("Digite o lado 2: "))
lado3 = float(input("Digite o lado 2: "))

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 20:03:43) 
-- CODE:
from math import *

lado1 = float(input("Digite o lado 1: "))
lado2 = float(input("Digite o lado 2: "))
lado3 = float(input("Digite o lado 2: "))

s = (lado1 + lado2 + lado3) / 2

A = sqrt( (s * (s - lado1) * (s - lado2) * (s - lado3)))

print(round(A,5))
-- EXECUTION TIME:
0.174885
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
