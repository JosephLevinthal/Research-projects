== TEST (2019-04-04 23:11:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco > 200:
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:11:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco > 200:
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:11:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(preco)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(preco)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(preco)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:12:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(preco)
-- EXECUTION TIME:
0.176131
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.0855
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5035
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(preco)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(preco)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:12:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- EXECUTION TIME:
0.201241
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.0855
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5035
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:12:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))
if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:13:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- EXECUTION TIME:
0.135881
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.0855
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5035
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:13:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:13:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:13:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:13:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:21:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- ERROR:
File "XXXX", line 7
    if:
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:22:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- EXECUTION TIME:
0.125117
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:22:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- EXECUTION TIME:
0.226249
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:22:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = (input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(round(preco,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if preco >= 200:
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:23:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(float(round(preco,2)))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:23:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(float(round(preco,2)))
-- EXECUTION TIME:
0.209643
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.0855
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5035
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:23:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
else:
	preco < 200
	print(float(round(preco,2)))
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:24:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200
	print(float(round(preco,2))
	else:
	preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
-- EXECUTION TIME:
0.139329
-- ERROR:
  File "/home/codebench/codes/1644/869/main.py", line 7
    if preco < 200
                 ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:24:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200
	print(float(round(preco,2))
	else:
	preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
-- ERROR:
File "XXXX", line 7
    if preco < 200
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:24:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2))
else:
	preco >= 200:
	precoff = preco - preco*(5/100)
	print(precoff)
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:24:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:24:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:24:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:25:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:25:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:25:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:25:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:25:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- EXECUTION TIME:
0.128832
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.0855
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5035
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:25:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = float(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- OUTPUT:
190.0855
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:25:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:25:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("a: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- EXECUTION TIME:
0.163224
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:41:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(precoff)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 23:41:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(float(precoff))
-- EXECUTION TIME:
0.164546
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 23:41:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	preco >= 200
	precoff = preco - preco*(5/100)
	print(float(precoff))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:21:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	precoff = preco - preco*(5/100)
	print(float(precoff))
-- EXECUTION TIME:
0.174043
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:21:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	precoff = preco - preco*(5/100)
	print(float(precoff))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:21:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	precoff = preco - preco*(5/100)
	print(float(precoff))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:21:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(float(round(preco,2)))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.166499
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:21:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print((round(preco,2)))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:21:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.176656
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:21:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:21:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:21:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:21:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:22:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.170072
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:22:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.101847
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.110187
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.0822871
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.122245
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.153633
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:22:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:22:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:22:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:22:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:22:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-06 03:22:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = int(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    preco = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-06 03:22:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preco = float(input("preco a ser pago: "))

if preco < 200:
	print(round(preco,2))
else:
	precoff = preco - preco*(5/100)
	print(round(precoff,2))
-- EXECUTION TIME:
0.122722
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
