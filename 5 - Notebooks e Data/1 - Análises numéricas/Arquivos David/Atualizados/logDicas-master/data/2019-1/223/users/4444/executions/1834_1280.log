== TEST (2019-06-29 13:38:50) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
print(quadro)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 13:39:46) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
print(quadro)#

mo=zeros((3,3))
print(mo)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 13:39:56) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
#print(quadro)#

mo=zeros((3,3))
print(mo)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 13:40:05) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
#print(quadro)#

mo=zeros((2,3))
print(mo)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 13:40:15) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
#print(quadro)#

mo=ones((2,3))
print(mo)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 13:40:24) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
#print(quadro)#

mo=ones((21,3))
print(mo)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 13:40:33) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
#print(quadro)#

mo=ones((1,3))
print(mo)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 14:03:37) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
# Tipos de medalhas (no. de colunas)
MEDALHAS = shape(quadro)[1]
# Variavel acumuladora
total = 0
# Processa a j-esima coluna na linha 4
for j in range(MEDALHAS):
total = total + quadro[3,j]
print(total)
-- ERROR:
File "XXXX", line 18
    total = total + quadro[3,j]
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 14:03:47) 
-- CODE:
from numpy import *
# Definicao do quadro de medalhas
quadro = array([
[46, 37, 38],
[27, 23, 17],
[26, 18, 26],
[19, 18, 19],
[17, 10, 15],
[12, 8, 21],
[10, 18, 14]
])
# Tipos de medalhas (no. de colunas)
MEDALHAS = shape(quadro)[1]
# Variavel acumuladora
total = 0
# Processa a j-esima coluna na linha 4
for j in range(MEDALHAS):
	total = total + quadro[3,j]
print(total)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 16:55:51) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1]!=33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,ytab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,ytab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.777995
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 30
    if(xtab-1 != -1):
                    ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 16:58:41) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1]!=33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.690605
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 30
    if(xtab-1 != -1):
                    ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 16:58:51) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1]!=33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.879045
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 30
    if(xtab-1 != -1):
                    ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:58:54) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1]!=33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 30
    if(xtab-1 != -1):
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:59:27) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1]!=33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 30
    if(xtab-1 != -1):
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 17:00:25) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		if(xtab-1 != -1):
			if(tabuleiro[ytab,ytab-1] != 33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 30
    if(xtab-1 != -1):
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 17:01:09) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		if(xtab-1 != -1):
			if(tabuleiro[ytab,ytab-1] != 33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 30
    if(xtab-1 != -1):
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 17:01:32) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
			elif(tabuleiro[ytab,ytab-1] != 33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 15:00:17) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
			elif(tabuleiro[ytab,ytab-1] != 33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
			if(xtab+1 != limiteDireita):
				if(tabuleiro[ytab,xtab+1]!=33):
					xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
			if(ytab-1 !=-1):
				if(tabuleiro[ytab,xtab-1]!=33):
					ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
			if(ytab+1 !=limite ):
				if(tabuleiro[ytab,xtab+1]!=33):
					ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.714978
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 23:47:48) 
-- CODE:
rom numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
if(x == 'A'): 
if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.837834
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 1
    rom numpy import *
            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 23:51:48) 
-- CODE:
rom numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.854969
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 1
    rom numpy import *
            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:51:48) 
-- CODE:
rom numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 1
    rom numpy import *
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:52:01) 
-- CODE:
rom numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 1
    rom numpy import *
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:52:25) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 17
    if(tabuleiro[ytab,xtab-1] != 33):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:52:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 18
    xtab = xtab -1 # Move personagem para ESQUERDA
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:52:46) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 19
    elif(x == 'D'):     
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:53:09) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 23
    elif(x == 'W'): 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:53:30) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 28
    if(ytab+1 != limlinh):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:53:47) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 34
    moeda =moeda +1 
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:54:18) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 23:54:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.840435
-- TEST CASE 1:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
DDDDDWWWWSSSSDDDWSWDSDWDDDDDDDDDSSSSSSSSSSSDDDDWSADSWASADSWASD
---- correct output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
---- user output:
posicao x:  11
posicao y:  10
moedas:  0
life:  100
-- TEST CASE 2:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
SAWSDADDDDDDDDDDSSSSSSSSSSSDDDDDDDWWWWWWWWAAAAAAAAAAWSDAASDSWADSAWSWD
---- correct output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
---- user output:
posicao x:  5
posicao y:  3
moedas:  1
life:  100
-- TEST CASE 3:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
AWSWDSSDSDSDSDSAWAWAWASDSDSSASASASWDWDWDWDWASWDAWSWDAWSDWSADSWASDWSAWWDSADWSAWSWDSAWSW
---- correct output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
---- user output:
posicao x:  6
posicao y:  2
moedas:  1
life:  100
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:54:49) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 23:56:50) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif (x == 'S'):
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
1.11408
-- TEST CASE 1:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
DDDDDWWWWSSSSDDDWSWDSDWDDDDDDDDDSSSSSSSSSSSDDDDWSADSWASADSWASD
---- correct output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
---- user output:
posicao x:  11
posicao y:  10
moedas:  0
life:  100
-- TEST CASE 2:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
SAWSDADDDDDDDDDDSSSSSSSSSSSDDDDDDDWWWWWWWWAAAAAAAAAAWSDAASDSWADSAWSWD
---- correct output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
---- user output:
posicao x:  5
posicao y:  3
moedas:  1
life:  100
-- TEST CASE 3:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
AWSWDSSDSDSDSDSAWAWAWASDSDSSASASASWDWDWDWDWASWDAWSWDAWSDWSADSWASDWSAWWDSADWSAWSWDSAWSW
---- correct output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
---- user output:
posicao x:  6
posicao y:  2
moedas:  1
life:  100
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 23:57:21) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	else (x == 'S'):
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.551127
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 27
    else (x == 'S'):
         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:57:24) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	else (x == 'S'):
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
File "XXXX", line 27
    else (x == 'S'):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 23:57:43) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif (x == 'S'):
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- EXECUTION TIME:
0.875564
-- TEST CASE 1:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
DDDDDWWWWSSSSDDDWSWDSDWDDDDDDDDDSSSSSSSSSSSDDDDWSADSWASADSWASD
---- correct output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
---- user output:
posicao x:  11
posicao y:  10
moedas:  0
life:  100
-- TEST CASE 2:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
SAWSDADDDDDDDDDDSSSSSSSSSSSDDDDDDDWWWWWWWWAAAAAAAAAAWSDAASDSWADSAWSWD
---- correct output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
---- user output:
posicao x:  5
posicao y:  3
moedas:  1
life:  100
-- TEST CASE 3:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
AWSWDSSDSDSDSDSAWAWAWASDSDSSASASASWDWDWDWDWASWDAWSWDAWSDWSADSWASDWSAWWDSADWSAWSWDSAWSW
---- correct output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
---- user output:
posicao x:  6
posicao y:  2
moedas:  1
life:  100
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-01 23:57:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif (x == 'S'):
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 00:01:30) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
0.80624
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:01:32) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:02:02) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
			elif(tabuleiro[ytab,ytab-1] != 33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:02:26) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
			elif(tabuleiro[ytab,ytab-1] != 33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:02:48) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
			elif(tabuleiro[ytab,ytab-1] != 33):
				xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:03:36) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
    if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
    elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:04:06) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
    # Move personagem para ESQUERDA
	if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
   elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:04:35) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
	    # Move personagem para ESQUERDA
	if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
   elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:05:13) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
	    # Move personagem para ESQUERDA
	if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
   elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:05:31) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
	    # Move personagem para ESQUERDA
if x == 'A':
	elif(xtab-1 != -1):
	elif(tabuleiro[ytab,ytab-1] != 33):
	xtab = xtab -1
    # Move personagem para DIREITA
   elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 29
    if x == 'A':
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:05:47) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
	    # Move personagem para ESQUERDA
	if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
   elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:06:02) 
-- CODE:
#######
# Lab 07 – Exercicio 09
# @author: IComp / UFAM
# AVENTURAS COM MOEDAS E ZUMBIS

from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100



limiteDireita = shape(tabuleiro)[1]
limite=shape(tabuleiro)[0]
# Analise da jogada
for x in mov:
	    # Move personagem para ESQUERDA
	if x == 'A':
		elif(xtab-1 != -1):
		elif(tabuleiro[ytab,ytab-1] != 33):
		xtab = xtab -1
    # Move personagem para DIREITA
   elif x == 'D':
		if(xtab+1 != limiteDireita):
		if(tabuleiro[ytab,xtab+1]!=33):
		xtab =xtab +1 
    # Move personagem para CIMA
    elif x == 'W':
		if(ytab-1 !=-1):
		if(tabuleiro[ytab,xtab-1]!=33):
		ytab = ytab -1
    # Move personagem para BAIXO
    elif x == 'S':
		if(ytab+1 !=limite ):
		if(tabuleiro[ytab,xtab+1]!=33):
		ytab = ytab +1

    # Trata evento
    # Moeda
    if tabuleiro[ytab,xtab] == 11:
        moeda =moeda +1 
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
    elif tabuleiro[ytab,xtab] == 22:
        life = life - 5

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 30
    elif(xtab-1 != -1):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 00:08:02) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
if(x == 'A'): 
if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
0.657192
-- ERROR:
  File "/home/codebench/codes/1834/1280/main.py", line 12
    if(x == 'A'): 
     ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:08:05) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
if(x == 'A'): 
if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 12
    if(x == 'A'): 
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:08:17) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 13
    if(xtab-1 != -1):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:08:22) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
	if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 13
    if(xtab-1 != -1):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:08:29) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 14
    if(tabuleiro[ytab,xtab-1] != 33):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:08:47) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
xtab = xtab -1 # Move personagem para ESQUERDA
elif(x == 'D'):     
if(xtab+1 != limcol):
if(tabuleiro[ytab,xtab+1]!=33):
xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 15
    xtab = xtab -1 # Move personagem para ESQUERDA
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:09:25) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
elif(x == 'W'): 
if(ytab-1 != -1):
if(tabuleiro[ytab-1,xtab]!=33):
ytab = ytab -1	# Move personagem para CIMA
elif x == 'S':
if(ytab+1 != limlinh):
if(tabuleiro[ytab+1,xtab]!=33):
ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 20
    elif(x == 'W'): 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:10:17) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
moeda =moeda +1 
tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 31
    moeda =moeda +1 
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:10:50) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 34
    life = life - 5	# Zumbi
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:11:09) 
-- CODE:
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    tabuleiro = array(eval(input())) # Leitura do tabuleiro
NameError: name 'array' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:11:46) 
-- CODE:
from numpy import *
from numpy.linalg import *
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 00:13:43) 
-- CODE:
from numpy import *
from numpy.linalg import *
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
if tabuleiro[ytab,xtab] == 11:	# Moeda
	moeda =moeda +1 
	tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
elif tabuleiro[ytab,xtab] == 22: 
	life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
1.02976
-- TEST CASE 1:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
DDDDDWWWWSSSSDDDWSWDSDWDDDDDDDDDSSSSSSSSSSSDDDDWSADSWASADSWASD
---- correct output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
---- user output:
posicao x:  11
posicao y:  10
moedas:  0
life:  100
-- TEST CASE 2:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
SAWSDADDDDDDDDDDSSSSSSSSSSSDDDDDDDWWWWWWWWAAAAAAAAAAWSDAASDSWADSAWSWD
---- correct output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
---- user output:
posicao x:  5
posicao y:  3
moedas:  1
life:  100
-- TEST CASE 3:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
AWSWDSSDSDSDSDSAWAWAWASDSDSSASASASWDWDWDWDWASWDAWSWDAWSDWSADSWASDWSAWWDSADWSAWSWDSAWSW
---- correct output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
---- user output:
posicao x:  6
posicao y:  2
moedas:  1
life:  100
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 00:14:25) 
-- CODE:
from numpy import *
from numpy.linalg import *
tabuleiro = array(eval(input("Tabuleiro: "))) # Leitura do tabuleiro
mov = input("Movimentos: ") # Sequencia de movimentos do personagem
xtab = 0	# Posicao inicial do personagem
ytab = 0
moeda = 0	# Contadores de atributos do personagem
life = 100
# Limites do tabuleiro
limcol = shape(tabuleiro)[1]	# Limites colunas
limlinh = shape(tabuleiro)[0]	# Limites linhas
# Analise da jogada
for x in mov:
	if(x == 'A'): 
		if(xtab-1 != -1):
			if(tabuleiro[ytab,xtab-1] != 33):
				xtab = xtab -1 # Move personagem para ESQUERDA
	elif(x == 'D'):     
		if(xtab+1 != limcol):
			if(tabuleiro[ytab,xtab+1]!=33):
				xtab =xtab +1 # Move personagem para DIREITA
	elif(x == 'W'): 
		if(ytab-1 != -1):
			if(tabuleiro[ytab-1,xtab]!=33):
				ytab = ytab -1	# Move personagem para CIMA
	elif x == 'S':
		if(ytab+1 != limlinh):
			if(tabuleiro[ytab+1,xtab]!=33):
				ytab = ytab + 1	# Move personagem para BAIXO

# Trata evento
	if tabuleiro[ytab,xtab] == 11:	# Moeda
		moeda =moeda +1 
		tabuleiro[ytab,xtab] = 0 # Apaga moeda do tabuleiro
	elif tabuleiro[ytab,xtab] == 22: 
		life = life - 5	# Zumbi


# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
1.04527
-- TEST CASE 1:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
DDDDDWWWWSSSSDDDWSWDSDWDDDDDDDDDSSSSSSSSSSSDDDDWSADSWASADSWASD
---- correct output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
---- user output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
-- TEST CASE 2:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
SAWSDADDDDDDDDDDSSSSSSSSSSSDDDDDDDWWWWWWWWAAAAAAAAAAWSDAASDSWADSAWSWD
---- correct output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
---- user output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
-- TEST CASE 3:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
AWSWDSSDSDSDSDSAWAWAWASDSDSSASASASWDWDWDWDWASWDAWSWDAWSDWSADSWASDWSAWWDSADWSAWSWDSAWSW
---- correct output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
---- user output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
