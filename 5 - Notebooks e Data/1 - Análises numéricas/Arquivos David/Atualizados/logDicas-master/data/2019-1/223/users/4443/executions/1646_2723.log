== TEST (2019-04-23 14:33:27) 
-- CODE:
#Leitura dos numeros inteiros
a = int(input("digite um numero inteiro a: "))
b = int(input("digite um numero inteiro b: "))
c = int(input("digite um numero inteiro c: "))

print(max(a, b, c))

-- OUTPUT:
788
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 14:33:38) 
-- CODE:
#Leitura dos numeros inteiros
a = int(input("digite um numero inteiro a: "))
b = int(input("digite um numero inteiro b: "))
c = int(input("digite um numero inteiro c: "))

print(max(a, b, c))

-- EXECUTION TIME:
0.173341
-- TEST CASE 1:
---- input:
258
788
35
---- correct output:
788
---- user output:
788
-- TEST CASE 2:
---- input:
99
55
77
---- correct output:
99
---- user output:
99
-- TEST CASE 3:
---- input:
123
456
789
---- correct output:
789
---- user output:
789
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:15:14) 
-- CODE:
#Leitura dos numeros inteiros
a = int(input("digite um numero inteiro a: "))
b = int(input("digite um numero inteiro b: "))
c = int(input("digite um numero inteiro c: "))

#print(max(a, b, c))

maior = a
if (a > b) and (a > c):
	maior = a
else:
	if (b > a) and (b > c):
		maior = b
	else:
		if (c > a) and (c > b):
			maior = c

print(maior)			

-- OUTPUT:
788
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:15:28) 
-- CODE:
#Leitura dos numeros inteiros
a = int(input("digite um numero inteiro a: "))
b = int(input("digite um numero inteiro b: "))
c = int(input("digite um numero inteiro c: "))

#print(max(a, b, c))

maior = a
if (a > b) and (a > c):
	maior = a
else:
	if (b > a) and (b > c):
		maior = b
	else:
		if (c > a) and (c > b):
			maior = c

print(maior)			

-- EXECUTION TIME:
0.149989
-- TEST CASE 1:
---- input:
258
788
35
---- correct output:
788
---- user output:
788
-- TEST CASE 2:
---- input:
99
55
77
---- correct output:
99
---- user output:
99
-- TEST CASE 3:
---- input:
123
456
789
---- correct output:
789
---- user output:
789
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
