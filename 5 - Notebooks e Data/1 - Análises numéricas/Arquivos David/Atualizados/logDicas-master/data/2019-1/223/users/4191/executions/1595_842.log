== TEST (2019-03-26 17:14:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("Numero 1"))
w=int(input("Numero 2"))
y=int(input("Numero 3"))
z=int(input("Numero 4"))
print(x+w+y+z)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:15:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("Numero 1"))
w=int(input("Numero 2"))
y=int(input("Numero 3"))
z=int(input("Numero 4"))
print(x+w+y+z)
-- EXECUTION TIME:
0.142702
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/842/main.py", line 5, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 17:15:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("Numero 1 "))
w=int(input("Numero 2 "))
y=int(input("Numero 3 "))
z=int(input("Numero 4 "))
print(x+w+y+z)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    w=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 17:15:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("Numero 1 "))
w=int(input("Numero 2 "))
y=int(input("Numero 3 "))
z=int(input("Numero 4 "))
print(x+w+y+z)
-- EXECUTION TIME:
0.186724
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/842/main.py", line 5, in <module>
    w=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:59:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos"))

q = num // 1 % 10
p = num // 10 % 10
u = num // 100 % 10
n = num // 1000 % 10

qpun=q+p+u+n

print (qpun)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 21:59:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos"))

q = num // 1 % 10
p = num // 10 % 10
u = num // 100 % 10
n = num // 1000 % 10

qpun=q+p+u+n

print (qpun)
-- EXECUTION TIME:
0.183791
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:27:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos"))

q = num // 1 % 10
p = num // 10 % 10
u = num // 100 % 10
n = num // 1000 % 10

qpun=q+p+u+n

print (qpun)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 10:28:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos"))

q = num // 1 % 10
p = num // 10 % 10
u = num // 100 % 10
n = num // 1000 % 10

qpun=q+p+u+n

print (qpun)
-- EXECUTION TIME:
0.128153
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
