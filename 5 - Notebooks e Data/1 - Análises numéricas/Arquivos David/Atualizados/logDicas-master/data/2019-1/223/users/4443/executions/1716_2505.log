== TEST (2019-05-11 11:40:47) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(1 < t < k):
	soma = x + -1*(-1**k)*(x**(2k+1))/factorial(2k+1)
	t = t+1
print(round(soma, 10))
-- ERROR:
File "XXXX", line 9
    soma = x + -1*(-1**k)*(x**(2k+1))/factorial(2k+1)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:41:13) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(1 < t < k):
	soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
	t = t+1
print(round(soma, 10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:41:55) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(1 < t < k):
	soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
	t = t+1
print(round(soma, 10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:45:50) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
	a = x
	b = -1*(-1**k)
	c = (x**(2*k+1))
	d = factorial(2*k+1)
	t = t+1
	print(a)
	print(b)
	print(c)
	print(d)
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:46:01) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
	a = x
	b = -1*(-1**k)
	c = (x**(2*k+1))
	d = factorial(2*k+1)
	t = t+1
	print(a)
	print(b)
	print(c)
	print(d)
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:46:23) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
	a = x
	b = -1*(-1**k)
	c = (x**(2*k+1))
	d = factorial(2*k+1)
	t = t+1
	print(a)
	print(b)
	print(c)
	print(d)
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:46:54) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
	a = x
	b = -1*(-1**k)
	c = (x**(2*k+1))
	d = factorial(2*k+1)
	t = t+1
print(a)
print(b)
print(c)
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(a)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:48:11) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(a)
print(b)
print(c)
print(d)
-- OUTPUT:
1.5707963267948966
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:49:29) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
#print(a)
#print(b)
#print(c)
print(d)
-- OUTPUT:
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:50:07) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
#print(a)
#print(b)
print(c)
print(d)
-- OUTPUT:
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:50:52) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
#print(a)
print(b)
print(c)
print(d)
-- OUTPUT:
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:51:06) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(a)
print(b)
print(c)
print(d)
-- OUTPUT:
1.5707963267948966
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:52:19) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(a*b)
print(c/)
-- ERROR:
File "XXXX", line 16
    print(c/)
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:52:26) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(a*b)
print(c/d)
-- OUTPUT:
1.5707963267948966
3.598843235212084e-06
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:53:40) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print((a*b)/(c/d)
-- ERROR:
File "XXXX", line 16
    
                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:53:51) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print((a*b)/(c/d))
-- OUTPUT:
436472.5619126135
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:54:35) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print((a*b)/(c/d))
-- OUTPUT:
436472.5619126135
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:56:16) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
#print((a*b)/(c/d))
print(a)
print(b)
print(c)
print(d)
-- OUTPUT:
1.5707963267948966
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:59:17) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print((b*c)/d))
print(a)
print(b)
print(c)
print(d)
-- ERROR:
File "XXXX", line 15
    print((b*c)/d))
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 11:59:47) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print((b*c)/d)
print(a)
print(b)
print(c)
print(d)
-- OUTPUT:
3.598843235212084e-06
1.5707963267948966
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 12:00:25) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(a+((b*c)/d))
print(a)
print(b)
print(c)
print(d)
-- OUTPUT:
1.5707999256381318
1.5707963267948966
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 12:02:28) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
a = x
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(a+((b*c)/d))
print(a)
print(b)
print(c)
print(d)
-- OUTPUT:
1.5707999256381318
1.5707963267948966
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:08:39) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
b = -1*(-1**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(x)
print(k)
print(b)
print(c)
print(d)
#print((b*c)/d)
-- OUTPUT:
1.5707963267948966
5
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:09:51) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
b = -1*((-1)**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(x)
print(k)
print(b)
print(c)
print(d)
#print((b*c)/d)
-- OUTPUT:
1.5707963267948966
5
1
143.6543056513137
39916800
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:10:31) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
b = -1*((-1)**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(x)
print(k)
print(b)
print(c)
print(d)
print((b*c)/d)
-- OUTPUT:
1.5707963267948966
5
1
143.6543056513137
39916800
3.598843235212084e-06
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:12:10) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
b = -1*((-1)**k)
c = (x**(2*k+1))
d = factorial(2*k+1)
#	t = t+1
print(x)
print(k)
print(b)
print(c)
print(d)
print((b*c)/d)
-- OUTPUT:
1.5707963267948966
5
1
143.6543056513137
39916800
3.598843235212084e-06
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:16:32) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
#	t = t+1
print(x)
print(k)
print(b)
print(c)
print(d)
print((b*c)/d)
-- OUTPUT:
1.5707963267948966
5
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:17:22) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
t=1
#while(1 < t < k):
	#soma = x + -1*(-1**k)*(x**(2*k+1))/factorial(2*k+1)
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
#	t = t+1
print(x)
print(k)
print(b)
print(c)
print(d)
print(x+((b*c)/d))
-- OUTPUT:
1.5707963267948966
5
1
58.22089713563711
362880
1.5709567679796839
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:19:57) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
#while(1 < t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x+((b*c)/d))
-- ERROR:
File "XXXX", line 9
    soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:20:16) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(1 < t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x+((b*c)/d))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    print(x+((b*c)/d))
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:21:04) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(1 < t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(round(soma, 10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:21:38) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(1 < t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:22:01) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(1 < t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:24:19) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:24:37) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:24:46) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:25:23) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:26:55) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:27:46) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:27:58) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:28:16) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:28:47) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=0
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:28:56) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=0
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:29:44) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:30:11) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
5
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:30:33) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(x)
print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
5
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:31:27) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(k)
print(x)
print(t)
print(round(soma, 10))
-- OUTPUT:
5
1.5707963267948966
5
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:31:40) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(k)
print(x)
print(t)
print(round(soma, 10))
-- OUTPUT:
5
1.5707963267948966
5
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:38:44) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
#t=1
#while(t < k):
soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
5
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:40:05) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
#t=1
#while(t < k):
soma = x + -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:43:37) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=x
#t=1
#while(t < k):
soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:44:14) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=0
#t=1
#while(t < k):
soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:44:28) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#soma=0
#t=1
#while(t < k):
soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:45:02) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=0
t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:45:36) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=0
t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:46:25) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:46:49) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma=x
t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
-- OUTPUT:
1.5707963267948966
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:49:08) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = x + soma
   
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
print(senx)
-- OUTPUT:
1.5707963267948966
0.0001604412
1.5709567679796839
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:49:30) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = x + soma
   
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
print(round(soma, 10))
print(senx)
-- OUTPUT:
1.5707963267948966
0.0001604412
1.5709567679796839
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:50:40) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = x + soma
   
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
#print(round(soma, 10))
print(senx)
-- OUTPUT:
1.5707963267948966
1.5709567679796839
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:50:51) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = x + soma
   
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
#print(round(soma, 10))
print(senx)
-- OUTPUT:
1.5707963267948966
1.5709567679796839
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:51:08) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = x + soma
   
#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
	t = t+1
#print(x)
#print(k)
#print(b)
#print(c)
#print(d)
#print(k)
print(x)
#print(t)
#print(round(soma, 10))
print(senx)
-- OUTPUT:
1.5707963267948966
1.5709567679796839
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:53:00) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#senx = x
#t=1
#while(t < k):
#	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)

   
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
#	t = t+1
print(b)
print(c)
print(d)
print(x)
#print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
1.5707963267948966
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:53:21) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#senx = x
#t=1
#while(t < k):
#	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)

   
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
#	t = t+1
print(b)
print(c)
print(d)
print(x)
#print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
1.5707963267948966
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:54:47) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#senx = x
#t=1
#while(t < k):
#	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)

   
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
#	t = t+1
print(b)
print(c)
print(d)
print((b/c)/d)
#print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
4.733235071899641e-08
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:55:41) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#senx = x
#t=1
#while(t < k):
#	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)

   
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
#	t = t+1
print(b)
print(c)
print(d)
print((b*c)/d)
#print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:55:51) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#senx = x
#t=1
#while(t < k):
#	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)

   
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
#	t = t+1
print(b)
print(c)
print(d)
print((b*c)/d)
#print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:01:39) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = x
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
#	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:01:46) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = x
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
#	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:01:58) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = x
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
#	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:02:09) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = x
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
#	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:02:18) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = x
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
#	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:02:41) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = x
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:02:56) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = x
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:03:35) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = 0
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:03:47) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

soma = 0
t=1
while(t < k):
	senx = x
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:05:26) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
while(t <= k):
	soma = x + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:06:05) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
soma = x
while(t <= k):
	soma = (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:06:14) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
soma = x
while(t <= k):
	soma = (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:06:29) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
soma = x
while(t <= k):
	soma = (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:07:24) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t <= k):
	soma = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:08:05) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	senx = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(soma, 10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 20, in <module>
    print(round(soma, 10))
NameError: name 'soma' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:08:22) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	senx = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:08:37) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	senx = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:08:49) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	senx = senx + (-1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1))

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:12:47) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:12:54) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:13:03) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:13:14) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:14:12) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

t=1
senx = x
while(t < k):
	soma = -1*((-1)**k)*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma

#b = -1*((-1)**k)
#c = (x**(2*k-1))
#d = factorial(2*k-1)
#y = (b*c)/d
	t = t+1
#print(b)
#print(c)
#print(d)
#print((b*c)/d)
print(round(senx, 10))

-- OUTPUT:
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:17:19) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#t=1
#senx = x
#while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
y = (b*c)/d

#	senx = senx + soma
#	t = t+1
print(b)
print(c)
print(d)
print(y)
#print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:17:32) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#t=1
#senx = x
#while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
y = (b*c)/d

#	senx = senx + soma
#	t = t+1
print(b)
print(c)
print(d)
print(y)
#print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:17:47) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

#t=1
#senx = x
#while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
b = -1*((-1)**k)
c = (x**(2*k-1))
d = factorial(2*k-1)
y = (b*c)/d

#	senx = senx + soma
#	t = t+1
print(b)
print(c)
print(d)
print(y)
#print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:22:26) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = x + y
	t = t+1
print(b)
print(c)
print(d)
print(y)
print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:23:02) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = x + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:23:13) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = x + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:23:39) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = x + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:25:01) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1
58.22089713563711
362880
0.00016044118478735975
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:26:14) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))
print(round(senx, 10))
-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
1
58.22089713563711
362880
0.00016044118478735975
1.5711172092
1
58.22089713563711
362880
0.00016044118478735975
1.5712776503
1
58.22089713563711
362880
0.00016044118478735975
1.5714380915
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:26:26) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))
print(round(senx, 10))
-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
1
58.22089713563711
362880
0.00016044118478735975
1.5711172092
1
58.22089713563711
362880
0.00016044118478735975
1.5712776503
1
58.22089713563711
362880
0.00016044118478735975
1.5714380915
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:26:46) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))
senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))
print(round(senx, 10))
-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
1
58.22089713563711
362880
0.00016044118478735975
1.5711172092
1
58.22089713563711
362880
0.00016044118478735975
1.5712776503
1
58.22089713563711
362880
0.00016044118478735975
1.5714380915
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:35:33) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = -1*((-1)**k)
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx + y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
1
58.22089713563711
362880
0.00016044118478735975
1.570956768
1
58.22089713563711
362880
0.00016044118478735975
1.5711172092
1
58.22089713563711
362880
0.00016044118478735975
1.5712776503
1
58.22089713563711
362880
0.00016044118478735975
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:38:27) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
1.570956768
-1
58.22089713563711
362880
-0.00016044118478735975
1.5711172092
-1
58.22089713563711
362880
-0.00016044118478735975
1.5712776503
-1
58.22089713563711
362880
-0.00016044118478735975
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:38:43) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
1.570956768
-1
58.22089713563711
362880
-0.00016044118478735975
1.5711172092
-1
58.22089713563711
362880
-0.00016044118478735975
1.5712776503
-1
58.22089713563711
362880
-0.00016044118478735975
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:38:52) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
1.570956768
-1
58.22089713563711
362880
-0.00016044118478735975
1.5711172092
-1
58.22089713563711
362880
-0.00016044118478735975
1.5712776503
-1
58.22089713563711
362880
-0.00016044118478735975
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:40:20) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:40:39) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:40:45) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:40:55) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:42:58) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:43:10) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:43:43) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
1.570956768
-1
58.22089713563711
362880
-0.00016044118478735975
1.5711172092
-1
58.22089713563711
362880
-0.00016044118478735975
1.5712776503
-1
58.22089713563711
362880
-0.00016044118478735975
1.5714380915
-1
58.22089713563711
362880
-0.00016044118478735975
1.5715985327
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:44:07) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:44:21) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
0.0001604412
-1
58.22089713563711
362880
-0.00016044118478735975
0.0003208824
-1
58.22089713563711
362880
-0.00016044118478735975
0.0004813236
-1
58.22089713563711
362880
-0.00016044118478735975
0.0006417647
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:45:04) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t <= k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
	print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
1.570956768
-1
58.22089713563711
362880
-0.00016044118478735975
1.5711172092
-1
58.22089713563711
362880
-0.00016044118478735975
1.5712776503
-1
58.22089713563711
362880
-0.00016044118478735975
1.5714380915
-1
58.22089713563711
362880
-0.00016044118478735975
1.5715985327
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:48:17) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:48:55) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x
t=1
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
1.5714380915
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:57:46) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:57:54) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 14:58:10) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	#soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	b = (-1)**k
	c = (x**(2*k-1))
	d = factorial(2*k-1)
	y = (b*c)/d
	senx = senx - y
	t = t+1
	print(b)
	print(c)
	print(d)
	print(y)
print(round(senx, 10))

-- OUTPUT:
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
-1
58.22089713563711
362880
-0.00016044118478735975
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:01:08) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	soma = senx - (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
-0.0049736767
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:02:45) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx - soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
-0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:03:22) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:03:37) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:03:46) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:04:31) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = 0
t=0
while(t < k):
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	t = t+1
	senx = senx + soma
	
print(round(senx, 10))

-- OUTPUT:
0.0008022059
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:07:54) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=0
while(t < k):
	senx = 0
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:08:04) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=0
while(t < k):
	senx = 0
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:08:18) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=0
while(t < k):
	senx = 0
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:10:24) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=0
while(t < k):
	senx = x
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:10:33) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=0
while(t < k):
	senx = x
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx + soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 15:11:18) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))


t=0
while(t < k):
	senx = x
	soma = (-1*((-1)**k))*(x**(2*k-1))/factorial(2*k-1)
	senx = senx - soma
	t = t+1
print(round(senx, 10))

-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:53:06) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 0
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx - soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
0.5707927842
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:53:40) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 0
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
2.5707998694
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:54:34) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:54:52) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:55:00) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:55:15) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:55:24) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:55:38) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:55:51) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 19:56:10) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 19:56:21) 
-- CODE:
from math import *
#Entrada dos dados:
x = eval(input("Digite o angulo de x, em radianos: "))
k = int(input("Digite um numero natural maior do que zero: "))

senx = x 
i = 1
while(i < k):
	soma = ((-1)**i)*(x**(2*i+1))/factorial(2*i+1)
	senx = senx + soma
	i = i+1
print(round(senx, 10))

-- EXECUTION TIME:
0.203116
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
