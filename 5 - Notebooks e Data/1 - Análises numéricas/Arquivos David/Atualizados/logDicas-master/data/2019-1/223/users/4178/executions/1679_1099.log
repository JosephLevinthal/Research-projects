== TEST (2019-04-22 12:16:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
print(msg)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(msg)	
NameError: name 'msg' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 12:26:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a != b != c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 12:26:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a != b != c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-22 12:26:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a != b != c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:08:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or b == c != a or a == c != a
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- ERROR:
File "XXXX", line 10
    elif a == b != c or b == c != a or a == c != a
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:08:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or b == c != a or a == c != a:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:09:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or b == c != a or a == c != a:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:09:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or b == c != a or a == c != a:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- EXECUTION TIME:
0.143298
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Etradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Etradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:10:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != b == c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:10:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != b == c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 12:11:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != b == c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- EXECUTION TIME:
0.14399
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Etradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Etradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 12:11:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != b == c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:18:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b and  c or b == a and c
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- ERROR:
File "XXXX", line 10
    elif a == b and  c or b == a and c
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:19:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a < 0 or b < 0 or c < 0 c:
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- ERROR:
File "XXXX", line 10
    elif a < 0 or b < 0 or c < 0 c:
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:19:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a < 0 or b < 0 or c < 0 :
	msg =  "escaleno"
else:
	msg = "invalido"
print("Etradas:", a,",",b,",",c)	
print("Tipo de triangulo:", msg)

-- OUTPUT:
Etradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:26:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c 
   msg = "invalido"
print(msg)	
-- ERROR:
File "XXXX", line 12
    elif a != b or b != c 
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:27:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print(msg)	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:27:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print(msg)	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 16:27:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print(msg)	
-- EXECUTION TIME:
0.200925
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:27:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print(msg)	
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:30:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 16:30:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.185827
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:30:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:30:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a == b != c or a == c != b or b == c != a:
	msg = "escaleno"
elif a != b or b != c :
   msg = "invalido"
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:32:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a != c or  a != b or  c != b:
	msg = "escaleno"
else:
   msg = "invalido"
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:34:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a != c or  a != b or  c != b:
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 16:34:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a != c or  a != b or  c != b:
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.217779
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 16:34:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a != c or  a != b or  c != b:
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:17:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a >= b + c or b >= a + c or c >= a + b 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.13622
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 10
    elif a >= b + c or b >= a + c or c >= a + b 
                                               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:17:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a >= b + c or b >= a + c or c >= a + b 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- ERROR:
File "XXXX", line 10
    elif a >= b + c or b >= a + c or c >= a + b 
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:17:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a >= b + c or b >= a + c or c >= a + b: 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:18:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b == c:
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a >= b + c or b >= a + c or c >= a + b: 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.16586
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:19:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b and c == a :
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a >= b + c or b >= a + c or c >= a + b: 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:20:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b and b == c :
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a >= b + c or b >= a + c or c >= a + b: 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.201631
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:20:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if a == b and b == c :
	msg = "equilatero"
elif a == b or c == b or a == c:
	msg = "isosceles"
elif a >= b + c or b >= a + c or c >= a + b: 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:08:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"
elif (a >= b + c) or (b >= a + c) or (c >= a + b): 
	msg = "invalido"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:08:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a >= b + c) or (b >= a + c) or (c >= a + b): 
	msg = "invalido"
if (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"

else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:08:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a >= b + c) or (b >= a + c) or (c >= a + b): 
	msg = "invalido"
if (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"

else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.18853
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:09:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a >= b + c) or (b >= a + c) or (c >= a + b): 
	msg = "invalido"
if (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:09:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a >= b + c) or (b >= a + c) or (c >= a + b): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.20555
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:09:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a >= b + c) or (b >= a + c) or (c >= a + b): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:10:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > a + c) or (c > a + b): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:10:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > a + c) or (c > a + b): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (c == b) or (a == c):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.144529
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:12:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > c + a) or (c > b + a): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (b == c) or (c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:12:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > c + a) or (c > b + a): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (b == c) or (c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.135799
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:12:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > c + a) or (c > b + a): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (b == c) or (c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:12:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > c + a) or (c > b + a): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (b == c) or (c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:12:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > c + a) or (c > b + a): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (b == c) or (c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:12:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c) or (b > c + a) or (c > b + a): 
	msg = "invalido"
elif (a == b) and (b == c) :
	msg = "equilatero"
elif (a == b) or (b == c) or (c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:13:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if ((a > b + c) or (b > c + a) or (c > b + a)): 
	msg = "invalido"
elif ((a == b) and (b == c)) :
	msg = "equilatero"
elif ((a == b) or (b == c) or (c == a)):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:14:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if ((a > b + c) or (b > c + a) or (c > b + a)): 
	msg = "invalido"
elif ((a == b) and (b == c)) :
	msg = "equilatero"
elif ((a == b) or (b == c) or (c == a)):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.168512
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:15:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c or b > c + a or c > b + a): 
	msg = "invalido"
elif (a == b and b == c) :
	msg = "equilatero"
elif (a == b or b == c or c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- OUTPUT:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:15:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("Valor A : "))
b= float(input("Valor B : "))
c= float(input("Valor C : "))
if (a > b + c or b > c + a or c > b + a): 
	msg = "invalido"
elif (a == b and b == c) :
	msg = "equilatero"
elif (a == b or b == c or c == a):
	msg = "isosceles"
else:
	msg = "escaleno"	
print("Entrada:",a, ",",b,",",c)
print("Tipo de triangulo:",msg)	
-- EXECUTION TIME:
0.141186
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
