== TEST (2019-04-23 17:37:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input "A: ")

-- ERROR:
File "XXXX", line 3
    A = float(input "A: ")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:38:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A:"))

-- ERROR:
File "XXXX", line 3
    A = float(input "A: ")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:39:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

-- ERROR:
File "XXXX", line 3
    A = float(input "A: ")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:27:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print(invalido)
else (A==B) and (A==C):
	print(equilatero)
-- ERROR:
File "XXXX", line 9
    else (A==B) and (A==C):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:27:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print(invalido)
else ((A==B) and (A==C)):
	print(equilatero)
-- ERROR:
File "XXXX", line 9
    else ((A==B) and (A==C)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:28:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print(invalido)
else:
	if((A==B) and (A==C)):
	print(equilatero)
-- ERROR:
File "XXXX", line 11
    print(equilatero)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:28:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("invalido")
else:
	if((A==B) and (A==C)):
	print("equilatero")
-- ERROR:
File "XXXX", line 11
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:29:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("invalido")
else:
	if((A==B) and (A==C)):
		print("equilatero")
-- ERROR:
File "XXXX", line 11
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:31:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("invalido")
else:
	if((A==B) and (A==C)):
		print("equilatero")
-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:39:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("Tipo de Triangulo: invalido")
else:
	if((A==B) and (B==C)):
		print("Tipo de Triangulo: equilatero")
		else:
			if((A==B) or (B==C) or (C==A)):
				print("Tipo de triangulo: isosceles")

-- ERROR:
File "XXXX", line 13
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:40:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("Tipo de Triangulo: invalido")
else:
	if((A==B) and (B==C)):
		print("Tipo de Triangulo: equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			print("Tipo de triangulo: isosceles")

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:42:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B) and (B==C)):
		print("Tipo de triangulo: equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: escaleno")

-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:42:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B) and (B==C)):
		print("Tipo de triangulo: equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:43:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B) and (B==C)):
		print("Tipo de triangulo: equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

-- EXECUTION TIME:
0.13566
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:45:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	print("Tipo de triangulo: invalido")
else:
	if((A==B) and (B==C)):
		print("Tipo de triangulo: equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:05:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")

-- OUTPUT:
Entradas: 2.0 4.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:06:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print(mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:07:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:07:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))
print("Entradas:", A, B, C)

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.132145
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:08:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:08:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:09:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:09:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:09:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.152344
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:11:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.144446
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:11:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:11:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:11:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:11:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.118233
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:13:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<=B+C)or(B<=A+C)or(C<=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.12613
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:13:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<B+C)or(B<A+C)or(C<B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.157363
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:13:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<B+C)or(B<A+C)or(C<B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:13:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<=B+C)or(B<=A+C)or(C<=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:15:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A==B) and (B==C)):
		mensagem = ("equilatero")
else:
	if((A==B) or (B==C) or (C==A)):
		mensagem = ("isosceles")
	else:
		mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.185778
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:15:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<=B+C)or(B<=A+C)or(C<=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:16:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:16:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.123047
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:18:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:20:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", lower.(),mensagem)

-- ERROR:
File "XXXX", line 18
    print("Tipo de triangulo:", lower.(),mensagem)
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:26:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<=B+C)or(B<=A+C)or(C<=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:27:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:27:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A>=B+C)or(B>=A+C)or(C>=B+A)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- EXECUTION TIME:
0.140876
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:32:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<0)or(B<0)or(C<0)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:33:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<0)or(B<0)or(C<0)or(A>=B+C)or(B>=A+C)or(C>=A+B)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:34:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<0)or(B<0)or(C<0)or(A>=B+C)or(B>=A+C)or(C>=A+B)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:34:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<0)or(B<0)or(C<0)or(A>=B+C)or(B>=A+C)or(C>=A+B)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- EXECUTION TIME:
0.183055
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:35:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("A: "))
B = float(input("B: "))
C = float(input("C: "))

if((A<0)or(B<0)or(C<0)or(A>=B+C)or(B>=A+C)or(C>=A+B)):
	mensagem = ("invalido")
else:
	if((A==B) and (B==C)):
		mensagem = ("equilatero")
	else:
		if((A==B) or (B==C) or (C==A)):
			mensagem = ("isosceles")
		else:
			mensagem = ("escaleno")
print("Entradas:", A, B, C)
print("Tipo de triangulo:", mensagem.lower())

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:49:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = equilatero
else:
	if((a=b)or(b=c)or(c=a)):
		mensagem = isosceles
	else:
		mensagem = escaleno
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = invalido

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
File "XXXX", line 9
    if((a=b)or(b=c)or(c=a)):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:50:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = equilatero
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = isosceles
	else:
		mensagem = escaleno
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = invalido

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    mensagem = isosceles
NameError: name 'isosceles' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:50:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:51:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:51:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:51:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:51:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.214041
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:52:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:53:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:53:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.137192
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:53:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:55:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
	if((a==b)or(b==c)or(c==a)):
		mensagem = "isosceles"
	else:
		mensagem = "escaleno"
		if((a>=b+c)or(b>=a+c)or(c>=a+b)):
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:12:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
	if((a>b+c)or(b>a+c)or(c>a+b)):
		if((a!=b)or(b!=c)or(c!=a)):
		mensagem = "escaleno"
	else:
		if((a==b)or(b==c)or(c==a)):
			mensagem = "isosceles"
	else:
		mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
File "XXXX", line 10
    mensagem = "escaleno"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:13:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
	if((a>b+c)or(b>a+c)or(c>a+b)):
		if((a!=b)or(b!=c)or(c!=a)):
		mensagem = "escaleno"
	else:
		if((a==b)or(b==c)or(c==a)):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
File "XXXX", line 10
    mensagem = "escaleno"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:13:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
	if((a>b+c)or(b>a+c)or(c>a+b)):
		if((a!=b)or(b!=c)or(c!=a)):
			mensagem = "escaleno"
	else:
		if((a==b)or(b==c)or(c==a)):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo:", mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:15:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
	if((a>b+c)or(b>a+c)or(c>a+b)):
		if((a!=b)or(b!=c)or(c!=a)):
			mensagem = "escaleno"
	else:
		if((a!=b)or(b!=c):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
File "XXXX", line 12
    if((a!=b)or(b!=c):
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:15:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
	if((a>b+c)or(b>a+c)or(c>a+b)):
		if((a!=b)or(b!=c)or(c!=a)):
			mensagem = "escaleno"
	else:
		if((a!=b)or(b!=c)):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo:", mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:16:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
	else:
		if((a!=b)or(b!=c)):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
File "XXXX", line 8
    if((a>b+c)or(b>a+c)or(c>a+b)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:16:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
	if((a>b+c)or(b>a+c)or(c>a+b)):
		if((a!=b)or(b!=c)or(c!=a)):
			mensagem = "escaleno"
	else:
		if((a!=b)or(b!=c)):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    print("Tipo de triangulo:", mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:17:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
	else:
		if((a!=b)or(b!=c)):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
File "XXXX", line 12
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:17:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
else:
		if((a!=b)or(b!=c)):
			mensagem = "isosceles"
		else:
			mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:18:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
		else:
			if((a!=b)or(b!=c)):
				mensagem = "isosceles"
			else:
				mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:18:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
		else:
			if((a!=b)or(b!=c)):
				mensagem = "isosceles"
			else:
				mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 01:19:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
		else:
			if((a!=b)or(b!=c)):
				mensagem = "isosceles"
			else:
				mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.150878
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 01:19:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
		else:
			if((a!=b)or(b!=c)):
				mensagem = "isosceles"
			else:
				mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 02:44:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
		else:
			if((a!=b)or(b!=c)):
				mensagem = "isosceles"
			else:
				mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- OUTPUT:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 02:44:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
if((a==b)and(b==c)):
	mensagem = "equilatero"
else:
		if((a>b+c)or(b>a+c)or(c>a+b)):
			if((a!=b)or(b!=c)or(c!=a)):
				mensagem = "escaleno"
		else:
			if((a!=b)or(b!=c)):
				mensagem = "isosceles"
			else:
				mensagem = "invalido"

print("Entradas:", a, b, c)
print("Tipo de triangulo:", mensagem)

-- EXECUTION TIME:
0.212925
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 4.0 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 4.4 5.5
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 2.0 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:18:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
print("Entradas:", a, ",", b, ",", c)
if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
		if((a==b)and(b==c)):
			print("Tipo de triangulo: equilatero")
		else:
			if((a==b)or(b==c)or(c==a)):
				print("Tipo de triangulo: isosceles")
			else:
				print("Tipo de triangulo: escaleno")
-- ERROR:
File "XXXX", line 9
    if((a==b)and(b==c)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:19:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
print("Entradas:", a, ",", b, ",", c)
if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(c==a)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:20:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))
print("Entradas:", a, ",", b, ",", c)
if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Tipo de triangulo: invalido")
	if((a==b)and(b==c)):
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(c==a)):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:20:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))

if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo: invalido")
	if((a==b)and(b==c)):
		print("Entradas:", a, ",", b, ",", c)
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(c==a)):
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 11:21:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))

if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo: invalido")
	if((a==b)and(b==c)):
		print("Entradas:", a, ",", b, ",", c)
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(c==a)):
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.234701
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:22:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))

if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Entradas:", a, ",", b, ",", c)
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(c==a)):
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:22:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))

if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Entradas:", a, ",", b, ",", c)
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(c==a)):
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: escaleno")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 11:22:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("A: "))
b = float(input("B: "))
c = float(input("C: "))

if((a>=b+c)or(b>=a+c)or(c>=a+b)):
	print("Entradas:", a, ",", b, ",", c)
	print("Tipo de triangulo: invalido")
else:
	if((a==b)and(b==c)):
		print("Entradas:", a, ",", b, ",", c)
		print("Tipo de triangulo: equilatero")
	else:
		if((a==b)or(b==c)or(c==a)):
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: isosceles")
		else:
			print("Entradas:", a, ",", b, ",", c)
			print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.188107
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
