== TEST (2019-04-09 12:37:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG=radians(float(input("angulo: ")))
DIST=float(input("distancia"))
g=9.8
R=(V)**2*(sin*(2*ANG)/g

r=19,9
t=abs(V-R)

if R==t:
			 mensagem="sim"
else:
			 mensagem="nao"
print=(mensagem)
	



-- ERROR:
File "XXXX", line 11
    r=19,9
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:38:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG=radians(float(input("angulo: ")))
DIST=float(input("distancia"))
 g= 9.8
R=(V)**2*sin*(2*ANG)/g

r=19,9
t=abs(V-R)

if R==t:
			 mensagem="sim"
else:
			 mensagem="nao"
print=(mensagem)
	



-- ERROR:
File "XXXX", line 8
    g= 9.8
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:38:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG=radians(float(input("angulo: ")))
DIST=float(input("distancia"))
 g= 9.8
R=(V)**2*sin*(2*ANG)/g

r=19,9
t=abs(V-R)

if R==t:
			 mensagem="sim"
else:
			 mensagem="nao"
print=(mensagem)
	



-- ERROR:
File "XXXX", line 8
    g= 9.8
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:38:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG=radians(float(input("angulo: ")))
DIST=float(input("distancia"))
 g= 9.8
R=(V)**2*sin*(2*ANG)/g

r=19,9
t=abs(V-R)

if R==t:
			 mensagem="sim"
else:
			 mensagem="nao"
print=(mensagem)
	



-- ERROR:
File "XXXX", line 8
    g= 9.8
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:39:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG= radians(float(input("angulo: ")))
DIST=float(input("distancia"))
g= 9.8
R=(V)**2*sin*(2*ANG)/g

r=19,9
t=abs(V-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R=(V)**2*sin*(2*ANG)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:39:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG= radians(float(input("angulo: ")))
DIST=float(input("distancia: "))
g= 9.8
R=(V)**2*sin*(2*ANG)/g

r=19,9
t=abs(V-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R=(V)**2*sin*(2*ANG)/g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:40:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG= radians(float(input("angulo: ")))
DIST=float(input("distancia: "))
g= 9.8
R=(V)**2*(sin*(2*ANG))/g

r=19,9
t=abs(V-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R=(V)**2*(sin*(2*ANG))/g
TypeError: unsupported operand type(s) for *: 'builtin_function_or_method' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:44:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG= radians(float(input("angulo: ")))
DIST=float(input("distancia: "))
g = 9.8
R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t=abs(V-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 12:44:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG= radians(float(input("angulo: ")))
DIST=float(input("distancia: "))
g = 9.8
R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t=abs(V-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- EXECUTION TIME:
0.1135
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:44:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG= radians(float(input("angulo: ")))
D=float(input("distancia: "))
g = 9.8
R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t=abs(D-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 12:44:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
V= float(input("velocidade inicial: "))
ANG= radians(float(input("angulo: ")))
D=float(input("distancia: "))
g = 9.8
R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t=abs(D-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- EXECUTION TIME:
0.118527
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 12:48:39) 
-- CODE:
from math import*

V= float(input("velocidade inicial: "))

ANG= radians(float(input("angulo: ")))

D=float(input("distancia: "))

g = 9.8

R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t= abs(D-R)

if (R==t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 13:06:59) 
-- CODE:
from math import*

V= float(input("velocidade inicial: "))

ANG= radians(float(input("angulo: ")))

D=float(input("distancia: "))

g = 9.8

R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t= abs(D-R)

if (R<t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 13:07:02) 
-- CODE:
from math import*

V= float(input("velocidade inicial: "))

ANG= radians(float(input("angulo: ")))

D=float(input("distancia: "))

g = 9.8

R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t= abs(D-R)

if (R<t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- EXECUTION TIME:
0.203878
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 13:07:08) 
-- CODE:
from math import*

V= float(input("velocidade inicial: "))

ANG= radians(float(input("angulo: ")))

D=float(input("distancia: "))

g = 9.8

R= (V) ** 2 * ( sin( 2  * ANG ) ) / g

r=19,9
t= abs(D-R)

if (R>t):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- EXECUTION TIME:
0.1354
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 13:09:00) 
-- CODE:
from math import*

V= float(input("velocidade inicial: "))

ANG= radians(float(input("angulo: ")))

D=float(input("distancia: "))

g = 9.8

R= (V) ** 2 * sin( 2  * ANG )  / g

t= abs(D-R)


if (t<0.1):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 13:10:17) 
-- CODE:
from math import*

V= float(input("velocidade inicial: "))

ANG= radians(float(input("angulo: ")))

D=float(input("distancia: "))

g = 9.8

R= (V) ** 2 * sin( 2  * ANG )  / g

t= abs(D-R)


if (t<0.1):
	men="sim"
else:
	men="nao"
	
print(men)
	
			



-- EXECUTION TIME:
0.182356
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
