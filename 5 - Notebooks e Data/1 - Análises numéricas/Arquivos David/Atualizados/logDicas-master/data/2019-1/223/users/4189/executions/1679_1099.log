== TEST (2019-04-25 16:31:13) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if((x>=y+z)and(y>=x+z)and(z>=x+y)):
	print("invalido")
elif(x==y)and(y==z):
	print("equilatero")
elif((x!=y)and(y!=z)and(z!=x)):
	print("escaleno")
elif((x!=y)or(y!=z)):
	print("isosceles")
else:
	print("invalido")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if((x>=y+z)and(y>=x+z)and(z>=x+y)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:33:20) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(( x >= y + z)and( y >= x + z)and(z >= x + y)):
	print("invalido")
elif(x==y)and(y==z):
	print("equilatero")
elif((x!=y)and(y!=z)and(z!=x)):
	print("escaleno")
elif((x!=y)or(y!=z)):
	print("isosceles")
else:
	print("invalido")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(( x >= y + z)and( y >= x + z)and(z >= x + y)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:33:54) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(( x >= y + z)or( y >= x + z)or(z >= x + y)):
	print("invalido")
elif(x==y)and(y==z):
	print("equilatero")
elif((x!=y)and(y!=z)and(z!=x)):
	print("escaleno")
elif((x!=y)or(y!=z)):
	print("isosceles")
else:
	print("invalido")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(( x >= y + z)or( y >= x + z)or(z >= x + y)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:36:24) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(( a >= b + c)or( b >= a + c)or(c >= a + b)):
	print("invalido")
elif(a==b)and(b==c):
	print("equilatero")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
elif((a!=b)or(b!=c)):
	print("isosceles")
else:
	print("invalido")
	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:36:47) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(( a >= b + c)or( b >= a + c)or(c >= a + b)):
	print("invalido")
elif(a==b)and(b==c):
	print("equilatero")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
elif((a!=b)or(b!=c)):
	print("isosceles")
else:
	print("invalido")
	
	
-- EXECUTION TIME:
0.207249
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:47:13) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(( a >= b + c)or( b >= a + c)or(c >= a + b)):
	print("invalido")
elif(a==b)and(b==c):
	print("equilatero")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
elif((a!=b)or(b!=c)):
	print("isosceles")
else:
	print("invalido")
	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:59:41) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(( a >= b + c)or( b >= a + c)or(c >= a + b)):
	print("invalido")
elif(a==b)and(b==c):
	print("equilatero")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
elif((a!=b)or(b!=c)):
	print("isosceles")
else:
	print("invalido")
	
	
-- EXECUTION TIME:
0.226743
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:05:53) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if((a==b)and(b==c)and(c==a)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:06:40) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if((a==b)and(b==c)and):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- EXECUTION TIME:
0.188254
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 5
    if((a==b)and(b==c)and):
                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:06:41) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if((a==b)and(b==c)and):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- EXECUTION TIME:
0.13636
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 5
    if((a==b)and(b==c)and):
                         ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:41) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if((a==b)and(b==c)and):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- ERROR:
File "XXXX", line 5
    if((a==b)and(b==c)and):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:48) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:55) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:10:00) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b)
  print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- ERROR:
File "XXXX", line 5
    if(a>=b+c)or(b>=a+c)or(c>=a+b)
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:10:05) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
  print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:10:11) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
  print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- EXECUTION TIME:
0.194468
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:10:21) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- EXECUTION TIME:
0.117976
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:10:28) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:10:33) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- EXECUTION TIME:
0.157036
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:11:02) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Tipo de triangulo:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- OUTPUT:
Tipo de triangulo: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:11:09) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Tipo de triangulo1:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("invalido")
elif((a==b)and(b==c)):
	print("equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("escaleno")
else:
	print("invalido")
	
	
-- OUTPUT:
Tipo de triangulo1: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:14:02) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- OUTPUT:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:16) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.139389
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:19) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.134762
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:20) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.160762
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:20) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.210773
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:20) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.174765
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:20) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.262514
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:20) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.289193
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:14:24) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- OUTPUT:
entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:14:36) 
-- CODE:
a = float(input("a:"))
b = float(input("b:"))
c = float(input("c:"))
print("Entradas:",a,",",b,",",c)
if(a>=b+c)or(b>=a+c)or(c>=a+b):
   print("Tipo de triangulo: invalido")
elif((a==b)and(b==c)):
	print("Tipo de triangulo:equilatero")
elif((a==b)or(b==c)or(c==a)):
	print("Tipo de triangulo: isosceles")
elif((a!=b)and(b!=c)and(c!=a)):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
	
	
	
-- EXECUTION TIME:
0.173794
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
