== TEST (2019-04-09 16:59:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= (5/100)*p
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 17:00:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= (5/1000)*p
else:
	pf= p
print(round(pf,2))
-- EXECUTION TIME:
0.160166
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
1.0
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 17:00:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= (5/1000)*p
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
1.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:13:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= p*5/100
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:13:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= p* (5/100)
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:14:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= (p* 5)/100
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:14:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= (p* 5)/100
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:37:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
if (p>=200):
	pf= p + p* (10/100)
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
220.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:45:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
desc= p * (5/100)
if (p>=200):
	pf= p- desc
else:
	pf= p
print(round(pf,2))
-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 08:46:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
p=float(input("Insira o valor das compras:"))
desc= p * (5/100)
if (p>=200):
	pf= p- desc
else:
	pf= p
print(round(pf,2))
-- EXECUTION TIME:
0.121946
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
