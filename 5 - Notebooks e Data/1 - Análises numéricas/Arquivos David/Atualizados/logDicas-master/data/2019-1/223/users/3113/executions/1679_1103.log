== TEST (2019-04-28 17:18:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		i=x, "pertence ao intervalo", a,b
		print(i)
	
	



-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:18:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		i=x+ " " + "pertence ao intervalo"+" " + a,b
		print(i)
	
	



-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:19:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		
		print(x, "pertence ao intervalo", a,b)
	
	



-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:19:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		
		print(x, "pertence ao intervalo", a","b)
	
	



-- ERROR:
File "XXXX", line 11
    print(x, "pertence ao intervalo", a","b)
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 17:19:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		
		print(x, "pertence ao intervalo", a",",b)
	
	



-- ERROR:
File "XXXX", line 11
    print(x, "pertence ao intervalo", a",",b)
                                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:43:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x, "pertence ao intervalo", a,b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, "e", b "invalidas")
	



-- ERROR:
File "XXXX", line 14
    print("Entradas", a, "e", b "invalidas")
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:44:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x, "pertence ao intervalo", a,b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b "invalidas")
	



-- ERROR:
File "XXXX", line 14
    print("Entradas", a, b "invalidas")
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:44:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x, "pertence ao intervalo", a,b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:44:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x, "pertence ao intervalo", a,b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:44:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x, "pertence ao intervalo", a,b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:44:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x, "pertence ao intervalo", a,b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:44:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x, "pertence ao intervalo", a,b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:45:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		r=x,"pertence ao intervalo",a +" " + b
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:46:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		r=x,"pertence ao intervalo",a +" " + b
		print(r)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:46:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		r=x,"pertence ao intervalo",a +" " + b
		print(r)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:46:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		r=x+" "+ "pertence ao intervalo"a +" " + b
		print(r)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- ERROR:
File "XXXX", line 10
    r=x+" "+ "pertence ao intervalo"a +" " + b
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:46:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		r=x+" "+ "pertence ao intervalo"a +" " + b
		print(r)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- ERROR:
File "XXXX", line 10
    r=x+" "+ "pertence ao intervalo"a +" " + b
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:48:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x,"pertence ao intervalo", a, ",", b)
		"Entradas:", a, ",", b, ",", c
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:48:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x,"pertence ao intervalo", a, ",", b)
	else:
		print(x, "nao pertence ao intervalo", a, b)
else:
	print("Entradas", a, b )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:49:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x,"pertence ao intervalo", a, ",", b)
	else:
		print(x, "nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a,"e", b,"invalidas" )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:49:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x,"pertence ao intervalo", a, ",", b)
	else:
		print(x, "nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a,"e", b,"invalidas" )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 18:49:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x,"pertence ao intervalo", a, ",", b)
	else:
		print(x, "nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a,"e", b,"invalidas" )
	



-- OUTPUT:
2.0 nao pertence ao intervalo 3.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 18:49:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input(""))
a=float(input(""))
b=float(input(""))

if(b>a):
	if(a<x<b):
		print(x,"pertence ao intervalo", a, ",", b)
	else:
		print(x, "nao pertence ao intervalo", a,",", b)
else:
	print("Entradas", a,"e", b,"invalidas" )
	



-- EXECUTION TIME:
0.192648
-- TEST CASE 1:
---- input:
2
3
4
---- correct output:
2.0 nao pertence ao intervalo 3.0 , 4.0
---- user output:
2.0 nao pertence ao intervalo 3.0 , 4.0
-- TEST CASE 2:
---- input:
5.5
6.5
3.5
---- correct output:
Entradas 6.5 e 3.5 invalidas
---- user output:
Entradas 6.5 e 3.5 invalidas
-- TEST CASE 3:
---- input:
6.5
1.1
22.2
---- correct output:
6.5 pertence ao intervalo 1.1 , 22.2
---- user output:
6.5 pertence ao intervalo 1.1 , 22.2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
