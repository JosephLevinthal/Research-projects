== TEST (2019-04-23 22:04:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite um numero: "))
b=float(input("digite um numero: "))
c=float(input("digite um numero: "))

if (a>0 and b>0 and c>0):
	if(a+b>c and b+c>a and a+c>b):
		if(a == b and b == c):
		   Tipo de triangulo:"equilatero"
		   print(Tipo de triangulo)
		elif(a == b or b == c or a == c):
			Tipo de triangulo:"isosceles"
			print(Tipo de triangulo)
		else:
			Tipo de triangulo:"escaleno"
			print(Tipo de triangulo)
	else:
		Tipo de triangulo:"invalido"
		print(Tipo de triangulo)
else:
	Tipo de triangulo:"invalido"
	print(Tipo de triangulo)	
			
-- ERROR:
File "XXXX", line 10
    Tipo de triangulo:"equilatero"
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:06:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a=float(input("digite um numero: "))
b=float(input("digite um numero: "))
c=float(input("digite um numero: "))

if (a>0 and b>0 and c>0):
	if(a+b>c and b+c>a and a+c>b):
		if(a == b and b == c):
		   Tipo de triangulo:"equilatero"
		   print("equilatero")
		elif(a == b or b == c or a == c):
			Tipo de triangulo:"isosceles"
			print(Tipo de triangulo)
		else:
			Tipo de triangulo:"escaleno"
			print(Tipo de triangulo)
	else:
		Tipo de triangulo:"invalido"
		print(Tipo de triangulo)
else:
	Tipo de triangulo:"invalido"
	print(Tipo de triangulo)	
			
-- ERROR:
File "XXXX", line 11
    Tipo de triangulo:"equilatero"
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:11:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a=float(input("digite um numero: "))
b=float(input("digite um numero: "))
c=float(input("digite um numero: "))

if (a>0 and b>0 and c>0):
	if(a+b>c and b+c>a and a+c>b):
		if(a == b and b == c):
		   print("Tipo de triangulo: equilatero")
		elif(a == b or b == c or a == c):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else: 
	print("Tipo de triangulo: invalido")	
			
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:13:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a=float(input("digite um numero: "))
b=float(input("digite um numero: "))
c=float(input("digite um numero: "))
print("Entradas:", a, ",", b, ",", c)

if (a>0 and b>0 and c>0):
	if(a+b>c and b+c>a and a+c>b):
		if(a == b and b == c):
		   print("Tipo de triangulo: equilatero")
		elif(a == b or b == c or a == c):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else: 
	print("Tipo de triangulo: invalido")	
			
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 22:14:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a=float(input("digite um numero: "))
b=float(input("digite um numero: "))
c=float(input("digite um numero: "))
print("Entradas:", a, ",", b, ",", c)

if (a>0 and b>0 and c>0):
	if(a+b>c and b+c>a and a+c>b):
		if(a == b and b == c):
		   print("Tipo de triangulo: equilatero")
		elif(a == b or b == c or a == c):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else: 
	print("Tipo de triangulo: invalido")	
			
-- EXECUTION TIME:
0.147331
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 23:38:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a=float(input("digite um numero: "))
b=float(input("digite um numero: "))
c=float(input("digite um numero: "))
print("Entradas:", a, ",", b, ",", c)

if (a>0 and b>0 and c>0):
	if(a+b>c and b+c>a and a+c>b):
		if(a == b and b == c):
		   print("Tipo de triangulo: equilatero")
		elif(a == b or b == c or a == c):
			print("Tipo de triangulo: isosceles")
		else:
			print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
else: 
	print("Tipo de triangulo: invalido")	
			
-- EXECUTION TIME:
0.166522
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
