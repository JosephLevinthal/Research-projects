== TEST (2019-04-18 01:58:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a >= 0 and b >= 0 and c >= 0):
	if (a == b == c):
		print("a")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:12:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0)

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.145973
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 17
    if (a < 0 or b < 0 or c < 0)
                               ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:12:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0)

print("Tipo de triangulo: ", t)

-- ERROR:
File "XXXX", line 17
    if (a < 0 or b < 0 or c < 0)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:12:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.184133
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Lado 1: Lado 2: Lado 3: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:12:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:13:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a < b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.160275
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:13:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a < b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:13:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a < b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:15:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.135473
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:15:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:15:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b or b != c or c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:16:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b != cor b != c != a or c != a != b):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.143211
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 15
    if (a != b != cor b != c != a or c != a != b):
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:16:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b != cor b != c != a or c != a != b):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- ERROR:
File "XXXX", line 15
    if (a != b != cor b != c != a or c != a != b):
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:16:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b != c or b != c != a or c != a != b):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:16:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b != c or b != c != a or c != a != b):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:16:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b != c or b != c != a or c != a != b):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.121956
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:16:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b != c or b != c != a or c != a != b):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:22:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.180732
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:22:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:23:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:23:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:23:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:25:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b != c or a != b == c or c == a != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:32:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and != c or b == c and != a or c == a and != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.168531
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 13
    if (a == b and != c or b == c and != a or c == a and != b):
                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:32:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and != c or b == c and != a or c == a and != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- ERROR:
File "XXXX", line 13
    if (a == b and != c or b == c and != a or c == a and != b):
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:32:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and a != c or b == c and b != a or c == a and c != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:32:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and a != c or b == c and b != a or c == a and c != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.171345
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:32:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and a != c or b == c and b != a or c == a and c != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"

print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 02:33:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and a != c or b == c and b != a or c == a and c != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c):
	t = "invalido"
print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 02:35:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and a != c or b == c and b != a or c == a and c != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c) or (b > a + c) or (c > a + b):
	t = "invalido"
print("Tipo de triangulo: ", t)

-- EXECUTION TIME:
0.188064
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:11:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída

a = float(input("Lado 1: "))
b = float(input("Lado 2: "))
c = float(input("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a == b == c):
	t = "equilatero"
if (a == b and a != c or b == c and b != a or c == a and c != b):
	t = "isosceles"
if (a != b and b != c and c != a):
	t = "escaleno"
if (a < 0 or b < 0 or c < 0) or (a > b + c) or (b > a + c) or (c > a + b):
	t = "invalido"
print("Tipo de triangulo: ", t)

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
