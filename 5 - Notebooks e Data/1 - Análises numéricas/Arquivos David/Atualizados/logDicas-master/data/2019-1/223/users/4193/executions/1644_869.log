== TEST (2019-04-16 14:02:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=inpu("vai receber  bonificacao?:")
if (b=="S")
 m=nota+nota*0.1
else:
 m=nota
print(m)

-- ERROR:
File "XXXX", line 6
    if (b=="S")
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:03:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
  m=nota+nota*0.1
else:
  m=nota
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:04:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
  m=nota+nota*0.1
else:
  m=nota
print(m)

-- EXECUTION TIME:
0.125797
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    b=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:05:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(m)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:05:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(m)

-- EXECUTION TIME:
0.147362
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    b=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:07:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(round(m , 2)

-- ERROR:
File "XXXX", line 11
    
                      ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:07:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(round(m , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:07:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(round(m , 2))

-- EXECUTION TIME:
0.156041
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    b=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:07:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(round(m , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:08:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(round(m , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:08:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+nota*0.1
else:
   m=nota
print(round(m , 2))

-- EXECUTION TIME:
0.251189
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    b=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:08:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+(nota*0.1)
else:
   m=nota
print(round(m , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:09:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+(nota*0.1)
else:
   m=nota
print(round(m , 2))

-- EXECUTION TIME:
0.129269
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    b=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:09:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+(nota*0.1)
else:
   m=nota
print(round(m , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:09:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
b=input("vai receber  bonificacao?:")
if (b=="S"):
   m=nota+(nota*0.1)
else:
   m=nota
print(round(m , 2))

-- EXECUTION TIME:
0.139939
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/869/main.py", line 5, in <module>
    b=input()
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:25:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
bonificacao=input("vai receber  bonificacao?:")
if (bonificao=="S"):
   mensagem=nota+(nota*0.1)
else:
   mensagem=nota
print(round(mensagem , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    bonificacao=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:25:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
bonificacao=input("vai receber  bonificacao?:")
if (bonificao=="S"):
   mensagem=nota+(nota*0.1)
else:
   mensagem=nota
print(round(mensagem , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    bonificacao=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:31:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nota=float(input("qual foi a nota ?:"))
bonificacao=input("vai receber  bonificacao?:")
if (bonificao=="S"):
   mensagem=nota+(nota*0.1)
else:
   mensagem=nota
print(round(mensagem , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    bonificacao=input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:36:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("qual o valor pago  ?:"))
if (valor== 5%):
   mensagem="sem desconto" 
else:
   mensagem="com desconto"
print(round(mensagem , 2))

-- ERROR:
File "XXXX", line 5
    if (valor== 5%):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:37:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("qual o valor pago  ?:"))
if (valor== 5):
   mensagem="sem desconto" 
else:
   mensagem="com desconto"
print(round(mensagem , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem , 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:39:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("qual o valor pago  ?:"))
if (valor== 5):
   mensagem="sem desconto" 
else:
   mensagem="com desconto"
print(round(mensagem , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem , 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:40:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("qual o valor pago  ?:"))
if (valor== 5):
   mensagem="sem desconto" 
else:
   mensagem="com desconto"
print(round(mensagem , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem , 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:51:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("qual o valor pago  ?:"))
if (valor== 5):
   mensagem="sem desconto" 
else:
   mensagem="com desconto"
print(round(mensagem , 2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(mensagem , 2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
