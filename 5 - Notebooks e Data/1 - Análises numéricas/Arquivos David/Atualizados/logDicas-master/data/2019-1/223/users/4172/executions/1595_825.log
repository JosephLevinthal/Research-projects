== TEST (2019-03-24 02:16:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input(fit=))
y=int(input(ft=))

print(x<y)
-- ERROR:
File "XXXX", line 4
    x=int(input(fit=))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:17:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("fit: "))
y=int(input("ft= "))

print(x<y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x=int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:17:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("fit: "))
y=int(input("ft= "))

print(x<y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    x=int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:23:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(pi.(r)**2)
-- ERROR:
File "XXXX", line 9
    print(pi.(r)**2)
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:23:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(pi.(r)**2,3))
-- ERROR:
File "XXXX", line 9
    print(round(pi.(r)**2,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:24:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(π(r)**2,3))
NameError: name 'π' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:25:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π.(r)**2,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π.(r)**2,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:26:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π(r)**2,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π(r)**2,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:26:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π(r)**3,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:26:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π(r)**3,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:27:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:27:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:27:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:27:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:27:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:28:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round((4/3)π(r)**3,3))
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:29:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round((4/3)π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(float(round((4/3)π(r)**3,3))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:30:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round((4/3)π(r)**3,3)))
-- ERROR:
File "XXXX", line 10
    print(float(round((4/3)π(r)**3,3)))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:30:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round((4/3)π(r)**3,3)))
-- ERROR:
File "XXXX", line 10
    print(float(round((4/3)π(r)**3,3)))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:30:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round((4/3)π(r)**3,3)))
-- ERROR:
File "XXXX", line 10
    print(float(round((4/3)π(r)**3,3)))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:30:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round((4/3)π(r)**3,3)))
-- ERROR:
File "XXXX", line 10
    print(float(round((4/3)π(r)**3,3)))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:30:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round((4/3)π(r)**3,3)))
-- ERROR:
File "XXXX", line 10
    print(float(round((4/3)π(r)**3,3)))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:30:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round((4/3)π(r)**3,3)))
-- ERROR:
File "XXXX", line 10
    print(float(round((4/3)π(r)**3,3)))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 02:35:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round(4/3 π (r)**3,3)))
-- EXECUTION TIME:
0.188726
-- ERROR:
  File "/home/codebench/codes/1595/825/main.py", line 10
    print(float(round(4/3 \u03c0 (r)**3,3)))
                          ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:35:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(float(round(4/3 π (r)**3,3)))
-- ERROR:
File "XXXX", line 10
    print(float(round(4/3 π (r)**3,3)))
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 02:35:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3 π (r)**3,3))
-- EXECUTION TIME:
0.239766
-- ERROR:
  File "/home/codebench/codes/1595/825/main.py", line 10
    print(round(4/3 \u03c0 (r)**3,3))
                    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:35:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3 π (r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3 π (r)**3,3))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 02:36:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π(r)**3,3))
-- EXECUTION TIME:
0.187333
-- ERROR:
  File "/home/codebench/codes/1595/825/main.py", line 10
    print(round(4/3\u03c0(r)**3,3))
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:36:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π(r)**3,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:36:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π*(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π*(r)**3,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:36:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π*(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π*(r)**3,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:36:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π(r)**2,3))
print(round(4/3π*(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π*(r)**3,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:36:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π*(r)**2,3))
print(round(4/3π*(r)**3,3))
-- ERROR:
File "XXXX", line 10
    print(round(4/3π*(r)**3,3))
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 02:37:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π*(r)**2,3))
print(round(4/3*π*(r)**3,3))
-- EXECUTION TIME:
0.121097
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 9, in <module>
    print(round(\u03c0*(r)**2,3))
NameError: name '\u03c0' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:37:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import pi

print(round(π*(r)**2,3))
print(round(4/3*π*(r)**3,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(round(π*(r)**2,3))
NameError: name 'π' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:41:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import*


print(round(pi(r)**2,3))
print(round(4/3pi(r)**3,3))
-- ERROR:
File "XXXX", line 11
    print(round(4/3pi(r)**3,3))
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:41:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import*


print(round(pi(r)**2,3))
print(round(4/3*pi*(r)**3,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(round(pi(r)**2,3))
TypeError: 'float' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:41:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import*


print(round(pi*(r)**2,3))
print(round(4/3*pi*(r)**3,3))
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 02:41:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import*


print(round(pi*(r)**2,3))
print(round(4/3*pi*(r)**3,3))
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 02:41:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import*


print(round(pi*(r)**2,3))
print(round(4/3*pi*(r)**3,3))
-- EXECUTION TIME:
0.127425
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 21:23:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import*#vagabundo, n precisa por o pi no final dessa linha,apenas na saida 


print(round(pi*(r)**2,3))
print(round(4/3*pi*(r)**3,3))
-- EXECUTION TIME:
0.128369
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 21:24:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

r=float(input("raio: "))

from math import*#vagabundo, n precisa por o pi no final dessa linha,apenas na saida 


print(round(pi*(r)**2,3))
print(round(4/3*pi*(r)**3,3))
-- EXECUTION TIME:
0.196332
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 13:02:45) 
-- CODE:
from math import*

ra=float(input("raio: "))

a=pi*(ra)**2
v=4/3*pi*(ra)**3
print(round(a,3))
print(round(v,3))






-- EXECUTION TIME:
0.203174
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
