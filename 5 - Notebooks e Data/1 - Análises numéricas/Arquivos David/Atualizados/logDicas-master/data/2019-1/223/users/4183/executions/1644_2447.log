== TEST (2019-04-05 12:32:20) 
-- CODE:
pc = float(input("Digite: "))
pg = float(input("Digite: "))
if (pc > pg):
	print("Falta X")
if (pc < pg):
	print("Troco de Y")
	
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:32:54) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
if (pc > pg):
	print("Falta X")
if (pc < pg):
	print("Troco de Y")
	
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 12:33:29) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
if (pc > pg):
	print("Falta X")
if (pc < pg):
	print("Troco de Y")
	
-- EXECUTION TIME:
0.219895
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta X
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de Y
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:34:20) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
if (pc > pg):
	print(round("Falta X",2))
if (pc < pg):
	print(round("Troco de Y"))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round("Falta X",2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:34:40) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
if (pc > pg):
	print(round("Falta X",2))
if (pc < pg):
	print(round("Troco de Y",2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    print(round("Falta X",2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:37:09) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = pc - pg
if (pc > pg):
	print(round("Falta"X,2))
if (pc < pg):
	print(round("Troco de"Y,2))
	
-- ERROR:
File "XXXX", line 5
    print(round("Falta"X,2))
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:37:28) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = pc - pg
if (pc > pg):
	print(round("Falta" + X,2))
if (pc < pg):
	print(round("Troco de" + Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(round("Falta" + X,2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:38:29) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = (pc - pg)
if (pc > pg):
	print(round("Falta" + X,2))
if (pc < pg):
	print(round("Troco de" + Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(round("Falta" + X,2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:40:21) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = (pc - pg)
if (pc > pg):
	print(round(("Falta" + X),2))
if (pc < pg):
	print(round(("Troco de" + Y),2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(round(("Falta" + X),2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:42:42) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = float(pc - pg)
if (pc > pg):
	print(round("Falta" + X,2))
if (pc < pg):
	print(round("Troco de" + Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(round("Falta" + X,2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:43:45) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = "pc - pg"
if (pc > pg):
	print(round("Falta" + X,2))
if (pc < pg):
	print(round("Troco de" + Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(round("Falta" + X,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:48:19) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = "pc - pg"
Y = "pg - pc"
x = "Falta" + X
y = "Troco de" + Y
if (pc > pg):
	print(round(x,2))
if (pc < pg):
	print(round(y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(x,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:51:47) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = ("Falta" + pc - pg)
Y = ("Troco de" + pg - pc)
if (pc > pg):
	print(round(x,2))
if (pc < pg):
	print(round(y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    X = ("Falta" + pc - pg)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:53:13) 
-- CODE:
pc = float(int(input("Digite o preco: ")))
pg = float(int(input("Digite o que foi pago: ")))
X = ("Falta" + pc - pg)
Y = ("Troco de" + pg - pc)
if (pc > pg):
	print(round(x,2))
if (pc < pg):
	print(round(y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    pc = float(int(input()))
ValueError: invalid literal for int() with base 10: '38.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:54:58) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = ("Falta X")
Y = ("Troco de Y")
if (pc > pg):
	print(round(X,2))
if (pc < pg):
	print(round(Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(X,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:56:36) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = Falta X
Y = Troco de Y
if (pc > pg):
	print(round(X,2))
if (pc < pg):
	print(round(Y,2))
	
-- ERROR:
File "XXXX", line 3
    X = Falta X
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:58:06) 
-- CODE:
pc = float(input("Digite o preco: "))
pg = float(input("Digite o que foi pago: "))
X = "Falta X"
Y = "Troco de Y"
x = X + (pc - pg)
y = Y + (pg - pc)
if (pc > pg):
	print(round(X,2))
if (pc < pg):
	print(round(Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = X + (pc - pg)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:58:29) 
-- CODE:
pc = input("Digite o preco: "))
pg = input("Digite o que foi pago: "))
X = "Falta X"
Y = "Troco de Y"
x = X + (pc - pg)
y = Y + (pg - pc)
if (pc > pg):
	print(round(X,2))
if (pc < pg):
	print(round(Y,2))
	
-- ERROR:
File "XXXX", line 1
    pc = input())
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:58:44) 
-- CODE:
pc = input("Digite o preco: ")
pg = input("Digite o que foi pago: ")
X = "Falta X"
Y = "Troco de Y"
x = X + (pc - pg)
y = Y + (pg - pc)
if (pc > pg):
	print(round(X,2))
if (pc < pg):
	print(round(Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = X + (pc - pg)
TypeError: unsupported operand type(s) for -: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:59:21) 
-- CODE:
pc = input("Digite o preco: ")
pg = input("Digite o que foi pago: ")
X = "Falta X"
Y = "Troco de Y"
x = X + (pc - pg)
y = Y + (pg - pc)
if (pc > pg):
	print(round(X,2))
if (pc < pg):
	print(round(Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = X + (pc - pg)
TypeError: unsupported operand type(s) for -: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 12:59:29) 
-- CODE:
pc = input("Digite o preco: ")
pg = input("Digite o que foi pago: ")
X = "Falta X"
Y = "Troco de Y"
x = X + (pc - pg)
y = Y + (pg - pc)
if (pc > pg):
	print(round(X,2))
if (pc < pg):
	print(round(Y,2))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = X + (pc - pg)
TypeError: unsupported operand type(s) for -: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 13:02:40) 
-- CODE:
price = float("Digite o preco: ")
paid = float("Digite o preco: ")
falta = price - paid
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    price = float("Digite o preco: ")
ValueError: could not convert string to float: 'Digite o preco: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 13:07:19) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
falta = price - paid
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    price = float("Digite o preco: ")
ValueError: could not convert string to float: 'Digite o preco: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 13:07:32) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
falta = price - paid
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    price = float("Digite o preco: ")
ValueError: could not convert string to float: 'Digite o preco: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 13:09:57) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
falta = price - paid
troco = paid - price
f = "Falta X" + falta
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    f = "Falta X" + falta
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 13:10:30) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
falta = float(price - paid)
troco = float(paid - price)
f = "Falta X" + falta
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    f = "Falta X" + falta
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 13:13:01) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" + X)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Falta" + X)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 13:14:30) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
satanas = "Falta"
X = price - paid
Y = paid - price
if (price > paid):
	print(satanas + X)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(satanas + X)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:19:33) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" X)
	
-- ERROR:
File "XXXX", line 6
    print("Falta" X)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:19:52) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o preco: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" + X)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Falta" + X)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:20:15) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" + X)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Falta" + X)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:21:17) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" ; X)
	
-- ERROR:
File "XXXX", line 6
    print("Falta" ; X)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:21:26) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , X)
	
-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:22:13) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , X)
else:
	print("Troco" , Y)
	
-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 21:22:23) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , X)
else:
	print("Troco" , Y)
	
-- EXECUTION TIME:
0.155722
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:23:47) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , round(X,2))
else:
	print("Troco" , round(Y,2))
	
-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:23:47) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , round(X,2))
else:
	print("Troco" , round(Y,2))
	
-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 21:23:57) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , round(X,2))
else:
	print("Troco" , round(Y,2))
	
-- EXECUTION TIME:
0.171138
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:25:10) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , round(X,2))
else:
	print("Troco de" , round(Y,2))
	
-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 21:25:22) 
-- CODE:
price = float(input("Digite o preco: "))
paid = float(input("Digite o pagamento: "))
X = price - paid
Y = paid - price
if (price > paid):
	print("Falta" , round(X,2))
else:
	print("Troco de" , round(Y,2))
	
-- EXECUTION TIME:
0.143752
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
