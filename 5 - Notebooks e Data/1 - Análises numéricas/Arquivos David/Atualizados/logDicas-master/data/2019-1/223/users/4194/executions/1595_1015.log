== TEST (2019-03-28 16:22:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(12))
var2=int(input(4))
var3=int(input(8))

-- OUTPUT:
1248
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:22:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(12))
var2=int(input(4))
var3=int(input(8))

-- OUTPUT:
1248
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:22:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(12))
var2=int(input(4))
var3=int(input(8))

-- OUTPUT:
1248
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:23:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(c))
var2=int(input(a))
var3=int(input(b))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1=int(input(c))
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:23:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(c))
var2=int(input(a))
var3=int(input(b))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1=int(input(c))
NameError: name 'c' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:24:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))


-- OUTPUT:
4812
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:24:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))


-- OUTPUT:
4812
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:24:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))


-- OUTPUT:
4812
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:18:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))
print (min(var1,var2,var3)
print (var1+var2+var3-var1-var3)
print (max(var1,var2,var3))

-- ERROR:
File "XXXX", line 8
    print (var1+var2+var3-var1-var3)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:19:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))
print (min(var1,var2,var3)
print (var2)
print (max(var1,var2,var3))

-- ERROR:
File "XXXX", line 8
    print (var2)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:20:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))
print (min(var1,var2,var3)
print (int(var2))
print (max(var1,var2,var3))

-- ERROR:
File "XXXX", line 8
    print (int(var2))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:20:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))
print (min(var1,var2,var3)
print (int((var1 + var2 + var3) - var1 - var3)
print (max(var1,var2,var3))

-- ERROR:
File "XXXX", line 8
    print (int((var1 + var2 + var3) - var1 - var3)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:21:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))
print (min(var1,var2,var3)
print(var1 + var2 + var3) - var1 - var3)
print (max(var1,var2,var3))

-- ERROR:
File "XXXX", line 8
    print(var1 + var2 + var3) - var1 - var3)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:24:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))
print (min(var1,var2,var3)
print (int(var1 + var2 + var3) - var1 - var3))
print (max(var1,var2,var3))

-- ERROR:
File "XXXX", line 8
    print (int(var1 + var2 + var3) - var1 - var3))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:52:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(4))
var2=int(input(8))
var3=int(input(12))
print (min(var1,var2,var3)
print (int(var1 + var2 + var3) - var1 - var3))
print (max(var1,var2,var3))

-- ERROR:
File "XXXX", line 8
    print (int(var1 + var2 + var3) - var1 - var3))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 21:38:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1=int(input("Digite um numero: "))
n2=int(input("Digite um segundo numero: "))
n3=int(input("Digite um terceiro numero: "))
print (min(n1,n2,n3))
print ((n1 + n2 + n3) - (min(n1,n2,n3) + max(n1,n2,n3)))
print (max(n1,n2,n3))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 21:39:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n1=int(input("Digite um numero: "))
n2=int(input("Digite um segundo numero: "))
n3=int(input("Digite um terceiro numero: "))
print (min(n1,n2,n3))
print ((n1 + n2 + n3) - (min(n1,n2,n3) + max(n1,n2,n3)))
print (max(n1,n2,n3))
-- EXECUTION TIME:
0.196469
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
