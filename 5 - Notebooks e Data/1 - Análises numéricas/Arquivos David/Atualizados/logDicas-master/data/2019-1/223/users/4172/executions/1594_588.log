== TEST (2019-03-27 21:40:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

Valor=int(input("quantidade a ser sacada= "))

valor1=valor//100		
resto1=valor1%100	
valor2=valor//50	
resto2=valor2%50	
valor3=valor//10	
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    valor1=valor//100		
NameError: name 'valor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:41:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%50	
valor3=alor//10	
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 21:41:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%50	
valor3=alor//10	
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- EXECUTION TIME:
0.226293
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
19
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:42:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%10
valor3=alor//10	
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:42:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%10
valor3=alor//10	
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:44:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%50
valor3=alor//10	
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:45:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%50
valor3=alor//10	
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:46:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%50
valor3=alor//10	
resto3=valor3%10	

print(resto1>0)
print(resto2>0)
print(resto3>0)













-- OUTPUT:
True
True
True
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:48:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100	
valor2=alor//50	
resto2=valor2%50
valor3=alor//10	
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- OUTPUT:
9
9
19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:48:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100	

valor2=alor//50	
resto2=valor2%50

valor3=alor//100	
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- OUTPUT:
9
9
19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:49:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100	

valor2= alor // 50	
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- OUTPUT:
9
9
19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:49:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100	

valor2= alor // 50	
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- OUTPUT:
9
9
19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:50:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%10

valor2= alor // 50	
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- OUTPUT:
9
9
19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:51:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3=resto2//10
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:52:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3=resto1//10
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 21:52:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3=resto1//10
resto3=valor3%10	

print(resto1)
print(resto3)
print(resto2)













-- EXECUTION TIME:
0.170259
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:52:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3= olor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    valor3= olor//10
NameError: name 'olor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:52:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3= alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 21:53:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3= alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- EXECUTION TIME:
0.172053
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:53:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3= alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 21:53:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3= alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- EXECUTION TIME:
0.194924
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 21:53:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50	
resto2= valor2 % 50

valor3= resto1//100
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:42:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50
resto2= valor2 % 50

valor3= resto1//100
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:42:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50
resto2= valor2 % 50

valor3= resto2//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:43:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-27 23:43:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- EXECUTION TIME:
0.18473
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:44:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= alor // 50
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:47:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:47:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= resto1 // 50
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:48:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= alor // 50
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:48:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= alor // 10
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
49
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:48:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= alor // 100
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:49:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= alor // 100
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:53:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

while(alor>0)

valor1=alor//100		
resto1=valor1%100

valor2= alor // 100
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- ERROR:
File "XXXX", line 7
    while(alor>0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:53:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

if(alor>0)

valor1=alor//100		
resto1=valor1%100

valor2= alor // 100
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- ERROR:
File "XXXX", line 7
    if(alor>0)
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-27 23:54:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

a=(alor>0)

valor1=alor//100		
resto1=valor1%100

valor2= alor // 100
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 12:32:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=alor//100		
resto1=valor1%100

valor2= alor // 100
resto2= valor2 % 50

valor3=alor//10
resto3=valor3%10	

print(resto1)
print(resto2)
print(resto3)













-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 12:36:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=(alor//100)%100	


valor2= (alor // 50)%50


valor3=(alor//10)%10
	

print(valor1)
print(valor2)
print(valor3)













-- EXECUTION TIME:
0.179948
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
19
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 12:39:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=(alor//100)%100	


valor2= (alor // 50)%50


valor3=(alor//10)%10
	

print(valor1)
print(valor2)
print(valor3)













-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 12:39:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))



valor1=(alor//100)%100	


valor2= (alor // 50)%50


valor3=(alor//10)%10
	

print(valor1)
print(valor2)
print(valor3)













-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 12:39:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=(alor//100)%100	

valor2= (alor // 50)%50

valor3=(alor//10)%10
	
print(valor1)
print(valor2)
print(valor3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 12:41:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=(alor//100)%100	

valor2= (alor // 50)%50

valor3=(alor//10)%10
	
print(valor1)
print(valor2)
print(valor3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-29 17:07:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=(alor//100)%100

valor2= (alor // 50)%50

valor3=(alor//10)%10
	
print(valor1)
print(valor2)
print(valor3)

-- EXECUTION TIME:
0.157207
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
19
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:07:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=(alor//100)%100

valor2= (alor // 50)%50

valor3=(alor//10)%10
	
print(valor1)
print(valor2)
print(valor3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:08:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=(alor//100)%100

valor2= (alor // 50)%50

valor3=(alor//10)%10
	
print(valor1)
print(valor2%50)
print(valor3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:10:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 50
resto2=valor1%50
valor3=alor//10
resto3=valor1%10
print(valor1)
print(valor2)
print(valor3)

-- OUTPUT:
9
19
99
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:11:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 10
resto2=valor1%50
valor3=alor//10
resto3=valor1%10
print(valor1)
print(valor2)
print(valor3)

-- OUTPUT:
9
99
99
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:11:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 50
resto2=valor1%50
valor3=alor//100
resto3=valor1%10
print(valor1)
print(valor2)
print(valor3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:12:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 100
resto2=valor1%50
valor3=alor//100
resto3=valor1%10
print(resto1)
print(resto2)
print(resto3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(resto1)
NameError: name 'resto1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:12:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 100
resto2=valor1%50
valor3=alor//100
resto3=valor1%10
print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 50
resto2=valor1%50
valor3=alor//10
resto3=valor1%10
print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:12:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 50
resto2=valor2%50
valor3=alor//10
resto3=valor3%10
print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:12:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 100
resto2=valor2%50
valor3=alor//100
resto3=valor3%10
print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-29 17:13:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada= "))

valor1=alor//100
resto=valor1%100
valor2= alor // 50
resto2=valor2%50
valor3=alor//10
resto3=valor3%10
print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:07:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

alor=int(input("quantidade a ser sacada: "))

valor1=alor//100
resto=valor1%100

valor2= alor // 50
resto2=valor2%50

valor3=alor//10
resto3=valor3%10

print(resto)
print(resto2)
print(resto3)

-- EXECUTION TIME:
0.219583
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
19
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 06:40:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

# Quantidade de notas de R$ 50
v= VAL// 100
resto = v % 100
# Valor restante a ser sacado com notas menores que R$ 50


# Quantidade de notas de R$ 10
v2 = VAL // 50
resto2 = v2 % 50
# Valor restante a ser sacado com notas menores que R$ 50
v3=VAL%10
resto3=v3//10


print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
19
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 06:45:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

v= VAL// 100
resto = v % 100

v2 = VAL // 100
resto2 = v2 % 50

v3=v3//10
resto3=v3%10

print(resto)
print(resto2)
print(resto3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    v3=v3//10
NameError: name 'v3' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 06:46:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

v= VAL// 100
resto = v % 100

v2 = VAL // 100
resto2 = v2 % 50

v3=VAL//10
resto3=v3%10

print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
9
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 06:47:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

v= VAL// 100
resto = v % 100

v2 = VAL // 10
resto2 = v2 % 50

v3=VAL//10
resto3=v3%10

print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
49
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 06:48:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

v= VAL// 100
resto = v % 100

v2 = VAL // 50
resto2 = v2 % 50

v3=VAL//10
resto3=v3%10

print(resto)
print(resto2)
print(resto3)

-- EXECUTION TIME:
0.228064
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
19
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:58:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

# Quantidade de notas de R$ 50
v= VAL// 100 
resto = v % 100
# Valor restante a ser sacado com notas menores que R$ 50


# Quantidade de notas de R$ 10
v2 = VAL // 50
resto2 = v2 % 50
# Valor restante a ser sacado com notas menores que R$ 50
v3=VAL%10
resto3=v3//10







print(resto)
print(resto2)
print(resto3)

-- EXECUTION TIME:
0.279262
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
19
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:59:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

# Quantidade de notas de R$ 50
v= VAL// 100 
resto = v % 100
# Valor restante a ser sacado com notas menores que R$ 50


# Quantidade de notas de R$ 10
v2 = VAL // 50
resto2 = v2 % 50
# Valor restante a ser sacado com notas menores que R$ 50
v3=VAL%10
resto3=v3//10







print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
19
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:59:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

# Quantidade de notas de R$ 50
v= VAL// 100 
resto = v % 100
# Valor restante a ser sacado com notas menores que R$ 50


# Quantidade de notas de R$ 10
v2 = VAL // 50
resto2 = v2 % 50
# Valor restante a ser sacado com notas menores que R$ 50
v3=VAL%10
resto3=v3//10







print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
19
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 13:16:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Use as mensagens de erro para corrigir seu codigo.

VAL = int(input("Qual o valor do saque: "))

# Quantidade de notas de R$ 50
v= VAL// 100 
resto = v % 100
# Valor restante a ser sacado com notas menores que R$ 50


# Quantidade de notas de R$ 10
v2 = VAL // 50
resto2 = v2 % 50
# Valor restante a ser sacado com notas menores que R$ 50
v3=VAL%10
resto3=v3//10







print(resto)
print(resto2)
print(resto3)

-- OUTPUT:
9
19
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:53:44) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

v= VAL// 100 
resto = v % 100

v2 = VAL // 50
resto2 = v2 % 50

v3=v2%10


print(resto)
print(resto2)
print(resto3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print(resto3)
NameError: name 'resto3' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:53:59) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

v= VAL// 100 
resto = v % 100

v2 = VAL // 50
resto2 = v2 % 50

v3=v2%10


print(resto)
print(resto2)
print(v3)

-- OUTPUT:
9
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:54:52) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))


v= VAL// 100 
resto = VAL % 100

v2 = VAL // 50
resto2 = v2 % 50

v3=v2%10


print(resto)
print(resto2)
print(v3)

-- OUTPUT:
90
19
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:57:35) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))
rv=VAL%100
 v= VAL// 100 
resto = rv % 100

v2 = vr // 50
resto2 = vr % 50

v3=vr%10


print(resto)
print(resto2)
print(v3)

-- ERROR:
File "XXXX", line 3
    v= VAL// 100 
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:57:50) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))
rv=VAL%100
 v= VAL// 100 
resto = rv % 100

v2 = vr // 50
resto2 = vr % 50

v3=vr %10


print(resto)
print(resto2)
print(v3)

-- ERROR:
File "XXXX", line 3
    v= VAL// 100 
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:58:01) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))
rv=VAL%100

v= VAL// 100 
resto = rv % 100

v2 = vr // 50
resto2 = vr % 50

v3=vr %10


print(resto)
print(resto2)
print(v3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v2 = vr // 50
NameError: name 'vr' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:58:22) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))
rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = vr // 50
resto2 = vr % 50

v3= vr % 10


print(resto)
print(resto2)
print(v3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v2 = vr // 50
NameError: name 'vr' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:58:51) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = vr // 50
resto2 = vr % 50

v3= vr % 10


print(resto)
print(resto2)
print(v3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    v2 = vr // 50
NameError: name 'vr' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 15:59:04) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = vr // 50
resto2 = v2 % 50

v3= vr % 10


print(resto)
print(resto2)
print(v3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    v2 = vr // 50
NameError: name 'vr' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:00:11) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv // 50
resto2 = v2 % 50

v3= rv % 10


print(resto) 
print(resto2)
print(v3)

-- OUTPUT:
90
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:00:34) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv // 50
resto2 = v2 % 50

v3= rv % 10


print(v) 
print(resto2)
print(v3)

-- EXECUTION TIME:
0.159247
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:00:36) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv // 50
resto2 = v2 % 50

v3= rv % 10


print(v) 
print(resto2)
print(v3)

-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:01:31) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = v // 50
resto2 = v2 % 50

v3= rv % 10


print(v) 
print(resto2)
print(v3)

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:01:42) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = val // 50
resto2 = v2 % 50

v3= rv % 10


print(v) 
print(resto2)
print(v3)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    v2 = val // 50
NameError: name 'val' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:01:52) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = VAL // 50
resto2 = v2 % 50

v3= rv % 10


print(v) 
print(resto2)
print(v3)

-- OUTPUT:
9
19
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:02:16) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv// 50
resto2 = rv % 50

v3= rv % 10


print(v) 
print(resto2)
print(v3)

-- OUTPUT:
9
40
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:05:50) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv// 50
resto2 = rv % 50

v3= resto2 % 10


print(v) 
print(resto2)
print(v3)

-- EXECUTION TIME:
0.126224
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
40
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:06:01) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv// 50
resto2 = rv % 50

v3= resto2 // 10


print(v) 
print(resto2)
print(v3)

-- EXECUTION TIME:
0.142397
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
40
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:06:03) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv// 50
resto2 = rv % 50

v3= resto2 // 10


print(v) 
print(resto2)
print(v3)

-- OUTPUT:
9
40
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:08:22) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv// 50
resto2 = rv % 50

v3= resto2 // 10


print(int(v)) 
print(int(resto2))
print(int(v3))

-- OUTPUT:
9
40
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:10:33) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = rv // 50
resto2 = v2 % 50

v3= resto2 // 10


print(int(v)) 
print(int(resto2))
print(int(v3))

-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:10:58) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100

v= VAL// 100 
resto = rv % 100

v2 = VAL // 50
resto2 = rv % 50

v3= resto2 // 10


print(int(v)) 
print(int(resto2))
print(int(v3))

-- OUTPUT:
9
40
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:18:57) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(resto50))
print(int(nota10))
-- OUTPUT:
9
40
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:17) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:22) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:23) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:24) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:24) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:24) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:24) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:24) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:19:25) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- EXECUTION TIME:
0.139475
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:25) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50%10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:19:43) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50//10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:19:47) 
-- CODE:
VAL = int(input("Qual o valor do saque: "))

rv = VAL%100
nota100a=VAL//100
nota100=rv%100

nota50=nota100//50
resto50=nota100%50

nota10=resto50//10

print(int(nota100a))
print(int(nota50))
print(int(nota10))
-- EXECUTION TIME:
0.193726
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:35:09) 
-- CODE:
x=int(input("v"))
-- EXECUTION TIME:
0.196201
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:38:01) 
-- CODE:
x=int(input("valor:"))

valor=x%100

nota100=valor//100
resto100=nota100%100

nota50=nota100//50
resto50=nota50%50

resto10=nota100//10
-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:38:49) 
-- CODE:
x=int(input("valor:"))

valor=x%100

nota100=valor//100
resto100=nota100%100

nota50=nota100//50
resto50=nota50%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
0
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:39:48) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=valor//100
resto100=valor%100

nota50=nota100//50
resto50=nota100%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
0
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:41:31) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=valor//100
resto100=valor%100

nota50=resto100//50
resto50=nota100%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
0
1
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:44:55) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=valor//100
resto100=valor100%100

nota50=resto100//50
resto50=nota100%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    resto100=valor100%100
NameError: name 'valor100' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:45:06) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=valor//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
0
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:45:15) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=valor//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=resto50//10

print(int(vlaor))
print(int(nota50))
print(int(resto10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(int(vlaor))
NameError: name 'vlaor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:45:26) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=valor//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=resto50//10

print(int(valor))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
90
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:45:50) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=valor//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
0
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:45:57) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:46:28) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:46:32) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.175516
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:46:36) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:46:39) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=resto100//50
resto50=nota100%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.146666
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:47:00) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota100//50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:47:04) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota100//50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.225989
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:47:08) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota100//50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:47:16) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota100//50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.133695
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:47:38) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota10050

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    resto50=nota10050
NameError: name 'nota10050' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:47:43) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota100%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:47:46) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota100%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.185219
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:47:59) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota50%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:03) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota50%50

resto10=valor//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.205986
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
9
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:11) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota50%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.181021
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:48:12) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=nota50%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:48:24) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
0
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:30) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=nota100//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.169223
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
0
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 16:48:44) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- OUTPUT:
9
1
4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:48) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.163002
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:58) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.133978
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:59) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.170195
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:59) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.12266
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:59) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.147484
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:48:59) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.109793
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:49:00) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.203922
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 16:49:17) 
-- CODE:
x=int(input("valor:"))

valor= x%100

nota100=x//100
resto100=nota100%100

nota50=valor//50
resto50=valor%50

resto10=resto50//10

print(int(nota100))
print(int(nota50))
print(int(resto10))

-- EXECUTION TIME:
0.1281
-- TEST CASE 1:
---- input:
990
---- correct output:
9
1
4
---- user output:
9
1
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
