== TEST (2019-03-22 12:28:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#inteiro = int(input("número inteiro de quatro dígitos:"))

int main()
{
	int n, total = 0;
	
	scanf("%d", &n);
	
	if (n < 0)
		n *= -1;
	
	while (n)
	{
		total += n%10;
		
		n /= 10;
	}
	
	printf("%d\n", total);
	
	return (0);
}

-- ERROR:
File "XXXX", line 6
    int main()
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:28:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#inteiro = int(input("número inteiro de quatro dígitos:"))

int main(3141)
{
	int n, total = 0;
	
	scanf("%d", &n);
	
	if (n < 0)
		n *= -1;
	
	while (n)
	{
		total += n%10;
		
		n /= 10;
	}
	
	printf("%d\n", total);
	
	return (0);
}

-- ERROR:
File "XXXX", line 6
    int main(3141)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:28:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
#inteiro = int(input("número inteiro de quatro dígitos:"))

int main("3141")
{
	int n, total = 0;
	
	scanf("%d", &n);
	
	if (n < 0)
		n *= -1;
	
	while (n)
	{
		total += n%10;
		
		n /= 10;
	}
	
	printf("%d\n", total);
	
	return (0);
}

-- ERROR:
File "XXXX", line 6
    int main("3141")
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:38:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("número inteiro de quatro dígitos:"))

p=inteiro%10
num=inteiro/10

print(num,p)

-- OUTPUT:
917.3 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:38:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("número inteiro de quatro dígitos:"))

p=inteiro%10
num=inteiro//10

print(num,p)

-- OUTPUT:
917 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:39:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))

p=inteiro%10
num=inteiro//10

print(num,p)

-- OUTPUT:
917 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:39:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))

p=inteiro%10
num=inteiro//10
sum=(p,num)

print(num,p)

-- OUTPUT:
917 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:39:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))

p=inteiro%10
num=inteiro//10
sum=(p,num)

print(num,p)

-- EXECUTION TIME:
0.130355
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
917 3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
101 0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:10:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))

p=inteiro%inteiro
num=inteiro//inteiro


print(num,p)

-- OUTPUT:
1 0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:10:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))

p=inteiro%inteiro
num=inteiro//inteiro
s=num+p

print(s)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:10:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))

p=inteiro%inteiro
num=inteiro//inteiro
s=num+p

print(s)

-- EXECUTION TIME:
0.140047
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:11:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))


num=inteiro//inteiro%
p=num%inteiro

print(p)

-- ERROR:
File "XXXX", line 7
    num=inteiro//inteiro%
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:11:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))


num=inteiro//inteiro
p=num%inteiro

print(p)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:11:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))


num=inteiro//inteiro
p=num%inteiro

print(p)

-- EXECUTION TIME:
0.159175
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
1
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:11:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))


num=inteiro//inteiro
p=inteiro%num

print(p)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:11:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
inteiro = int(input("numero inteiro de quatro digitos:"))


num=inteiro//inteiro
p=inteiro%num

print(p)

-- EXECUTION TIME:
0.128104
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
0
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:17:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("numero inteiro de quatro digitos:"))
n = str(num)

print(n[3]+n[2]+n[1]+n[0])

-- OUTPUT:
3719
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:17:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("numero inteiro de quatro digitos:"))
n = num

print(n[3]+n[2]+n[1]+n[0])

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(n[3]+n[2]+n[1]+n[0])
TypeError: 'int' object is not subscriptable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:17:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("numero inteiro de quatro digitos:"))


print(n[3]+n[2]+n[1]+n[0])

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(n[3]+n[2]+n[1]+n[0])
NameError: name 'n' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:18:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num = int(input("numero inteiro de quatro digitos:"))


print(num[3]+num[2]+num[1]+num[0])

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(num[3]+num[2]+num[1]+num[0])
TypeError: 'int' object is not subscriptable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:18:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")


print(num[3]+num[2]+num[1]+num[0])

-- OUTPUT:
3719
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:19:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")
sum(num[0]num[1]num[2]num[3])

print()

-- ERROR:
File "XXXX", line 5
    sum(num[0]num[1]num[2]num[3])
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:19:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")
sum(num[0],num[1],num[2],num[3])

print()

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sum(num[0],num[1],num[2],num[3])
TypeError: sum expected at most 2 arguments, got 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:19:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")
sum(num[0],num[1]

print()

-- ERROR:
File "XXXX", line 7
    print()
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:20:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")
n=sum(num[0],num[1])

print(n)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n=sum(num[0],num[1])
TypeError: sum() can't sum strings [use ''.join(seq) instead]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:20:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")
n=sum(num[0],num[1])

print(n)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n=sum(num[0],num[1])
TypeError: sum() can't sum strings [use ''.join(seq) instead]
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:21:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")
n= num//1%10

print(n)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n= num//1%10
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:22:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =input("numero inteiro de quatro digitos:")
n = num // 1 % 10

print(n)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    n = num // 1 % 10
TypeError: unsupported operand type(s) for //: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:22:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))
n = num // 1 % 10

print(n)

-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:23:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))
n = num // 1 % 10
u = num // 2 % 10
p = num // 3 % 10
q
print(p)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    q
NameError: name 'q' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:23:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))
n = num // 1 % 10
u = num // 2 % 10
p = num // 3 % 10

print(p)

-- OUTPUT:
7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:24:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))
n = num // 1 % 10
u = num // 10 % 10
p = num // 100 % 10

print(p)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:25:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))
n = num // 1 % 10
u = num // 10 % 10
p = num // 100 % 10
q = num // 1000 % 10
print(p)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:25:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))
n = num // 1 % 10
u = num // 10 % 10
p = num // 100 % 10
q = num // 1000 % 10
print(1)

-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:25:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))
n = num // 1 % 10
u = num // 10 % 10
p = num // 100 % 10
q = num // 1000 % 10
print(q)

-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 18:26:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))

n = num // 1 % 10
u = num // 10 % 10
p = num // 100 % 10
q = num // 1000 % 10

qpun=q+p+u+n

print(qpun)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 18:26:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
num =int(input("numero inteiro de quatro digitos:"))

n = num // 1 % 10
u = num // 10 % 10
p = num // 100 % 10
q = num // 1000 % 10

qpun=q+p+u+n

print(qpun)
-- EXECUTION TIME:
0.127837
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
