== TEST (2019-04-27 23:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalação:")

print("Entradas:", a, "kWh e tipo", b)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:30:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalação:")

print("Entradas:", a, "kWh e tipo", b)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:30:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalação:")

print("Entradas:", a "kWh e tipo", b)

-- ERROR:
File "XXXX", line 7
    print("Entradas:", a "kWh e tipo", b)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:31:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalação:")

print("Entradas:", a" ""kWh e tipo", b)

-- ERROR:
File "XXXX", line 7
    print("Entradas:", a" ""kWh e tipo", b)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:31:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalação:")

print("Entradas:", a," ""kWh e tipo", b)

-- OUTPUT:
Entradas: -56.0  kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:31:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalação:")

print("Entradas:", a," ""kWh e tipo", b)

-- OUTPUT:
Entradas: -56.0  kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:32:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalação:")

print("Entradas:", a,"kWh e tipo", b)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:32:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b)

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:32:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b.upper=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b.upper=input()
NameError: name 'b' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:32:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper)

-- OUTPUT:
Entradas: -56.0 kWh e tipo <built-in method upper of str object at 0x7f9efe2855e0>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:33:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b.upper()=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b)

-- ERROR:
File "XXXX", line 5
    b.upper()=input()
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:33:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b.upper()=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b)

-- ERROR:
File "XXXX", line 5
    b.upper()=input()
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:33:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:38:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
if(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
print(r)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    print(r)
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:39:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
if(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
print("Valor total:",r)
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    print("Valor total:",r)
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:40:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
if(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
print("Valor total:",round(r,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    print("Valor total:",round(r,2))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:40:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
if(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
print("Valor total:",round(r,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    print("Valor total:",round(r,2))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:41:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
if(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
if(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
print("Valor total:",round(r,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 24, in <module>
    print("Valor total:",round(r,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 23:41:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
if(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
if(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
print("Valor total:",round(r,2))
	

-- EXECUTION TIME:
0.204442
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1101/main.py", line 24, in <module>
    print("Valor total:",round(r,2))
TypeError: type tuple doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:44:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()=="C" or b.upper()=="I"):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60

print("Valor total: R$",round(r,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 26, in <module>
    print("Valor total: R$",round(r,2))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:44:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()=="C" or b.upper()=="I"):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60

print("Valor total: R$",round(r,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 26, in <module>
    print("Valor total: R$",round(r,2))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:45:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()=="C" or b.upper()=="I"):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60

print("Valor total: R$",round(r,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 26, in <module>
    print("Valor total: R$",round(r,2))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:46:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()=="C" or b.upper()=="I"):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:46:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()=="C" or b.upper()=="I"):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:46:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()=="C" or b.upper()=="I"):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:46:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()!="C" or b.upper()!="I"):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 23:47:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()!="C" or b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- EXECUTION TIME:
0.288068
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Dados invalidos
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:47:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()!="C" or b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:47:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()!="C" or b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:47:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()!="C" or b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:47:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" or b.upper()!="C" or b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:48:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 28, in <module>
    print("Valor total: R$",round(r,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:48:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 28, in <module>
    print("Valor total: R$",round(r,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:48:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 28, in <module>
    print("Valor total: R$",round(r,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:48:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 28, in <module>
    print("Valor total: R$",round(r,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:48:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",round(r,2))

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 28, in <module>
    print("Valor total: R$",round(r,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:49:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",r,2)

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ (-0.0, 55) 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:49:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",r)

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ (-0.0, 55)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:49:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",r)

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ (-0.0, 55)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:49:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",r)
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",r)

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ (-0.0, 55)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 23:50:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",r)
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0,55
	else:
		r=a*0,60
	print("Valor total: R$",r)

	

-- EXECUTION TIME:
0.126557
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ (-0.0, 55)
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:50:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 23:50:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- EXECUTION TIME:
0.188656
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:50:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:51:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",r)
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:52:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:52:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 23:53:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- EXECUTION TIME:
0.193939
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:53:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:53:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:53:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:53:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())
if(b.upper()!="R" and b.upper()!="C" and b.upper()!="I"):
	print("Dados invalidos")

elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))

	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:58:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 23:58:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- EXECUTION TIME:
0.122128
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:58:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:58:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b)

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 23:58:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b)

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- EXECUTION TIME:
0.233323
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 23:59:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.55
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:00:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:00:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- EXECUTION TIME:
0.142393
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:01:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-30.800000000000004
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:01:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-30.800000000000004
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:01:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
print(r)
	

-- EXECUTION TIME:
0.181626
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-30.800000000000004
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
621.075
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:04:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")

print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	
	if(a<=500):
		r=a*0.44
		
	else:
		r=a*0.65
			
	print("Valor total: R$",round(r,2))
	
elif(b.upper()=="C"):
	
	if(a<=1000):
		r=a*0.55
	
	else:
		r=a*0.60
	
	print("Valor total: R$",round(r,2))

elif(b.upper()=="I"):
	
	if(a<=5000):
		r=a*0.55
	
	else:
		r=a*0.60
	
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:08:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.40
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- EXECUTION TIME:
0.165521
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:08:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
else:
	r="Dados invalidos"
	print(r)
	

-- EXECUTION TIME:
0.142152
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:09:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",r)
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",r)
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",r)
else:
	r="Dados invalidos"
	print(r)
	

-- EXECUTION TIME:
0.192488
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.800000000000004
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.075
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:09:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
else:
	
	print("Dados invalidos")
	

-- EXECUTION TIME:
0.161554
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:09:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
else:
	
	print("Dados invalidos")
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:12:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())
if(a<0 or (b.upper!="R" and b.upper!="C" and b.upper!="I")
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 8
    elif(b.upper()=="R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:12:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())
if(a<0 or (b.upper!="R" and b.upper!="C" and b.upper!="I"):
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 7
    if(a<0 or (b.upper!="R" and b.upper!="C" and b.upper!="I"):
                                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:13:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(a<0 or (b.upper!="R" and b.upper!="C" and b.upper!="I")):
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 9
    elif(b.upper()=="R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:13:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(a<0 or (b.upper!="R" and b.upper!="C" and b.upper!="I")):
	print("Dados invalidos")
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 10
    elif(b.upper()=="R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:14:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(a<0 or (b.upper!="R" and b.upper!="C" and b.upper!="I")):
	print("Dados invalidos")
	else:
		if(b.upper()=="R"):
			if(a<=500):
				r=a*0.44
			else:
				r=a*0.65
			print("Valor total: R$",round(r,2))
		elif(b.upper()=="C"):
			if(a<=1000):
				r=a*0.55
			else:
				r=a*0.60
			print("Valor total: R$",round(r,2))
		elif(b.upper()=="I"):
			if(a<=5000):
				r=a*0.55
			else:
				r=a*0.60	
			print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:15:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if(a<0 or (b.upper!="R") and (b.upper!="C") and b.upper!="I")):
	print("Dados invalidos")
	else:
		if(b.upper()=="R"):
			if(a<=500):
				r=a*0.44
			else:
				r=a*0.65
			print("Valor total: R$",round(r,2))
		elif(b.upper()=="C"):
			if(a<=1000):
				r=a*0.55
			else:
				r=a*0.60
			print("Valor total: R$",round(r,2))
		elif(b.upper()=="I"):
			if(a<=5000):
				r=a*0.55
			else:
				r=a*0.60	
			print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 8
    if(a<0 or (b.upper!="R") and (b.upper!="C") and b.upper!="I")):
                                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:15:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper!="R") and (b.upper!="C") and (b.upper!="I")):
	print("Dados invalidos")
	else:
		if(b.upper()=="R"):
			if(a<=500):
				r=a*0.44
			else:
				r=a*0.65
			print("Valor total: R$",round(r,2))
		elif(b.upper()=="C"):
			if(a<=1000):
				r=a*0.55
			else:
				r=a*0.60
			print("Valor total: R$",round(r,2))
		elif(b.upper()=="I"):
			if(a<=5000):
				r=a*0.55
			else:
				r=a*0.60	
			print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 10
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:16:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 10
    elif(b.upper()=="R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:17:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<=0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 10
    elif(b.upper()=="R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:18:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if( or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 8
    if( or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:18:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if( (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
	elif(b.upper()=="R"):
		if(a<=500):
			r=a*0.44
		else:
			r=a*0.65
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="C"):
		if(a<=1000):
			r=a*0.55
		else:
			r=a*0.60
		print("Valor total: R$",round(r,2))
	elif(b.upper()=="I"):
		if(a<=5000):
			r=a*0.55
		else:
			r=a*0.60	
		print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
File "XXXX", line 10
    elif(b.upper()=="R"):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:19:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if( (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
	
	
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Valor total: R$ -30.8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:19:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
	
	
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:19:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 25, in <module>
    print("Valor total: R$",round(r,2))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:19:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
print("Valor total: R$",round(r,2))
	
	
	

-- EXECUTION TIME:
0.127698
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1101/main.py", line 25, in <module>
    print("Valor total: R$",round(r,2))
NameError: name 'r' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:19:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
print("Valor total: R$",round(r,2))
	
	
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 25, in <module>
    print("Valor total: R$",round(r,2))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:20:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
	
	
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 00:20:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
	
	
	

-- OUTPUT:
Entradas: -56.0 kWh e tipo I
Dados invalidos
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 00:20:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("consumo de energia:"))
b=input("tipo de instalacao:")
print("Entradas:", a,"kWh e tipo", b.upper())

if((a<0) or (b.upper()!="R") and (b.upper()!="C") and (b.upper()!="I")):
	print("Dados invalidos")
elif(b.upper()=="R"):
	if(a<=500):
		r=a*0.44
	else:
		r=a*0.65
	print("Valor total: R$",round(r,2))
elif(b.upper()=="C"):
	if(a<=1000):
		r=a*0.55
	else:
		r=a*0.60
	print("Valor total: R$",round(r,2))
elif(b.upper()=="I"):
	if(a<=5000):
		r=a*0.55
	else:
		r=a*0.60	
	print("Valor total: R$",round(r,2))
	
	
	

-- EXECUTION TIME:
0.193733
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
