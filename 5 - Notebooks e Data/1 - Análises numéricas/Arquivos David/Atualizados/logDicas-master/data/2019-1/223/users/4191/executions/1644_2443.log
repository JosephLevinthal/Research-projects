== TEST (2019-04-14 10:06:53) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else (n == 2):	
	V= (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else (n == 2):	
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:08:00) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else (n == 2):	
	V= (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else (n == 2):	
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:08:19) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else(n == 2):
	V= (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:08:40) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else(n== 2):
	V= (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n== 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:09:06) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else(n == 2):
	V= (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:12:05) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else(n == 2):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:13:35) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
	print(round(V, 4))
else(n == 2):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
	print(round(V, 4))
-- ERROR:
File "XXXX", line 11
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:25:03) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else(n == 2):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:30:08) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h) / 3
else(n == 2):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:30:27) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h)/ 3
else(n == 2):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:45:54) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h)/ 3
else(n == 2):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- ERROR:
File "XXXX", line 10
    else(n == 2):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:46:14) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h)/ 3
else:
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- OUTPUT:
8.0095
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:46:35) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*pi - h)/ 3
else:
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- EXECUTION TIME:
0.118646
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
8.0095
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
-295.9602
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:47:04) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 2):
	V = pi*h**2 * (3*pi - h)/ 3
else:
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- OUTPUT:
-171.5849
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:47:16) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 2):
	V = pi*h**2 * (3*pi - h)/ 3
else:
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- EXECUTION TIME:
0.142214
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
-171.5849
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
14.3789
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:48:03) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = (pi*h**2) * (3*pi - h)/ 3
else:
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
print(round(V, 4))	
-- OUTPUT:
8.0095
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:56:36) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
else:
	V = (pi*h**2) * (3*pi - h)/ 3
print(round(V, 4))	
-- OUTPUT:
-171.5849
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:56:55) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = (pi*h**2 * (3*pi - h) / 3) - 4*pi*r**3/3
else:
	V = (pi*h**2) * (3*pi - h)/ 3
print(round(V, 4))	
-- EXECUTION TIME:
0.142762
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
-171.5849
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
14.3789
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:01:29) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*r-h)/3
else:
	V = (4*pi*r**3/3) - (pi*h**2 * (3*pi - h)/ 3)
print(round(V, 4))	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:01:48) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*r-h)/3
else:
	V = (4*pi*r**3/3) - (pi*h**2 * (3*pi - h)/ 3)
print(round(V, 4))	
-- EXECUTION TIME:
0.167882
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
295.9602
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:01:50) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*r-h)/3
else:
	V = (4*pi*r**3/3) - (pi*h**2 * (3*pi - h)/ 3)
print(round(V, 4))	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:02:36) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*r-h)/3
else:
	V = (pi*h**2 * (3*pi - h)/ 3)-(4*pi*r**3/3)
print(round(V, 4))	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:02:48) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*r-h)/3
else:
	V = (pi*h**2 * (3*pi - h)/ 3)-(4*pi*r**3/3)
print(round(V, 4))	
-- EXECUTION TIME:
0.208229
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
-295.9602
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 13:03:49) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*r-h)/3
else:
	V = (4*pi*r**3/3)-(pi*h**2 * (3*r - h)/ 3)
print(round(V, 4))	
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 13:03:58) 
-- CODE:
# n= 1 volume de ar, n= 2 volume de combustivel
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import pi
r=float(input("raio: "))
h=float(input("altura: "))
n=float(input("numero: "))
if (n == 1):
	V = pi*h**2 * (3*r-h)/3
else:
	V = (4*pi*r**3/3)-(pi*h**2 * (3*r - h)/ 3)
print(round(V, 4))	
-- EXECUTION TIME:
0.146952
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
