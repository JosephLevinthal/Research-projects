== TEST (2019-04-02 14:24:04) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(print("insira o segundo valor do dado:"))

dano= sqrt(5*D1) + pi*(D2/3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    D2=int(print("insira o segundo valor do dado:"))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:24:17) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(print("insira o segundo valor do dado:"))

dano= sqrt(5*D1) + pi*(D2/3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    D2=int(print("insira o segundo valor do dado:"))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:24:46) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(print("insira o segundo valor do dado:"))

dano= sqrt(5*D1) + pi*(D2/3)
print(dano)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    D2=int(print("insira o segundo valor do dado:"))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:25:14) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

dano= sqrt(5*D1) + pi*(D2/3)
print(dano)
-- OUTPUT:
8.519253284679376
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:26:10) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

dano= (sqrt(5*D1)) + pi*(D2/3)
print(dano)
-- OUTPUT:
8.519253284679376
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:29:07) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D1)

print(a)
-- OUTPUT:
2.23606797749979
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:30:11) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + pi**(D2/3)
print(dano)
-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:30:37) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + pi^(D2/3)
print(dano)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    dano= (sqrt(5*D1)) + pi^(D2/3)
TypeError: unsupported operand type(s) for ^: 'float' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:31:12) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + (pi)^D2/3
print(dano)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    dano= (sqrt(5*D1)) + (pi)^D2/3
TypeError: unsupported operand type(s) for ^: 'float' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:31:29) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + (pi)**D2/3
print(dano)
-- OUTPUT:
322.6991325026012
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:31:32) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + (pi)**D2/3
print(dano)
-- OUTPUT:
322.6991325026012
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:31:55) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + ((pi)**(D2/3))
print(dano)
-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:32:00) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + ((pi)**(D2/3))
print(dano)
-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:32:05) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + ((pi)**(D2/3))
print(dano)
-- OUTPUT:
12.105672378589148
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:56:56) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + ((pi)**(D2/3))
print(int(dano)
-- ERROR:
File "XXXX", line 10
    
                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:57:01) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + ((pi)**(D2/3))
print(int(dano)
-- ERROR:
File "XXXX", line 10
    
                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:57:06) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + ((pi)**(D2/3))
print(int(dano))
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 14:57:14) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))

a = sqrt(5*D2)
dano= (sqrt(5*D1)) + ((pi)**(D2/3))
print(int(dano))
-- EXECUTION TIME:
0.189121
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
12
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
15
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 14:59:48) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))


a= (sqrt(5*D1)) + ((pi)**(D2/3))
dano= a-p
print(int(dano))
-- OUTPUT:
-187
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:00:01) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))


a= (sqrt(5*D1)) + ((pi)**(D2/3))
dano= p-a
print(int(dano))
-- OUTPUT:
187
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:00:11) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))


a= (sqrt(5*D1)) + ((pi)**(D2/3))
dano= p-a
print(int(dano))
-- EXECUTION TIME:
0.189206
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
187
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
284
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
496
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:00:35) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))


a= (sqrt(5*D1)) + ((pi)**(D2/3))
dano= p-a+1
print(int(dano))
-- OUTPUT:
188
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:00:43) 
-- CODE:
from math import*

p=int(input("Insira a vida inicial:"))
D1=int(input("Insira o primeiro valor do dado:"))
D2=int(input("insira o segundo valor do dado:"))


a= (sqrt(5*D1)) + ((pi)**(D2/3))
dano= p-a+1
print(int(dano))
-- EXECUTION TIME:
0.125665
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
188
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
285
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
