== TEST (2019-05-01 21:12:41) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: "H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=(1/3)*pi*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<H-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
else:
	print("Entradas invalidas")
		
	
-- ERROR:
File "XXXX", line 10
    print("Entradas: "H, "," ,h ,"," ,r)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:13:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=(1/3)*pi*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<H-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
else:
	print("Entradas invalidas")
		
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:14:03) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=(1/3)*pi*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<H-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
else:
	print("Entradas invalidas")
		
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:14:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=(1/3)*pi*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<H-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
	else:
		print("Entradas invalidas")
		
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:15:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=(1/3)*pi*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<H-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:16:27) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=(1/3)*pi*h**2*(3*r-h)
		print("litros",round(v, 3))
	elif(h<H-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print("litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print("litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:16:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=(1/3)*pi*h**2*(3*r-h)
		print("litros",round(v, 3))
	elif(h<H-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print("litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print("litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:20:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=pi*r**2*h
		print("litros",round(v, 3))
	elif(H<h-r):
		v=(2/3)*pi*r**3+pi*r**2*(h-r)
		print("litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print("litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:23:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=pi*r**2*h
		print("litros",round(v, 3))
	elif(H<h-r):
		v=(pi/3)h**2*(3*r-h)
		print("litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print("litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- ERROR:
File "XXXX", line 17
    v=(pi/3)h**2*(3*r-h)
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:23:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=pi*r**2*h
		print("litros",round(v, 3))
	elif(H<h-r):
		v=(pi/3)*h**2*(3*r-h)
		print("litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print("litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 21:35:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=pi*r**2*h
		print(v,"litros",round(v, 3))
	elif(H<h-r):
		v=(pi/3)*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- EXECUTION TIME:
0.225315
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 21:35:04) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=pi*r**2*h
		print(v,"litros",round(v, 3))
	elif(H<h-r):
		v=(pi/3)*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 22:06:20) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(h<0 or H<0 or r<0):
	if(h < r):
		v=pi*r**2*h
		print(v,"litros",round(v, 3))
	elif(H<h-r):
		v=(pi/3)*h**2*(3*r-h)
		print(v,"litros",round(v, 3))
	elif(h<=H):
		v=(4/3)*pi*r**3+pi*r**2*(H-2*r)-(1/3)*pi*(H-h)**2*(3*r-H+h)
		print(v,"litros",round(v, 3))
	else:
		print("Entradas invalidas")
else:
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Entradas invalidas
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 22:22:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(H>0 and h>0 and r>0)and(H>h and H>(2*r)):
	v=(4/3)*pi*(r**3)
	if(h <= r):
		if(h==r):
			x=(v/2)*1000
			print("Volume: ",round(v, 3),"litros")
		elif(h<r):
			v=((pi/3)*(h**2)*(3*r-h))*1000
			print("Volume: ",round(v, 3)<"litros")
	elif(h>r and h<=H-r):
		v=X/2
		C=pi*(r**2)*(h-r)
		v1=(v+C)*1000
		print("Volume: ",round(v1, 3),"litros")
elif(H<0 or h<0 or r<0)or(H<h or h<2*r)
	print("Entradas invalidas")
	
-- ERROR:
File "XXXX", line 26
    elif(H<0 or h<0 or r<0)or(H<h or h<2*r)
                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 22:22:47) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(H>0 and h>0 and r>0)and(H>h and H>(2*r)):
	v=(4/3)*pi*(r**3)
	if(h <= r):
		if(h==r):
			x=(v/2)*1000
			print("Volume: ",round(v, 3),"litros")
		elif(h<r):
			v=((pi/3)*(h**2)*(3*r-h))*1000
			print("Volume: ",round(v, 3)<"litros")
	elif(h>r and h<=H-r):
		v=X/2
		C=pi*(r**2)*(h-r)
		v1=(v+C)*1000
		print("Volume: ",round(v1, 3),"litros")
elif(H<0 or h<0 or r<0)or(H<h or h<2*r):
	print("Entradas invalidas")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 22, in <module>
    v=X/2
NameError: name 'X' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 22:23:26) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(H>0 and h>0 and r>0)and(H>h and H>(2*r)):
	v=(4/3)*pi*(r**3)
	if(h <= r):
		if(h==r):
			x=(v/2)*1000
			print("Volume: ",round(v, 3),"litros")
		elif(h<r):
			v=((pi/3)*(h**2)*(3*r-h))*1000
			print("Volume: ",round(v, 3)<"litros")
	elif(h>r and h<=H-r):
		v=x/2
		C=pi*(r**2)*(h-r)
		v1=(v+C)*1000
		print("Volume: ",round(v1, 3),"litros")
elif(H<0 or h<0 or r<0)or(H<h or h<2*r):
	print("Entradas invalidas")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 22, in <module>
    v=x/2
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 22:24:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(H>0 and h>0 and r>0)and(H>h and H>(2*r)):
	v=(4/3)*pi*(r**3)
	if(h <= r):
		if(h==r):
			x=(v/2)*1000
			print("Volume: ",round(v, 3),"litros")
		elif(h<r):
			v=((pi/3)*(h**2)*(3*r-h))*1000
			print("Volume: ",round(v, 3)<"litros")
	elif(h>r and h<=H-r):
		V=V/2
		C=pi*(r**2)*(h-r)
		v1=(v+C)*1000
		print("Volume: ",round(v1, 3),"litros")
elif(H<0 or h<0 or r<0)or(H<h or h<2*r):
	print("Entradas invalidas")
	
-- EXECUTION TIME:
0.827825
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 22, in <module>
    V=V/2
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 22:24:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(H>0 and h>0 and r>0)and(H>h and H>(2*r)):
	v=(4/3)*pi*(r**3)
	if(h <= r):
		if(h==r):
			x=(v/2)*1000
			print("Volume: ",round(v, 3),"litros")
		elif(h<r):
			v=((pi/3)*(h**2)*(3*r-h))*1000
			print("Volume: ",round(v, 3)<"litros")
	elif(h>r and h<=H-r):
		V=V/2
		C=pi*(r**2)*(h-r)
		v1=(v+C)*1000
		print("Volume: ",round(v1, 3),"litros")
elif(H<0 or h<0 or r<0)or(H<h or h<2*r):
	print("Entradas invalidas")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 22, in <module>
    V=V/2
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 22:26:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(H>0 and h>0 and r>0)and(H>h and H>(2*r)):
	V=(4/3)*pi*(r**3)
	if(h <= r):
		if(h==r):
			v=(V/2)*1000
			print("Volume: ",round(v, 3),"litros")
		elif(h<r):
			v=((pi/3)*(h**2)*(3*r-h))*1000
			print("Volume: ",round(v, 3)<"litros")
	elif(h>r and h<=H-r):
		v=V/2
		C=pi*(r**2)*(h-r)
		v1=(v+C)*1000
		print("Volume: ",round(v1, 3),"litros")
elif(H<0 or h<0 or r<0)or(H<h or h<2*r):
	print("Entradas invalidas")
	
-- OUTPUT:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-05 22:26:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código
from math import*
H=float(input("altura do tanque: "))
h=float(input("nivel de combustivel: "))
r=float(input("raio dos bojos: "))
print("Entradas: ",H, "," ,h ,"," ,r)

if(H>0 and h>0 and r>0)and(H>h and H>(2*r)):
	V=(4/3)*pi*(r**3)
	if(h <= r):
		if(h==r):
			v=(V/2)*1000
			print("Volume: ",round(v, 3),"litros")
		elif(h<r):
			v=((pi/3)*(h**2)*(3*r-h))*1000
			print("Volume: ",round(v, 3)<"litros")
	elif(h>r and h<=H-r):
		v=V/2
		C=pi*(r**2)*(h-r)
		v1=(v+C)*1000
		print("Volume: ",round(v1, 3),"litros")
elif(H<0 or h<0 or r<0)or(H<h or h<2*r):
	print("Entradas invalidas")
	
-- EXECUTION TIME:
0.801059
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas:  11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas:  8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas:  8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
