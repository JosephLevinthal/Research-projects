== TEST (2019-06-27 20:35:49) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:35:55) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:36:04) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:36:09) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:36:36) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:37:28) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:38:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:39:13) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:39:20) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:40:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz[1:2])
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:42:11) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz[1:1])
print
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:42:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

matriz = array(eval(input("matriz")))
print(matriz[1,:2])
print
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-27 20:47:58) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

for i in range(N):
	k =int(input("n"))

print(k)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:20:11) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))
matriz = zeros((N,N) dtype=int))
#for i in range(N):
#	k =int(input("n"))

print(matriz)
-- ERROR:
File "XXXX", line 5
    matriz = zeros((N,N) dtype=int))
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:20:40) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))
matriz = zeros((N,N, dtype=int))
#for i in range(N):
#	k =int(input("n"))

print(matriz)
-- ERROR:
File "XXXX", line 5
    matriz = zeros((N,N, dtype=int))
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:21:03) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))
matriz = zeros((N, dtype=int))
#for i in range(N):
#	k =int(input("n"))

print(matriz)
-- ERROR:
File "XXXX", line 5
    matriz = zeros((N, dtype=int))
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:31:36) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))
matriz = zeros((N,N)
for h in range(N*N):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i,j] = elemento
print(matriz)
-- ERROR:
File "XXXX", line 6
    for h in range(N*N):
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:32:46) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))
matriz = zeros((N,N)
N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i,j] = elemento
print(matriz)
-- ERROR:
File "XXXX", line 6
    N_E = N * N
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:39:49) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i,j] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:43:18) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i,j] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:45:16) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i,:j] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:46:08) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i:j] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:46:51) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i:j] = elemento
			print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:47:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(N):
		for j in range(N):
			matriz[i,j] = elemento
			print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:49:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(h,N):
		for j in range(h,N):
			matriz[i,j] = elemento
			print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:50:03) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N):
	elemento = int(input("elemento:"))
	for i in range(h,N):
		for j in range(h,N):
			matriz[i,j] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:51:02) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N):
	elemento = int(input("elemento:"))
	for i in range(h,N):
		for j in range(h,N):
			matriz[i,j] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:52:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N):
	elemento = int(input("elemento:"))
	for i in range(h,N):
			matriz[i,:] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:52:50) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N):
	elemento = int(input("elemento:"))
	for i in range(h,N):
			matriz[i,:] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:53:33) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N):
	elemento = int(input("elemento:"))
	for i in range(h,N):
			matriz[:,i] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:54:12) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(h,N):
			matriz[:,i] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:54:26) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(h,N):
			matriz[:,i] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:55:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(h,N_E):
			matriz[:,i] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:55:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N_E):
	elemento = int(input("elemento:"))
	for i in range(h,N_E):
			matriz[:,i] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:56:46) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in matriz:
	elemento = int(input("elemento:"))
	for i in matriz:
			matriz[:,i] = elemento
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:58:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in matriz:
	elemento = int(input("elemento:"))
	matriz[h:] = elemento
	
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:59:04) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in matriz:
	elemento = int(input("elemento:"))
	matriz[h,:] = elemento
	
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 15:59:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in matriz:
	elemento = int(input("elemento:"))
	matriz[h,] = elemento
	
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:00:11) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in matriz:
	for j in matriz:
		elemento = int(input("elemento:"))
		matriz[h,j] = elemento
	
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:02:08) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in matriz:
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
	
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:02:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N))

N_E = N * N
for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
	
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:04:58) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

N_E = N * N
for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
	
print(matriz)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:10:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == J):
			soma_principal = soma_principal + matriz[i,j]
		elif(i < j):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:10:46) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == J):
			soma_principal = soma_principal + matriz[i,j]
		elif(i < j):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:11:29) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif(i < j):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:21:18) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif(i == N - 1 - j) or (j == N - 1 - i):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:22:50) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif(i == N - 1 - j):
			soma_secundaria = soma_secundaria + matriz[i,j]
		elif(j == N - 1 - i):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:26:08) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif(i == N - 1):
			soma_secundaria = soma_secundaria + matriz[i,j]
		elif(j == N - 1):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:27:28) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif(i == j - 1):
			soma_secundaria = soma_secundaria + matriz[i,j]
		elif(j == i - 1):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:29:54) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif(i == (N - 1 - j)):
			soma_secundaria = soma_secundaria + matriz[i,j]
		elif(j == (N - 1 - i)):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:33:07) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif((i + j) == N):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:34:31) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:35:39) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_secundaria - soma_principal
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:36:16) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
diferenca = soma_secundaria - soma_principal
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:38:00) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			print(matriz[i,j])
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:42:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			print(matriz[i,j])
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
diferenca = soma_principal - (soma_secundaria + 16)
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:42:53) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			print(matriz[i,j])
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
diferenca = soma_principal - (soma_secundaria + 16)
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:47:04) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			print(matriz[i,j])
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
diferenca = soma_principal - (soma_secundaria + 16)
print(diferenca)
-- EXECUTION TIME:
1.15388
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
16
8
9
9
-8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:48:08) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			print(matriz[i,j])
		elif((i + j) == (N-1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
diferenca = soma_principal - (soma_secundaria )
print(diferenca)
-- EXECUTION TIME:
1.08562
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
16
8
9
9
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:50:57) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
diferenca = soma_principal - (soma_secundaria)
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:53:04) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - (soma_secundaria)
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:54:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_secundaria - soma_principal
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:54:49) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_secundaria - soma_principal
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:20) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
1.1263
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:23) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
1.10037
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
2.59432
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:28) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
4.26537
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:30) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
4.97918
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:31) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
6.27718
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
6.62633
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
4.98498
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
2.48574
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 16:56:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
2.05292
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1835/2222/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:57:01) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:57:26) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:57:53) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:58:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:59:39) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
for i in range(N):
	for j in range(N):
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
File "XXXX", line 20
    elif((i + j) == shape(matriz)[0]):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 16:59:56) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
for i in range(N):
	for j in range(N):
		if((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			#print(matriz[i,j])
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:05:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(soma_secundaria)
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:07:01) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
			#print(soma_secundaria)
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:10:23) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
		elif((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
			#print(soma_secundaria)
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:12:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			#print(matriz[i,j])
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
			#print(soma_secundaria)
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:13:10) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			print(matriz[i,j])
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
			#print(soma_secundaria)
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:14:28) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
			
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 17:15:01) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
			
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
1.11813
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
16
8
9
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:15:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			print(matriz[i,j])
			
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 17:16:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
0.829358
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 17:16:24) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
1.07233
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:16:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
soma_principal = 0
soma_secundaria = 0
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]
			
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:21:50) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(abs(diferenca))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 17:22:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(abs(diferenca))
-- EXECUTION TIME:
1.22643
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 17:22:37) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(abs(diferenca))
-- EXECUTION TIME:
2.07172
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 17:22:37) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(abs(diferenca))
-- EXECUTION TIME:
2.44916
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:23:28) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = eval(input("elemento:"))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:23:50) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = eval(input("elemento:"))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:24:00) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = eval(input("elemento:"))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:24:33) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = int(input("elemento:"))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:26:41) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:26:55) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:27:05) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:27:41) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:32:48) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = matriz[1,:]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:32:57) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = matriz[1,:]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:33:10) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = matriz[1,:]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:34:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[1,:]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:34:28) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[1,:]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:35:11) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0,:]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:35:51) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0,0]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:36:55) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:37:10) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:37:23) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
matriz = zeros((dim,dim), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:38:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
#matriz = zeros((dim,dim), dtype=int)

print(dim)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:38:41) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
#matriz = zeros((dim,dim), dtype=int)

print(dim)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:38:49) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
#matriz = zeros((dim,dim), dtype=int)

print(dim)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:40:06) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
#matriz = zeros((dim,dim), dtype=int)

print(dim)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:40:34) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
#matriz = zeros((dim,dim), dtype=int)

print(j)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:42:29) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

print(matriz)

#for h in range(N):
#		elemento = array(eval(input("elemento:")))
#		matriz[h,:] = elemento
		
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:46:06) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(N):
	for m in range(1,j):
	matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
File "XXXX", line 14
    matriz[h,:] = N[m,:]
         ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:46:30) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(N):
	for m in range(1,j):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:46:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(N):
	for m in range(1,j):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:46:57) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(N):
	for m in range(1,j):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:48:03) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(j):
	for m in range(1,j):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:49:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(shape(matriz)[0]):
	for m in range(1,j):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:49:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(shape(matriz)[0]):
	for m in range(1,j):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:50:30) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(shape(matriz)[0]):
	for m in range(1,shape(matriz)[0]):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:50:55) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(shape(matriz)[0]):
	for m in range(1,shape(matriz)[0]):
		matriz[h,:] = N[m,:]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:53:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for m in range(1,shape(matriz)[0]):
	f = N[m,:]
print(f)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:56:04) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[1]
#j = dim[0]
#matriz = zeros((j,j), dtype=int)
print(dim)

#for m in range(1,shape(matriz)[0]):
#	f = N[m,:]
#print(f)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 17:57:40) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)


for h in range(shape(matriz)[0]):
	for m in range(1,shape(matriz)[0]):
		matriz[h,:] = N[m]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:01:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(lin):
	for i_2 in range(1,lin):
		matriz[i,:] = N[i_2]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:01:39) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(lin):
	for i_2 in range(1,lin):
		matriz[i,:] = N[i_2]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:03:11) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(lin):
	for i_2 in range(lin):
		matriz[i,:] = N[i_2]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:05:41) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(lin):
	for i_2 in range(shape(N)[0]):
		matriz[i,:] = N[i_2]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:08:25) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

#for i in range(lin):
for i_2 in range(shape(N)[0]):
	N[i_2]
	print(N[i_2])
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:08:58) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

#for i in range(lin):
for i_2 in range(1,shape(N)[0]):
	N[i_2]
	print(N[i_2])
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:11:53) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

#for i in range(lin):
for i_2 in range(1,shape(N)[0]):
	for i in range(shape(matriz)[0]):
		matriz[i,:] = N[i_2]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:13:56) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

#for i in range(lin):
for i_2 in range(1,shape(N)[0]):
	while i < shape(matriz)[0]:
		matriz[i,:] = N[i_2]
		i = i + 1
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:14:14) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
#for i in range(lin):
for i_2 in range(1,shape(N)[0]):
	while i < shape(matriz)[0]:
		matriz[i,:] = N[i_2]
		i = i + 1
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:15:13) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
#for i in range(lin):
for i_2 in range(1,shape(N)[0]):
	while i < shape(matriz)[0]:
		matriz[i,:] = N[i_2]
		i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:16:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
while i < shape(matriz)[0]:
	for i_2 in range(1,shape(N)[0]):
		matriz[i,:] = N[i_2]
	i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:17:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
while i < shape(matriz)[0]:
	for i_2 in range(-1,-shape(N)[0]):
		matriz[i,:] = N[i_2]
	i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:18:00) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
while i < shape(matriz)[0]:
	for i_2 in range(-1,-shape(N)[0]):
		matriz[i,:] = N[i_2]
		i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:18:30) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
while i < shape(matriz)[0]:
	for -i_2 in range(-1,-shape(N)[0]):
		matriz[i,:] = N[i_2]
		i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
File "XXXX", line 14
    for -i_2 in range(-1,-shape(N)[0]):
       ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:18:54) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
while i < shape(matriz)[0]:
	for i_2 in range(-1,shape(N)[0]):
		matriz[i,:] = N[i_2]
		i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:19:15) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
while i < shape(matriz)[0]:
	for i_2 in range(-1,shape(N)[-1]):
		matriz[i,:] = N[i_2]
		i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:19:35) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]
i = 0
while i < shape(matriz)[0]:
	for i_2 in range(-1,shape(N)[-1]):
		matriz[i,:] = N[i_2]
	i = i + 1
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:22:44) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)
[3],[3,6,3],[5,6,8],[1,8,0]
lin = shape(matriz)[0]

for i in range(shape(matriz)[0])
	for i_2 in range(1,shape(N)[0]):
	matriz[:,i] = N[i_2]

print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
File "XXXX", line 13
    for i in range(shape(matriz)[0])
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:23:02) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)
[3],[3,6,3],[5,6,8],[1,8,0]
lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for i_2 in range(1,shape(N)[0]):
	matriz[:,i] = N[i_2]

print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
File "XXXX", line 15
    matriz[:,i] = N[i_2]
         ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:23:24) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for i_2 in range(1,shape(N)[0]):
		matriz[:,i] = N[i_2]

print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:24:07) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for i_2 in range(1,shape(N)[0]):
		matriz[i:] = N[i_2]

print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:24:37) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for i_2 in range(1,shape(N)[0]):
		matriz[i:] = N[i_2]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:25:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for i_2 in range(i,shape(N)[0]):
		matriz[i:] = N[i_2]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:26:44) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for i_2 in range(i,shape(N)[0]):
		matriz[i,:,] = N[i_2]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:27:21) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for i_2 in range(i,shape(N)[0]):
		matriz[i,:] = N[i_2]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:28:32) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for l in range(shape(matriz)[1])
		for i_2 in range(i,shape(N)[0]):
			matriz[i,j] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
File "XXXX", line 14
    for l in range(shape(matriz)[1])
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:28:41) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for l in range(shape(matriz)[1]):
		for i_2 in range(i,shape(N)[0]):
			matriz[i,j] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:28:52) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for l in range(shape(matriz)[1]):
		for i_2 in range(i,shape(N)[0]):
			matriz[i,j] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:30:40) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for l in range(shape(matriz)[0]):
		for i_2 in range(l,shape(N)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:30:54) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for l in range(shape(matriz)[0]):
		for i_2 in range(l,shape(N)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:31:39) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for i in range(shape(matriz)[0]):
	for l in range(shape(matriz)[0]):
		for i_2 in range(l,shape(N)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:32:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		for i_2 in range(l,shape(N)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:33:20) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		for i_2 in range(1,shape(N)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:34:03) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		for i_2 in range(1,shape(N)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:38:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i_2 in range(1,shape(N)[0]):
		for i in range(l,shape(matriz)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:43:03) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i_2 in range((l+1),shape(N)[0]):
		for i in range(l,shape(matriz)[0]):
			matriz[i,:] = N[i_2]
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:49:51) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(N)[0]):
		matriz[i,:] = N[i+1]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:50:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(N)[0]):
		matriz[i,:] = N[i+1]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:51:46) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
		print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:52:20) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:52:33) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(N):
#	for j in range(N):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(N):
#	for j in range(N):
#		if((i + j) == (N - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]
#
#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:55:28) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
print(matriz)
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 18:59:08) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
print(matriz)
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:01:37) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
print(matriz)
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if((i + j) == (shape(matriz)[0] - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:02:09) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]

#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if((i + j) == (shape(matriz)[0] - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-29 19:02:24) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]

#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if((i + j) == (shape(matriz)[0] - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
1.12286
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1835/2222/main.py", line 7, in <module>
    dim = N[0]
IndexError: too many indices for array

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:03:34) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = array(eval(input("elemento:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]

#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(shape(matriz)[0]):
	for j in range(shape(matriz)[1]):
		if((i + j) == (shape(matriz)[0] - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:14:08) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("elemento:"))

matriz = zeros((N,N), dtype=int)

N_elementos = N * N
lin = shape(matriz)[0]

for l in range(N_elementos):
	elemento = int(input("elemento:"))
	for i in range(shape(matriz)[0]):
		for j in range(l,shape(matriz)[1]):
			matriz[i,j] = elemento
print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:15:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("elemento:"))

matriz = zeros((N,N), dtype=int)

N_elementos = N * N
lin = shape(matriz)[0]

for l in range(N_elementos):
	elemento = int(input("elemento:"))
	for i in range(shape(matriz)[0]):
		for j in range(l,shape(matriz)[1]):
			matriz[i,j] = elemento
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:15:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("elemento:"))

matriz = zeros((N,N), dtype=int)

N_elementos = N * N
lin = shape(matriz)[0]

for l in range(N_elementos):
	elemento = int(input("elemento:"))
	for i in range(shape(matriz)[0]):
		for j in range(l,shape(matriz)[1]):
			matriz[i,j] = elemento
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:17:35) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("elemento:"))

matriz = zeros((N,N), dtype=int)

N_elementos = N * N
lin = shape(matriz)[0]

for l in range(N_elementos):
	elemento = int(input("elemento:"))
	for i in range(N_elementos):
		for j in range(N_elementos):
			matriz[i,j] = elemento
			print(matriz)
#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:19:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N)
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:20:07) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:20:21) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:29:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:30:00) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[5])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:30:11) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[2])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:30:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[1])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:30:41) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:31:06) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = eval(input("elemento:"))

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:31:48) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = eval(input("elemento:"))

print(N)
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:32:05) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = eval(input("elemento:"))

print(N[0,1])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:32:41) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("elemento:"))

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:33:54) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:34:05) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = input("elemento:")

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:34:45) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("elemento:"))

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-29 19:35:00) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("elemento:"))

print(N[0])
#matriz = zeros((N,N), dtype=int)

#N_elementos = N * N
#lin = shape(matriz)[0]

#contadores para as diagonais
#soma_principal = 0
#soma_secundaria = 0

#soma dos elementos da diagonal principal 
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if(i == j):
#			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
#for i in range(shape(matriz)[0]):
#	for j in range(shape(matriz)[1]):
#		if((i + j) == (shape(matriz)[0] - 1)):
#			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
#diferenca = soma_principal - soma_secundaria
#print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 15:51:00) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		linha = array(eval(input("linha"))
		matriz[h,:] = linha
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
File "XXXX", line 11
    matriz[h,:] = linha
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 15:54:16) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elemento:"))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
File "XXXX", line 11
    matriz[h,:] = elemento
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 15:54:38) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	elemento = array(eval(input("elemento:"))
	matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
File "XXXX", line 11
    matriz[h,:] = elemento
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 15:56:05) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	elemento = array(eval(input("elemento:"))
	matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
File "XXXX", line 11
    matriz[h,:] = elemento
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:01:25) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	elemento = array(eval(input("elemento:"))
	matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
File "XXXX", line 11
    matriz[h,:] = elemento
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:02:05) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	elemento = array(eval(input("elemento:"))
	matriz[h:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
File "XXXX", line 11
    matriz[h:] = elemento
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:02:30) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	elemento = array(eval(input("elemento:"))
	matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
File "XXXX", line 11
    matriz[h,:] = elemento
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:02:55) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	elemento = array(eval(input("elemento:")))
	matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:03:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	elemento = array(eval(input("elemento:")))
	matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:05:36) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[h,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 16:06:22) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[h,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)

-- EXECUTION TIME:
1.11851
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
7
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:23:14) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[h,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 16:23:39) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[h,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == shape(matriz)[0]):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-01 13:25:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for i in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[i,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
1.20763
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
7
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:17:34) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for i in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[i,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:17:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for i in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[i,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:18:21) 
-- CODE:
from numpy import *
from numpy.linalg import *


# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
File "XXXX", line 15
    soma_principal = 0
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:18:42) 
-- CODE:
from numpy import *
from numpy.linalg import *


# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elementos:"))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
File "XXXX", line 12
    matriz[h,:] = elemento
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:18:50) 
-- CODE:
from numpy import *
from numpy.linalg import *


# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for h in range(N):
		elemento = array(eval(input("elementos:")))
		matriz[h,:] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:20:15) 
-- CODE:
from numpy import *
from numpy.linalg import *


# "N" eh a dimencao da matriz 
N = array(eval(input("matriz:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:22:12) 
-- CODE:
from numpy import *
from numpy.linalg import *


# "N" eh a dimencao da matriz 
N = array(eval(input("matriz:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(lin):
	for j in range(lin):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(lin):
	for j in range(lin):
		if((i + j) == (lin - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:22:20) 
-- CODE:
from numpy import *
from numpy.linalg import *


# "N" eh a dimencao da matriz 
N = array(eval(input("matriz:")))

dim = N[0]
j = dim[0]
matriz = zeros((j,j), dtype=int)

lin = shape(matriz)[0]

for l in range(shape(matriz)[0]):
	for i in range(l,shape(matriz)[0]):
		matriz[i,:] = N[i+1]
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(lin):
	for j in range(lin):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(lin):
	for j in range(lin):
		if((i + j) == (lin - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 13:25:30) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for i in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[i,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 13:26:01) 
-- CODE:
from numpy import *
from numpy.linalg import *

# "N" eh a dimencao da matriz 
N = int(input("N:"))

matriz = zeros((N,N), dtype=int)

for i in range(N):
	for j in range(N):
		elemento = int(input("elemento:"))
		matriz[i,j] = elemento
		
#contadores para as diagonais
soma_principal = 0
soma_secundaria = 0

#soma dos elementos da diagonal principal 
for i in range(N):
	for j in range(N):
		if(i == j):
			soma_principal = soma_principal + matriz[i,j]
			
#soma dos elemetos da diagonal secundaria			
for i in range(N):
	for j in range(N):
		if((i + j) == (N - 1)):
			soma_secundaria = soma_secundaria + matriz[i,j]

#diferenca entre os valores das diagonais
diferenca = soma_principal - soma_secundaria
print(diferenca)
-- EXECUTION TIME:
0.966537
-- TEST CASE 1:
---- input:
3
16 8 9
4 1 3
8 7 8
---- correct output:
7
---- user output:
7
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
