== TEST (2019-03-28 16:19:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input(n1))
var2=int(input(n2))
var3=int(input(n3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1=int(input(n1))
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:20:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1"))
var2=int(input("n2"))
var3=int(input("n3"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1=int(input(n1))
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:20:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    var1=int(input(n1))
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:22:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
min(n1,n2,n3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    min(n1,n2,n3)
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:23:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
min("n1","n2","n3")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    min(n1,n2,n3)
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:24:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
min(var1,var2,var3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    min(n1,n2,n3)
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-28 16:24:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
min(var1,var2,var3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    min(n1,n2,n3)
NameError: name 'n1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:58:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 20:22:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 20:35:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:09:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:13:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 08:17:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 08:19:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- EXECUTION TIME:
0.121746
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 08:20:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- EXECUTION TIME:
0.133831
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
-2
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:00:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print(var1+var2+var3-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:03:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print((var1+var2+var3)!-var1-var3)
print(max(var1,var2,var3))
-- ERROR:
File "XXXX", line 8
    print((var1+var2+var3)!-var1-var3)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:23:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print((var1+var2+var3)-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:25:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print((var1+var2+var3)-var1-var3)
print(max(var1,var2,var3))
-- OUTPUT:
-2
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 09:30:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print((var1+var2+var3)-var2-var1)
print(max(var1,var2,var3))
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 09:40:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
var1=int(input("n1:"))
var2=int(input("n2:"))
var3=int(input("n3:"))
print(min(var1,var2,var3))
print((var1+var2+var3)-var2-var1)
print(max(var1,var2,var3))
-- EXECUTION TIME:
0.16385
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
