== TEST (2019-05-14 16:35:25) 
-- CODE:
from math import*

X= eval(input("angulo em radinas: "))
K= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<K):
	SOMA= SOMA + (SINAL * ( (X)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
	print(round(SOMA,10)
-- ERROR:
File "XXXX", line 20
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:35:52) 
-- CODE:
from math import*

X= eval(input("angulo em radinas: "))
K= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<K):
	SOMA= SOMA + (SINAL * ( (X)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
	print(round(SOMA,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    SOMA= x   #o primeiro termo
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:36:33) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (X)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
	print(round(SOMA,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    SOMA= SOMA + (SINAL * ( (X)**EXP) / factorial(EXP ) )
NameError: name 'X' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:36:44) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
	print(round(SOMA,10))
-- OUTPUT:
0.9248322293
1.0045248555
0.9998431014
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:36:52) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
	print(round(SOMA,10))
-- EXECUTION TIME:
0.195276
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
0.9248322293
1.0045248555
0.9998431014
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9248322293
-1.0045248555
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8558007816
0.8662952838
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:36:55) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
	print(round(SOMA,10))
-- OUTPUT:
0.9248322293
1.0045248555
0.9998431014
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 16:36:59) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
print(round(SOMA,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 16:37:05) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
print(round(SOMA,10))
-- EXECUTION TIME:
0.214305
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 23:53:00) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
print(round(SOMA,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 23:53:27) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
print(round(SOMA,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 23:53:40) 
-- CODE:
from math import*

x= eval(input("angulo em radinas: "))
k= int(input("numero de k: "))

CO = 1     #contador

SINAL = -1 #o primeiro sinal

SOMA= x   #o primeiro termo

EXP=3      #o expoente

while(CO<k):
	SOMA= SOMA + (SINAL * ( (x)**EXP) / factorial(EXP ) )
	SINAL = SINAL * (-1)
	EXP = EXP + 2
	CO+=1
print(round(SOMA,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
