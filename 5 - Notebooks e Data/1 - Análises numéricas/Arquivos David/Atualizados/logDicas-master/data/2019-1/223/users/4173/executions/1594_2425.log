== TEST (2019-03-19 16:49:28) 
-- CODE:
Assert = 3
-- OUTPUT:
900.0
75.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 16:49:48) 
-- CODE:
Assert = 3
print(Assert)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 16:49:56) 
-- CODE:
Assert = 3
print(Assert)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 16:57:26) 
-- CODE:
Assert = tomar no cu
print(Assert)
-- ERROR:
File "XXXX", line 1
    Assert = tomar no cu
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 16:57:33) 
-- CODE:
Assert = tomar_no_cu
print(Assert)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    Assert = tomar_no_cu
NameError: name 'tomar_no_cu' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 16:59:55) 
-- CODE:
if = 5/5 + 3
True = 1 + 3 = 5
-- ERROR:
File "XXXX", line 1
    if = 5/5 + 3
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:00:16) 
-- CODE:
if = 5/5 + 3
True = 1 + 3 = 5
print(if)
-- ERROR:
File "XXXX", line 1
    if = 5/5 + 3
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:00:16) 
-- CODE:
if = 5/5 + 3
True = 1 + 3 = 5
print(if)
-- ERROR:
File "XXXX", line 1
    if = 5/5 + 3
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:00:17) 
-- CODE:
if = 5/5 + 3
True = 1 + 3 = 5
print(if)
-- ERROR:
File "XXXX", line 1
    if = 5/5 + 3
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:00:17) 
-- CODE:
if = 5/5 + 3
True = 1 + 3 = 5
print(if)
-- ERROR:
File "XXXX", line 1
    if = 5/5 + 3
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:00:17) 
-- CODE:
if = 5/5 + 3
True = 1 + 3 = 5
print(if)
-- ERROR:
File "XXXX", line 1
    if = 5/5 + 3
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:06:17) 
-- CODE:
a = nao_e_hora_de_progamar	
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a = nao_e_hora_de_progamar	
NameError: name 'nao_e_hora_de_progamar' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:06:24) 
-- CODE:
a = nao_
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a = nao_
NameError: name 'nao_' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:06:26) 
-- CODE:
a = nao
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a = nao
NameError: name 'nao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:06:30) 
-- CODE:
a=nao
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a=nao
NameError: name 'nao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:07:00) 
-- CODE:
a = "nao_e_hora_de_progamar"
print(a)
-- OUTPUT:
nao_e_hora_de_progamar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:07:37) 
-- CODE:
a = "essa_vida_de_estudar_e_chata_porém_é"
print(a)
-- OUTPUT:
essa_vida_de_estudar_e_chata_porém_é
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:08:09) 
-- CODE:
a = "essa_vida_de_estudar_e_chata_por"
print(a)
-- OUTPUT:
essa_vida_de_estudar_e_chata_por
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:09:04) 
-- CODE:
a = "essa_vida_de_estudar_e_chata_porem_da_um_pouco_de_MONEYYYYY_MONEY_MONEYYYYYYYYYYYYYYYYYYYY"
print(a)
-- OUTPUT:
essa_vida_de_estudar_e_chata_porem_da_um_pouco_de_MONEYYYYY_MONEY_MONEYYYYYYYYYYYYYYYYYYYY
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:09:31) 
-- CODE:
a = "essa_vida_de_estudar_e_chata_porem_da_um_pouco_de_MONEYYYYY_MONEY_MONEYYYYYYYYYYYYYYYYYYYY"
print(a)
-- OUTPUT:
essa_vida_de_estudar_e_chata_porem_da_um_pouco_de_MONEYYYYY_MONEY_MONEYYYYYYYYYYYYYYYYYYYY
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:11:09) 
-- CODE:
a = int(input())	
b = a**2
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a = int(input())	
ValueError: invalid literal for int() with base 10: '28.572'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:11:14) 
-- CODE:
a = int(input())	
b = a**2
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a = int(input())	
ValueError: invalid literal for int() with base 10: '28.572'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:11:29) 
-- CODE:
a = int(input())	
b = a**2
print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a = int(input())	
ValueError: invalid literal for int() with base 10: '28.572'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:16) 
-- CODE:
print(9999*9999)
-- OUTPUT:
99980001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:20) 
-- CODE:
print(9999**9999)
-- OUTPUT:
3678978362165515792692625984783565804550254385734776186401856613845616360874750523676165256293320372567032110928366569599432699044419901243683670414060788244958198542680024242555554443351351009201406913420042334263191360440293163925263158121905901809215111676734097618278012767257225075955830464560320325882929419607338700417637982216741626089370630527817919858248244425067882107032040504992133693942984257209267233391108496072474133573230329041350621303555562644061581689489773346475812382861630761542671206427399665195254818870660761299953367109234343296185246620947655303971825992891467766505449702800439539931629360781232287044852497103043500184438484564204069490370009909530341317336334459448625114891862723875368733284186382707049409415586173190187044779587133413954719164091602407423040277644116344823196694780496108829093860394544019077913975064195661487863596355153601977696894647060796078336789818901664700936711780540601588027849120357502804206125775390530395449721795143559185701130989019
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:30) 
-- CODE:
print(999999**9999)
-- OUTPUT:
9900508188497344467695642571704040024810111529703439980591553835120863591246605409304054830077978842020717318011664618591852357142227149471031559592681942974816029137352075677323724082677003814247920337214891684349255127990972762577181155735249818081512647326629484442080604337897252295831083065190151760928332144638048058938288503933276913257295244388388818242103465860021797574425712826403097774658898889116065587666962181734455098579844448307889485773912138065460750755659602832068612298271126821913583924994956835174232889878147147173467479125335261875656769756730861067946260705495446336450260935218161490348856741239109759978910913057969300630436063248307696722403832631253288445080390446531387711748223470647790443664186999705768566418371323556523007372264309320626260743426482347066406126212862648208995539386200458855863819954437878954023829624717212587504105727629955370498841653844602349930018131499198616905766776391892057373550714280336374254954354599113527215699617221606694228332886688
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:32) 
-- CODE:
print(9999999**9999)
-- OUTPUT:

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:33) 
-- CODE:
print(99999999**9999)
-- OUTPUT:

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:35) 
-- CODE:
print(999999999**9999)
-- OUTPUT:

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:38) 
-- CODE:
print(9999999999**9999)
-- OUTPUT:

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:20:55) 
-- CODE:
print(99999999999999999999999999999999**9999)
-- OUTPUT:

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:21:20) 
-- CODE:
print(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999**9999)
-- OUTPUT:

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:27:53) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:26) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:27) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:28) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:28) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:28) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:28) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:28) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:28) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a+b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual de 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:28:54) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual a 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print("a + b")
-- OUTPUT:
a + b
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:29:03) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual a 0.000006% para sentar em uma cadeira"
b = "its is impossible"
print(a + b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual a 0.000006% para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:29:16) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no começo cada um tem chance igual a 0.000006porcento para sentar em uma cadeira"
b = "its is impossible"
print(a + b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no começo cada um tem chance igual a 0.000006porcento para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:29:53) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeira"
b = "its is impossible"
print(a + b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:30:10) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeira"
b = "its is impossible"
print(a + b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:30:19) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeira"
b = "its is impossible"
print(a + " " b)
-- ERROR:
File "XXXX", line 3
    print(a + " " b)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:30:22) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeira"
b = "its is impossible"
print(a + "" b)
-- ERROR:
File "XXXX", line 3
    print(a + "" b)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:30:23) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeira"
b = "its is impossible"
print(a + "" b)
-- ERROR:
File "XXXX", line 3
    print(a + "" b)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:30:25) 
-- CODE:
a = "se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeira"
b = "its is impossible"
print(a +  b)
-- OUTPUT:
se o 616 vai sempre lotado, porem no comeco cada um tem chance igual a 0.000006porcento para sentar em uma cadeiraits is impossible
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:35:07) 
-- CODE:
String = "salve rapaziada luan game plays aqui"
print(String)
-- OUTPUT:
salve rapaziada luan game plays aqui
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:35:23) 
-- CODE:
String = "salve rapaziaçda luan game plays aqui"
print(String)
-- OUTPUT:
salve rapaziaçda luan game plays aqui
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:35:25) 
-- CODE:
String = "salve rapaziada luan game plays aqui"
print(String)
-- OUTPUT:
salve rapaziada luan game plays aqui
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:35:58) 
-- CODE:
print("eai caralho".upper()
-- ERROR:
File "XXXX", line 2
    
                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:36:04) 
-- CODE:
print("eai caralho").upper()
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    print("eai caralho").upper()
AttributeError: 'NoneType' object has no attribute 'upper'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:36:46) 
-- CODE:
a = "eai caralho"	
print(a.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7fc2ab603570>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:36:47) 
-- CODE:
a = "eai caralho"	
print(a.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f3356d8a570>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:36:50) 
-- CODE:
a = "eai caralho"	
print(a.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7ff986bb2570>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:36:54) 
-- CODE:
a = "eai caralho"	
print(a.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f7520f96570>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:37:12) 
-- CODE:
a = "eai caralho"	
print(a.upper())
-- OUTPUT:
EAI CARALHO
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:37:55) 
-- CODE:
a = "salve rapaziada, aqui estou mais um dia, sobre o olhar sanguinário do profeta"	
print(a.upper())
-- OUTPUT:
SALVE RAPAZIADA, AQUI ESTOU MAIS UM DIA, SOBRE O OLHAR SANGUINÁRIO DO PROFETA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:38:05) 
-- CODE:
a = "salve rapaziada, aqui estou mais um dia, sobre o olhar sanguinario do profeta"	
print(a.upper())
-- OUTPUT:
SALVE RAPAZIADA, AQUI ESTOU MAIS UM DIA, SOBRE O OLHAR SANGUINARIO DO PROFETA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:44:31) 
-- CODE:
input("Por favor digite viadão a baixo:"end)
print(input)
-- ERROR:
File "XXXX", line 1
    input("Por favor digite viadão a baixo:"end)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:44:37) 
-- CODE:
input("Por favor digite viadao a baixo:"end)
print(input)
-- ERROR:
File "XXXX", line 1
    input("Por favor digite viadao a baixo:"end)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:44:41) 
-- CODE:
input("Por favor digite viadao a baixo:"end)
print(input)
-- ERROR:
File "XXXX", line 1
    input("Por favor digite viadao a baixo:"end)
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:44:47) 
-- CODE:
input("Por favor digite viadao a baixo:")
print(input)
-- OUTPUT:
<built-in function input>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:45:03) 
-- CODE:
input("Por favor digite viadao a seguir:")
print(input)
-- OUTPUT:
<built-in function input>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:47:17) 
-- CODE:
input("Nome:")
input("Sobre-nome:")
input("Idade:")
input("Endereco:")
input("Banco:")
input("Numero do cartao:")
input("Validade(Mes e ano):")

print(input)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:48:35) 
-- CODE:
input("Nome:")
input("Sobre-nome:")
input("Idade:")
input("Endereco:")
input("Banco:")
input("Numero do cartao:")
input("Validade(Mes e ano):")

print(input)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 17:49:28) 
-- CODE:
input("Nome:")
input("Sobre-nome:")
input("Idade:")
input("Endereco:")
input("Banco:")
input("Numero do cartao:")
input("Validade(Mes e ano):")

print(input)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:41:11) 
-- CODE:
String = "oi"
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 20:45:23) 
-- CODE:
var = input("digite um numero:")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    input()
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 01:22:57) 
-- CODE:
km = float(input())
litro = float(input())

print("consumo medio",round(km/litro,3))
-- OUTPUT:
consumo medio 14.286
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 01:23:12) 
-- CODE:
km = float(input())
litro = float(input())

print("consumo medio",round(km/litro,3))
-- EXECUTION TIME:
0.144156
-- TEST CASE 1:
---- input:
28.572
2
---- correct output:
14.286 km/l
---- user output:
consumo medio 14.286
-- TEST CASE 2:
---- input:
2254
124.4
---- correct output:
18.119 km/l
---- user output:
consumo medio 18.119
-- TEST CASE 3:
---- input:
4554
464.6
---- correct output:
9.802 km/l
---- user output:
consumo medio 9.802
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 01:23:52) 
-- CODE:
km = float(input())
litro = float(input())

print("km/l",round(km/litro,3))
-- EXECUTION TIME:
0.256228
-- TEST CASE 1:
---- input:
28.572
2
---- correct output:
14.286 km/l
---- user output:
km/l 14.286
-- TEST CASE 2:
---- input:
2254
124.4
---- correct output:
18.119 km/l
---- user output:
km/l 18.119
-- TEST CASE 3:
---- input:
4554
464.6
---- correct output:
9.802 km/l
---- user output:
km/l 9.802
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 01:23:54) 
-- CODE:
km = float(input())
litro = float(input())

print("km/l",round(km/litro,3))
-- EXECUTION TIME:
0.168383
-- TEST CASE 1:
---- input:
28.572
2
---- correct output:
14.286 km/l
---- user output:
km/l 14.286
-- TEST CASE 2:
---- input:
2254
124.4
---- correct output:
18.119 km/l
---- user output:
km/l 18.119
-- TEST CASE 3:
---- input:
4554
464.6
---- correct output:
9.802 km/l
---- user output:
km/l 9.802
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 01:23:55) 
-- CODE:
km = float(input())
litro = float(input())

print("km/l",round(km/litro,3))
-- OUTPUT:
km/l 14.286
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 01:24:11) 
-- CODE:
km = int(input())
litro = int(input())

print("km/l",round(km/litro,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    km = int(input())
ValueError: invalid literal for int() with base 10: '28.572'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 01:24:18) 
-- CODE:
km = int(input())
litro = int(input())

print("km/l",round(km/litro,3))
-- EXECUTION TIME:
0.141074
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1594/2425/main.py", line 1, in <module>
    km = int(input())
ValueError: invalid literal for int() with base 10: '28.572'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 01:26:14) 
-- CODE:
a = float(input())
b = float(input())

print("km/l",round(a/b,3))
-- OUTPUT:
km/l 14.286
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 01:26:22) 
-- CODE:
a = float(input())
b = float(input())

print("km/l",round(a/b,3))
-- EXECUTION TIME:
0.138952
-- TEST CASE 1:
---- input:
28.572
2
---- correct output:
14.286 km/l
---- user output:
km/l 14.286
-- TEST CASE 2:
---- input:
2254
124.4
---- correct output:
18.119 km/l
---- user output:
km/l 18.119
-- TEST CASE 3:
---- input:
4554
464.6
---- correct output:
9.802 km/l
---- user output:
km/l 9.802
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-25 01:26:35) 
-- CODE:
a = float(input())
b = float(input())

print("km/l",round(a/b,3))
-- OUTPUT:
km/l 14.286
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-25 01:26:47) 
-- CODE:
a = float(input())
b = float(input())

print(round(a/b,3),"km/l")
-- EXECUTION TIME:
0.132889
-- TEST CASE 1:
---- input:
28.572
2
---- correct output:
14.286 km/l
---- user output:
14.286 km/l
-- TEST CASE 2:
---- input:
2254
124.4
---- correct output:
18.119 km/l
---- user output:
18.119 km/l
-- TEST CASE 3:
---- input:
4554
464.6
---- correct output:
9.802 km/l
---- user output:
9.802 km/l
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 10:15:07) 
-- CODE:
a = float(input())
b = float(input())

print(round(a/b,3),"km/l")
-- OUTPUT:
14.286 km/l
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
