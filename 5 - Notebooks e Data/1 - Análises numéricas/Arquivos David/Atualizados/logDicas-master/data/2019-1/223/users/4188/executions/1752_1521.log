== TEST (2019-05-16 17:09:57) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e!=0):
	e=(e+q)-n
	sem=sem+1
print(sem)
	
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 17:12:34) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e -n!=0):
	e=e -n + q
	sem=sem+1
print(sem)
	
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 17:14:18) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e <n):
	e=e -n + q
	sem=sem+1
print(sem)
	
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 17:15:04) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e <n):
	e=e -n + q
	sem=sem+1
print(sem)
	
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 17:15:35) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e <n):
	e=e -n + q
	sem=sem+1
	print(e)
print(sem)
	
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 17:16:45) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e !=0 ):
	e=e -n + q
	sem=sem+1
	print(e)
print(sem)
	
-- OUTPUT:
40
20
0
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 17:22:38) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e >0 ):
	e=e -n + q
	sem=sem+1
print(sem)
	
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 17:22:57) 
-- CODE:
n=int(input("capacidade: "))
e=int(input("estoque: "))
q=int(input("quantidade: "))
sem=0
while(e >0 ):
	e=e -n + q
	sem=sem+1
print(sem)
	
-- EXECUTION TIME:
0.544106
-- TEST CASE 1:
---- input:
40
60
20
---- correct output:
3
---- user output:
3
-- TEST CASE 2:
---- input:
2
100
1
---- correct output:
100
---- user output:
100
-- TEST CASE 3:
---- input:
10
50
9
---- correct output:
50
---- user output:
50
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
