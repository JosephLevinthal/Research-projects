== TEST (2019-04-27 05:15:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:17:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a=b=c):
	print("equilatero")


-- ERROR:
File "XXXX", line 7
    if (a=b=c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:17:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:25:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
	if (a==b!=c and a==c!=b and c==b!=a):
	print("isosceles")
	if (a!=b!=c):
	print("escaleno")
	if (a,b,c=<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:35:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
	if (a==b or b==c):
	print("isosceles")
	if (a!=b!=c):
	print("escaleno")
	if (a,b,c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:36:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
	if (a==b or b==c or a==c):
	print("isosceles")
	if (a!=b!=c):
	print("escaleno")
	if (a,b,c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:36:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
	elif (a==b or b==c or a==c):
	print("isosceles")
	if (a!=b!=c):
	print("escaleno")
	if (a,b,c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    elif (a==b or b==c or a==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:37:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
	elif(a==b or b==c or a==c):
	print("isosceles")
	if (a!=b!=c):
	print("escaleno")
	if (a,b,c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    elif(a==b or b==c or a==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:37:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
	if (a!=b!=c):
	print("escaleno")
	if (a,b,c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 12
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:37:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
	if (a,b,c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 13
    if (a,b,c<0)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:37:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if (a,b,c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 13
    if (a,b,c<0)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:38:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if (a<0 and b<0 and c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 13
    if (a<0 and b<0 and c<0)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:39:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if (a<0 or b<0 or c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 13
    if (a<0 or b<0 or c<0)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:40:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if (a<0 or b<0 or c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 14
    if (a<0 or b<0 or c<0)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:41:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
elif (a<0 or b<0 or c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 14
    elif (a<0 or b<0 or c<0)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:42:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 or b<0 or c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 14
    if(a<0 or b<0 or c<0)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:43:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
	if(a<0 or b<0 or c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 14
    if(a<0 or b<0 or c<0)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:44:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0)
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 14
    if(a<0 and b<0 and c<0)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:44:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0)
print("invalido")
	
	


-- ERROR:
File "XXXX", line 14
    if(a<0 and b<0 and c<0)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:44:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 15
    print("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:44:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:45:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:46:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:47:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if (a==b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:48:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
#
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if (a==b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:49:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
else:
if (a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:50:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):

if (a+b>c and a+c>b and c+b>a):
	if(a==b==c)
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if (a+b>c and a+c>b and c+b>a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:50:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):

	if (a+b>c and a+c>b and c+b>a):
	if(a==b==c)
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 11
    if(a==b==c)
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:50:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):

	if (a+b>c and a+c>b and c+b>a):
if(a==b==c)
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 11
    if(a==b==c)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:51:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if(a==b==c)
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b==c)
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:51:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if(a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:51:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
if(a==b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b==c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:52:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
if(a==b and b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b and b==c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:52:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
if(a==b and b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b and b==c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:52:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if(a==b and b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b and b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:53:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if(a==b and b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b and b==c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:54:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if(a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and  b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:54:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if (a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if (a == b and  b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:54:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
if (a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if (a == b and  b == c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:55:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
if (a == b and  b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if (a == b and  b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:55:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
if (a+b>c and a+c>b and c+b>a):
if (a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if (a+b>c and a+c>b and c+b>a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:56:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if (a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if (a == b and  b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:56:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if  (a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if  (a == b and  b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:56:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if (a+b>c and a+c>b and c+b>a):
	if(a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and  b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:56:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if(a+b>c and a+c>b and c+b>a):
	if(a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and  b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:57:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if(a+b > c and a+c > b and c+b>a):
	if(a == b and  b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and  b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:58:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if(a+b>c and a+c>b and c+b>a):
	if(a == b and b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:59:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 05:59:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a>0 and b>0 and c>0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a==b and b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b and b==c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:01:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a==b and b==c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a==b and b==c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:02:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if( a == b and b == c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if( a == b and b == c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:02:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if( a = = b and b = = c):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if( a = = b and b = = c):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:02:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if( a == b and b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if( a == b and b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:02:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if (a+b>c and a+c>b and c+b>a):
if ( a == b and b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if ( a == b and b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:03:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:03:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:03:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:04:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:04:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c ):
print("equilatero")
elif(a==b or b==c or a==c):
print("isosceles")
if (a!=b!=c):
print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if(a+b>c and a+c>b and c+b>a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:05:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
if (a+b>c and a+c>b and c+b>a):
if (a == b and b == c ):
print("equilatero")
elif(a==b or b==c or a==c):
print("isosceles")
if (a!=b!=c):
print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if (a+b>c and a+c>b and c+b>a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:05:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0 ):
	if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c ):
	print("equilatero")
elif(a==b or b==c or a==c):
	print("isosceles")
if (a!=b!=c):
	print("escaleno")
if(a<0 and b<0 and c<0):
	print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c ):
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:05:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0):
if (a+b>c and a+c>b and c+b>a):
if (a == b and b == c ):
print("equilatero")
elif(a==b or b==c or a==c):
print("isosceles")
if (a!=b!=c):
print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if (a+b>c and a+c>b and c+b>a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:06:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c >0):
if (a + b > c and a + c > b and c + b > a):
if (a == b and b == c ):
print("equilatero")
elif(a==b or b==c or a==c):
print("isosceles")
if (a!=b!=c):
print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if (a + b > c and a + c > b and c + b > a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:06:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c > 0):
if (a + b > c and a + c > b and c + b > a):
if (a == b and b == c ):
print("equilatero")
elif(a==b or b==c or a==c):
print("isosceles")
if (a!=b!=c):
print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if (a + b > c and a + c > b and c + b > a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:07:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
if(a + b > c and a + c > b and c + b > a):
if(a == b and b == c ):
print("equilatero")
elif(a==b or b==c or a==c):
print("isosceles")
if (a!=b!=c):
print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if(a + b > c and a + c > b and c + b > a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:07:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0 and b>0 and c>0):
if(a+b>c and a+c>b and c+b>a):
if(a == b and b == c ):
print("equilatero")
elif(a==b or b==c or a==c):
print("isosceles")
if (a!=b!=c):
print("escaleno")
if(a<0 and b<0 and c<0):
print("invalido")
	
	


-- ERROR:
File "XXXX", line 9
    if(a+b>c and a+c>b and c+b>a):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:08:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
        if(a>0 and b>0 and c>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 8
    if(a>0 and b>0 and c>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:08:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0 and b>0 and c>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 10
    if(a == b and b == c ):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:08:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
   if(a>0 and b>0 and c>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 8
    if(a>0 and b>0 and c>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:09:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
  if(a>0 and b>0 and c>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 8
    if(a>0 and b>0 and c>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:09:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
 if(a>0 and b>0 and c>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 8
    if(a>0 and b>0 and c>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:09:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
    if(a>0 and b>0 and c>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 8
    if(a>0 and b>0 and c>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:09:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
   if(a>0andb>0andc>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 8
    if(a>0andb>0andc>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:09:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
   if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
   if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 8
    if(a>0and b>0and c>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:10:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
   print("equilatero")
   elif(a==b or b==c or a==c):
   print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 11
    print("equilatero")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:10:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
      print("equilatero")
   elif(a==b or b==c or a==c):
      print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 11
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:11:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
   if (a!=b!=c):
   print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 15
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:11:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
   if (a!=b!=c):
      print("escaleno")
   if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 17
    print("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:11:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
   if (a!=b!=c):
      print("escaleno")
   if(a<0 and b<0 and c<0):
      print("invalido")
	
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 06:13:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
   if (a!=b!=c):
      print("escaleno")
   if(a<0 and b<0 and c<0):
      print("invalido")
	
	


-- EXECUTION TIME:
0.204937
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:14:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
   if (a!=b!=c):
         print("escaleno")
   if(a<0 and b<0 and c<0):
      print("invalido")
	
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:19:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
      print("invalido")
	
	


-- ERROR:
File "XXXX", line 17
    print("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:19:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
   print("invalido")
	
	


-- ERROR:
File "XXXX", line 17
    print("invalido")
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:19:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
         print("invalido")
	
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:24:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
         print("invalido")
	   if(a>0 and b>0 and c >0):
	      print("invalido")


-- ERROR:
File "XXXX", line 18
    if(a>0 and b>0 and c >0):
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:25:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
         print("invalido")
	   if(a>0and b>0and c >0):
	      print("invalido")


-- ERROR:
File "XXXX", line 18
    if(a>0and b>0and c >0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:25:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
         print("invalido")
	  
	      print("invalido")


-- ERROR:
File "XXXX", line 19
    print("invalido")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:26:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
         print("invalido")
	   print("invalido")

	     


-- ERROR:
File "XXXX", line 18
    print("invalido")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:26:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a==b or b==c or a==c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
         print("invalido")
	      print("invalido")

	     


-- ERROR:
File "XXXX", line 18
    print("invalido")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:27:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a<0 and b<0 and c<0):
         print("invalido")
	     

	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:29:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a!0 and b!0 and c!0):
         print("invalido")
	     

	     


-- ERROR:
File "XXXX", line 16
    if(a!0 and b!0 and c!0):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:29:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a and b and c):
         print("invalido")
	     

	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:30:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a and b and c):
         print("invalido")
	   if(a and b and c):   
   print("invalido")
	     


-- ERROR:
File "XXXX", line 18
    if(a and b and c):   
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:31:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a and b and c):
         print("invalido")
	   if(a or b or c):   
   print("invalido")
	     


-- ERROR:
File "XXXX", line 18
    if(a or b or c):   
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:31:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a and b and c):
         print("invalido")
	   elif(a or b or c):   
   print("invalido")
	     


-- ERROR:
File "XXXX", line 18
    elif(a or b or c):   
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:31:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a and b and c):
         print("invalido")
	elif(a or b or c):   
   print("invalido")
	     


-- ERROR:
File "XXXX", line 18
    elif(a or b or c):   
                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:32:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      if(a!=b!=c):
         print("escaleno")
      if(a and b and c):
         print("invalido")
	      elif(a or b or c):   
      print("invalido")
	     


-- ERROR:
File "XXXX", line 18
    elif(a or b or c):   
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:34:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      
         print("escaleno")
     
         print("invalido")
	       
      print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
escaleno
invalido
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:35:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      
         print("escaleno")
     
         print("invalido")
	       
      
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
escaleno
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:36:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
      else:
         print("invalido")
	   else:    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:37:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
         else:
         print("escaleno")
         else:
         print("invalido")
	      else:    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:38:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
         else:(a!=b!=c):
         print("escaleno")
         else:(a and b and c):
         print("invalido")
	      else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a!=b!=c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:38:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a!=b!=c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a!=b!=c):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:39:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a=b=c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a=b=c):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:39:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a!= b!= c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a!= b!= c):
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:41:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(ax= bx= c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(ax= bx= c):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:41:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a = b = c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a = b = c):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:42:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a 0= b 0= c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a 0= b 0= c):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:42:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a!0= b!0= c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a!0= b!0= c):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:43:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a>0= b>0= c):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a>0= b>0= c):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:43:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:(a>0= b>0= c>0):
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 14
    else:(a>0= b>0= c>0):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:44:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
      else:(a and b and c):
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 16
    else:(a and b and c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:44:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
      else:
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 16
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:44:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
	   else:(a or b or c):    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 18
    else:(a or b or c):    
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:44:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
	   else:    
         print("invalido")
	     


-- ERROR:
File "XXXX", line 18
    else:    
            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:44:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
else:    
         print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 06:45:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
else:    
         print("invalido")
	     


-- EXECUTION TIME:
0.127142
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:45:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
else:    
         print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:45:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 06:46:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
else:    
   print("invalido")
	     


-- EXECUTION TIME:
0.128211
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:46:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
         print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:47:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a>0and b>0and c>0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:48:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if(a+b>c and a+c>b and c+b>a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:49:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:49:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, " , ", b, " , ", c,)
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0  ,  4.0  ,  4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:52:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, " , ", b, " , ", c,)
print("tipo de triangolo:invalido")
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0  ,  4.0  ,  4.0
tipo de triangolo:invalido
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:52:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, " , ", b, " , ", c,)
print("tipo de triangolo")
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0  ,  4.0  ,  4.0
tipo de triangolo
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:53:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, " , ", b, " , ", c,)
print("tipo de triangolo")
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0  ,  4.0  ,  4.0
tipo de triangolo
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:53:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, " , ", b, " , ", c,)
print("tipo de triangolo:")
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- OUTPUT:
Entradas: 2.0  ,  4.0  ,  4.0
tipo de triangolo:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 06:53:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, " , ", b, " , ", c,)
print("tipo de triangolo:")
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")
	     


-- EXECUTION TIME:
0.165582
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0  ,  4.0  ,  4.0
tipo de triangolo:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3  ,  4.4  ,  5.5
tipo de triangolo:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0  ,  2.0  ,  7.0
tipo de triangolo:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:54:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, " , ", b, " , ", c,)
print("tipo de triangolo:")
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("tipo de triangolo:invalido")
	     


-- OUTPUT:
Entradas: 2.0  ,  4.0  ,  4.0
tipo de triangolo:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:54:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
print("tipo de triangolo:")
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("tipo de triangolo:invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangolo:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:55:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("tipo de triangolo:invalido")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:56:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("tipo de triangolo:")
	     


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:56:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
     


-- ERROR:
File "XXXX", line 21
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:57:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and b == c ):
         print("equilatero")
      elif(a == b or b == c or a == c):
         print("isosceles")
      else:
         print("escaleno")
   else:
      print("invalido")
else:    
   print("invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:57:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and b == c ):
         print ("equilatero")
      elif (a == b or b == c or a == c):
         print ("isosceles")
      else:
         print ("escaleno")
   else:
      print ("invalido")
else:    
   print ("invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 06:58:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if (a < 0 and b < 0 and c < 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and b == c ):
         print ("equilatero")
      elif (a == b or b == c or a == c):
         print ("isosceles")
      else:
         print ("escaleno")
   else:
      print ("invalido")
else:    
   print ("invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:01:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c and c == b):
         print ("equilatero")
      elif (a == b or b == c or a == c):
         print ("isosceles")
      else:
         print ("escaleno")
   else:
      print ("invalido")
else:    
   print ("invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:03:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c and c == b):
         print ("equilatero")
      elif (a == b or b == c or a == c):
         print ("isosceles")
      else:
         print ("escaleno")
   else:
      print ("invalido")
else:    
   print ("invalido")


-- ERROR:
File "XXXX", line 3
    from math import"
                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:03:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c and c == b):
         print ("equilatero")
      elif (a == b or b == c or a == c):
         print ("isosceles")
      else:
         print ("escaleno")
   else:
      print ("invalido")
else:    
   print ("invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:04:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("equilatero")
      elif (a == b or b == c or a == c):
         print ("isosceles")
      else:
         print ("escaleno")
   else:
      print ("invalido")
else:    
   print ("invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:07:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilátero")
      elif (a == b or b == c or a == c):
         print ("Isósceles")
      else:
         print ("Escaleno")
   else:
      print ("Inválido")
else:    
   print ("Inválido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:08:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilátero")
      elif (a == b or b == c or a == c):
         print ("Isósceles")
      else:
         print ("Escaleno")
   else:
      print ("Inválido")
else:    
   print ("Inválido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:10:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilátero")
      elif (a == b or b == c or a == c):
         print ("Isósceles*)
      else:
         print ("Escaleno*)
   else:
      print ("Inválido*)
else:    
   print ("Inválido")


-- ERROR:
File "XXXX", line 13
    print ("Isósceles*)
                       ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:12:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilátero")
      elif (a == b or b == c or a == c):
         print ("Isósceles")
      else:
         print("Escaleno")
   else:
      print ("Inválido")
else:    
   print ("Inválido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Isósceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:13:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:13:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,"",b,"",c,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- OUTPUT:
Entradas: 2.0  4.0  4.0
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:16:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de saida:">",">",">,)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- ERROR:
File "XXXX", line 8
    print("Tipo de saida:">",">",">,)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:16:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de saida:">",">",">)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- ERROR:
File "XXXX", line 8
    print("Tipo de saida:">",">",">)
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:16:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de saida:"0","0","0)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- ERROR:
File "XXXX", line 8
    print("Tipo de saida:"0","0","0)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:16:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de Saida:"0","0","0)
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- ERROR:
File "XXXX", line 8
    print("Tipo de Saida:"0","0","0)
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:17:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de Saida:Invalido")
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de Saida:Invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:18:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de Triangolo:Invalido")
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:    
   print ("Invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de Triangolo:Invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:18:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de triangolo:Invalido")
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:Invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:19:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de triangolo:invalido")
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:20:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de triangolo:inválido")
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:inválido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 07:20:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
print("Tipo de triangolo:invalido")
if(a > 0 and b > 0 and c > 0):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:42:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
print("Tipo de triangolo:invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
    
   


-- ERROR:
File "XXXX", line 9
    print("Tipo de triangolo:invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:42:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:44:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:
   print ("Invalido")    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:44:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:
   print ("Invalido")    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:46:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:
   print ("Invalido")    
   


-- ERROR:
File "XXXX", line 3
    from math import"
                    ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:46:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:
   print ("Invalido")    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:47:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print (*Invalido*)
else:
   print ("Invalido")    
   


-- ERROR:
File "XXXX", line 18
    print (*Invalido*)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:49:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,):
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido"):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:
   print ("Invalido")    
   


-- ERROR:
File "XXXX", line 7
    print("Entradas:",a,",",b,",",c,):
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:49:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido"):
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:
   print ("Invalido")    
   


-- ERROR:
File "XXXX", line 9
    print("Tipo de triangolo: invalido"):
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:49:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print ("Equilatero")
      elif (a == b or b == c or a == c):
         print ("Isosceles")
      else:
         print("Escaleno")
   else:
      print ("Invalido")
else:
   print ("Invalido")    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:50:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
      print("Invalido")
else:
   print("Invalido")    
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:51:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
      print("Invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:51:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   
      

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 08:51:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo: invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   
      

     
   


-- EXECUTION TIME:
0.17074
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo: invalido
Isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangolo: invalido
Escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangolo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:52:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo":)
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   
      

     
   


-- ERROR:
File "XXXX", line 9
    print("Tipo de triangolo":)
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:52:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   
      

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:53:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
		print("invalido")
else:
	print("invalido")  

     
   


-- ERROR:
File "XXXX", line 18
    print("invalido")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:54:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	print("invalido")
else:
	print("invalido")  

     
   


-- ERROR:
File "XXXX", line 18
    print("invalido")
                    ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:54:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
else:
	print("invalido")  

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-27 08:54:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
else:
	print("invalido")  

     
   


-- EXECUTION TIME:
0.170638
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:
Isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangolo:
Escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangolo:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:55:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:55:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- ERROR:
File "XXXX", line 9
    print("Tipo de triangolo:")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:55:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
   print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- ERROR:
File "XXXX", line 7
    print("Entradas:",a,",",b,",",c,)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:55:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:56:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:""invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:56:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:" "invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:57:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")("invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print("Tipo de triangolo:")("invalido")
TypeError: 'NoneType' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:57:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:""invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
  

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:58:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:""invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
   else:
	   print("invalido")
     
   


-- ERROR:
File "XXXX", line 19
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:58:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if(a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:""invalido")
   if(a + b > c and a + c > b and c + b > a):
      if(a == b and a == c):
         print("Equilatero")
      elif(a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
else:
	 print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 08:59:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:""invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print("Equilatero")
      elif (a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
else:
	 print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:00:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangolo:")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print("Equilatero")
      elif (a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
else:
	 print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangolo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:00:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print("Equilatero")
      elif (a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
else:
	 print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:01:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print("Equilatero")
      elif (a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")
else:
	 print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:01:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print("Equilatero")
      elif (a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:03:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:""invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print("Equilatero")
      elif (a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:03:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:" "invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
         print("Equilatero")
      elif (a == b or b == c or a == c):
         print("Isosceles")
      else:
         print("Escaleno")
   else:
	   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:04:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:" "invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
	   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:06:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
           print("Tipo de triangulo: invalido")
   if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
	   print("invalido")

     
   


-- ERROR:
File "XXXX", line 10
    if (a + b > c and a + c > b and c + b > a):
                                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:06:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
           print("Tipo de triangulo: invalido")
      if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
	   print("invalido")

     
   


-- ERROR:
File "XXXX", line 10
    if (a + b > c and a + c > b and c + b > a):
                                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:06:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
           print("Tipo de triangulo: invalido")
      if (a + b > c and a + c > b and c + b > a)
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
	   print("invalido")

     
   


-- ERROR:
File "XXXX", line 10
    if (a + b > c and a + c > b and c + b > a)
                                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:06:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
           print("Tipo de triangulo: invalido")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
	   print("invalido")

     
   


-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:07:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
           print("Tipo de triangulo: invalido")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
	   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:07:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
print("Tipo de triangulo: invalido")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
	   print("invalido")

     
   


-- ERROR:
File "XXXX", line 9
    print("Tipo de triangulo: invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:07:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: invalido")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
	   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:08:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: invalido")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
	   print("invalido")

     
   


-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:08:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: invalido")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
print("invalido")

     
   


-- ERROR:
File "XXXX", line 18
    print("invalido")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:08:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: invalido")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:09:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: ")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: 
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:09:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo: ")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: 
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:09:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
   print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:10:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
   print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:10:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
   print("invalido")
   else:
      print("invalido")
     
   


-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:10:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
      print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:11:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
      print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:11:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
      else:
           print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:11:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
           print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:11:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
           print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:11:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
           print("invalido")
   else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:12:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
else:
           print("invalido")
      else:
           print("invalido")
     
   


-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:12:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
       print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:12:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
      else:
       print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:12:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
      else:
         print("invalido")
else:
    print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:13:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")
if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
      print("invalido")
else:
print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:17:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
 if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
   else:
      print("invalido")
else:
print("invalido")
     
   


-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:17:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
 if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
      elif (a == b or b == c or a == c):
           print("Isosceles")
      else:
           print("Escaleno")
      else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 17
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:18:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
 if (a + b > c and a + c > b and c + b > a):
      if (a == b and a == c):
           print("Equilatero")
         elif (a == b or b == c or a == c):
            print("Isosceles")
         else:
            print("Escaleno")
      else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:18:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
   if (a + b > c and a + c > b and c + b > a):
        if (a == b and a == c):
            print("Equilatero")
         elif (a == b or b == c or a == c):
            print("Isosceles")
         else:
            print("Escaleno")
      else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:18:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
   if (a + b > c and a + c > b and c + b > a):
        if (a == b and a == c):
            print("Equilatero")
            elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
            print("Escaleno")
      else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:19:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
   if (a + b > c and a + c > b and c + b > a):
        if (a == b and a == c):
               print("Equilatero")
            elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
            print("Escaleno")
      else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:19:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
   if (a + b > c and a + c > b and c + b > a):
        if (a == b and a == c):
               print("Equilatero")
         elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
            print("Escaleno")
      else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:20:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
   if (a + b > c and a + c > b and c + b > a):
         if (a == b and a == c):
            print("Equilatero")
         elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
               print("Escaleno")
      else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:20:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
  
   if (a + b > c and a + c > b and c + b > a):
         if (a == b and a == c):
            print("Equilatero")
         elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
               print("Escaleno")
   else:
         print("invalido")
else:
   print("invalido")
     
   


-- OUTPUT:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:22:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
  
   if (a + b > c and a + c > b and c + b > a):
         if (a == b and a == c):
            print("Equilatero")
         elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
               print("Escaleno")
   else:
         print("invalido")
else:
   print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:24:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
         elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
               print("Escaleno")
   else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 9
    print("Tipo de triangulo:")  
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:24:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
         elif (a == b or b == c or a == c):
               print("Isosceles")
         else:
               print("Escaleno")
   else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:25:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
         elif (a == b or b == c or a == c):
            print("Isosceles")
         else:
            print("Escaleno")
   else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:25:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
      elif (a == b or b == c or a == c):
            print("Isosceles")
      else:
            print("Escaleno")
   else:
         print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:25:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
       elif (a == b or b == c or a == c):
            print("Isosceles")
       else:
            print("Escaleno")
   else:
         print("invalido")
else:
   print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:26:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
       elif (a == b or b == c or a == c):
            print("Isosceles")
       else:
            print("Escaleno")
    else:
          print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:26:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
"from math import"
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
       elif (a == b or b == c or a == c):
            print("Isosceles")
       else:
            print("Escaleno")
   else:
      print("invalido")
else:
   print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:27:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
       elif (a == b or b == c or a == c):
            print("Isosceles")
       else:
            print("Escaleno")
   else:
      print("invalido")
else:
   print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:27:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
       elif (a == b or b == c or a == c):
            print("Isosceles")
       else:
            print("Escaleno")
   else:
      print("invalido")
else:
   print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:30:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
       elif (a == b or b == c or a == c):
            print("Isosceles")
       else:
            print("Escaleno")
   else:
      print("invalido")
else:
   print("invalido")
     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
Isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 11:52:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("Equilatero")
      elif (a == b or b == c or a == c):
            print("Isosceles")
      else:
            print("Escaleno")
   else:
      print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 14
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 11:54:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
       if (a == b and a == c):
            print("equilatero")
      elif (a == b or b == c or a == c):
            print("isosceles")
      else:
            print("escaleno")
   else:
      print("invalido")
else:
   print("invalido")
     
   


-- EXECUTION TIME:
0.195785
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 14
    elif (a == b or b == c or a == c):
                                     ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:15:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:",a,",",b,",",c,)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
			if (a == b and a == c):
            print("equilatero")
			elif (a == b or b == c or a == c):
            print("isosceles")
			else:
            print("escaleno")
	else:
      print("invalido")
else:
   print("invalido")
     
   


-- EXECUTION TIME:
0.15087
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 12
    if (a == b and a == c):
                          ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:18:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
			if (a == b and a == c):
            print("equilatero")
			elif (a == b or b == c or a == c):
            print("isosceles")
			else:
				print("escaleno")
	else:
		print("invalido")
else:
   print("invalido")
     
   


-- EXECUTION TIME:
0.150729
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 12
    if (a == b and a == c):
                          ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:18:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
			if (a == b and a == c):
            print("equilatero")
			elif (a == b or b == c or a == c):
            print("isosceles")
			else:
				print("escaleno")
	else:
		print("invalido")
else:
   print("invalido")
     
   


-- ERROR:
File "XXXX", line 12
    if (a == b and a == c):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:19:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
			if (a == b and a == c):
            print("equilatero")
			elif (a == b or b == c or a == c):
            print("isosceles")
			else:
				print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- EXECUTION TIME:
0.135707
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 12
    if (a == b and a == c):
                          ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:23:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
			if (a == b and a == c):
            print("equilatero")
			elif (a == b or b == c or a == c):
            print("isosceles")
			else:
				print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 12
    if (a == b and a == c):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:23:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
			if (a == b and a == c):
            print("equilatero")
			elif (a == b or b == c or a == c):
            print("isosceles")
			else:
				print("escaleno")
	else:
	print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 12
    if (a == b and a == c):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:25:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
   if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
            print("equilatero")
		elif (a == b or b == c or a == c):
            print("isosceles")
		else:
				print("escaleno")
	else:
	print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 12
    if (a == b and a == c):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:26:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
if (a == b and a == c):
print("equilatero")
elif (a == b or b == c or a == c):
print("isosceles")
else:
print("escaleno")
else:
print("invalido")
else:
print("invalido")
     
   


-- ERROR:
File "XXXX", line 12
    if (a == b and a == c):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:28:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
	if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 11
    if (a + b > c and a + c > b and c + b > a):
                                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:29:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
	if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
				print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 11
    if (a + b > c and a + c > b and c + b > a):
                                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:30:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
	if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
		print("equilatero")
		elif (a == b or b == c or a == c):
		print("isosceles")
		else:
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 11
    if (a + b > c and a + c > b and c + b > a):
                                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:30:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
		print("equilatero")
		elif (a == b or b == c or a == c):
		print("isosceles")
		else:
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 13
    print("equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:31:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
		print("isosceles")
		else:
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 15
    print("isosceles")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:31:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
		print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 17
    print("escaleno")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:31:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:32:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
		else:
			print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:32:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
	else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 18
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:32:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
else:
		print("invalido")
else:
	print("invalido")
     
   


-- ERROR:
File "XXXX", line 20
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:33:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
else:
		print("invalido")

     
   


-- OUTPUT:
Tipo de triangulo:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:34:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
else:
		print("invalido")

     
   


-- EXECUTION TIME:
0.143697
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:34:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
else:
		print("invalido")

     
   


-- OUTPUT:
Tipo de triangulo:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:35:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
else:
		print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 12:36:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
else:
		print("invalido")

     
   


-- EXECUTION TIME:
0.194286
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:
invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 12:36:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
from math import*

a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
print("Entradas:", a, ",", b, ",", c)
if (a > 0 and b > 0 and c > 0):
   print("Tipo de triangulo:")  
if (a + b > c and a + c > b and c + b > a):
		if (a == b and a == c):
			print("equilatero")
		elif (a == b or b == c or a == c):
			print("isosceles")
		else:
			print("escaleno")
else:
		print("invalido")

     
   


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
