== TEST (2019-04-12 22:00:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome):
   nome=cervo eh patrono do Harry Potter
   print(nome)
else:
	nome=nao eh patrono do Harry Potter
	print(nome)
	
-- ERROR:
File "XXXX", line 6
    nome=cervo eh patrono do Harry Potter
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:03:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome = cervo):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
File "XXXX", line 5
    if(nome = cervo):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:03:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:04:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == nome):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:05:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == nome):
   print("cervo eh patrono do Harry Potter")
else:
	print("asno nao eh patrono do Harry Potter")
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:06:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == nome):
   print("asno nao patrono do Harry Potter")
else:
	print("asno eh patrono do Harry Potter")
	
-- OUTPUT:
asno nao patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 22:06:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == nome):
   print("asno nao patrono do Harry Potter")
else:
	print("asno eh patrono do Harry Potter")
	
-- EXECUTION TIME:
0.137598
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
asno nao patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
asno nao patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:07:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == asno):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == asno):
NameError: name 'asno' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:08:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:08:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome = cervo):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
File "XXXX", line 5
    if(nome = cervo):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:10:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
   print("cervo eh patrono do Harry Potter")
else(<entrada>):
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
File "XXXX", line 7
    else(<entrada>):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:13:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome != cervo):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome != cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:17:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome = cervo):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
File "XXXX", line 5
    if(nome = cervo):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:17:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(cervo):
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:19:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
	nome=cervo
   print("cervo eh patrono do Harry Potter")
else:
	print("nao eh patrono do Harry Potter")
	
-- ERROR:
File "XXXX", line 7
    print("cervo eh patrono do Harry Potter")
                                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:21:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
	 nome= "cervo eh patrono do Harry Potter"
else:
	nome= "nao eh patrono do Harry Potter"
	print(nome)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:21:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome = cervo):
	 nome= "cervo eh patrono do Harry Potter"
else:
	nome= "nao eh patrono do Harry Potter"
	print(nome)
	
-- ERROR:
File "XXXX", line 5
    if(nome = cervo):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:21:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
	 nome= "cervo eh patrono do Harry Potter"
else:
	nome= "nao eh patrono do Harry Potter"
	print(nome)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:23:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
	 mens= "cervo eh patrono do Harry Potter"
else:
	mens= "nao eh patrono do Harry Potter"
	print(nome)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:24:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == cervo):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nao eh patrono do Harry Potter")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == cervo):
NameError: name 'cervo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:28:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == animal):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nao eh patrono do Harry Potter")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == animal):
NameError: name 'animal' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:28:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome = animal):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nao eh patrono do Harry Potter")
	
	
-- ERROR:
File "XXXX", line 5
    if(nome = animal):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:29:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome = potrono):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nao eh patrono do Harry Potter")
	
	
-- ERROR:
File "XXXX", line 5
    if(nome = potrono):
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:29:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == potrono):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nao eh patrono do Harry Potter")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == potrono):
NameError: name 'potrono' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:30:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == potrono):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nome nao eh patrono do Harry Potter")
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(nome == potrono):
NameError: name 'potrono' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:31:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nome nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 22:32:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nome nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.189363
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:34:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nome nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:40:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome=="cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nome nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:41:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome=="cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 22:41:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome=="cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.165557
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
asno nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:42:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome=="cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 22:42:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome=="cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.151056
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:43:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome=="cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 22:44:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.124776
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
asno nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:44:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nome nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:58:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome.lower() == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("nome nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 22:59:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome.lower() == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 22:59:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome.lower() == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.251488
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
asno nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:00:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome.lower() == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("<nome> nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 23:00:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome.lower() == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("<nome> nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.22398
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
<nome> nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:01:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 23:01:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print("cervo eh patrono do Harry Potter")
else:
	 print("asno nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.143312
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
asno nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:17:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print(nome,"cervo eh patrono do Harry Potter")
else:
	 print(nome,"nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 23:17:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print(nome,"cervo eh patrono do Harry Potter")
else:
	 print(nome,"nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.183528
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
bode nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:18:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print(nome,"cervo eh patrono do Harry Potter")
else:
	 print(nome,"nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:18:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print(nome , "cervo eh patrono do Harry Potter")
else:
	 print(nome , "nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 23:19:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print(nome , "cervo eh patrono do Harry Potter")
else:
	 print(nome , "nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.150779
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
bode nao eh patrono do Harry Potter
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-12 23:20:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print(nome , "eh patrono do Harry Potter")
else:
	 print(nome , "nao eh patrono do Harry Potter")
	
	
-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 23:20:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
nome=input("nome: ")
if(nome .lower() == "cervo"):
	 print(nome , "eh patrono do Harry Potter")
else:
	 print(nome , "nao eh patrono do Harry Potter")
	
	
-- EXECUTION TIME:
0.144659
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
bode nao eh patrono do Harry Potter
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
