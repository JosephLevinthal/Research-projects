== TEST (2019-04-23 17:53:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de trinagulo:","invalido")
elif( (A < B + C) or (B < A + C) or (C < A + B) ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de trinagulo:","invalido")

	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de trinagulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 17:53:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de trinagulo:","invalido")
elif( (A < B + C) or (B < A + C) or (C < A + B) ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de trinagulo:","invalido")

	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de trinagulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:17:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((x >= y + z) or (y >= x + z) or (z >= y + x)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    elif((x >= y + z) or (y >= x + z) or (z >= y + x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:17:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((x >= y + z) or (y >= x + z) or (z >= y + x)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    elif((x >= y + z) or (y >= x + z) or (z >= y + x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:18:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")

	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    elif((x >= y + z) or (y >= x + z) or (z >= y + x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:22:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif:((A == B) and (B == C)):
		print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")

	
	
-- ERROR:
File "XXXX", line 14
    elif:((A == B) and (B == C)):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:22:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif(((A == B) and (B == C)):
		print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")

	
	
-- ERROR:
File "XXXX", line 14
    elif(((A == B) and (B == C)):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:23:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif((A == B) and (B == C)):
		print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")

	
	
-- ERROR:
File "XXXX", line 16
    print("Tipo de triangulo:","equilatero")
                                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:24:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif((A == B) and (B == C)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")

	
	
-- ERROR:
File "XXXX", line 16
    print("Tipo de triangulo:","equilatero")
                                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:26:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif((A == B) and (B == C)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")
elif((A == B) or (B == C) or (C == A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","isosceles")

	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:28:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif((A == B) and (B == C)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")
elif((A == B) or (B == C) or (C == A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","isosceles")

	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-23 22:30:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif((A == B) and (B == C)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")
elif((A == B) or (B == C) or (C == A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","isosceles")

	
	
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-23 22:33:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input("lado A:"))
B = float(input("lado B:"))
C = float(input("lado C:"))
 
if( A <= 0 or B <= 0 or C <= 0 ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
elif((A >= B + C) or (B >= A + C) or (C >= B + A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","invalido")
	
elif((A == B) and (B == C)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","equilatero")
elif((A == B) or (B == C) or (C == A)):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","isosceles")
elif((A != B) and (B != C) and (C != A) ):
	print("Entradas:",A,",",B,",",C)
	print("Tipo de triangulo:","escaleno")

	
	
-- EXECUTION TIME:
0.161906
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
