== TEST (2019-04-19 18:15:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * x)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (x**2) * (3*r - x))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:15:54) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * x)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (x**2) * (3*r - x))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:16:14) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * x)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (x**2) * (3*r - x))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    else:
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:16:18) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * x)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (x**2) * (3*r - x))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	
	
	
	
	
	
	
	
	
	
	else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:16:21) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * x)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (x**2) * (3*r - x))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	
	
	
	
	
	
	
	
	
	
	else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:16:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * x)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (x**2) * (3*r - x))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	print("a")
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    cil = (pi * (r**2) * x)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:29:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
cal = ((pi / 3) * (H**2) * (3*r - H))


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal) 
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 17
    if h > (cil + cal) 
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:29:25) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
cal = ((pi / 3) * (H**2) * (3*r - H))


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal):
		print("A")
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
A
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:30:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (H**2) * (3*r - H))
print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal):
		print("A")
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
cil: 187.79498405363702 esf: 50.965010421636 cal: -588.3532833740919
A
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:31:44) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (H**2) * (3*r - H))
print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal):
		h = V
		print("Entradas:", H,",",h,",",r)
		print("Volume: ",V)
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    h = V
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:31:56) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (H**2) * (3*r - H))
print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal):
		V = h
		print("Entradas:", H,",",h,",",r)
		print("Volume: ",V)
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
cil: 187.79498405363702 esf: 50.965010421636 cal: -588.3532833740919
Entradas: 11.3 , 5.7 , 2.3
Volume:  5.7
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:35:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (H**2) * (3*r - H))
print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal):
		print(cil+cal)
		print("Entradas:", H,",",h,",",r)
		print("Volume: ",V)
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    print("Volume: ",V)
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:35:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (H**2) * (3*r - H))
print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal):
		print(cil+cal)
		print("Entradas:", H,",",h,",",r)
		print("Volume: ")
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
cil: 187.79498405363702 esf: 50.965010421636 cal: -588.3532833740919
-400.5582993204549
Entradas: 11.3 , 5.7 , 2.3
Volume:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 18:41:22) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

cil = (pi * (r**2) * H)
esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (H**2) * (3*r - H))
print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if h > (cil + cal):
		print(cil+cal)
		print("Entradas:", H,",",h,",",r)
		print("Volume: ")
	if h == (2*r+cil)
		print("a")
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 22
    if h == (2*r+cil)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 20:54:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (R*3))



print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	prin(h*h*r)
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    esf = ((4/3) * pi * (R*3))
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 20:55:02) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (R*3))



print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	prin(h*h*r)
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    esf = ((4/3) * pi * (R*3))
NameError: name 'R' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 20:55:12) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))



print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	prin(H*h*r)
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print("cil:",cil,"esf:",esf,"cal:",cal)
NameError: name 'cil' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 20:55:42) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))



print("cil:",cil,"esf:",esf,"cal:",cal)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	prin(H*h*r)
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print("cil:",cil,"esf:",esf,"cal:",cal)
NameError: name 'cil' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 20:55:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))



if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	print(H*h*r)
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:08:38) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = (2 * cal + cil) * 1000
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:08:57) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:09:09) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		round(V)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:09:15) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		round(V,3)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:09:46) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		a = round(V,3)
		print("Volume: ", a, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:09:53) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)
		print("Volume: ", a, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:10:00) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
148.143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:12:13) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	elif 
V = round(V,3)	
print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 19
    elif 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:12:19) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
V = round(V,3)	
print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 30
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:12:35) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:13:50) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((cal + cil)) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
	elif (H )
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 23
    elif (H )
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:13:55) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((cal + cil)) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:28) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.115074
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.15523
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:29) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.142801
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.116346
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.0922849
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.174143
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:30) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.220721
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.320926
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.30873
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.284211
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.128893
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:31) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.350095
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.322289
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.284822
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.328252
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.381728
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:32) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.461992
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:16:33) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.349375
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:16:34) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:19:37) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
		
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:23:10) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	if (H > r + cal):
		V = ((2 * cal + cil) / 2) - ((pi / 3) * (r**2) * (3*r - r))
		print(V)
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:23:17) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	if (H > r + cal):
		V = ((2 * cal + cil) / 2) - ((pi / 3) * (r**2) * (3*r - r))
		print(V)
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 19, in <module>
    V = round(V,3)	
NameError: name 'V' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:23:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	if (H > r + cal):
		V = (((2 * cal + cil) / 2) - ((pi / 3) * (r**2) * (3*r - r))) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.180088
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:

-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-19 21:23:59) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (H == h + r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	if (H > r + cal):
		V = (((2 * cal + cil) / 2) - ((pi / 3) * (r**2) * (3*r - r))) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.113591
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:

-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:29:58) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h ):
		V = (((2 * cal + cil) / 2) - ((pi / 3) * (r**2) * (3*r - r))) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (H)
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    elif (H)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:30:07) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  119379.997 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:33:43) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = ((cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  119379.997 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-19 21:33:49) 
-- CODE:
# Teste todas as possibilidades de entradas 'H', 'h' e 'x'
# Se seu programa funciona para apenas um caso de tese, isso não quer dizer que ele vai funcionar para todos os outros
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = ((2 * cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = ((cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  119379.997 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:16:34) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = 
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = ((cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2r)	
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 13
    V = 
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:16:43) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = ((cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2r)
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 22
    elif (h < H - 2r)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:16:55) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = ((cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2r):
		print("a")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 22
    elif (h < H - 2r):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 00:17:06) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = ((cal + cil) / 2) * 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		print("a")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:05:18) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H + 2*r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		A = (cal + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:06:01) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		A = (cal + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:06:10) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (cal + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:06:28) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*cal + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:09:23) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:09:52) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:09:59) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:10:06) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:12:57) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil - cal)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:15:55) 
-- CODE:
from math import *

H = float(input("altura total do tanque: "))
h = float(input("nivel do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos inferior e superior: "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h > H - r):
		V = esf + cil - cal
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:17:20) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h > H - r):
		V = esf + cil - cal
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:44:15) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) - ()
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:44:20) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) - ()
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:44:29) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) - ()
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:44:36) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:44:40) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:57:33) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h  H - 2*r):
		V = (cal + cil)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 23
    elif (h  H - 2*r):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 01:57:40) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < H - r):
		V = 4
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  4 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:20:18) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.116616
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:20:20) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.193357
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:45) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.159071
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:46) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.180115
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:46) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.278356
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:46) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.147689
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1679/1102/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:46) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.373583
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:47) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.534383
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:47) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.391987
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:47) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.561846
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1679/1102/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:47) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.518214
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:47) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.562135
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 02:27:47) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.490629
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:29:18) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) - / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 19
    V = (esf + cil) - / 2
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:29:25) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) -4 / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:30:07) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:30:12) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:30:21) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (esf + cil) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:34:53) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:34:58) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf) / 2
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 02:35:09) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 03:00:56) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# 2 * esf = (esf + cil)/2
# cil / 2 = esf + cal
# esf = (cil - esf)/2
# esf = cil / 3


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 03:00:57) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# 2 * esf = (esf + cil)/2
# cil / 2 = esf + cal
# esf = (cil - esf)/2
# esf = cil / 3


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 03:00:57) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# 2 * esf = (esf + cil)/2
# cil / 2 = esf + cal
# esf = (cil - esf)/2
# esf = cil / 3


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 03:01:00) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# 2 * esf = (esf + cil)/2
# cil / 2 = esf + cal
# esf = (cil - esf)/2
# esf = cil / 3


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:20:39) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r):
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.202984
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:20:42) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:20:49) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:20:53) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:21:02) 
-- CODE:
from math import *

H = float(input("altura total do tanque (H): "))
h = float(input("nivel do combustivel no tanque (h): "))
r = float(input("raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:52:09) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:17:18) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("	Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.188285
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:17:18) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("	Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.12218
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:17:26) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

#
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h == r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h >= H - r):
		V = (2*esf)
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - 2*r): 
		V = (cal + cil) / 2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  106638.745 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:16:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)


(pi * x ** 2 * (r * 3 - x))/3
# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r)
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.267987
-- ERROR:
  File "/home/codebench/codes/1679/1102/main.py", line 27
    elif (h < H - r)
                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:16:07) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)


(pi * x ** 2 * (r * 3 - x))/3
# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r)
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    elif (h < H - r)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:16:09) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)


(pi * x ** 2 * (r * 3 - x))/3
# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r)
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 27
    elif (h < H - r)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:16:15) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)


(pi * x ** 2 * (r * 3 - x))/3
# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 36
    V *= 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:16:17) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)


(pi * x ** 2 * (r * 3 - x))/3
# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.146932
-- ERROR:
  File "/home/codebench/codes/1679/1102/main.py", line 36
    V *= 1000
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:16:17) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)


(pi * x ** 2 * (r * 3 - x))/3
# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 36
    V *= 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:16:26) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)


(pi * x ** 2 * (r * 3 - x))/3
# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    (pi * x ** 2 * (r * 3 - x))/3
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:16:41) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:16:42) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.188238
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:16:43) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal/2
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		cil = (pi * (r**2) * h-r)
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:18:16) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.245508
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Altura total do tanque (H): Nivel do combustivel no tanque (h): Raio dos bojos semiesfericos inferior e superior (r): Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Altura total do tanque (H): Nivel do combustivel no tanque (h): Raio dos bojos semiesfericos inferior e superior (r): Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Altura total do tanque (H): Nivel do combustivel no tanque (h): Raio dos bojos semiesfericos inferior e superior (r): Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:18:16) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:18:33) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.180478
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:18:34) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:18:59) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.177679
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:18:59) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.133475
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:00) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.147039
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:00) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.327637
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:01) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.321268
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:01) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.176831
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:01) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.417042
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:02) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.664878
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:02) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.66922
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:02) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.390215
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:02) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.532109
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:02) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.482616
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:03) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.556891
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  213277.489 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:03) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.492285
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:03) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * H)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.341152
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:05) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.173915
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:05) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.173654
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:05) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.319527
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.381189
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Altura total do tanque (H): Nivel do combustivel no tanque (h): Raio dos bojos semiesfericos inferior e superior (r): Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.19739
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1679/1102/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:19:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.5468
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.557522
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Altura total do tanque (H): Nivel do combustivel no tanque (h): Raio dos bojos semiesfericos inferior e superior (r): Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Altura total do tanque (H): Nivel do combustivel no tanque (h): Raio dos bojos semiesfericos inferior e superior (r): Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.547689
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:

-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Altura total do tanque (H): Nivel do combustivel no tanque (h): Raio dos bojos semiesfericos inferior e superior (r): Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:19:06) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.498603
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:19:10) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:19:13) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:19:17) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:19:21) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - r))
cil = (pi * (r**2) * h-r)

# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		V = (esf + cil - cal)
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  117910.948 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:24:57) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r)


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.156472
-- ERROR:
  File "/home/codebench/codes/1679/1102/main.py", line 19
    if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
                                                          ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:24:58) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r)


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 19
    if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
                                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:25:13) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r)


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.137878
-- ERROR:
  File "/home/codebench/codes/1679/1102/main.py", line 19
    if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
                                                          ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:25:14) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r)


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 19
    if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
                                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:25:15) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r)


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 19
    if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
                                                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 23:25:30) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
		 
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:25:36) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):		 
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.135742
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 23:25:37) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))


# esf/2
# cil = (esf + cal) * 2
# esf = (cil - esf) / 2
# esf = cil / 3
### esf + cil = VOLUME TANQUE ###


if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):		 
	if (h < r):
		V = cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")
	
	
	
	
	
	
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.207541
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 04:18:23) 
-- CODE:
from math import *

y = (pi * (r**2) * (h-r))
x = ((pi / 3) * (r**2) * (3*r - h))
z = ((4/3) * pi * (r**3))

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (esf/2) + cil
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.804763
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 3, in <module>
    y = (pi * (r**2) * (h-r))
NameError: name 'r' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 04:18:26) 
-- CODE:
from math import *

y = (pi * (r**2) * (h-r))
x = ((pi / 3) * (r**2) * (3*r - h))
z = ((4/3) * pi * (r**3))

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (esf/2) + cil
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.83795
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 3, in <module>
    y = (pi * (r**2) * (h-r))
NameError: name 'r' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 04:19:16) 
-- CODE:
from math import *

y = (pi * (r**2) * (h-r))
x = ((pi / 3) * (r**2) * (3*r - h))
z = ((4/3) * pi * (r**3))

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.705291
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 3, in <module>
    y = (pi * (r**2) * (h-r))
NameError: name 'r' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-01 14:53:57) 
-- CODE:
from math import *

y = (pi * (r**2) * (h-r))
x = ((pi / 3) * (r**2) * (3*r - h))
z = ((4/3) * pi * (r**3))

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    y = (pi * (r**2) * (h-r))
NameError: name 'r' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:53:59) 
-- CODE:
from math import *

y = (pi * (r**2) * (h-r))
x = ((pi / 3) * (r**2) * (3*r - h))
z = ((4/3) * pi * (r**3))

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.514088
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 3, in <module>
    y = (pi * (r**2) * (h-r))
NameError: name 'r' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:54:06) 
-- CODE:
from math import *

y = (pi * (r**2) * (h-r))
x = ((pi / 3) * (r**2) * (3*r - h))
z = ((4/3) * pi * (r**3))

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.877783
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 3, in <module>
    y = (pi * (r**2) * (h-r))
NameError: name 'r' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:54:51) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r))
x = ((pi / 3) * (r**2) * (3*r - h))
z = ((4/3) * pi * (r**3))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.763046
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:57:28) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		k = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - k


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.818128
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:58:24) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
0.889159
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:58:29) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
1.3317
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:58:30) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
1.5787
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:58:30) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
		


	elif (h < H - r):
		V = (z/2) + y
		


	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x


else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")

V *= 1000
V = round(V,3)	

print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")
-- EXECUTION TIME:
1.4842
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1102/main.py", line 32, in <module>
    V *= 1000
NameError: name 'V' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:59:33) 
-- CODE:
from math import *

H = float(input("(H): "))
h = float(input("(h): "))
r = float(input("(r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		
	elif (h < H - r):
		V = (esf/2) + cil
		
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
	
V *= 1000
		V = round(V,3)	
		print("Entradas:", H,",",h,",",r)
		print("Volume: ", V, "litros")

-- EXECUTION TIME:
0.598398
-- ERROR:
  File "/home/codebench/codes/1679/1102/main.py", line 28
    V = round(V,3)	
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 14:59:43) 
-- CODE:
from math import *

H = float(input("(H): "))
h = float(input("(h): "))
r = float(input("(r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		
	elif (h < H - r):
		V = (esf/2) + cil
		
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
		
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
	
V *= 1000
V = round(V,3)	
print("Entradas:", H,",",h,",",r)
print("Volume: ", V, "litros")

-- EXECUTION TIME:
0.905359
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 15:00:13) 
-- CODE:
from math import *

H = float(input("(H): "))
h = float(input("(h): "))
r = float(input("(r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
		
	elif (h < H - r):
		V = (esf/2) + cil
		
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
	
	V *= 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.666879
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 15:01:15) 
-- CODE:

from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
	
	
	
	elif (h < H - r):
		V = (z/2) + y
	
	
	
	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x
	
	
	V *= 1000
	V = round(V,3)	
	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")


-- EXECUTION TIME:
0.756307
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
HhrEntradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
HhrEntradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
HhrEntradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-01 15:02:50) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
	
	
	
	elif (h < H - r):
		V = (z/2) + y
	
	
	
	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x
	
	
	V *= 1000
	V = round(V,3)	
	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")


-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-01 15:05:40) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
	
	
	
	elif (h < H - r):
		V = (z/2) + y
	
	
	
	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x
	
	
	V *= 1000
	V = round(V,3)
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-01 15:06:16) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
	
	
	
	elif (h < H - r):
		V = (z/2) + y
	
	
	
	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x
	
	
	V *= 1000
	V = round(V,3)
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-01 15:06:19) 
-- CODE:
from math import *

H = float(input("H"))
h = float(input("h"))
r = float(input("r"))

y = (pi * (r**2) * (h-r)) # cilindro
x = ((pi / 3) * (r**2) * (3*r - h)) # caloa
z = ((4/3) * pi * (r**3)) # esfera

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = x
	
	
	
	elif (h < H - r):
		V = (z/2) + y
	
	
	
	elif (h <= H):
		x = (pi/3) * (H-h)**2 * (3 * r - H+h)
		y = pi * r **2 * (H-2*r)
		V = z + y - x
	
	
	V *= 1000
	V = round(V,3)
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")
	
else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-01 15:07:51) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
	
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
	
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
	
	V *= 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")

else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987190.678 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-01 15:07:58) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
	
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
	
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
	
	V *= 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")

else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987190.678 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 15:08:05) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
	
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
	
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
	
	V *= 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")

else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.778873
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987190.678 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 15:08:12) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
	
	elif (h < H - r):
		V = (esf/2) + cil
		V *=  1000
	
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
	
	V *= 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")

else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.834622
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987190.678 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-01 15:08:17) 
-- CODE:
from math import *

H = float(input("Altura total do tanque (H): "))
h = float(input("Nivel do combustivel no tanque (h): "))
r = float(input("Raio dos bojos semiesfericos inferior e superior (r): "))

esf = ((4/3) * pi * (r**3))
cal = ((pi / 3) * (r**2) * (3*r - h))
cil = (pi * (r**2) * (h-r))

if H > 0 and h > 0 and r > 0 and H > h and H > (2 * r):
	if (h < r):
		V = cal
	
	elif (h < H - r):
		V = (esf/2) + cil
		
	
	elif (h <= H):
		cal = (pi/3) * (H-h)**2 * (3 * r - H+h)
		cil = pi * r **2 * (H-2*r)
		V = esf + cil - cal
	
	V *= 1000
	V = round(V,3)	
	print("Entradas:", H,",",h,",",r)
	print("Volume: ", V, "litros")

else:
	print("Entradas:", H,",",h,",",r)
	print("Entradas invalidas")
-- EXECUTION TIME:
0.750913
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume:  81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
