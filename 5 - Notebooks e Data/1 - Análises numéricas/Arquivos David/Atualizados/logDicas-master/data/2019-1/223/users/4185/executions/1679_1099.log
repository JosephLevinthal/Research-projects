== TEST (2019-04-24 08:41:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) or (b==c) or (c==a):
	print("isosceles")
	
elif (a!=c) or (a!=b) or (b!=c):
	print("escaleno")
	
else:
	print("equilatero")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 08:41:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) or (b==c) or (c==a):
	print("isosceles")
	
elif (a!=c) or (a!=b) or (b!=c):
	print("escaleno")
	
else:
	print("equilatero")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:42:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) or (b==c) or (c==a):
	print("isosceles")
	
elif (a!=c) or (a!=b) or (b!=c):
	print("escaleno")
	
else:
	print("equilatero")
-- EXECUTION TIME:
0.253183
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:42:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) or (b==c) or (c==a):
	print("isosceles")
	
elif (a!=c) or (a!=b) or (b!=c):
	print("escaleno")
	
else:
	print("equilatero")
-- EXECUTION TIME:
0.0815051
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1679/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:47:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.153778
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:47:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.333875
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:47:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.118245
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:47:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.264187
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:47:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.280508
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:47:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.309431
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:51:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.187726
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 08:51:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.151084
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 09:00:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.195228
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 09:00:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.198043
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 09:00:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.159189
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 09:00:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.170352
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1099/main.py", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 09:04:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b= float(input("valor de b: "))
c= float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 09:05:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if (a>=b+C) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
NameError: name 'C' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 09:06:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 09:07:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 09:07:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 09:07:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 09:08:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("'invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 09:12:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.176897
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:31:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.247268
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:31:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.191497
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:34:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:34:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:35:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:36:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.135804
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:37:02) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a<=b+c) and (b<=a+c) and (c<=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:37:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a<=b+c) and (b<=a+c) and (c<1=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.159129
-- ERROR:
  File "/home/codebench/codes/1679/1099/main.py", line 7
    if (a<=b+c) and (b<=a+c) and (c<1=a+b) or (a<0) or (b<0) or (c<0):
                                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:37:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a<=b+c) and (b<=a+c) and (c<1=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- ERROR:
File "XXXX", line 7
    if (a<=b+c) and (b<=a+c) and (c<1=a+b) or (a<0) or (b<0) or (c<0):
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:37:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a<=b+c) and (b<=a+c) and (c<=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 13:38:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a<=b+c) and (b<=a+c) and (c<=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.156147
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:17:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) and (a<0) and (b<0) and (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:18:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) and (a<0) and (b<0) and (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 16:18:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) and (a<0) and (b<0) and (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:18:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) and (b>=a+c) and (c>=a+b) and (a<0) and (b<0) and (c<0):
	print("invalido")

elif (a==b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.137349
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:23:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c) or (b>=a+c) or (c>=a+b) or (a<0) or (b<0) or (c<0):
	print("invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.181986
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:24:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.17582
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:26:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)
if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.221334
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:26:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("invalido")

elif (a==b) and (b==c):
	print("equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("isosceles")
	
else:
	print("escaleno")
-- EXECUTION TIME:
0.169185
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:28:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or (a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")

elif (a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("Tipo de triangulo: isosceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.168068
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:29:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) and (a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")

elif (a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("Tipo de triangulo: isosceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.197728
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:29:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) and(a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")

elif (a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("Tipo de triangulo: isosceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.131122
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 16:30:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de sVR
a = float(input("valor de a: "))
b = float(input("valor de b: "))
c = float(input("valor de c: "))
print("Entradas:", a, ",", b, ",", c)

if (a>=b+c or b>=a+c or c>=a+b) or(a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")

elif (a==b) and (b==c):
	print("Tipo de triangulo: equilatero")
	
elif (a==c) or (a==b) or (b==c):
	print("Tipo de triangulo: isosceles")
	
else:
	print("Tipo de triangulo: escaleno")
-- EXECUTION TIME:
0.180334
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
