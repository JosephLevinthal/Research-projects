== TEST (2019-04-27 09:51:49) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) and (h <= 0) and (r <= 0) and (H < h) and (H < 2*r):
	print("Entradas:" H , h , r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 7
    print("Entradas:" H , h , r)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:52:14) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) and (h <= 0) and (r <= 0) and (H < h) and (H < 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 7
    print("Entradas:" H , h , r)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:53:08) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) and (h <= 0) and (r <= 0) and (H < h) and (H < 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
-- ERROR:
File "XXXX", line 7
    print("Entradas:" H , h , r)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:53:23) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) and (h <= 0) and (r <= 0) and (H < h) and (H < 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print(ok)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(ok)
NameError: name 'ok' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:53:40) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) and (h <= 0) and (r <= 0) and (H < h) and (H < 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:56:13) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) and (h <= 0) and (r <= 0):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:56:21) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) and (h <= 0) and (r <= 0):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:56:54) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:58:36) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:58:51) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:59:06) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-27 09:59:26) 
-- CODE:
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
else:
	print("ok")
-- OUTPUT:
ok
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:37:48) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

Vcil = pi*(r**2)*H
Ve = (4/3)*pi*(r**3)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif:
	print("Entradas:", H, h, r)
	print("Volume:", Vcil, "litros")
	print("Volume:", Ve, "litros")
-- ERROR:
File "XXXX", line 14
    elif:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:38:06) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

Vcil = pi*(r**2)*H
Ve = (4/3)*pi*(r**3)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", Vcil, "litros")
	print("Volume:", Ve, "litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 187.79498405363702 litros
Volume: 50.965010421636 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:41:18) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

Vtcil = pi*(r**2)*H
Ve = (4/3)*pi*(r**3)
Vtce = Vtcil-(Ve/2)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", round(Vcil, 3),"litros")
	print("Volume:", round(Ve, 3),"litros")
	print("Volume:", round(Vtce, 3), "litros")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 17, in <module>
    print("Volume:", round(Vcil, 3),"litros")
NameError: name 'Vcil' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:41:51) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite o nivel de combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

Vtcil = pi*(r**2)*H
Ve = (4/3)*pi*(r**3)
Vtce = Vtcil-(Ve/2)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", round(Vtcil, 3),"litros")
	print("Volume:", round(Ve, 3),"litros")
	print("Volume:", round(Vtce, 3), "litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 187.795 litros
Volume: 50.965 litros
Volume: 162.312 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:52:04) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = pi*(r**2)*H

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = (4/3)*pi*(r**3)

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = pi*(r**2)*h

#Volume parcial no cilindo esférico => h <= H:
Vpce = Vpcil-(Ve/4)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(H == h):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vtce, 3), "litros")
elif(h <= H):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpce, 3), "litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81.987 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:52:38) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = pi*(r**2)*H

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = (4/3)*pi*(r**3)

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = pi*(r**2)*h

#Volume parcial no cilindo esférico => h <= H:
Vpce = Vpcil-(Ve/4)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(H == h):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vtce, 3), "litros")
elif(h <= H):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpce, 3), "litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81.987 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:54:46) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = pi*(r**2)*H

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = (4/3)*pi*(r**3)

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = pi*(r**2)*h

#Volume parcial no cilindo esférico => h <= H:
Vpce = Vpcil-(Ve/4)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpce, 3), "litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81.987 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:55:25) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = pi*(r**2)*H

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = (4/3)*pi*(r**3)

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = pi*(r**2)*h

#Volume parcial no cilindo esférico => h <= H:
Vpce = Vpcil-(Ve/4)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpce, 3), "litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81.987 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 08:55:45) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = pi*(r**2)*H

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = (4/3)*pi*(r**3)

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = pi*(r**2)*h

#Volume parcial no cilindo esférico => h <= H:
Vpce = Vpcil-(Ve/4)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpce, 3), "litros")
-- EXECUTION TIME:
0.139292
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 81.987 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 08:58:14) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h <= H:
Vpce = Vpcil-(Ve/4)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpce, 3), "litros")
-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 08:58:35) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h <= H:
Vpce = Vpcil-(Ve/4)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

else:
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpce, 3), "litros")
-- EXECUTION TIME:
0.116162
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:13:40) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal


if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h >= H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:14:04) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal


if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h >= H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:14:23) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal


if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h >= H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

-- EXECUTION TIME:
0.129785
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:15:10) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal


if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:15:37) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal


if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:16:06) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal


if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:16:28) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo esférico => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal


if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

-- EXECUTION TIME:
0.285673
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:21:09) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = Vtce - Vpcm - Vpcs
	print("Entradas:", H, h, r)
	print("Volume:", round(Vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:21:23) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = Vtce - Vpcm - Vpcs
	print("Entradas:", H, h, r)
	print("Volume:", round(Vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:21:45) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = Vtce - Vpcm - Vpcs
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:22:16) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = Vtce - Vpcm - Vpcs
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- EXECUTION TIME:
0.205035
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:24:33) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vtce-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = Vtce - Vpcm - Vpcs
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- EXECUTION TIME:
0.135562
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:24:38) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vtce-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = Vtce - Vpcm - Vpcs
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:26:38) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vtce-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = (pi/3)*(h)**2*(3*r-h)
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:27:12) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vtce-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h >= r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h < r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:27:53) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vtce-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:28:19) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/2)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)

#Volume parcial na parte superior do tanque => h > H-r:
Vpcs = Vtce-(Ve/2)-cal

#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")
	
elif(h > H-r):	
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- EXECUTION TIME:
0.147672
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 69245.938 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:37:07) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/4)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)


#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- EXECUTION TIME:
0.139852
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:38:15) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/8)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)


#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 88357.817 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 09:38:27) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/8)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)


#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- EXECUTION TIME:
0.150889
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 88357.817 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:38:49) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(Ve/8)

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)


#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 88357.817 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:43:26) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-(pi*(r**2)*r)+((pi/3)*r**2)*(3*r)-r

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)


#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 94726.143 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-28 09:45:04) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)*1000

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))*1000

#Volume total do cilindo esférico => H = h:
Vtce = Vtcil-(Ve/2)

#Volume parcial do cilindro => h < H
Vpcil = (pi*(r**2)*h)*1000

#Volume parcial no cilindo medio => h => r e <= H-r:
Vpcm = Vpcil-((pi*(r**2)*r)+(((pi/3)*r**2)*(3*r)-r))

#Volume da calota esferica
x = H-h
cal = (pi/3)*(x)**2*(3*r-x)


#Volume parcial no cilindo esférico => h > H-r:
Vpcs = Vpcil-(Ve/2)-cal

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")
#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h <= r):
	vi = 1000*((pi/3)*(h)**2*(3*r-h))
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 94654.296 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 19:05:42) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da calota h <= r
cal = (pi/3)*(h)**2*(3*r-h)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h < r):
	vi = 1000*cal
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")
	
	
	
	#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 31, in <module>
    print("Volume:", round(Vpcm, 3), "litros")
NameError: name 'Vpcm' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 19:06:07) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiperifericos: "))

#Volume total do cilindo => H = h:
Vtcil = (pi*(r**2)*H)

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da calota h <= r
cal = (pi/3)*(h)**2*(3*r-h)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# na parte inferior o volume e igual ao volume da calota inferior
elif(h < r):
	vi = 1000*cal
	print("Entradas:", H, h, r)
	print("Volume:", round(vi, 3), "litros")
	
	
	
	#no cilindro o volume equivale ao volume do cilindro
elif(h > r) and (h <= H-r):
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcm, 3), "litros")

# na parte superior o volume e igual ao volume total do cilindro, menos o colume de ar na calota
elif(h > H-r):	
#Volume parcial na parte superior do tanque => h > H-r:
	Vpcs = Vtce-(Ve/2)-cal
	print("Entradas:", H, h, r)
	print("Volume:", round(Vpcs, 3), "litros")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 31, in <module>
    print("Volume:", round(Vpcm, 3), "litros")
NameError: name 'Vpcm' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:16:48) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))


#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3)

#Volume da calota h < r
cal = (pi/3)*(h)**2*(3*r-h)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h < r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")
	

-- ERROR:
File "XXXX", line 15
    cal = (pi/3)*(h)**2*(3*r-h)
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:18:04) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))


#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h < r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")
	

-- ERROR:
File "XXXX", line 14
    if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
                                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:20:54) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h < r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")
	

-- ERROR:
File "XXXX", line 13
    if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r):
                                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:22:37) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h < r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")
	

-- ERROR:
File "XXXX", line 13
    if(H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2):
                                                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:23:05) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3)

if(H <= 0) or (h <=0) or (r <= 0) or (H <= h):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h < r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")
	

-- ERROR:
File "XXXX", line 13
    if(H <= 0) or (h <=0) or (r <= 0) or (H <= h):
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:24:14) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h < r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")
	

-- ERROR:
File "XXXX", line 13
    if(H <= 0) or (h <=0) or (r <= 0) or (H <= h):
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:25:19) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h > r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:33:44) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera anterior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:44:06) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H, h, r)
	print("Volume:", round(vss, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:45:10) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H, h, r)
	print("Volume:", round(vss, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:45:51) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H, h, r)
	print("Volume:", round(vss, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 20:46:29) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H, h, r)
	print("Volume:", round(vss, 3), "litros")
	

-- EXECUTION TIME:
0.174448
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 9.5 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 4.0 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:48:14) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H, h, r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H, h, r)
	print("Volume:", round(vss, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:53:07) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H,",", h,"," r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H, h, r)
	print("Volume:", round(vss, 3), "litros")
	

-- ERROR:
File "XXXX", line 14
    print("Entradas:", H,",", h,"," r)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:53:22) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H,",", h,",", r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H, h, r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H, h, r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H, h, r)
	print("Volume:", round(vss, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 5.7 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 20:54:12) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H,",", h,",", r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H,",", h,",", r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H,",", h,",", r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H,",", h,",", r)
	print("Volume:", round(vss, 3), "litros")
	

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 20:54:35) 
-- CODE:
from math import *
# Leitura das medidas tanque:
H = float(input("Digite a altura do tanque: "))
h = float(input("Digite a altura do combustivel no tanque: "))
r = float(input("raio dos bojos semiesfericos: "))

#Volume total da esfera => semiesfera inferiro e semiesfera superior:
Ve = ((4/3)*pi*(r**3))

#Volume da semiesfera:
se = (2/3*pi*(r**3))

if((H <= 0) or (h <=0) or (r <= 0) or (H <= h) or (H <= 2*r)):
	print("Entradas:", H,",", h,",", r)
	print("Entradas invalidas")

# Volume no corpo do cilindro
elif(h >= r):
	cil = (pi*(r**2)*(h-r)) + se 	
	vcil = 1000*cil
	print("Entradas:", H,",", h,",", r)
	print("Volume:", round(vcil, 3), "litros")

# Volume na semiesfera iferior
elif(h < r):
	si = pi/3*(h**2)*(3*r-h) 	
	vsi = 1000*si
	print("Entradas:", H,",", h,",", r)
	print("Volume:", round(vsi, 3), "litros")

# Volume na semiesfera superior	
elif(r > H - h):
	ss = (cil + 2*se)-si
	vss = 1000*ss
	print("Entradas:", H,",", h,",", r)
	print("Volume:", round(vss, 3), "litros")
	

-- EXECUTION TIME:
0.236067
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
