== TEST (2019-04-13 08:31:30) 
-- CODE:
#Preço 
pr= float(input("Insira o preço:"))
pa= float(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta " + pr-pa
else:
	pf="Troco de " + pa-pr

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    pf="Troco de " + pa-pr
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:31:45) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta " + pr-pa
else:
	pf="Troco de " + pa-pr

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    pf="Troco de " + pa-pr
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:32:35) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta " + (pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    pf="Troco de " + (pa-pr)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:33:14) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= int(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta " + (pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    pa= int(input())
ValueError: invalid literal for int() with base 10: '12.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:33:28) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= int(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta " + (pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    pa= int(input())
ValueError: invalid literal for int() with base 10: '12.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:33:54) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))

if (pr<=pa):
	pf= (pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    pf="Troco de " + (pa-pr)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:34:59) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta "+(pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    pf="Troco de " + (pa-pr)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:38:40) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))

if (pr<=pa):
	pf="Troco de " + (pa-pr)
else:
	pf="Falta "+(pr-pa)

print(round(pf,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    pf="Falta "+(pr-pa)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:39:57) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pa-pr)
pf2=(pr-pa)
if (pr<=pa):
	pf="Troco de " + pf1
else:
	pf="Falta "+ pf2

print(round(pf,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    pf="Falta "+ pf2
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 08:41:36) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
msg1="Falta "
msg2="Troco de "
if (pr<=pa):
	pf=msg1 + (pr-pa)
else:
	pf=msg2 + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    pf=msg2 + (pa-pr)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:44:50) 
-- CODE:
#Preço 
pr= int(input("Insira o preco:"))
pa= int(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta "+(pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    pr= int(input())
ValueError: invalid literal for int() with base 10: '38.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:10:02) 
-- CODE:
#Preço 
pr= int(input("Insira o preco:"))
pa= int(input("Insira o total pago:"))

if (pr<=pa):
	pf=(pr-pa)+ "Falta "
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    pr= int(input())
ValueError: invalid literal for int() with base 10: '38.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:12:53) 
-- CODE:
#Preço 
pr= int(input("Insira o preco:"))
pa= int(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta "+ (pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    pr= int(input())
ValueError: invalid literal for int() with base 10: '38.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:13:09) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta "+ (pr-pa)
else:
	pf="Troco de " + (pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    pf="Troco de " + (pa-pr)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:14:36) 
-- CODE:
#Preço 
pr= int(input("Insira o preco:"))
pa= int(input("Insira o total pago:"))

if (pr<=pa):
	pf="Falta ",(pr-pa)
else:
	pf="Troco de " ,(pa-pr)

print(round(pf,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    pr= int(input())
ValueError: invalid literal for int() with base 10: '38.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:19:29) 
-- CODE:
#Preço 
pr= int(input("Insira o preco:"))
pa= int(input("Insira o total pago:"))
str1="Falta "
str2="Troco de "
pf1=(pr-pa)
pf2=(pa-pr)

if (pr<=pa):
	msg= str1+ pf1
else:
	msg= str2+pf2

print(round(msg,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    pr= int(input())
ValueError: invalid literal for int() with base 10: '38.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 11:19:51) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
str1="Falta "
str2="Troco de "
pf1=(pr-pa)
pf2=(pa-pr)

if (pr<=pa):
	msg= str1+ pf1
else:
	msg= str2+pf2

print(round(msg,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    msg= str2+pf2
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 12:46:55) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pr-pa)
pf2=(pa-pr)

if (pr<=pa):
	msg= "Troco de "+ pf1
else:
	msg= "Falta "+p f2

print(round(msg,2))
-- ERROR:
File "XXXX", line 10
    msg= "Falta "+p f2
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 12:47:05) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pr-pa)
pf2=(pa-pr)

if (pr<=pa):
	msg= "Troco de "+ pf1
else:
	msg= "Falta "+ pf2

print(round(msg,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    msg= "Falta "+ pf2
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:37:04) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pr-pa)
pf2=(pa-pr)

if (pr<=pa):
	msg= "Troco de ", pf1
else:
	msg= "Falta ", pf2

print(round(msg,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(round(msg,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:39:05) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pr-pa)
pf2=(pa-pr)

if (pr<=pa):
	print("Troco de ", round(pf1,2))
else:
	print("Falta ", round(pf2,2))


-- OUTPUT:
Falta  -26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:39:37) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pa-pr)
pf2=(pa-pr)

if (pr<=pa):
	print("Troco de", round(pf1,2))
else:
	print("Falta", round(pf2,2))


-- OUTPUT:
Falta -26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 13:39:42) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pa-pr)
pf2=(pa-pr)

if (pr<=pa):
	print("Troco de", round(pf1,2))
else:
	print("Falta", round(pf2,2))


-- EXECUTION TIME:
0.143337
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta -26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 13:39:50) 
-- CODE:
#Preço 
pr= float(input("Insira o preco:"))
pa= float(input("Insira o total pago:"))
pf1=(pa-pr)
pf2=(pr-pa)

if (pr<=pa):
	print("Troco de", round(pf1,2))
else:
	print("Falta", round(pf2,2))


-- EXECUTION TIME:
0.280266
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
