== TEST (2019-04-14 09:42:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
vl=float(input("Velocidade inicial: "))
a=radians(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=float(input("gravidade: "))
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a=radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:42:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
vl=float(input("Velocidade inicial: "))
a=radians.math(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=float(input("gravidade: "))
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a=radians.math(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:43:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import radians
vl=float(input("Velocidade inicial: "))
a=radians.math(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=float(input("gravidade: "))
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a=radians.math(float(input()))
AttributeError: 'builtin_function_or_method' object has no attribute 'math'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:43:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import radians
vl=float(input("Velocidade inicial: "))
a=radians(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=float(input("gravidade: "))
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    g=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:44:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import radians
from math import sin
vl=float(input("Velocidade inicial: "))
a=radians(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=float(input("gravidade: "))
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    g=float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:44:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import radians
from math import sin
vl=float(input("Velocidade inicial: "))
a=radians(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=float(input("gravidade: "))
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- EXECUTION TIME:
0.127179
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/1055/main.py", line 9, in <module>
    g=float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:44:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import radians
from math import sin
vl=float(input("Velocidade inicial: "))
a=radians(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=9.8
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:44:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import radians
from math import sin
vl=float(input("Velocidade inicial: "))
a=radians(float(input("angulo do vetor: ")))
D=float(input("Distancia horizontal: "))
g=9.8
R = vl**2 * sin(2*a) / g
if (abs(D - R <= 0.1)):
	m= "sim"
else:
	m= "nao"
print(m)	



-- EXECUTION TIME:
0.138244
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
