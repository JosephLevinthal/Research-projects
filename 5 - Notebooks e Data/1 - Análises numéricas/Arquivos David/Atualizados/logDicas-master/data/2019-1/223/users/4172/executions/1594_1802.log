== TEST (2019-03-26 23:03:50) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from mach import*
dano=(sqrt(5*D1+(pi)**(3)**D2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    from mach import*
ModuleNotFoundError: No module named 'mach'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:04:41) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=(sqrt(5*D1+(pi)**(3)**D2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano=(sqrt(5*D1+(pi)**(3)**D2))
OverflowError: (34, 'Numerical result out of range')
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:05:56) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1+(pi)**(3)**D2)

print(P-dano)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano=sqrt(5*D1+(pi)**(3)**D2)
OverflowError: (34, 'Numerical result out of range')
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:06:31) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1+(pi)**((3)**D2))

print(P-dano)
-- EXECUTION TIME:
0.155544
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1594/1802/main.py", line 5, in <module>
    dano=sqrt(5*D1+(pi)**((3)**D2))
OverflowError: (34, 'Numerical result out of range')

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:07:39) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**((3)**D2)

print(P-dano)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano=sqrt(5*D1 )+(pi)**((3)**D2)
OverflowError: (34, 'Numerical result out of range')
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:08:51) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(3*d1)

print(P-dano)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    dano=sqrt(5*D1 )+(pi)**(3*d1)
NameError: name 'd1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:09:29) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(3*D1)

print(P-dano)
-- OUTPUT:
166.7576553422004
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:10:35) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=[sqrt(5*D1 )+(pi)**(3*D1)]

print(dano-P)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(dano-P)
TypeError: unsupported operand type(s) for -: 'list' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:11:28) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=[sqrt(5*D1 )+(pi)**(3*D1)]

print(P-dano)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(P-dano)
TypeError: unsupported operand type(s) for -: 'int' and 'list'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:12:06) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=[sqrt(5*D1 )+(pi)**(3*D1)]

print[(P-dano)]
-- EXECUTION TIME:
0.183955
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1594/1802/main.py", line 7, in <module>
    print[(P-dano)]
TypeError: unsupported operand type(s) for -: 'int' and 'list'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:12:21) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(3*D1)

print(P-dano)
-- EXECUTION TIME:
0.203543
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
166.7576553422004
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
-888582108.5484883
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
466.7576553422004
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:12:33) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(3*D1)

print(P-dano)
-- OUTPUT:
166.7576553422004
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:14:27) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+((pi)**3)**D2

print(P-dano)
-- OUTPUT:
-888582205.3073307
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:15:46) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=/sqrt(5*D1 )+((pi)**3)**D2/

print(P-dano)
-- ERROR:
File "XXXX", line 5
    dano=/sqrt(5*D1 )+((pi)**3)**D2/
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:16:19) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=⌊sqrt(5*D1 )+((pi)**3)**D2⌋

print(P-dano)
-- ERROR:
File "XXXX", line 5
    dano=⌊sqrt(5*D1 )+((pi)**3)**D2⌋
             ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:17:22) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+((pi)**3)**D2

print(float(P-dano))
-- OUTPUT:
-888582205.3073307
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:19:08) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+((pi)**3)**D2

print(int(P-dano))
-- OUTPUT:
-888582205
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:19:36) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+((pi)**3)**D2

print(int(P-dano))
-- OUTPUT:
-888582205
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:20:31) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+((pi)**3)**D2)

print(P-dano)
-- OUTPUT:
-888582205
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:23:27) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+((pi)**(3*D2)

print(P-dano)
-- ERROR:
File "XXXX", line 7
    print(P-dano)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:24:56) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+((pi)**(3*D2))

print(P-dano)
-- ERROR:
File "XXXX", line 7
    print(P-dano)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:25:11) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**(3*D2)

print(P-dano)
-- ERROR:
File "XXXX", line 7
    print(P-dano)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:25:55) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**(3*D2)

print(P - dano)
-- ERROR:
File "XXXX", line 7
    print(P - dano)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:26:06) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**3*D2

print(P - dano)
-- ERROR:
File "XXXX", line 7
    print(P - dano)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:26:36) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**3*D2

print(P - dano)
-- ERROR:
File "XXXX", line 7
    print(P - dano)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:26:49) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**3*D2/

print(P - dano)
-- ERROR:
File "XXXX", line 8
    
                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:27:06) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**3*D2)

print(P - dano)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:27:07) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**3*D2)

print(P - dano)
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:27:44) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**3*D2)

print(dano - P)
-- OUTPUT:
-12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:27:54) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**3*D2)

print(dano - P)
-- OUTPUT:
-12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:28:39) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+(pi)**(3*D2))

print(dano - P)
-- OUTPUT:
888582205
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:29:19) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+((pi)**3)*D2)

print(dano - P)
-- OUTPUT:
-12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:29:29) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+((pi)**3)*D2)

print(dano - P)
-- EXECUTION TIME:
0.174929
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
-12
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
-109
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
-467
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:29:48) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=int(sqrt(5*D1 )+((pi)**3)*D2)

print(dano)
-- OUTPUT:
188
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:33:28) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+((pi)**3)*D2

print(P-int(dano))
-- OUTPUT:
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:35:21) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+((pi)**(D2/3)

print(P-int(dano))



-- ERROR:
File "XXXX", line 7
    print(P-int(dano))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 23:35:37) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(D2/3)

print(P-int(dano))



-- OUTPUT:
188
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 23:35:51) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(D2/3)

print(P-int(dano))



-- EXECUTION TIME:
0.224059
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
188
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
285
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-28 13:21:49) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(D2/3)

print(P-int(dano))



-- EXECUTION TIME:
0.193582
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
188
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
285
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:28:27) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(D2/3)

print(P-(dano))



-- EXECUTION TIME:
0.147398
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
187.89432762141087
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
284.653170023859
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
496.2993401349387
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:28:34) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(D2/3)

print(P-dano)



-- EXECUTION TIME:
0.157032
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
187.89432762141087
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
284.653170023859
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
496.2993401349387
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:28:50) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(D2/3)

print(P-int(dano))
		



-- EXECUTION TIME:
0.156406
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
188
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
285
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
pontos de vida: valor de d1: valor de d2: 497
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 13:28:53) 
-- CODE:
P=int(input(" pontos de vida: "))
D1=int(input("valor de d1: "))
D2=int(input("valor de d2: "))
from math import*
dano=sqrt(5*D1 )+(pi)**(D2/3)

print(P-int(dano))
		



-- EXECUTION TIME:
0.151622
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
188
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
285
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
