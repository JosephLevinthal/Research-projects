== TEST (2019-04-25 17:05:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import 

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a>b+c)or(b>a+c)or(c>a+b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if (:
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 3
    from math import 
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a>b+c)or(b>a+c)or(c>a+b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if (:
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 14
    if (:
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:40) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a>b+c)or(b>a+c)or(c>a+b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (a + b + c) / 2.0
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:06:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a>b+c)or(b>a+c)or(c>a+b)):
	print("invalida")

-- OUTPUT:
invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:21:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import 

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a>b+c)or(b>a+c)or(c>a+b))
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 3
    from math import 
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:21:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a>b+c)or(b>a+c)or(c>a+b))
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 14
    if ((a>b+c)or(b>a+c)or(c>a+b))
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:21:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a>b+c)or(b>a+c)or(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
invalida
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:23:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a>b+c)or(b>a+c)or(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	

-- OUTPUT:
invalida
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:24:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ((a>b+c)or(b>a+c)or(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	

-- OUTPUT:
invalida
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:27:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
print("Entradas: ", a, b, c)
	if ((a>b+c)or(b>a+c)or(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		
		print("Area: invalida")
else:
	print("Area: invalida")
	

-- ERROR:
File "XXXX", line 15
    if ((a>b+c)or(b>a+c)or(c>a+b)):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:28:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	print("Entradas: ", a, b, c)
	if ((a>b+c)or(b>a+c)or(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		
		print("Area: invalida")
else:
	print("Area: invalida")
	

-- OUTPUT:
invalida
Entradas:  -11.0 22.0 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 17:29:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	
	if ((a>b+c)or(b>a+c)or(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas: ", a, b, c)
		print("Area:", area)
	else:
		print("Entradas: ", a, b, c)
		print("Area: invalida")
else:
	print("Entradas: ", a, b, c)
	print("Area: invalida")
	

-- OUTPUT:
invalida
Entradas:  -11.0 22.0 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 17:29:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	
	if ((a>b+c)or(b>a+c)or(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas: ", a, b, c)
		print("Area:", area)
	else:
		print("Entradas: ", a, b, c)
		print("Area: invalida")
else:
	print("Entradas: ", a, b, c)
	print("Area: invalida")
	

-- EXECUTION TIME:
0.19399
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
invalida
Entradas:  -11.0 22.0 33.0
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas:  1.61 2.4 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas:  11.0 22.0 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 15:56:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	
	if ((a>b+c)or(b>a+c)and(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas: ", a, b, c)
		print("Area:", area)
	else:
		print("Entradas: ", a, b, c)
		print("Area: invalida")
else:
	print("Entradas: ", a, b, c)
	print("Area: invalida")
	

-- OUTPUT:
invalida
Entradas:  -11.0 22.0 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 15:56:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	
	if ((a>b+c)or(b>a+c)and(c>a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas: ", a, b, c)
		print("Area:", area)
	else:
		print("Entradas: ", a, b, c)
		print("Area: invalida")
else:
	print("Entradas: ", a, b, c)
	print("Area: invalida")
	

-- EXECUTION TIME:
0.174414
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
invalida
Entradas:  -11.0 22.0 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas:  1.61 2.4 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas:  11.0 22.0 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 00:57:19) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	
	if ((a>=b+c)or(b>=a+c)(c>=a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas: ", a, b, c)
		print("Area:", area)
	else:
		print("Entradas: ", a, b, c)
		print("Area: invalida")
else:
	print("Entradas: ", a, b, c)
	print("Area: invalida")
	

-- EXECUTION TIME:
0.215551
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1679/1079/main.py", line 15, in <module>
    if ((a>=b+c)or(b>=a+c)(c>=a+b)):
TypeError: 'bool' object is not callable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 00:57:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.



# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

# Testa se pelo menos uma das entradas eh negativa 
if ((a<0)or(b<0)or(c<0)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	
	if ((a>=b+c)or(b>=a+c)(c>=a+b)):
		s = (a + b + c) / 2.0
		import math
		area = math.sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas: ", a, b, c)
		print("Area:", area)
	else:
		print("Entradas: ", a, b, c)
		print("Area: invalida")
else:
	print("Entradas: ", a, b, c)
	print("Area: invalida")
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    if ((a>=b+c)or(b>=a+c)(c>=a+b)):
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:00:07) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
if(not(A>=B+C)or(B>=A+C)or(C>=A+B):
	print("Entradas:" A,",",B,",",C)
	print("Area: invalida")

	
	
-- ERROR:
File "XXXX", line 4
    if(not(A>=B+C)or(B>=A+C)or(C>=A+B):
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:00:32) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
if((not(A>=B+C)or(B>=A+C)or(C>=A+B))):
	print("Entradas:" A,",",B,",",C)
	print("Area: invalida")

	
	
-- ERROR:
File "XXXX", line 5
    print("Entradas:" A,",",B,",",C)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:01:09) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
if((not(A>=B+C)or(B>=A+C)or(C>=A+B))):
	print("Entradas:", A, ",", B, ",", C)
	print("Area: invalida")

	
	
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:01:40) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
if((A>=B+C)or(B>=A+C)or(C>=A+B)):
	print("Entradas:", A, ",", B, ",", C)
	print("Area: invalida")

	
	
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:06:31) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C)or(B>=A+C)or(C>=A+B)):
	print("Area: invalida")
else:
	print("Area:", (A*B)/2)

	
	
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:09:06) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C)or(B>=A+C)or(C>=A+B)):
	print("Area: invalida")
else:
	x=(A*B)/2
	area = round(x,3)
	print("Area:", area)

	
	
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:09:15) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C)or(B>=A+C)or(C>=A+B)):
	print("Area: invalida")
else:
	x=(A*B)/2
	area = round(x,3)
	print("Area:", area)

	
	
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 11:09:17) 
-- CODE:
A=float(input("valor de A: "))
B=float(input("valor de B: "))
C=float(input("valor de C: "))
print("Entradas:", A, ",", B, ",", C)
if((A>=B+C)or(B>=A+C)or(C>=A+B)):
	print("Area: invalida")
else:
	x=(A*B)/2
	area = round(x,3)
	print("Area:", area)

	
	
-- EXECUTION TIME:
0.204878
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
