== TEST (2019-03-22 14:52:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

print(sin(1))

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(sin(1))
NameError: name 'sin' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:52:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
x = sin(1)
print(x)

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = sin(1)
NameError: name 'sin' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:52:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt
x = mt.sin(1)
print(x)

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    t1 = radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:52:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = sin(1)
print(x)

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = sin(1)
NameError: name 'sin' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:52:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math
x = mt.sin(1)
print(x)

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    x = mt.sin(1)
NameError: name 'mt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 14:53:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.arccos(mt.sen(t1))

print(d)
-- EXECUTION TIME:
0.142792
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 6, in <module>
    t1 = radians(float(input()))
NameError: name 'radians' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:53:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.arccos(mt.sen(t1))

print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    t1 = radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:53:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Longitude de P1: ")))
t2 = radians(float(input("Latitude de P2: ")))
g2 = radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.arccos(mt.sen(t1))

print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    t1 = radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:54:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.arccos(mt.sen(t1))

print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    d = R * mt.arccos(mt.sen(t1))
AttributeError: module 'math' has no attribute 'arccos'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:54:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.arcos(mt.sen(t1))

print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    d = R * mt.arcos(mt.sen(t1))
AttributeError: module 'math' has no attribute 'arcos'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:54:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sen(t1))

print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    d = R * mt.acos(mt.sen(t1))
AttributeError: module 'math' has no attribute 'sen'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 14:55:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sen(t1)
print(mt.sen(t1))

-- EXECUTION TIME:
0.145746
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 12, in <module>
    mt.sen(t1)
AttributeError: 'module' object has no attribute 'sen'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:55:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sen(t1)
print(mt.sen(t1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    mt.sen(t1)
AttributeError: module 'math' has no attribute 'sen'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:55:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sen(t1)
print(mt.sen(t1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    mt.sen(t1)
AttributeError: module 'math' has no attribute 'sen'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:55:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sen(t1)
print(mt.sen(t1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    mt.sen(t1)
AttributeError: module 'math' has no attribute 'sen'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:58:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sin(t1)
print(mt.sen(t1))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    print(mt.sen(t1))
AttributeError: module 'math' has no attribute 'sen'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:58:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sin(t1)
print(mt.sin(t1))

-- OUTPUT:
-0.05296568648510429
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:58:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sin(t1)
print(mt.sin(t1))

-- OUTPUT:
-0.05296568648510429
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 14:58:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

mt.sin(t1)
print(mt.sin(t1))

-- OUTPUT:
-0.05296568648510429
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:01:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))

print(round(d,2))


-- ERROR:
File "XXXX", line 12
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1−g2))
                                                                  ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:02:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(d,2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    d = R * acos (sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
NameError: name 'acos' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:02:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))

print(round(d,2))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1-g2))
NameError: name 'acos' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:03:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

z = cos(t1) * cos(t2) * cos(g1 - g2)
y = acos(sin(t1) * sin(t2)
d = R * y + z)

print(round(d,2))


-- ERROR:
File "XXXX", line 14
    d = R * y + z)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:03:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

z = cos(t1) * cos(t2) * cos(g1 - g2)
y = acos(sin(t1) * sin(t2)

d = R * y + z)

print(round(d,2))


-- ERROR:
File "XXXX", line 15
    d = R * y + z)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:03:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

z = cos(t1) * cos(t2) * cos(g1 - g2)
y = acos(sin(t1) * sin(t2)

d = R * y + z)

print(round(d,2))


-- ERROR:
File "XXXX", line 15
    d = R * y + z)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:03:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

z = cos(t1) * cos(t2) * cos(g1 - g2)
y = acos(sin(t1) * sin(t2)

d = R * y + z)

print(round(d,2))


-- ERROR:
File "XXXX", line 15
    d = R * y + z)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:04:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

z = cos(t1) * cos(t2) * cos(g1 - g2)
y = acos(sin(t1) * sin(t2)

d = R * y + z

print(round(d,2))


-- ERROR:
File "XXXX", line 15
    d = R * y + z
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:04:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

z = cos(t1) * cos(t2) * cos(g1 - g2)
y = acos(sin(t1) * sin(t2)

d = R * y + z

print(round(d,2))


-- ERROR:
File "XXXX", line 15
    d = R * y + z
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:04:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

z = cos(t1) * cos(t2) * cos(g1 - g2)
y = acos(sin(t1) * sin(t2)

d = R * (y + z)

print(round(d,2))


-- ERROR:
File "XXXX", line 15
    d = R * (y + z)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:05:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

sent1 = sen(t1)

print(sen(t1))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    sent1 = sen(t1)
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:05:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

sent1 = sin(t1)

print(sin(t1))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    sent1 = sin(t1)
NameError: name 'sin' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:05:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

sent1 = mt.sin(t1)

print(sin(t1))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print(sin(t1))
NameError: name 'sin' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:05:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

sent1 = mt.sin(t1)

print(sen(t1))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    print(sen(t1))
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:06:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

sent1 = mt.sin(t1)

print(sent1)


-- OUTPUT:
-0.05296568648510429
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:06:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(d)


-- OUTPUT:
50.43792028752357
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:06:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(d)


-- OUTPUT:
50.43792028752357
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:06:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(d)


-- OUTPUT:
50.43792028752357
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:07:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2)))


-- OUTPUT:
0.007916785609742186
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 15:07:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2)


-- EXECUTION TIME:
0.206206
-- ERROR:
  File "/home/codebench/codes/1595/1017/main.py", line 16
    
    ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:07:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2)


-- ERROR:
File "XXXX", line 16
    
    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 15:07:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2)
-- EXECUTION TIME:
0.125148
-- ERROR:
  File "/home/codebench/codes/1595/1017/main.py", line 15
    
                    ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:07:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2)
-- ERROR:
File "XXXX", line 15
    
                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:07:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:08:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.sin(t1)
-- ERROR:
File "XXXX", line 15
    
                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:09:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.sin(t1))
-- OUTPUT:
-0.05296568648510429
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:09:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.sin(t2))
-- OUTPUT:
-0.05387832303016433
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:09:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.sin(t2))
-- OUTPUT:
-0.05387832303016433
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:09:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.cos(t2))
-- OUTPUT:
0.9985475082876414
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:09:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.cos(t1))
-- OUTPUT:
0.9985963328868986
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:09:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.cos(g1))
-- OUTPUT:
0.4993068174734911
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:09:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(mt.cos(g2))
-- OUTPUT:
0.506114449756829
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 15:10:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,3))
-- EXECUTION TIME:
0.125266
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.438
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:10:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Latitude de P1: ")))
g1 = mt.radians(float(input("Longitude de P1: ")))
t2 = mt.radians(float(input("Latitude de P2: ")))
g2 = mt.radians(float(input("Longitude de P2: ")))
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,3))
-- OUTPUT:
50.438
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 15:15:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

angt1 = int(input("angulo: "))
angg1 = int(input("angulo: "))
angt2 = int(input("angulo: "))
angg2 = int(input("angulo: "))

t1 = mt.radians(angt1)
g1 = mt.radians(angg1)
t2 = mt.radians(angt2)
g2 = mt.radians(angg28)
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.129598
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 6, in <module>
    angt1 = int(input())
ValueError: invalid literal for int() with base 10: '-3.036131'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:15:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

angt1 = int(input("angulo: "))
angg1 = int(input("angulo: "))
angt2 = int(input("angulo: "))
angg2 = int(input("angulo: "))

t1 = mt.radians(angt1)
g1 = mt.radians(angg1)
t2 = mt.radians(angt2)
g2 = mt.radians(angg28)
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angt1 = int(input())
ValueError: invalid literal for int() with base 10: '-3.036131'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:15:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

angt1 = int(input("angulot1: "))
angg1 = int(input("angulog1: "))
angt2 = int(input("angulot1: "))
angg2 = int(input("angulot2: "))

t1 = mt.radians(angt1)
g1 = mt.radians(angg1)
t2 = mt.radians(angt2)
g2 = mt.radians(angg2)
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angt1 = int(input())
ValueError: invalid literal for int() with base 10: '-3.036131'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:15:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

angt1 = int(input("angulot1: "))
angg1 = int(input("angulog1: "))
angt2 = int(input("angulot2: "))
angg2 = int(input("angulog2: "))

t1 = mt.radians(angt1)
g1 = mt.radians(angg1)
t2 = mt.radians(angt2)
g2 = mt.radians(angg2)
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angt1 = int(input())
ValueError: invalid literal for int() with base 10: '-3.036131'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 15:16:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

angt1 = int(input("angulot1: "))
angg1 = int(input("angulog1: "))
angt2 = int(input("angulot2: "))
angg2 = int(input("angulog2: "))

t1 = mt.radians(angt1)
g1 = mt.radians(angg1)
t2 = mt.radians(angt2)
g2 = mt.radians(angg2)
R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.194454
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 6, in <module>
    angt1 = int(input())
ValueError: invalid literal for int() with base 10: '-3.036131'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 15:18:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
p1 = mt.radians(float(input("Angulo: ")))
t1 = mt.radians(float(input("Angulo: ")))
p2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.124955
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 13, in <module>
    d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))
NameError: name 't2' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:18:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
p1 = mt.radians(float(input("Angulo: ")))
t1 = mt.radians(float(input("Angulo: ")))
p2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))
NameError: name 't2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:18:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
p1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
p2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))
NameError: name 'g1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 15:18:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
p1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
p2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))
NameError: name 'g1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 15:18:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.133069
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 22:47:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.220351
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 22:48:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:37:04) 
-- CODE:
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.151359
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:42:26) 
-- CODE:
import math

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    t1 = mt.radians(float(input()))
NameError: name 'mt' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:42:26) 
-- CODE:
import math

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.166287
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 3, in <module>
    t1 = mt.radians(float(input()))
NameError: name 'mt' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:42:34) 
-- CODE:
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- OUTPUT:
50.44
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:47:51) 
-- CODE:
import math

t1 = radians(float(input("Angulo: ")))
g1 = radians(float(input("Angulo: ")))
t2 = radians(float(input("Angulo: ")))
g2 = radians(float(input("Angulo: ")))

R = 6371.01

d = R * acos(mt.sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.131027
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/1017/main.py", line 3, in <module>
    t1 = radians(float(input()))
NameError: name 'radians' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 18:47:51) 
-- CODE:
import math

t1 = radians(float(input("Angulo: ")))
g1 = radians(float(input("Angulo: ")))
t2 = radians(float(input("Angulo: ")))
g2 = radians(float(input("Angulo: ")))

R = 6371.01

d = R * acos(mt.sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(d,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    t1 = radians(float(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:49:23) 
-- CODE:
import math as mt

t1 = mt.radians(float(input("Angulo: ")))
g1 = mt.radians(float(input("Angulo: ")))
t2 = mt.radians(float(input("Angulo: ")))
g2 = mt.radians(float(input("Angulo: ")))

R = 6371.01

d = R * mt.acos(mt.sin(t1) * mt.sin(t2) + mt.cos(t1) * mt.cos(t2) * mt.cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.174132
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 18:51:51) 
-- CODE:
from math import *

t1 = radians(float(input("Angulo: ")))
g1 = radians(float(input("Angulo: ")))
t2 = radians(float(input("Angulo: ")))
g2 = radians(float(input("Angulo: ")))

R = 6371.01

d = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))

print(round(d,2))
-- EXECUTION TIME:
0.140767
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
