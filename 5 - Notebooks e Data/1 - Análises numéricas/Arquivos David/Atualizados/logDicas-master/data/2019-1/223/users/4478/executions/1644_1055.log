== TEST (2019-04-16 15:14:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
g = 9,8
R = (v0**2*math.sin(2*alfa))/g
print(R)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    R = (v0**2*math.sin(2*alfa))/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:15:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
g = 9,8
R = (v0**2*math.sin(2*alfa)
	 
print(R)
-- ERROR:
File "XXXX", line 11
    print(R)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:15:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
g = 9,8
R = (v0**2*math.sin(2*alfa) 
print(R)
-- ERROR:
File "XXXX", line 10
    print(R)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:16:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
g = 9,8
R = (v0**2*math.sin(2*alfa)) 
print(R)
-- OUTPUT:
110.23320839099213
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:17:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
g = 9,8
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/g
print(R)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R = R1/g
TypeError: unsupported operand type(s) for /: 'float' and 'tuple'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:18:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))

R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
print(R)
-- OUTPUT:
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:20:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
X = math.abs(D-R)
print(X)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    X = math.abs(D-R)
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:22:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
X = math.abs(D - R)<0.1
print(X)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    X = math.abs(D - R)<0.1
AttributeError: module 'math' has no attribute 'abs'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:23:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
X = abs(D - R)<0.1
print(X)
-- OUTPUT:
True
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:25:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
X = abs(D - R)

-- OUTPUT:
True
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:26:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
X = abs(D - R)
print(X)
-- OUTPUT:
0.05171342949060076
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 15:28:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
X = abs(D - R)
if(X<0.1):
	Mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 15:29:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
import math
v0 = float(input("velocidade incial: "))
alfa = math.radians(float(input("angulo alfa: ")))
D =  float(input("distancia: "))
R1 = (v0**2*math.sin(2*alfa)) 
R = R1/9.8
X = abs(D - R)
if(X<0.1):
	Mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)
-- EXECUTION TIME:
0.192551
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1644/1055/main.py", line 15, in <module>
    print(mensagem)
NameError: name 'mensagem' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
