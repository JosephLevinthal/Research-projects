== TEST (2019-05-02 16:20:28) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= a < -2 == True):
	x1 = (-1/x+2)
elif (2 < x <= 1000 == True):
	x1 = (1/x-2)
print(x1)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if (-1000 <= a < -2 == True):
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:20:38) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 == True):
	x1 = (-1/x+2)
elif (2 < x <= 1000 == True):
	x1 = (1/x-2)
print(x1)	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(x1)	
NameError: name 'x1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:21:10) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/x+2)
elif (2 < x <= 1000 == True):
	x1 = (1/x-2)
print(x1)	
-- OUTPUT:
2.0010000100001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:21:19) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/x+2)
elif (2 < x <= 1000 ):
	x1 = (1/x-2)
print(x1)	
-- OUTPUT:
2.0010000100001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:22:53) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/x+2)
elif (2 < x <= 1000 ):
	x1 = (1/(x-2)
print(x1)	
-- ERROR:
File "XXXX", line 7
    print(x1)	
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:23:07) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/x+2)
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(x1)	
-- OUTPUT:
2.0010000100001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:23:14) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/x+2)
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(x1)	
-- OUTPUT:
2.0010000100001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:23:31) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/x+2)
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(x1)	
-- OUTPUT:
2.0010000100001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:23:48) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(x1)	
-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:24:09) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(round(x1, 4))	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:24:17) 
-- CODE:
x = float(input("Valor de x:"))

if (-1000 <= x < -2 ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(round(x1, 4))	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:24:47) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(round(x1, 4))	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:25:01) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(round(x1, 4))	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:25:13) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
print(round(x1, 4))	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:25:51) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
else:
	x1 = "entrada invalida"
print(round(x1, 4))	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:26:24) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
else:
	x1 = int("entrada invalida")
print(round(x1, 4))	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:27:09) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	print(-1/(x+2))
elif (2 < x <= 1000 ):
	print(1/(x-2))
else:
	print("entrada invalida")
	
-- OUTPUT:
0.0010020140482369562
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:28:33) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
	print (round(x1,4))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
	print(round(x1,4))
else:
	print("entrada invalida")
	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:28:39) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
	print (round(x1,4))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
	print(round(x1,4))
else:
	print("entrada invalida")
	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:28:46) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
	print (round(x1,4))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
	print(round(x1,4))
else:
	print("entrada invalida")
	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:28:55) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
	print (round(x1,4))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
	print(round(x1,4))
else:
	print("entrada invalida")
	
-- OUTPUT:
0.001
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:29:03) 
-- CODE:
x = float(input("Valor de x:"))

if ((-1000) <= x < (-2) ):
	x1 = (-1/(x+2))
	print (round(x1,4))
elif (2 < x <= 1000 ):
	x1 = (1/(x-2))
	print(round(x1,4))
else:
	print("entrada invalida")
	
-- EXECUTION TIME:
0.281171
-- TEST CASE 1:
---- input:
-999.99
---- correct output:
0.001
---- user output:
0.001
-- TEST CASE 2:
---- input:
1.5
---- correct output:
entrada invalida
---- user output:
entrada invalida
-- TEST CASE 3:
---- input:
-2.01
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
