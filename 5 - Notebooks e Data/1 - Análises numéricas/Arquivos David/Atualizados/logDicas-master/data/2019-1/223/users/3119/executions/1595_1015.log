== TEST (2019-03-21 16:24:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))

print(min(a,b,c))
-- OUTPUT:
-2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:26:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))
d = a + b + c
e = min(d)-max(d)
print(min(a,b,c))
print((a+b+c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    e = min(d)-max(d)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:26:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))
d = a + b + c
e = min(d)-max(d)
print(min(a,b,c))
print(e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    e = min(d)-max(d)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:27:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))
d = a + b + c
e = min(d)-max(d)
print(min(a,b,c))
print(e)
print(max(a,b,c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    e = min(d)-max(d)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:27:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))
d = a + b + c
e = min(d)-max(d)
print(min(a,b,c))
print(min(d)-max(d))
print(max(a,b,c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    e = min(d)-max(d)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:27:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))
d = a + b + c
print(min(a,b,c))
print(min(d)-max(d))
print(max(a,b,c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(min(d)-max(d))
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:29:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))
d = a + b + c
e = max(d)
print(min(a,b,c))

print(max(a,b,c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    e = max(d)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:29:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))
d = a + b + c
min(d)-max(d)
print(min(a,b,c))

print(max(a,b,c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    min(d)-max(d)
TypeError: 'int' object is not iterable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 16:31:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))

print(min(a,b,c))
print(max(a,b,c))
-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 17:04:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))

minimo = min(a,b,c)
maximo = max(a,b,c)
medio = (a + b +c) - minimo - maximo

print(minimo)
print(medio)
print(maximo)

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 17:04:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite o numero a: "))
b = int(input("digite o numero b: "))
c = int(input("digite o numero c: "))

minimo = min(a,b,c)
maximo = max(a,b,c)
medio = (a + b +c) - minimo - maximo

print(minimo)
print(medio)
print(maximo)

-- EXECUTION TIME:
0.161761
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
