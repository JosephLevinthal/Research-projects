== TEST (2019-04-15 23:03:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))
q1=x
q2=y
q3=-x
q4=-y
if(q1==x or q2==y):
	"superiores"
else:
	"inferiores"
-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:04:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))
q1=x
q2=y
q3=-x
q4=-y
if(q1==x or q2==y):
	d="superiores"
else:
	d="inferiores"
print(d)	

-- OUTPUT:
superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:04:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))
q1=x
q2=y
q3=x
q4=y
if(q1>=x or q2>=y):
	d="superiores"
else:
	d="inferiores"
print(d)	

-- OUTPUT:
superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:05:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))
q1=x
q2=y
if(q1>=x):
	d="superiores"
else:
	d="inferiores"
print(d)	

-- OUTPUT:
superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:06:12) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))

if(x>=0 or y>=0):
	d="superiores"
else:
	d="inferiores"
print(d)	

-- OUTPUT:
superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:06:32) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))

if(x>=0 or y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.138654
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:07:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))

if(x>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.168002
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:08:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))
V=x,y
if(V>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(V>=0):
TypeError: '>=' not supported between instances of 'tuple' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:11:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))
Q1>0
if(Q1==x):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    Q1>0
NameError: name 'Q1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:12:16) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))

if(x>=0 and y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:12:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))

if(x>=0 and y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:12:40) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))

if(x>=0 and y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.167534
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:22:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
x=float(input(""))
y=float(input(""))

if(x>=0 and y>=0):
	d="Superiores, se o ponto está situado nos quadrantes Q1 ou Q2"
else:
	d="Inferiores, se o ponto está situado nos quadrantes Q3 ou Q4"
print(d)	

-- EXECUTION TIME:
0.137687
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1646/2730/main.py", line 9, in <module>
    print(d)	
UnicodeEncodeError: 'ascii' codec can't encode character '\xe1' in position 26: ordinal not in range(128)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:23:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 and y>=Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:23:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 and y>=Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.210897
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:23:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 and y>=Q2):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:23:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 and y>=Q2):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.168011
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:24:13) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 and y>=Q2):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:24:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 and y>=Q2):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:25:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 and x>=Q2 and y>=Q1 and y>=Q2 ):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.315501
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:25:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
Q1=0
Q2=0
Q3=0
Q4=0
if(x>=Q1 or x>=Q2 or y>=Q1 or y>=Q2 ):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.12945
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:33:39) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x!=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:33:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x!=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.151265
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:33:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x!=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:33:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x!=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:35:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(c==0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:35:39) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(c==0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.165959
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Inferiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:35:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(c>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0):
TypeError: '>=' not supported between instances of 'tuple' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:35:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(c>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.205175
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1646/2730/main.py", line 6, in <module>
    if(c>=0):
TypeError: unorderable types: tuple() >= int()

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:36:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(c>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0):
TypeError: '>=' not supported between instances of 'tuple' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:36:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(c>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0):
TypeError: '>=' not supported between instances of 'tuple' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:37:16) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(tuple(c)>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(tuple(c)>=0):
TypeError: '>=' not supported between instances of 'tuple' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:37:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x,y)
if(c>=0.0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(c>=0.0):
TypeError: '>=' not supported between instances of 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:37:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x.y)
if(c>=0.0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    c=(x.y)
AttributeError: 'float' object has no attribute 'y'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:38:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
c=(x;y)
if(c>=0.0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
File "XXXX", line 5
    c=(x;y)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:38:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x*y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:38:30) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x*y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.14538
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:38:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x*y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:38:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x/y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:38:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x/y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.172712
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:39:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x/y>=0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:39:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x/y==0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:39:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x/y==0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.184676
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Inferiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:40:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x/y%4==0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:40:11) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x/y==0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:43:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x>0 or y>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 23:43:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x>0 or y>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:43:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x>0 or y>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.181973
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 23:44:06) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))

if(x>0 or y>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.169646
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:03:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
v=[x,y]
if(v>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(v>0):
TypeError: '>' not supported between instances of 'list' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 00:04:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=float(input(""))
y=float(input(""))
v=list(x,y)
if(v>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    v=list(x,y)
TypeError: list() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:13:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

x=float(input(""))
y=float(input(""))

if(x>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.19444
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:13:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

x=float(input(""))
y=float(input(""))

if(x>0):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:14:19) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

x=float(input(""))
y=float(input(""))

if(x>0):
	d="Superiores"
	if(y>0):
		d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:14:30) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

x=float(input(""))
y=float(input(""))

if(x>0):
	d="Superiores"
	if(y>0):
		d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:14:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

x=float(input(""))
y=float(input(""))

if(x>0):
	d="Superiores"
	if(y>0):
		d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.254897
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:18:42) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=radians(float(input("")))
y=radians(float(input("")))

if(x>0):
	d="Superiores"
	if(y>0):
		d="Superiores"
		
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:18:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=radians(float(input("")))
y=radians(float(input("")))

if(x>0):
	d="Superiores"
	if(y>0):
		d="Superiores"
		
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.176195
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:22:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=radians(float(input("")))
y=radians(float(input("")))
Q1=0 
Q2=0
if(x*y>Q1):
	d="Superiores"
else:
	d="origem"
print(d)	

-- OUTPUT:
origem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:22:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=radians(float(input("")))
y=radians(float(input("")))
Q1=0 
Q2=0
if(x*y>Q1):
	d="Superiores"
else:
	d="origem"
print(d)	

-- EXECUTION TIME:
0.130191
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
origem
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
origem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:22:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=radians(float(input("")))
y=radians(float(input("")))
Q1=0 
Q2=0
if(x+y>Q1):
	d="Superiores"
else:
	d="origem"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:22:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=radians(float(input("")))
y=radians(float(input("")))
Q1=0 
Q2=0
if(x+y>Q1):
	d="Superiores"
else:
	d="origem"
print(d)	

-- EXECUTION TIME:
0.125829
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
origem
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:22:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
x=radians(float(input("")))
y=radians(float(input("")))
Q1=0 
Q2=0
if(x+y>Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.265072
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Inferiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:24:31) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=radians(float(input("")))
Y=radians(float(input("")))

if(X+Y>Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(X+Y>Q1):
NameError: name 'Q1' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:24:32) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=radians(float(input("")))
Y=radians(float(input("")))

if(X+Y>Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.163678
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1646/2730/main.py", line 6, in <module>
    if(X+Y>Q1):
NameError: name 'Q1' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:34:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X+Y
Q2=Y-X
Q3=X-Y
Q4=Y-4
p=(x,y)
if(v>Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    p=(x,y)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:34:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X+Y
Q2=Y-X
Q3=X-Y
Q4=Y-4
P=(X,Y)
if(P>Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if(P>Q1):
TypeError: '>' not supported between instances of 'tuple' and 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:35:58) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X+Y
Q2=Y-X
Q3=-X-Y
Q4=-Y+X
if(X+Y>=Q1):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:36:40) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X+Y
Q2=Y-X
Q3=-X-Y
Q4=-Y+X
if(X+Y>=Q1 or X+Y>=Q2):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:36:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X+Y
Q2=Y-X
Q3=-X-Y
Q4=-Y+X
if(X+Y>=Q1 or X+Y>=Q2):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Superiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:36:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X+Y
Q2=Y-X
Q3=-X-Y
Q4=-Y+X
if(X+Y>=Q1 or X+Y>=Q2):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.132325
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Superiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Superiores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:57:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X>0 and Y>0
Q2=Y>0 and X<0
Q3=X<0 and Y<0
Q4=Y<0 and X>0
if((X and Y >Q1) or (X and Y>Q2)):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:57:16) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X>0 and Y>0
Q2=Y>0 and X<0
Q3=X<0 and Y<0
Q4=Y<0 and X>0
if((X and Y >Q1) or (X and Y>Q2)):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:57:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X>0 and Y>0
Q2=Y>0 and X<0
Q3=X<0 and Y<0
Q4=Y<0 and X>0
if((X and Y >Q1) or (X and Y>Q2)):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- OUTPUT:
Inferiores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:57:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.
from math import*
X=float(input(""))
Y=float(input(""))
Q1=X>0 and Y>0
Q2=Y>0 and X<0
Q3=X<0 and Y<0
Q4=Y<0 and X>0
if((X and Y >Q1) or (X and Y>Q2)):
	d="Superiores"
else:
	d="Inferiores"
print(d)	

-- EXECUTION TIME:
0.117535
-- TEST CASE 1:
---- input:
4.5
-2.2
---- correct output:
Inferiores
---- user output:
Inferiores
-- TEST CASE 2:
---- input:
0.1
0.1
---- correct output:
Superiores
---- user output:
Superiores
-- TEST CASE 3:
---- input:
-4.5
2.2
---- correct output:
Superiores
---- user output:
Superiores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
