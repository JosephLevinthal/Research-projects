== TEST (2019-03-31 15:54:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = input("raio r:")
pi = 3.141592
area = pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    area = pi*r**2
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:55:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = int(input("raio r:")
pi = 3.141592
area = (pi*r)**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 5
    pi = 3.141592
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:56:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = int(input("raio r:")
pi = float(3.141592)
area = (pi*r)**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 5
    pi = float(3.141592)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:56:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = int(input("raio r:")
pi = math(3.141592)
area = (pi*r)**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 5
    pi = math(3.141592)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 15:56:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
r = int(input("raio r:")
pi = 3.141592
area = pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 5
    pi = 3.141592
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:02:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
# contante de pi

r = int(input("raio r:")
area = math.pi*r**2
vol = 4/3*math.pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 7
    area = math.pi*r**2
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:04:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
# contante de pi

r = int(input("raio r:")
import math
pi = math.pi
		  
area = math.pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 7
    import math
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:04:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
# contante de pi

r = int(input("raio r:")
import(math.pi) 

		  
area = math.pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 7
    import(math.pi) 
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:05:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
# contante de pi

r = int(input("raio r:")


		  
area = math.pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 10
    area = math.pi*r**2
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:06:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math.pi
r = int(input("raio r:")
	  
area = math.pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 8
    area = math.pi*r**2
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:07:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math.pi
r = int(input("raio r:")
	  
area = pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 8
    area = pi*r**2
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:08:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math.pi
pi = math.pi
r = int(input("raio r:")
	  
area = pi*r**2
vol = 4/3*pi*r**3
print(round(area, 3))
-- ERROR:
File "XXXX", line 9
    area = pi*r**2
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:08:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math.pi
pi = math.pi
r = int(input("raio r:")
	  

-- ERROR:
File "XXXX", line 9
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:08:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math.pi
pi = math.pi
r = int(input("raio r:")
-- ERROR:
File "XXXX", line 8
    
                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:08:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math.pi
pi = math.pi
r = int(input("raio r:"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    import math.pi
ModuleNotFoundError: No module named 'math.pi'; 'math' is not a package
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:09:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:10:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
print(area)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:10:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
print(round(area,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:12:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r**3
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:12:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r**3
print(round(area,3))
print(round(vol,3))
-- EXECUTION TIME:
0.189323
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:12:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:13:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:13:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- EXECUTION TIME:
0.149131
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:13:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:14:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- EXECUTION TIME:
0.223416
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:14:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:15:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol =4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:15:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:16:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- EXECUTION TIME:
0.195213
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:24:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:24:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- EXECUTION TIME:
0.152636
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 16:25:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


r = int(input("raio r:"))
import math
pi = math.pi
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 16:26:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.


r = int(input("raio r:"))
import math
pi = math.pi
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- EXECUTION TIME:
0.20585
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 6, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 19:29:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 19:29:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))
-- EXECUTION TIME:
0.13084
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:48:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(vol)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 00:48:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(vol)
-- EXECUTION TIME:
0.122896
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:49:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 00:49:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))

-- EXECUTION TIME:
0.213316
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:49:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 00:49:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))

-- EXECUTION TIME:
0.165301
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:51:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 00:51:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,3))

-- EXECUTION TIME:
0.2223
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:51:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,2))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 00:52:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area,3))
print(round(vol,2))

-- EXECUTION TIME:
0.182907
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:52:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
print(round(area,3))
vol = 4/3*pi*r*r*r
print(round(vol,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 00:52:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
area = pi*r*r
print(round(area,3))
vol = 4/3*pi*r*r*r
print(round(vol,3))

-- EXECUTION TIME:
0.235816
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:54:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
A = pi*r*r
print(round(A,3))
V = 4/3*pi*r*r*r
print(round(V,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 00:54:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
A = pi*r*r
print(round(A,3))
V = 4/3*pi*r*r*r
print(round(V,3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 00:54:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

import math
pi = math.pi
r = int(input("raio r:"))
A = pi*r*r
print(round(A,3))
V = 4/3*pi*r*r*r
print(round(V,3))

-- EXECUTION TIME:
0.189151
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 7, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:11:28) 
-- CODE:
import math
pi = math.pi
r = int(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:12:10) 
-- CODE:
import math
pi = math.pi
r = int(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:12:36) 
-- CODE:
import math
pi = math.pi
r = int(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:12:53) 
-- CODE:
import math
pi = math.pi
r = int(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
print(round(vol,3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 23:13:07) 
-- CODE:
import math
pi = math.pi
r = int(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
print(round(vol,3))
-- EXECUTION TIME:
0.149415
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1595/825/main.py", line 3, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:13:42) 
-- CODE:
import math
pi = math.pi
r = int(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    r = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:14:50) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))

-- OUTPUT:
254.469
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:15:17) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
print(round(area,3))
-- OUTPUT:
254.469
254.469
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 23:15:27) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
print(round(area,3))
-- EXECUTION TIME:
0.204803
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
254.469
254.469
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
1913.552
1913.552
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:15:44) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))

-- OUTPUT:
254.469
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 23:15:52) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))

-- EXECUTION TIME:
0.172218
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
254.469
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
1913.552
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:16:01) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))

-- OUTPUT:
254.469
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:16:17) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))

-- OUTPUT:
254.469
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 23:16:19) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = 4*pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))

-- EXECUTION TIME:
0.186143
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
254.469
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
1913.552
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 23:18:04) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
print(round(vol, 3))

-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-01 23:18:16) 
-- CODE:
import math
pi = math.pi
r = float(input("Valor de R:"))
area = pi*r*r
vol = 4/3*pi*r*r*r
print(round(area, 3))
print(round(vol, 3))

-- EXECUTION TIME:
0.230569
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
