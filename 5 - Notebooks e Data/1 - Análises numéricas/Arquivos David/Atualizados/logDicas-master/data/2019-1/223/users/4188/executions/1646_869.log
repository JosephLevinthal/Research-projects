== TEST (2019-07-08 23:43:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = int(input("preco: "))
if (a >= 200):
	b = a*0.95
	print(b)
else:
	print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-08 23:45:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = int(input("preco: "))
if (a >= 200):
	a = a*0.95
else:
	a = a
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-08 23:45:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = int(input("preco: "))
if (a >= 200):
	a = a*0.95
else:
	a = a
print(round(a,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '200.09'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-08 23:45:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = int(input("preco: "))
if (a >= 200):
	a = a*0.95
else:
	a = a
print(round(a,2))
-- EXECUTION TIME:
0.728938
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1646/869/main.py", line 4, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '200.09'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-08 23:47:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("preco: "))
if (a >= 200):
	b = a*0.95
	print(round(b,2))
else:
	a = a
   print(round(b,2))
-- ERROR:
File "XXXX", line 10
    print(round(b,2))
                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-08 23:47:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("preco: "))
if (a >= 200):
	b = a*0.95
	print(round(b,2))
else:
	a = a
   print(round(a,2))
-- ERROR:
File "XXXX", line 10
    print(round(a,2))
                    ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-08 23:48:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("preco: "))
if (a >= 200):
	b = a*0.95
	print(round(b,2))
else:
	a = a
	print(round(a,2))
-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-08 23:48:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a = float(input("preco: "))
if (a >= 200):
	b = a*0.95
	print(round(b,2))
else:
	a = a
	print(round(a,2))
-- EXECUTION TIME:
0.89525
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
