== TEST (2019-04-30 16:49:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a>0 and b>0 and c>0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
	
-- OUTPUT:
Entrada: lula
Casa: Greyjoy
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:52:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a>0 and b>0 and c>0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:" a "," b "," c)
-- ERROR:
File "XXXX", line 14
    print("Entradas:" a "," b "," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:52:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a>0 and b>0 and c>0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:""," a "," b "," c)
-- ERROR:
File "XXXX", line 14
    print("Entradas:""," a "," b "," c)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:53:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a>0 and b>0 and c>0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a "," b "," c)
-- ERROR:
File "XXXX", line 14
    print("Entradas:", a "," b "," c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:54:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a>0 and b>0 and c>0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ",", b ",", c)
-- ERROR:
File "XXXX", line 14
    print("Entradas:", a ",", b ",", c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:54:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a>0 and b>0 and c>0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:55:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a>0 and b>0 and c>0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:56:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:57:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:57:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("tipo de triangulo:", msg)
-- EXECUTION TIME:
0.220246
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:57:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:57:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 16:58:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- EXECUTION TIME:
0.149235
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 16:59:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a!=b and b!=c and c!=a):
	msg= "escaleno"
else:
	msg= "isoceles"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:01:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:01:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c and b>c+a and c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- EXECUTION TIME:
0.20182
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:02:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if(a<0 and b<0 and c<0 or a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:04:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c and c==a):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:06:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:06:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:06:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:06:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:06:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:06:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 17:06:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- EXECUTION TIME:
0.198775
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:10:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 17:12:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a= float(input("lado a:"))
b= float(input("lado b:"))
c= float(input("lado c:"))
if( a>b+c or b>c+a or c>b+a):
	msg = "invalido"
elif(a==b and b==c ):
	msg = "equilatero"
elif(a==b or b==c or c==a):
	msg= "isosceles"
else:
	msg= "escaleno"
print("Entradas:", a ,",", b ,",", c)
print("Tipo de triangulo:", msg)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
