== TEST (2019-04-13 09:16:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))

Ve= 4* pi * r**3 / 3
print(ve)
-- ERROR:
File "XXXX", line 4
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:16:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))

Ve= 4* pi * r**3 / 3
print(ve)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(ve)
NameError: name 've' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:16:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))

Ve= 4* pi * r**3 / 3
print(Ve)
-- OUTPUT:
179.5943800302165
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:31:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 1):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,2))
-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:32:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 1):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,2))
-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:32:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 1):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,2))
-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:32:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 1):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,2))
-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 09:35:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 2):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,2))
-- EXECUTION TIME:
0.120705
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.03
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
20.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:35:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 2):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,2))
-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:36:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 2):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,2))
-- OUTPUT:
9.03
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 09:36:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 2):
	form= 4*pi*(r**3) / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,4))
-- EXECUTION TIME:
0.160517
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
19.9983
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:37:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 2):
	form= 4*pi*r**3 / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:37:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 1):
	form= 4*pi*r**3 / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:37:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 1):
	form= 4*pi*r**3 / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:38:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if (O == 1):
	form= 4*pi*r**3 / 3
else :
	form = pi * x**2 * (3*r-x) / 3

print(round(form,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:39:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
O= input("Insira a opcao: (1/2):")

if(O == 1):
	form= 4*pi*r**3 / 3
else:
	form = pi * x**2 * (3*r-x) / 3

print(round(form,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 09:40:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
p= input("Insira a opcao: (1/2):")

if(p == 1):
	form= 4*pi*r**3 / 3
else:
	form = pi * x**2 * (3*r-x) / 3

print(round(form,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 12:52:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
p= input("Insira a opcao: (1/2):")

if(p == 1):
	form = pi * x**2 * (3*r-x) / 3
else:
	form= 4*pi*r**3 / 3

print(round(form,4))
-- OUTPUT:
179.5944
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 12:53:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
p= input("Insira a opcao: (1/2):")

if(p == 1):
	form = pi * x**2 * (3*r-x) / 3
else:
	form= 4*pi*r**3 / 3

print(round(form,4))
-- EXECUTION TIME:
0.147861
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
179.5944
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
310.3391
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 12:54:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
p= input("Insira a opcao: (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi * x**2 * (3*r-x) / 3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 12:55:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
p= input("Insira a opcao: (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi * x**2 * (3*r-x) / 3
else:
	form= V-Vc

print(round(form,4))
-- EXECUTION TIME:
0.234575
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 12:55:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
#Qual das opções
p= input("Insira a opcao: (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi * x**2 * (3*r-x) / 3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:46:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi * x**2 * (3*r-x) / 3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:46:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi * x**2 * (3*r-x) / 3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:48:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi*x**2(3*r-x)/3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:50:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	print(round(pi*x**2(3*r-x)/3 , 4)
else:
	print(round(V-Vc), 4)


-- ERROR:
File "XXXX", line 12
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 13:50:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	print(round(pi*x**2(3*r-x)/3 , 4))
else:
	print(round(V-Vc), 4)


-- OUTPUT:
171 4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:10:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi*x**2(3*r-x)/3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:10:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p == 1):
	form = pi*x**2(3*r-x)/3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:10:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")
V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p==1):
	form = pi*x**2(3*r-x)/3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:11:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")

V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p==1):
	form = pi*x**2(3*r-x)/3
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:13:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")

V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p!=1):
	form= V-Vc
else:
	form = pi*x**2(3*r-x)/3

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 14:14:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")

V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p!=1):
	form= V-Vc
else:
	form = Vc

print(round(form,4))
-- EXECUTION TIME:
0.146789
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
170.5687
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:14:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")

V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p!=1):
	form= V-Vc
else:
	form = Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 14:15:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
r=float(input("Insira o raio:"))
x=float(input("Insira a altura da calota:"))
p= input("Insira a opcao (1/2):")

V= 4*pi*r**3 / 3
Vc = pi * x**2 * (3*r-x) / 3
if(p==1):
	form = Vc
else:
	form= V-Vc

print(round(form,4))
-- OUTPUT:
170.5687
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:41:56) 
-- CODE:
from math import*
r=float(input(""))
X=float(input(""))
n=float(input("(1/2:)"))
V= 4*pi*r**3/ 3
print(V)
-- OUTPUT:
179.5943800302165
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:50:58) 
-- CODE:
from math import*
r=float(input(""))
X=float(input(""))
n=float(input("1/2:"))

V=  4*pi*r**3/ 3
Ve= pi* X**2* (3*r-X)/3

if (n == 1):
	print(Ve)
-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 09:52:38) 
-- CODE:
from math import*
r=float(input(""))
X=float(input(""))
n=float(input("1/2:"))

V=  4*pi*r**3/ 3
Ve= pi* X**2* (3*r-X)/3
Vc= V-Ve
if (n == 1):
	print(round(Ve,4))
else:
	print(round(Vc,4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 09:52:48) 
-- CODE:
from math import*
r=float(input(""))
X=float(input(""))
n=float(input("1/2:"))

V=  4*pi*r**3/ 3
Ve= pi* X**2* (3*r-X)/3
Vc= V-Ve
if (n == 1):
	print(round(Ve,4))
else:
	print(round(Vc,4))
-- EXECUTION TIME:
0.120131
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
