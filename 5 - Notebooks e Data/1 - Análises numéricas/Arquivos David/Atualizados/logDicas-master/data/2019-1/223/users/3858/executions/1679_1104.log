== TEST (2019-05-01 15:16:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d)):
		print("Intervalo 1: ",a " , ", b)
		print("Intervalo 2: ",c ",", d)
		print("Entradas invalidas")
	else:
		print("Intervalo 1: ",a " , ", b)
		print("Intervalo 2: ",c ",", d)
		print("Entradas invalidas")
else:
	print("Intervalo 1: ",a " , ", b)
	print("Intervalo 2: ",c ",", d)
	print("Entradas invalidas")

-- ERROR:
File "XXXX", line 12
    print("Intervalo 1: ",a " , ", b)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:17:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d)):
		print("Intervalo 1: ",a " , ", b)
		print("Intervalo 2: ",c ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a " , ", b)
		print("Intervalo 2: ",c ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a " , ", b)
	print("Intervalo 2: ",c ",", d)
	print("Entradas invalidas")

-- ERROR:
File "XXXX", line 12
    print("Intervalo 1: ",a " , ", b)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:18:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a " , ", b)
	print("Intervalo 2: ",c ",", d)
	print("Entradas invalidas")

-- ERROR:
File "XXXX", line 20
    print("Intervalo 1: ",a " , ", b)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:19:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:19:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- EXECUTION TIME:
0.159816
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5  ,  5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0  ,  -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:19:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:26:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) or (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- EXECUTION TIME:
0.210734
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5  ,  5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0  ,  -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:27:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) or (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:27:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) and (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:27:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) and (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- EXECUTION TIME:
0.159464
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5  ,  5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0  ,  -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:27:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) and (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- EXECUTION TIME:
0.160621
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5  ,  5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0  ,  -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:27:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) and (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:27:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) and (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 15:28:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) and (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- OUTPUT:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:29:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<=d) and (b>=c and b<=d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- EXECUTION TIME:
0.19508
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5  ,  5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0  ,  -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 15:32:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<d) and (b>=c and b<d)):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- EXECUTION TIME:
0.145863
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5  ,  5.0
Intervalo 2:  2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0  ,  -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 16:00:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.

a = float(input())
b = float(input())
c = float(input())
d = float(input())

if(b>a and d>c):
	if((a>=c and a<d) or (b>=c and b<d) or (c>=a and c<b) or (d>=a and d<b) ):
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Ha intersecao")
	else:
		print("Intervalo 1: ",a, " , ", b)
		print("Intervalo 2: ",c, ",", d)
		print("Nao ha intersecao")
else:
	print("Intervalo 1: ",a, " , ", b)
	print("Intervalo 2: ",c, ",", d)
	print("Entradas invalidas")

-- EXECUTION TIME:
0.13373
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0  ,  2.0
Intervalo 2:  4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5  ,  5.0
Intervalo 2:  2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0  ,  -3.0
Intervalo 2:  1.0 , 3.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
