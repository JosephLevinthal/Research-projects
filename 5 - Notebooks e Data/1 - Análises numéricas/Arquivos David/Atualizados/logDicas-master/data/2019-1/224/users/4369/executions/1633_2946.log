== TEST (2019-04-02 18:03:49) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(round(mf, 2))
					  

-- OUTPUT:
6.63
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:04:00) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(round(mf, 2))
					  

-- EXECUTION TIME:
0.218121
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
6.63
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
5.74
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:04:32) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(round(mf, 2))
					  

-- OUTPUT:
6.63
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:04:44) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(round(mf, 2))
					  

-- EXECUTION TIME:
0.172427
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
6.63
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
5.74
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:07:38) 
-- CODE:
ml = input("Digite Ml: ")
mt = input("Digite MB: ")
mp = input("Digite MP: ")
mf = (ml + mt + mp)/3
print(float(round(mf, 2)))
					  

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    mf = (ml + mt + mp)/3
TypeError: unsupported operand type(s) for /: 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:08:30) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(float(round(mf, 2)))
					  

-- OUTPUT:
6.63
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:08:38) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(float(round(mf, 2)))
					  

-- EXECUTION TIME:
0.163904
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
6.63
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
5.74
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:09:13) 
-- CODE:
ml = int(input("Digite Ml: "))
mt = int(input("Digite MB: "))
mp = int(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(float(round(mf, 2)))
					  

-- EXECUTION TIME:
0.159547
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1633/2946/main.py", line 1, in <module>
    ml = int(input())
ValueError: invalid literal for int() with base 10: '8.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:09:16) 
-- CODE:
ml = int(input("Digite Ml: "))
mt = int(input("Digite MB: "))
mp = int(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(float(round(mf, 2)))
					  

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    ml = int(input())
ValueError: invalid literal for int() with base 10: '8.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:09:26) 
-- CODE:
ml = int(input("Digite Ml: "))
mt = int(input("Digite MB: "))
mp = int(input("Digite MP: "))
mf = (ml + mt + mp)/3
print(float(round(mf, 2)))
					  

-- EXECUTION TIME:
0.170648
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1633/2946/main.py", line 1, in <module>
    ml = int(input())
ValueError: invalid literal for int() with base 10: '8.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:10:32) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(float(round(mf, 2)))
					  

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:10:38) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(float(round(mf, 2)))
					  

-- EXECUTION TIME:
0.158854
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
2.1
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
2.09
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:11:10) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(round(mf, 2))
					  

-- EXECUTION TIME:
0.199982
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
2.1
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
2.09
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:11:14) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(round(mf, 2))
					  

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:11:24) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(round(mf, 2))
					  

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:12:07) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45) + (ml + mt + mp)/3
print(round(mf, 2))
					  

-- OUTPUT:
12.94
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:12:14) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45) + (ml + mt + mp)/3
print(round(mf, 2))
					  

-- OUTPUT:
12.94
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:12:50) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45) + (ml + mt + mp)/3
print(round(mf, 2))
					  

-- EXECUTION TIME:
0.207588
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
12.94
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
12.02
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:12:51) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45) + (ml + mt + mp)/3
print(round(mf, 2))
					  

-- OUTPUT:
12.94
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:13:12) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MB: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45) + (ml + mt + mp)
print(round(mf, 2))
					  

-- OUTPUT:
26.21
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:13:40) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(round(mf, 2))
					  

-- EXECUTION TIME:
0.152138
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
2.1
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
2.09
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:13:41) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(round(mf, 2))
					  

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:13:51) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3*100
print(round(mf, 2))
					  

-- EXECUTION TIME:
0.16811
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
210.33
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
209.43
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:13:52) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3*100
print(round(mf, 2))
					  

-- OUTPUT:
210.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:13:58) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3*100
print(round(mf, 2))
					  

-- OUTPUT:
210.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:15:07) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3
print(round(mf, 2))
					  

-- OUTPUT:
2.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:15:55) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3 + (ml + mt + mp)/3
print(round(mf, 2))
					  

-- OUTPUT:
8.74
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:16:35) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml*0.25 + mt*0.30 + mp*0.45)/3 + 1
print(round(mf, 2))
					  

-- OUTPUT:
3.1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:18:00) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml/0.25 + mt/0.30 + mp/0.45)/3
print(round(mf, 2))
					  

-- OUTPUT:
22.11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:18:48) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml/0.25) + (mt/0.30) + (mp/0.45)/3
print(round(mf, 2))
					  

-- OUTPUT:
58.78
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:19:10) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = (ml/0.25) + (mt/0.30) + (mp/0.45)/100
print(round(mf, 2))
					  

-- OUTPUT:
55.11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:19:30) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/0.25) + (mt/0.30) + (mp/0.45))/100
print(round(mf, 2))
					  

-- OUTPUT:
0.66
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:19:45) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/0.25) + (mt/0.30) + (mp/0.45))/3
print(round(mf, 2))
					  

-- OUTPUT:
22.11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:22:35) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))/3
print(round(mf, 2))
					  

-- OUTPUT:
0.22
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:22:49) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))/300
print(round(mf, 2))
					  

-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:23:14) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))/(3/100)
print(round(mf, 2))
					  

-- OUTPUT:
22.11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:23:40) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))/100
print(round(mf, 2))
					  

-- OUTPUT:
0.01
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:23:53) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))/1
print(round(mf, 2))
					  

-- OUTPUT:
0.66
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:24:18) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))/1
print(round(mf, 2))
					  

-- OUTPUT:
0.66
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:24:37) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))*100
print(round(mf, 2))
					  

-- OUTPUT:
66.33
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:24:49) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf = ((ml/25) + (mt/30) + (mp/45))*100/3
print(round(mf, 2))
					  

-- OUTPUT:
22.11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:27:10) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf  = ((ml*25) + (mt*30) + (mp*45))/100
 
print(round(mf, 2))
					  

-- OUTPUT:
6.31
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:27:15) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf  = ((ml*25) + (mt*30) + (mp*45))/100
 
print(round(mf, 2))
					  

-- OUTPUT:
6.31
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:27:25) 
-- CODE:
ml = float(input("Digite Ml: "))
mt = float(input("Digite MT: "))
mp = float(input("Digite MP: "))
mf  = ((ml*25) + (mt*30) + (mp*45))/100
 
print(round(mf, 2))
					  

-- EXECUTION TIME:
0.20308
-- TEST CASE 1:
---- input:
8.5
6.3
5.1
---- correct output:
6.31
---- user output:
6.31
-- TEST CASE 2:
---- input:
4.9
3.21
9.1
---- correct output:
6.28
---- user output:
6.28
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
