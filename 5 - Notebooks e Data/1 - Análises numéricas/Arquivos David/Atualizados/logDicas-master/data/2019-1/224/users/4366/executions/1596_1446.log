== TEST (2019-03-24 17:56:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2/3,3))
float(2/3)
float(1/3)
round(1/3,3)
-- OUTPUT:
0.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 17:56:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2/3,3))
float(2/3)
float(1/3)
round(1/3,3)
-- EXECUTION TIME:
0.141088
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.667
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 17:57:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2/3,3))
print(float(2/3))
print(float(1/3))
print(round(1/3,3))
-- OUTPUT:
0.667
0.6666666666666666
0.3333333333333333
0.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 17:58:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2/3,3))
print(float(2/3))
print(float(1/3))
print(round(1/3,3))
-- EXECUTION TIME:
0.161017
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
0.667
0.6666666666666666
0.3333333333333333
0.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
0.667
0.6666666666666666
0.3333333333333333
0.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
0.667
0.6666666666666666
0.3333333333333333
0.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 17:58:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2/3,3))

-- OUTPUT:
0.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 17:58:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
print(round(2/3,3))

-- OUTPUT:
0.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:13:33) 
-- CODE:
quantidade=float(input("Quantos litros?"))
doacao=quantidade-2/3*quantidade
print(round(quantidade-2/3*quantidade,3))


-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:13:35) 
-- CODE:
quantidade=float(input("Quantos litros?"))
doacao=quantidade-2/3*quantidade
print(round(quantidade-2/3*quantidade,3))


-- EXECUTION TIME:
0.134683
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
