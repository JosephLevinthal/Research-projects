== TEST (2019-03-26 18:47:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x(dividendo)=float(input())
y(divisor)=float(input())
-- ERROR:
File "XXXX", line 4
    x(dividendo)=float(input())
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:47:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x(dividendo)=float(input())
y(divisor)=float(input())
-- ERROR:
File "XXXX", line 4
    x(dividendo)=float(input())
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:49:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input(x(dividendo)= ))
float(input(y(divisor)=))
-- ERROR:
File "XXXX", line 4
    float(input(x(dividendo)= ))
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:49:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input(x(dividendo)=))
float(input(y(divisor)=))
-- ERROR:
File "XXXX", line 4
    float(input(x(dividendo)=))
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:54:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x(dividendo)= 7
y(divisor)= 2
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    x(dividendo)= 7
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:55:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x(dividendo)= 7
y(divisor)= 2
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- EXECUTION TIME:
0.201155
-- ERROR:
  File "/home/codebench/codes/1596/2049/main.py", line 4
    x(dividendo)= 7
    ^
SyntaxError: can't assign to function call

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:55:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x(dividendo)= 7
y(divisor)= 2
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    x(dividendo)= 7
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:56:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(x(dividendo))= 7
float(y(divisor))= 2
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    float(x(dividendo))= 7
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:56:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(x(dividendo))= 
float(y(divisor))= 
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    float(x(dividendo))= 
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:57:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input(x(dividendo)))= 
float(input(y(divisor)))= 
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    float(input(x(dividendo)))= 
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:58:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input(X:))= 
float(input(Y:))= 
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    float(input(X:))= 
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:01:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("X:"))= 
float(input("Y:"))= 
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    float(input())= 
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:01:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X=float(input("X:"))= 
Y=float(input("Y:"))= 
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    X=float(input())= 
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:02:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X=float(input("X:"))= 
Y=float(input("Y:"))= 
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- EXECUTION TIME:
0.175201
-- ERROR:
  File "/home/codebench/codes/1596/2049/main.py", line 4
    X=float(input())= 
                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:02:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X=float(input("X:"))= 
Y=float(input("Y:"))= 
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    X=float(input())= 
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:02:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
X=float(input()) 
Y=float(input())
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x(dividendo))
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:03:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x(dividendo)=float(input()) 
y(divisor)=float(input())
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
File "XXXX", line 4
    x(dividendo)=float(input()) 
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:03:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input()) 
y=float(input())
print(x(dividendo))
print(y(divisor))
print(x(dividendo) // y(divisor))
print(x(dividendo % y(divisor)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(x(dividendo))
NameError: name 'dividendo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input()) 
y=float(input())
print(x)
print(y)
print(x // y)
print(x % y)

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:04:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input()) 
y=float(input())
print(x)
print(y)
print(x // y)
print(x % y)

-- EXECUTION TIME:
0.301351
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:07:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input()) 
y=float(input())
print(float(x))
print(float(y))
print(float(x // y))
print(float(x % y))

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:07:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input()) 
y=float(input())
print(float(x))
print(float(y))
print(float(x // y))
print(float(x % y))

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:07:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=float(input()) 
y=float(input())
print(float(x))
print(float(y))
print(float(x // y))
print(float(x % y))

-- EXECUTION TIME:
0.210261
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:08:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(input()) 
y=(input())
print(x)
print(y)
print(x // y)
print(x % y)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:08:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=(input()) 
y=(input())
print(x)
print(y)
print(x // y)
print(x % y)

-- EXECUTION TIME:
0.121834
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/2049/main.py", line 8, in <module>
    print(x // y)
TypeError: unsupported operand type(s) for //: 'str' and 'str'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:13:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input()) 
y=int(input())
print(x)
print(y)
print(x // y)
print(x % y)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:13:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input()) 
y=int(input())
print(x)
print(y)
print(x // y)
print(x % y)

-- EXECUTION TIME:
0.154135
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
