== TEST (2019-05-02 09:19:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c or b<a+c or c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
		
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:20:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
		
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:20:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
		
		
-- EXECUTION TIME:
0.129421
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:21:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
		
		
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:21:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:22:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.160509
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isoceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:22:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isoceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.145027
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:24:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.281365
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
digite a: digite b: digite c: Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 09:24:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 09:24:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))

print("Entradas:", a, ",", b, ",", c)
if(a>0 and b>0 and c>0):
	if(a<b+c and b<a+c and c<a+b):
			if (a==b==c):
				print( "Tipo de triangulo: equilatero")
			elif(a!=b!=c):
				print("Tipo de triangulo: escaleno")
			else:
				print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.251171
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
