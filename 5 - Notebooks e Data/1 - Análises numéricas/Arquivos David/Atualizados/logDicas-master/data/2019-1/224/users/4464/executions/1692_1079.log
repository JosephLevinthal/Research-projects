== TEST (2019-04-24 16:54:11) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if ((x >= y + z) or (y >= z + x) or (z >= x + y)):
	# Testa se medidas correspondem aas de um triangulo
	if (___COMPLETE AQUI___):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    if (___COMPLETE AQUI___):
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:00:58) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 ) or (b < 0) or (c < 0)
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if ():
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 10
    if (a < 0 ) or (b < 0) or (c < 0)
                                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:02:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
 if (a < 0 ) or (b < 0) or (c < 0)
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if (((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 10
    if (a < 0 ) or (b < 0) or (c < 0)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:02:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
 if (a < 0 ) or (b < 0) or (c < 0):
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if (((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 10
    if (a < 0 ) or (b < 0) or (c < 0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:02:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 ) or (b < 0) or (c < 0):
elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if (((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 11
    elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:02:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 ) or (b < 0) or (c < 0):
 elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
	if (((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 11
    elif ((a >= b + c) or (b >= a + c) or (c >= a + b)):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:03:11) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 ) or (b < 0) or (c < 0):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
if (((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (((a >= b + c) or (b >= a + c) or (c >= a + b)):
                                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 17:03:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a < 0 ) or (b < 0) or (c < 0):
	print("invalida")
	# Testa se medidas correspondem aas de um triangulo
if ((a >= b + c) or (b >= a + c) or (c >= a + b)):
	print("invalida")
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    s = (a + b + c) / 2.0
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:45:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
   if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
   	print("Area:"area)

else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 13
    s = (a + b + c) / 2.0
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:45:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
   if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
   	print("Area:", area)

else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 13
    s = (a + b + c) / 2.0
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:46:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
   	print("Area:", area)

else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 15
    print("Area:", area)
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:47:12) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
	print("Area:", area)

else:
		print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:49:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
	print("Area:",area)

else:
		print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:49:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
	area= sqrt(s * (s-a) * (s-b) * (s-c))
	print("Area:",area)

else:
		print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:49:29) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	print("Area:",area)

else:
		print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:49:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	print("Area:",area)

else:
		print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:50:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
	area = sqrt(s * (s-a) * (s-b) * (s-c))
	print(area)

else:
		print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:51:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print (area)
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 15
    print (area)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:51:42) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print(area)
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 15
    print(area)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:51:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
print(area)
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 15
    print(area)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print(area)
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 15
    print(area)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print(area)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print(area)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print(hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print(hoi)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print("hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("hoi)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print("hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 15
    if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print("hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("hoi)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
print("hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("hoi)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
print("hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("hoi)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:52:58) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
	print("hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("hoi)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:53:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		print("hoi)
	
else:
		print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("hoi)
              ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:53:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		print(area)
	
else:
		print("Area: invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:53:43) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		s = (a + b + c) / 2.0
		print(area)
	
else:
		print("Area: invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:53:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		s = (a + b + c) / 2.0
		print(area)
	
else:
	print("Area: invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:54:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
area = sqrt(s * (s-a) * (s-b) * (s-c))
s = (a + b + c) / 2.0
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		s = (a + b + c) / 2.0
		print(area)
	
else:
	print("Area: invalida")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    area = sqrt(s * (s-a) * (s-b) * (s-c))
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:54:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		s = (a + b + c) / 2.0
		print(area)
	
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:54:30) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		s = (a + b + c) / 2.0
		print(area)
	
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:54:58) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print(area)
	
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:57:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" a , b , c)
else:
	print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" a , b , c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:58:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" a "," b "," c)
else:
	print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" a "," b "," c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:58:13) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a "," b "," c)
else:
	print("Area: invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" , a "," b "," c)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:58:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 18:59:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:00:04) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
else:
	print("Area:" invalida)
-- ERROR:
File "XXXX", line 19
    print("Area:" invalida)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:00:18) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:01:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","Invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:02:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","Invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:02:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","Invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:02:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","Invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:02:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:03:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if ((a >= b + c) and (b >= a + c) and (c >= a + b)):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:04:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:05:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:05:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:07:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:07:31) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- EXECUTION TIME:
0.125187
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 2.4 2.89
Area: 1.9320000000000004
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:08:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a , b , c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:08:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a "," b "," c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" , a "," b "," c)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:08:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a ,",", b ,",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:09:11) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a,",", b,",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:09:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:"  a,",", b,",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:"  a,",", b,",", c)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:09:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:",a",", b",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:",a",", b",", c)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:10:06) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a",", b",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" , a",", b",", c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:10:31) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a "," ,b",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" , a "," ,b",", c)
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:10:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a ,"," ,b",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:11:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a ,"," b ",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" , a ,"," b ",", c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:11:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , a,",",b,",",c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:12:11) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , ",",a",",b,","c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" , ",",a",",b,","c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:12:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , ",",a,",",b,","c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- ERROR:
File "XXXX", line 16
    print("Entradas:" , ",",a,",",b,","c)
                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:12:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:" , ",",a,",",b,",",c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:13:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas:" , ",",a,",",b,",",c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:14:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" , area)
	else:
		print("Area:","invalida")
else:
	print("Area:" , "invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:15:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" , area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:15:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" , area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- EXECUTION TIME:
0.214927
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:16:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area2 = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area2, 3)
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" , area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- EXECUTION TIME:
0.160422
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:17:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" ,round(area, 3))
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:17:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" ,round(area, 3))
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:17:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
# Testa se pelo menos uma das entradas eh negativa 
if (a > 0 ) and (b > 0) and (c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" ,round(area, 3))
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- EXECUTION TIME:
0.115923
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:20:13) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0  and b > 0 and c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Entradas:", a, ",", b, ",", c)
		print("Area:" ,round(area, 3))
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 19:20:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0  and b > 0 and c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Area:" ,round(area, 3))
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 19:20:39) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a > 0  and b > 0 and c > 0):
	
	# Testa se medidas correspondem aas de um triangulo
	if (a + b > c and a + c > c and c + b > a):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		print("Area:" ,round(area, 3))
	else:
		print("Area: invalida")
else:
	print("Area: invalida")
-- EXECUTION TIME:
0.212286
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
