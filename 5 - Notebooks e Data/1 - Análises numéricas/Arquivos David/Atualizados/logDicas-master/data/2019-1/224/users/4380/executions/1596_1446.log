== TEST (2019-03-26 18:12:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a=vitor
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a=vitor
NameError: name 'vitor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:14:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a="valor a"
print(a)
-- OUTPUT:
valor a
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:19:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("litros comprados: ")
-- OUTPUT:
valor a
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:21:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("litros comprados: "))
-- OUTPUT:
valor a
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:25:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("litros comprados: "))
a=21.0/3
print(round(21/3,3))
-- OUTPUT:
7.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:26:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("litros comprados: "))
a=21.0/3
print(round(21/3,3))
-- EXECUTION TIME:
0.205638
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
7.0
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7.0
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:26:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("litros comprados: "))
a=22.0/3
print(round(22.0/3,3))
-- EXECUTION TIME:
0.153195
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
7.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
7.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:27:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("litros comprados: "))
a=22.0/3
print(round(22.0/3,3))
-- OUTPUT:
7.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:27:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("litros comprados: "))
print(round(22.0/3,3))
-- OUTPUT:
7.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:27:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
float(input("litros comprados: "))
print(round(22.0/3,3))
-- EXECUTION TIME:
0.144891
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
7.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
7.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:30:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("litros comprados: ")
a= 22/3
print(round(a,3))
-- OUTPUT:
7.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:30:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("litros comprados: ")
a= 22/3
print(round(a,3))
-- EXECUTION TIME:
0.163789
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
7.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
7.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:32:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("quantos litros de leite foram comprados comprados: ")
a= 22/3
print(round(a,3))
-- EXECUTION TIME:
0.196158
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
7.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
7.333
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
7.333
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:32:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input("quantos litros de leite foram comprados comprados: ")
a= 22/3
print(round(a,3))
-- OUTPUT:
7.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:36:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = input()
qtd_michael = 1/3 * qtd_litros
a= round(quantidade_michael,3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    qtd_michael = 1/3 * qtd_litros
TypeError: can't multiply sequence by non-int of type 'float'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:37:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros =float(input())
qtd_michael = 1/3 * qtd_litros
a= round(quantidade_michael,  3)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a= round(quantidade_michael,  3)
NameError: name 'quantidade_michael' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:37:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros =float(input())
qtd_michael = 1/3 * qtd_litros
print(round(quantidade_michael,  3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(round(quantidade_michael,  3))
NameError: name 'quantidade_michael' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:38:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros =float(input())
qtd_michael = 1/3 * qtd_litros
print(round(qtd_michael,  3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:38:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros =float(input())
qtd_michael = 1/3 * qtd_litros
print(round(qtd_michael,  3))
-- EXECUTION TIME:
0.212722
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:56:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros =float(input())
qtd_michael = 1/3 * qtd_litros
print(round(qtd_michael,  3))
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
