== TEST (2019-03-21 19:35:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
valor = int(input(x, y, z))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    valor = int(input(x, y, z))
TypeError: input expected at most 1 arguments, got 3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:35:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
valor = int(input(x)
valor = int(input(y)
valor = int(input(z)
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- ERROR:
File "XXXX", line 9
    valor = int(input(y)
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:35:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
valor = int(input(x)
valor2 = int(input(y)
valor3 = int(input(z)
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- ERROR:
File "XXXX", line 9
    valor2 = int(input(y)
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:36:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
v1 = int(input(x)
v2 = int(input(y)
v3 = int(input(z)
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- ERROR:
File "XXXX", line 9
    v2 = int(input(y)
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:36:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
v1 = int(input(x))
v2 = int(input(y))
v3 = int(input(z))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- OUTPUT:
624<built-in function min>
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:36:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
v1 = int(input(x))
v2 = int(input(y))
v3 = int(input(z))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- OUTPUT:
624<built-in function min>
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:36:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
v1 = int(input(x))
v2 = int(input(y))
v3 = int(input(z))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- OUTPUT:
624<built-in function min>
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:36:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 6
y = 2
z = 4
v1 = int(input(x))
v2 = int(input(y))
v3 = int(input(z))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- OUTPUT:
624<built-in function min>
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:37:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- OUTPUT:
<built-in function min>
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:37:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- EXECUTION TIME:
0.30144
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
<built-in function min>
<built-in function max>
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:37:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- OUTPUT:
<built-in function min>
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:37:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
min(x, y, z)
max(x, y, z)
print(min)
print(max)
-- OUTPUT:
<built-in function min>
<built-in function max>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:38:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
print(v1)
print(v2)
-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:38:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
in = v1+v2
print(v1)
print(v2)
print(in)
-- ERROR:
File "XXXX", line 10
    in = v1+v2
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:39:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
intermediario = v1+v2
print(v1)
print(v2)
print(intermediario)
-- OUTPUT:
-2
10
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:39:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
intermediario = v1+v2
print(v1)
print(v2)
print(intermediario)
-- EXECUTION TIME:
0.125305
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:39:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
intermediario = v1+v2
print(v1)
print(v2)
print(intermediario)
-- OUTPUT:
-2
10
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:40:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
intermediario = x+y+z - v1 - v2
print(v1)
print(v2)
print(intermediario)
-- OUTPUT:
-2
10
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:40:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
intermediario = x+y+z - v1 - v2
print(v1)
print(v2)
print(intermediario)
-- EXECUTION TIME:
0.165604
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:42:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
intermediario = x + y + z - v1 - v2
print(v1)
print(intermediario) 
print(v2)

-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:42:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite: "))
y = int(input("digite: "))
z = int(input("digite: "))
v1 = min(x, y, z)
v2 = max(x, y, z)
intermediario = x + y + z - v1 - v2
print(v1)
print(intermediario) 
print(v2)

-- EXECUTION TIME:
0.148427
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
