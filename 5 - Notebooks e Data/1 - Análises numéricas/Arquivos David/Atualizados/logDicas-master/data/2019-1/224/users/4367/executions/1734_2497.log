== TEST (2019-05-14 18:48:10) 
-- CODE:
i= float(input("digite o valor: "))
m= int(input("digite a aplicação: "))
j=4/100
a=0

while (i<1):
	r=i*j
	s=i+r
	a=s*m
print(round(a))
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:48:25) 
-- CODE:
i= float(input("digite o valor: "))
m= int(input("digite a aplicação: "))
j=4/100
a=0

while (i<1):
	r=i*j
	s=i+r
	a=s*m
print(round(a))
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:48:52) 
-- CODE:
i= float(input("digite o valor: "))
m= int(input("digite a aplicação: "))
j=4/100
a=0

while (i<1):
	r=i*j
	s=i+r
	a=s*m
print(round(a))
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:49:09) 
-- CODE:
i= float(input("digite o valor: "))
m= int(input("digite a aplicacão: "))
j=4/100
a=0

while (i<1):
	r=i*j
	s=i+r
	a=s*m
print(round(a))
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:49:19) 
-- CODE:
i= float(input("digite o valor: "))
m= int(input("digite a aplicacao: "))
j=4/100
a=0

while (i<1):
	r=i*j
	s=i+r
	a=s*m
print(round(a))
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:58:39) 
-- CODE:
i= float(input("digite o valor: "))
m= int(input("digite a aplicacao: "))
j=4/100
a=0
while (i<1):
	r=i*j
	ac=r+i
	a=a+r
	print(round(a, 2))
-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:02:23) 
-- CODE:
qi    = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0/100
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (qi<1):
	rend = saldo * juros
	saldo = saldo + rend
	t = t+saldo
	print(round(saldo, 2)) # Exibicao de resultados

-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:04:50) 
-- CODE:
qi    = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0/100
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (qi<1):
	rend = saldo * juros
	saldo = saldo + rend
	m=tempo*renda+saldo
	t = t+m
	print(round(t, 2)) # Exibicao de resultados

-- OUTPUT:
5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:08:53) 
-- CODE:
qi    = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0/100
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo>t):
	rend = saldo * juros
	saldo = saldo + rend
	t = t+1
	print(round(t, 2)) # Exibicao de resultados

-- OUTPUT:
1
2
3
4
5
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:09:11) 
-- CODE:
qi    = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0/100
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo>t):
	rend = saldo * juros
	saldo = saldo + rend
	t = t+1
	print(round(saldo, 2)) # Exibicao de resultados

-- OUTPUT:
598.26
622.19
647.08
672.96
699.88
727.87
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 19:09:21) 
-- CODE:
qi    = float(input("Quantia inicial: "))
tempo = int(input("Tempo de investimento: "))
juros = 4.0/100
saldo = qi      # Variavel acumuladora

# Valor inicial da variavel contadora
t = 0

# Atualizacao de saldo
while (tempo>t):
	rend = saldo * juros
	saldo = saldo + rend
	t = t+1
	print(round(saldo, 2)) # Exibicao de resultados

-- EXECUTION TIME:
0.2898
-- TEST CASE 1:
---- input:
575.25
6
---- correct output:
598.26
622.19
647.08
672.96
699.88
727.87
---- user output:
598.26
622.19
647.08
672.96
699.88
727.87
-- TEST CASE 2:
---- input:
825.4
3

---- correct output:
858.42
892.75
928.46
---- user output:
858.42
892.75
928.46
-- TEST CASE 3:
---- input:
1275.65
5
---- correct output:
1326.68
1379.74
1434.93
1492.33
1552.02
---- user output:
1326.68
1379.74
1434.93
1492.33
1552.02
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
