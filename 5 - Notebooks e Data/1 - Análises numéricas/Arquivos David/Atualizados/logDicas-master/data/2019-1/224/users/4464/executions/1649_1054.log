== TEST (2019-04-10 12:01:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coor = int(input"me de as coordenadas,man:"

-- ERROR:
File "XXXX", line 4
    coor = int(input"me de as coordenadas,man:"
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:01:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coor = int(input("me de as coordenadas,man:"))

-- ERROR:
File "XXXX", line 4
    coor = int(input"me de as coordenadas,man:"
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:03:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = int(input("me de as coordenadas x,man:"))
coory = int(input("me de as coordenadas y,man:"))


-- ERROR:
File "XXXX", line 4
    coor = int(input"me de as coordenadas,man:"
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:04:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = int(input("me de as coordenadas x,man:"))
coory = int(input("me de as coordenadas y,man:"))
coorxy = (coor, coory)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    coorxy = (coor, coory)
NameError: name 'coor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 12:04:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = int(input("me de as coordenadas x,man:"))
coory = int(input("me de as coordenadas y,man:"))
coorxy = (coorx, coory)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    coorxy = (coor, coory)
NameError: name 'coor' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:10:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2x+y=3
if    

-- ERROR:
File "XXXX", line 6
    coorxy = 2x+y=3
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:10:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2x+y=3
if    

-- ERROR:
File "XXXX", line 6
    coorxy = 2x+y=3
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:11:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2(coorx)+(coory)=3

if    

-- ERROR:
File "XXXX", line 8
    if    
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:11:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2(coorx)+(coory)=3

if    

-- ERROR:
File "XXXX", line 8
    if    
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:11:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2(coorx)+(coory)=3

if    

-- ERROR:
File "XXXX", line 8
    if    
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:11:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2(coorx)+(coory)=3

if    

-- ERROR:
File "XXXX", line 8
    if    
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:11:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2(coorx)+(coory)=3

-- ERROR:
File "XXXX", line 6
    coorxy = 2(coorx)+(coory)=3
            ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:12:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = 2*(coorx)+(coory)=3

-- ERROR:
File "XXXX", line 6
    coorxy = 2*(coorx)+(coory)=3
            ^
SyntaxError: can't assign to operator
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:12:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy == 2*(coorx)+(coory)=3

-- ERROR:
File "XXXX", line 6
    coorxy == 2*(coorx)+(coory)=3
    ^
SyntaxError: can't assign to comparison
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:12:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy == 2*(coorx)+(coory)=3

-- ERROR:
File "XXXX", line 6
    coorxy == 2*(coorx)+(coory)=3
    ^
SyntaxError: can't assign to comparison
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:12:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = coorx , coory
-- ERROR:
File "XXXX", line 6
    coorxy == 2*(coorx)+(coory)=3
    ^
SyntaxError: can't assign to comparison
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:12:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = coorx , coory
-- ERROR:
File "XXXX", line 6
    coorxy == 2*(coorx)+(coory)=3
    ^
SyntaxError: can't assign to comparison
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:13:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = coorx , coory
print (coordxy)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print (coordxy)
NameError: name 'coordxy' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:13:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("me de as coordenadas x,man:"))
coory = float(input("me de as coordenadas y,man:"))
coorxy = coorx , coory
print (coorxy)
-- OUTPUT:
(20.0, -37.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:15:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(float(input("me de as coordenadas x,man:")))
coory = float(input("me de as coordenadas y,man:"))
if coorxy
-- ERROR:
File "XXXX", line 6
    if coorxy
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:15:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(float(input("me de as coordenadas x,man:")))
coory = float(input("me de as coordenadas y,man:"))

-- ERROR:
File "XXXX", line 6
    if coorxy
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:18:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx = 1 and coory = 1
	print("ponto pertence a reta")
-- ERROR:
File "XXXX", line 6
    if coorx = 1 and coory = 1
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:18:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1
	print("ponto pertence a reta")
-- ERROR:
File "XXXX", line 6
    if coorx == 1 and coory == 1
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:18:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	print("ponto pertence a reta")
-- ERROR:
File "XXXX", line 6
    if coorx == 1 and coory == 1
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:18:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	print("ponto pertence a reta")
-- ERROR:
File "XXXX", line 6
    if coorx == 1 and coory == 1
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:19:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	print("ponto pertence a reta")
else:
	print("ponto nao pertence a reta")
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:25:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	print("ponto pertence a reta".upper())
else:
	print("ponto nao pertence a reta".upper())
-- OUTPUT:
PONTO NAO PERTENCE A RETA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:26:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	print("ponto pertence a reta".lower())
else:
	print("ponto nao pertence a reta".lower())
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:26:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	print("ponto pertence a reta".lower())
else:
	print("ponto nao pertence a reta".lower())
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 14:26:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	print("ponto pertence a reta".lower())
else:
	print("ponto nao pertence a reta".lower())
-- EXECUTION TIME:
0.14386
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:27:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:28:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x"))
coory = float(input("digite coordena y"))
if coorx == 1 and coory == 1:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
print(mensagem.lower())
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:28:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x:"))
coory = float(input("digite coordena y:"))
if coorx == 1 and coory == 1:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
print(mensagem.lower())
-- OUTPUT:
ponto nao pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 14:28:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
coorx = float(input("digite coordena x:"))
coory = float(input("digite coordena y:"))
if coorx == 1 and coory == 1:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
print(mensagem.lower())
-- EXECUTION TIME:
0.178643
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto nao pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 14:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- EXECUTION TIME:
0.118604
-- ERROR:
  File "/home/codebench/codes/1649/1054/main.py", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta = 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:37:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:58:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:59:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2*x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"

-- ERROR:
File "XXXX", line 6
    reta = 2x+y
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:59:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2*x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
print("mensagem")

-- OUTPUT:
mensagem
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 14:59:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2*x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
print(mensagem)

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 15:01:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2*x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
print(mensagem.lower())

-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 15:01:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("digite coordena x:"))
y = float(input("digite coordena y:"))
reta = 2*x+y
if reta == 3:
	mensagem = "ponto pertence a reta"
else:
	mensagem = "ponto nao pertence a reta"
print(mensagem.lower())

-- EXECUTION TIME:
0.155823
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
