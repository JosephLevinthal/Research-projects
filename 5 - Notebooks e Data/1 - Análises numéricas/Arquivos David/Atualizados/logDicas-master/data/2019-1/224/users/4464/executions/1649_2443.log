== TEST (2019-04-10 18:57:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V = 4*3,14*r**3
opção = int(input("1/2"))

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:57:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V = 4*3,14*r**3
opção = int(input("1/2"))
print(V)
-- OUTPUT:
(12, 600.25)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:58:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V = 4*3.14*r**3
opção = int(input("1/2"))
print(V)
-- OUTPUT:
538.51
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:58:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V = 4*3.14*r**3
opção = int(input("1/2"))
print(V)
-- OUTPUT:
538.51
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:00:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V = 4*3.1415*r**3
opção = int(input("1/2"))
print(V)
-- OUTPUT:
538.76725
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:00:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V = 4*3.1415*(r**3)
opção = int(input("1/2"))
print(V)
-- OUTPUT:
538.76725
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:03:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V = 4*π*r**3/3
opção = int(input("1/2"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    V = 4*π*r**3/3
NameError: name 'π' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 19:04:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
r = float(input("raio:"))
a = float(input("altura:"))
V=(4*π)*(r**33)
opção = int(input("1/2"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    V=(4*π)*(r**33)
NameError: name 'π' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:01:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio")
a = float(input("altura")
opção= int(input("1 ou 2)
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 6
    a = float(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:01:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio")
x= float(input("altura")
opção= int(input("1 ou 2)
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 6
    x= float(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:01:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio")
x =float(input("altura")
opção= int(input("1 ou 2)
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 6
    x =float(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:02:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio")
x = float(input("altura")
opção= int(input("1 ou 2)
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 6
    x = float(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:02:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio")
x = float(input("altura"))
opção= int(input("1 ou 2)
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 6
    x = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:02:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2)
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 7
    opção= int(input("1 ou 2)
                             ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:02:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2))
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 7
    opção= int(input("1 ou 2))
                              ^
SyntaxError: EOL while scanning string literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:02:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (i*(a**2)*(3*r-a))3
-- ERROR:
File "XXXX", line 8
    vAr = (i*(a**2)*(3*r-a))3
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:04:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
-- ERROR:
File "XXXX", line 8
    vAr = (i*(a**2)*(3*r-a))3
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:05:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
-- ERROR:
File "XXXX", line 8
    vAr = (i*(a**2)*(3*r-a))3
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:07:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
-- ERROR:
File "XXXX", line 8
    vAr = (i*(a**2)*(3*r-a))3
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:09:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if opção == 1
	print(vAr)
if opção == 2
	print(Vcombus)
-- ERROR:
File "XXXX", line 11
    if opção == 1
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:09:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if opção == 1:
	print(vAr)
if opção == 2:
	print(Vcombus)
-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:09:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if opção == 1:
	print(vAr)
if opção == 2:
	print(Vcombus)
-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:09:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if opção == 1:
	print(vAr)
if opção == 2:
	print(Vcombus)
-- EXECUTION TIME:
0.158849
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.025664794069577
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3407570570127
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:10:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if opção == 1:
	print( round (vAr , n)
if opção == 2:
	print( round (Vcombus, n)
-- ERROR:
File "XXXX", line 13
    if opção == 2:
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:10:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print( round (vAr , n)
if (opção == 2):
	print( round (Vcombus, n)
-- ERROR:
File "XXXX", line 13
    if (opção == 2):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:11:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print(vAr)
if (opção == 2):
	print(Vcombus)
-- OUTPUT:
9.025664794069577
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:12:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print( round (vAr,4)
if (opção == 2):
	print( round (Vcombus,4)
-- ERROR:
File "XXXX", line 13
    if (opção == 2):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:12:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print( round (vAr,4)
if (opção == 2):
	print( round (Vcombus,4)
-- ERROR:
File "XXXX", line 13
    if (opção == 2):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:12:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print( round (vAr,4)
if (opção == 2):
	print( round (Vcombus,4)
-- ERROR:
File "XXXX", line 13
    if (opção == 2):
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:12:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print( round (vAr,4))
if (opção == 2):
	print(round(Vcombus, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:12:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print( round (vAr,4))
if (opção == 2):
	print(round(Vcombus, 4))
-- EXECUTION TIME:
0.154298
-- TEST CASE 1:
---- input:
3.50
0.95
1
---- correct output:
9.0257
---- user output:
9.0257
-- TEST CASE 2:
---- input:
4.20
1.30
2
---- correct output:
290.3408
---- user output:
290.3408
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:38:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
r = float(input("raio"))
x = float(input("altura"))
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3)
Vesf = (4*pi*(r**3)/3)
Vcombus = (Vesf - vAr)
if (opção == 1):
	print( round (vAr,4))
if (opção == 2):
	print(round(Vcombus, 4))
-- OUTPUT:
9.0257
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
