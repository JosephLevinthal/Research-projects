== TEST (2019-04-24 20:12:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 20:13:31) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.195172
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 20:13:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 20:14:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0) or (b<0) or (c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 20:14:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0) or (b<0) or (c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.16025
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 20:15:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0) or (b<0) or (c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 20:16:11) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0) or (b<0) or (c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.18979
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 20:45:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0) or (b<0) or (c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a!=b+c) or (b!=a+c) or (c!=a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:07:19) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))


if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	merda=("invalido")
else:
	print("Entradas:", a ",",b, ",",c)
a=round(a,3)
	
	print("Area:",a)
	


-- ERROR:
File "XXXX", line 14
    print("Entradas:", a ",",b, ",",c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:07:30) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))


if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	merda=("invalido")
else:
	print("Entradas:", a, ",",b, ",",c)
a=round(a,3)
	
	print("Area:",a)
	


-- ERROR:
File "XXXX", line 17
    print("Area:",a)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:07:57) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	merda=("invalido")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- ERROR:
File "XXXX", line 17
    print("Area:",a)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:08:00) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	merda=("invalido")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- EXECUTION TIME:
0.186806
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:08:07) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	merda=("invalido")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- ERROR:
File "XXXX", line 17
    print("Area:",a)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:08:31) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("invalido")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:08:32) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("invalido")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- EXECUTION TIME:
0.139428
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
invalido
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:08:41) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("invalido")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- OUTPUT:
invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:10:36) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- EXECUTION TIME:
0.149674
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:10:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- EXECUTION TIME:
0.173532
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:10:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- EXECUTION TIME:
0.163297
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:10:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- EXECUTION TIME:
0.17097
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:10:40) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:10:58) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:11:00) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)

	
	print("Area:",a)
	


-- EXECUTION TIME:
0.250661
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 21:11:56) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 21:12:06) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.145155
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:00:04) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:00:15) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.13202
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:00:15) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.164747
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:14:16) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:17:03) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.159614
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:17:09) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:25:59) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.178028
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
abcEntradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:00) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.250294
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:00) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.118777
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:00) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.271624
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:

-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:26:10) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:25) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.129563
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:26) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.221907
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:26) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.105997
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:27) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.208348
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:27) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:","invalida")
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.347846
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:

-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:37) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.131613
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:27:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.175577
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:27:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.233661
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
abcEntradas: 1.932 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
abcEntradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:38) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.165259
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:

-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
abcEntradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:40) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.302675
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:40) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.139589
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:40) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"
if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.277844
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:

-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 0.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:28:10) 
-- CODE:
a=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"

if(a>=b+c) or (b>=a+c) or (c>=b+a) or (a<0) or (b<0) or (c<0):
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", a, ",",b, ",",c)
	print("Area:",a)
	


-- OUTPUT:
Entradas: -0.0 , 22.0 , 33.0
Area: invalida
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:29:31) 
-- CODE:
y=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"

if(y>=b+c) or (b>=y+c) or (c>=b+y) or (y<0) or (b<0) or (c<0):
	print("Entradas:", y, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", y, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.200324
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1692/1079/main.py", line 6, in <module>
    s=(a+b+c)/2.0
NameError: name 'a' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:29:31) 
-- CODE:
y=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(a+b+c)/2.0

a=sqrt(s*(s-a)*(s-b)*(s-c))
a=round(a,3)
h="invalida"

if(y>=b+c) or (b>=y+c) or (c>=b+y) or (y<0) or (b<0) or (c<0):
	print("Entradas:", y, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", y, ",",b, ",",c)
	print("Area:",a)
	


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    s=(a+b+c)/2.0
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:29:48) 
-- CODE:
y=float(input("a"))
b=float(input("b"))
c=float(input("c"))

from math import*
s=(y+b+c)/2.0

a=sqrt(s*(s-y)*(s-b)*(s-c))
a=round(a,3)
h="invalida"

if(y>=b+c) or (b>=y+c) or (c>=b+y) or (y<0) or (b<0) or (c<0):
	print("Entradas:", y, ",",b, ",",c)
	print("Area:",h)
else:
	print("Entradas:", y, ",",b, ",",c)
	print("Area:",a)
	


-- EXECUTION TIME:
0.285312
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
