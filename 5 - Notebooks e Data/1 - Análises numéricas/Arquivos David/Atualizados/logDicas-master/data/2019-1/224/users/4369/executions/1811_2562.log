== TEST (2019-06-06 18:08:09) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
while (size(vet) > vet[0]):
   # Zera contador de elementos pares
   npar = 0
	nimpar = 0
	qe = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpar = 0
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:08:50) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 14
    elif elemento % 2 != 0:
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:09:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if (elemento % 2 == 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:10:20) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:13:15) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while (size(vet) > vet[0]):
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:13:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > vet[0]:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:16:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:17:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:19:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:20:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:20:03) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:20:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:23:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:23:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:23:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:23:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:23:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:23:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
   for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    if elemento % 2 == 0:
                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:23:57) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
   print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 22
    print(nimpar)
                ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:24:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
   print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 25
    print(npar + nimpar)
                       ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:24:42) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 28
    vet = array(eval(input()))
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:24:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > size(vet) == 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:25:35) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 18:25:55) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.12518
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
5
9
4
7
11
10
7
17
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
13
14
17
0
17
27
0
27
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
10
-6
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:26:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		elif elemento % 2 != 0:
			nimpar = size(vet) - npar
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:27:33) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		else:
			nimpar = size(vet) - npar
		
			

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:29:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		print(npar)
		if elemento % 2 != 0:	

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 18
    print(npar)
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:30:17) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:31:18) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:31:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:31:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 27
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:32:02) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 27
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:32:10) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
print(npar)

   # No. de elementos impares
print(nimpar)

   # No. total de elementos
print(npar + nimpar)

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:32:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:33:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:34:08) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))
print("acabou")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:34:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))
print(npar)
print(nimpar)
print(npar + nimpar)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:40:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:40:40) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:	
			nimpar = size(vet) - npar

   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:42:39) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
	nimpar = size(vet) - npar


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:43:47) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		else:
		nimpar = size(vet) - npar
		nimpar = nimpar + 1


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    nimpar = size(vet) - npar
         ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:43:55) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		else:
			nimpar = size(vet) - npar
			nimpar = nimpar + 1


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:44:00) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		else:
			nimpar = size(vet) - npar
			nimpar = nimpar + 1


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(npar + nimpar)

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:44:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		else:
			nimpar = size(vet) - npar
			nimpar = nimpar + 1


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:45:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		else:
			nimpar = nimpar + 1


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:46:11) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elmento % 2 != 0:
			nimpar = size(vet) - npar


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:46:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:01) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
qe = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:49:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar


   # No. de elementos pares
		print(npar)

   # No. de elementos impares
		print(nimpar)

   # No. total de elementos
		print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:50:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar


   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:52:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0
vet = 0
while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar
		vet = vet + 1
	
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:52:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0

while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:53:03) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0

while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:05:55) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0

while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:06:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0
nimpar = 0

while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
		if elemento % 2 != 0:
			nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 19:08:19) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0


while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
	nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.111
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
4
7
11
10
-4
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
17
0
17
27
-17
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
10
-6
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:08:27) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0


while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
	nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:09:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0


while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
	nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))
	npar = 0
	nimpar = 0

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 19:10:07) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))

# Verifica se o programa vai terminar
npar = 0


while size(vet) > 1:
	for elemento in vet:
		if elemento % 2 == 0:
			npar = npar + 1
	nimpar = size(vet) - npar
   # No. de elementos pares
	print(npar)

   # No. de elementos impares
	print(nimpar)

   # No. total de elementos
	print(size(vet))
	npar = 0
	nimpar = 0

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))


-- EXECUTION TIME:
1.18514
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
