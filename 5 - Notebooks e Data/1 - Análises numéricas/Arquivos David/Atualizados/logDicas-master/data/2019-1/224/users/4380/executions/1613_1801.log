== TEST (2019-04-01 17:40:21) 
-- CODE:
l=input("gata: ")
p=int(input("repetições: "))
print(l*p)
-- OUTPUT:
livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:40:50) 
-- CODE:
l=input("gata: ")
p=int(input("repetições: "))
print(l*p)
-- OUTPUT:
livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:41:17) 
-- CODE:
l=input("gata: ")
p=int(input("repetições: "))
print(l*p)
-- OUTPUT:
livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:41:46) 
-- CODE:
l=input("gata: ")
p=input("repetições: ")
print(l*p)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(l*p)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:42:19) 
-- CODE:
l=input("gata: ")
p=input("repeticoes: ")
print(l*p)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(l*p)
TypeError: can't multiply sequence by non-int of type 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:43:06) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(int(l*p))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(int(l*p))
ValueError: invalid literal for int() with base 10: 'livrolivrolivrolivrolivrolivrolivrolivro'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:44:24) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
int(print(l*p))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    int(print(l*p))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:45:29) 
-- CODE:
l=input(abra "gata: ")
p=int(input("repeticoes: "))
int(print(l*p))
-- ERROR:
File "XXXX", line 1
    l=input(abra "gata: ")
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-01 17:45:59) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
int(print("abra"+l*p))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    int(print("abra"+l*p))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:12:33) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
int(print("abra"+l*p))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    int(print("abra"+l*p))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:13:01) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
int(print("abra "+l*p))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    int(print("abra "+l*p))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:13:32) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print("abra "+l*p)
-- OUTPUT:
abra livrolivrolivrolivrolivrolivrolivrolivro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:15:38) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(("abra "+ l " ")*p)
-- ERROR:
File "XXXX", line 3
    print(("abra "+ l " ")*p)
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:15:54) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(("abra "+ l + " ")*p)
-- OUTPUT:
abra livro abra livro abra livro abra livro abra livro abra livro abra livro abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 18:16:09) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(("abra "+ l + " ")*p)
-- EXECUTION TIME:
0.173455
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
abra livro abra livro abra livro abra livro abra livro abra livro abra livro abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
abra carro abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
abra caixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:16:25) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(("abra " + l + " ")*p)
-- OUTPUT:
abra livro abra livro abra livro abra livro abra livro abra livro abra livro abra livro
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 18:16:36) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(("abra " + l + " ")*p)
-- EXECUTION TIME:
0.163904
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
abra livro abra livro abra livro abra livro abra livro abra livro abra livro abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
abra carro abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
abra caixa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 18:17:20) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(("Abra " + l + " ")*p)
-- EXECUTION TIME:
0.13593
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carro Abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 18:18:22) 
-- CODE:
l=input("gata: ")
p=int(input("repeticoes: "))
print(("Abra " + l + " ")*p)
-- EXECUTION TIME:
0.224243
-- TEST CASE 1:
---- input:
livro
8
---- correct output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
---- user output:
Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro Abra livro
-- TEST CASE 2:
---- input:
carro
2
---- correct output:
Abra carro Abra carro
---- user output:
Abra carro Abra carro
-- TEST CASE 3:
---- input:
caixa
1
---- correct output:
Abra caixa
---- user output:
Abra caixa
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
