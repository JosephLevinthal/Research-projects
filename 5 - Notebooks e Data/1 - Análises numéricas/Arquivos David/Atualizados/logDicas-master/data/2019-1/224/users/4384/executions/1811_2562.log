== SUBMITION (2019-06-05 11:54:23) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > size(vet[1]):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
0.819117
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 3
    while (size(vet) > size(vet[1]):
                                   ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 11:54:54) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > size(vet[1]):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 3
    while (size(vet) > size(vet[1]):
                                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 11:55:08) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > size([1]):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 3
    while (size(vet) > size([1]):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 11:55:18) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > size[1]:
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 3
    while (size(vet) > size[1]:
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 11:57:16) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > [1]:
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 3
    while (size(vet) > [1]:
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 11:57:29) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1:
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 3
    while (size(vet) > 1:
                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 11:57:39) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > 1:
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 11:59:57) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > ones(1, dtype=int):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 12
    print(npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:00:10) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > ones(1, dtype=int):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			el_impa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(el_impa)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    el_impa=size(vet)-npar
                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:03:21) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > ones(1, dtype=int):
	npar=0
	el_impa=size(vet)-npar
for elemento in vet:
if (elemento % 2 == 0):
	npar = npar + 1
   print(npar)
   print(el_impa)
   print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    if (elemento % 2 == 0):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:03:45) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > ones(1, dtype=int):
	npar=0
	el_impa=size(vet)-npar
for elemento in vet:
if (elemento % 2 == 0):
	npar = npar + 1
print(npar)
print(el_impa)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    if (elemento % 2 == 0):
     ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:04:16) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) >ones(1, dtype=int):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 3
    while (size(vet) >ones(1, dtype=int):
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:04:46) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > (ones(1, dtype=int):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 3
    while (size(vet)) > (ones(1, dtype=int):
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:05:03) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > (ones(1, dtype=int)):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(???)

   # No. total de elementos
   print(???)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 15
    print(???)
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:06:11) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > (ones(1, dtype=int)):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpa=size(vet)-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpa)

   # No. total de elementos
   print(sizevet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpa=size(vet)-npar
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:06:25) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > (ones(1, dtype=int)):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpa=(size(vet))-npar
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpa)

   # No. total de elementos
   print(sizevet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpa=(size(vet))-npar
                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-05 12:06:46) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > (ones(1, dtype=int)):
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpa=(size(vet))-(npar)
   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(nimpa)

   # No. total de elementos
   print(sizevet)

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 10
    nimpa=(size(vet))-(npar)
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 00:55:16) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet)) > 1:
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar +1
   print(npar)

   
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 15:27:10) 
-- CODE:
from numpy import*
vet=array(eval(input("digite o primeiro vetor:")))
while(size(vet)>1):
    vet=array(eval(input("digite o primeirovetor:")))
    npar=0
    nimpa=size(vet)
    for elemento in vet:
        if(elemento==0):
            npar=npar+1
            nimpa=nimpa-npar
    print(npar)
    print(nimpa)
    print(size(vet))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-09 15:27:11) 
-- CODE:
from numpy import*
vet=array(eval(input("digite o primeiro vetor:")))
while(size(vet)>1):
    vet=array(eval(input("digite o primeirovetor:")))
    npar=0
    nimpa=size(vet)
    for elemento in vet:
        if(elemento==0):
            npar=npar+1
            nimpa=nimpa-npar
    print(npar)
    print(nimpa)
    print(size(vet))
-- EXECUTION TIME:
1.10059
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
0
11
11
0
6
6
0
1
1
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
16
-119
17
0
10
10
0
1
1
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
0
11
11
0
6
6
0
1
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-09 15:27:13) 
-- CODE:
from numpy import*
vet=array(eval(input("digite o primeiro vetor:")))
while(size(vet)>1):
    vet=array(eval(input("digite o primeirovetor:")))
    npar=0
    nimpa=size(vet)
    for elemento in vet:
        if(elemento==0):
            npar=npar+1
            nimpa=nimpa-npar
    print(npar)
    print(nimpa)
    print(size(vet))
-- EXECUTION TIME:
2.15903
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
digite o primeiro vetor:digite o primeirovetor:0
11
11
digite o primeirovetor:0
6
6
digite o primeirovetor:0
1
1
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
digite o primeiro vetor:digite o primeirovetor:16
-119
17
digite o primeirovetor:0
10
10
digite o primeirovetor:0
1
1
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
digite o primeiro vetor:digite o primeirovetor:0
4
4
digite o primeirovetor:0
1
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-09 15:28:25) 
-- CODE:
from numpy import*
vet=array(eval(input("digite o primeiro vetor:")))
while(size(vet)>1):
    vet=array(eval(input("digite o primeirovetor:")))
    npar=0
    nimpa=size(vet)
    for elemento in vet:
        if(elemento==0):
            npar=npar+1
            nimpa=nimpa-npar
    print(npar)
    print(nimpa)
    print(size(vet))
-- EXECUTION TIME:
0.987528
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
0
11
11
0
6
6
0
1
1
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
16
-119
17
0
10
10
0
1
1
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
0
4
4
0
1
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 15:28:46) 
-- CODE:
from numpy import*
vet=array(eval(input("digite o primeiro vetor:")))
while(size(vet)>1):
    vet=array(eval(input("digite o primeirovetor:")))
    npar=0
    nimpa=size(vet)
    for elemento in vet:
        if(elemento==0):
            npar=npar+1
            nimpa=nimpa-npar
    print(npar)
    print(nimpa)
    print(size(vet))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 15:29:28) 
-- CODE:
from numpy import*
vet=array(eval(input("digite o primeiro vetor:")))
while(size(vet)>1):
    vet=array(eval(input("digite o primeirovetor:")))
    npar=0
    nimpa=size(vet)
    for elemento in vet:
        if(elemento%2==0):
            npar=npar+1
            nimpa=nimpa-npar
    print(npar)
    print(nimpa)
    print(size(vet))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 15:31:06) 
-- CODE:
from numpy import*
vet=array(eval(input("digite o primeiro vetor:")))
while(size(vet)>1):
    vet=array(eval(input("digite o primeirovetor:")))
    npar=0
    nimpa=size(vet)
    for elemento in vet:
        if(elemento%2==0):
            npar=npar+1
            nimpa=nimpa-npar
    print(npar)
    print(nimpa)
    print(size(vet))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:39:05) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2=0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
-- ERROR:
File "XXXX", line 8
    if(elemento%2=0):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:39:27) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2=(0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
-- ERROR:
File "XXXX", line 8
    if(elemento%2=(0):
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:40:26) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0:
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
	v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
File "XXXX", line 8
    if(elemento%2==0:
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:40:37) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
	v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:41:51) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
	v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
1.292
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1811/2562/main.py", line 14, in <module>
    v=array(eval(input()))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:42:02) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
File "XXXX", line 14
    v=array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:02) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
0.556564
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 14
    v=array(eval(input()))
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:42:03) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
File "XXXX", line 14
    v=array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:08) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
2.46273
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 14
    v=array(eval(input("digite o proximo vetor:")))
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:09) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
3.73363
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1811/2562/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:10) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
3.5773
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1811/2562/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:10) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
3.43017
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 14
    v=array(eval(input("digite o proximo vetor:")))
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:11) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
			v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
1.82521
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1811/2562/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:21) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
		v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
0.715109
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 14
    v=array(eval(input()))
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:42:23) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
		v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
File "XXXX", line 14
    v=array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:42:24) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
		v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
0.593619
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 14
    v=array(eval(input()))
    ^
IndentationError: unexpected indent

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:51:59) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>0):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
		v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
File "XXXX", line 14
    v=array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:52:13) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>0):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:52:15) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>0):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
	print(npar)
	print(nimpa)
	print(size(v))
v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
0.913881
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1811/2562/main.py", line 4, in <module>
    v=array(eval(input()))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:57:19) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>0):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
			print(npar)
			print(nimpa)
			print(size(v))
v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:57:23) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>0):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
			print(npar)
			print(nimpa)
			print(size(v))
v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:57:23) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>0):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
			print(npar)
			print(nimpa)
			print(size(v))
v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
1.19688
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1811/2562/main.py", line 4, in <module>
    v=array(eval(input()))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-10 11:58:25) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
			print(npar)
			print(nimpa)
			print(size(v))
v=array(eval(input("digite o proximo vetor:")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-10 11:58:28) 
-- CODE:
from numpy import*
v=array(eval(input("digite o vetor:")))
while(size(v)>1):
	v=array(eval(input("digite o vetor:")))
	npar=0
	nimpa=size(v)
	for elemento in v:
		if(elemento%2==0):
			npar=npar+1
			nimpa=nimpa-npar
			print(npar)
			print(nimpa)
			print(size(v))
v=array(eval(input("digite o proximo vetor:")))
-- EXECUTION TIME:
1.11468
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1811/2562/main.py", line 14, in <module>
    v=array(eval(input("digite o proximo vetor:")))
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
