== TEST (2019-05-15 16:10:33) 
-- CODE:
n = int(input("insira o numb: "))

while (cont < n):
	div = n % cont
	cont = cont+1
	if (n%cont == 0):
		print(n)
print(cont,"divisores")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    while (cont < n):
NameError: name 'cont' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 16:10:53) 
-- CODE:
n = int(input("insira o numb: "))
cont = 0

while (cont < n):
	div = n % cont
	cont = cont+1
	if (n%cont == 0):
		print(n)
print(cont,"divisores")
		
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    div = n % cont
ZeroDivisionError: integer division or modulo by zero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-15 16:11:15) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	div = n % cont
	cont = cont+1
	if (n%cont == 0):
		print(n)
print(cont,"divisores")
		
-- OUTPUT:
12
12
12
12
12
12 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:25:57) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	div = n % cont
	if (div == 0):
	print(cont)
	cont += 1
print(cont,"divisores")
		
-- ERROR:
File "XXXX", line 8
    print(cont)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:26:17) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	div = n % cont
	if (div == 0):
	cont += 1
	print(cont)
print(cont,"divisores")
		
-- ERROR:
File "XXXX", line 8
    cont += 1
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:26:25) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	div = n % cont
	if (div == 0):
		cont += 1
		print(cont)
print(cont,"divisores")
		
-- ERROR:
File "XXXX", line 8
    cont += 1
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:27:45) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	div = n % cont
	if (div == 0):
		cont += 1
		print(cont,"divisores")
-- ERROR:
File "XXXX", line 8
    cont += 1
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:29:17) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	Div = n%cont
	cont = cont+1
	print(cont)
-- OUTPUT:
2
3
4
5
6
7
8
9
10
11
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:29:32) 
-- CODE:
n = int(input("insira o numb: "))

cont = 0

while (cont < n):
	Div = n%cont
	cont = cont+1
	print(cont)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    Div = n%cont
ZeroDivisionError: integer division or modulo by zero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:29:43) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont <= n):
	Div = n%cont
	cont = cont+1
	print(cont)
-- OUTPUT:
2
3
4
5
6
7
8
9
10
11
12
13
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:30:56) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	Div = n%cont
	if (Div = n%cont == 0)
		cont = cont+1
		print(cont)
-- ERROR:
File "XXXX", line 7
    if (Div = n%cont == 0)
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:31:12) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	Div = n%cont
	if (Div == 0)
		cont = cont+1
		print(cont)
-- ERROR:
File "XXXX", line 7
    if (Div == 0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:31:24) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1

while (cont < n):
	Div = n%cont
	if (Div == 0):
		cont = cont+1
		print(cont)
-- ERROR:
File "XXXX", line 7
    if (Div == 0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:33:21) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1
div = 0

while (cont < n):
	if(n % cont):
		print(cont)
		div = div + 1
	cont = cont + 1
-- OUTPUT:
5
7
8
9
10
11
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:34:05) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1
div = 0

while (cont < n):
	if(n % cont):
		print(cont)
		div = div + 1
	cont = cont + 1
print(div, "divisores")
-- OUTPUT:
5
7
8
9
10
11
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:34:18) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1
div = 0

while (cont < n):
	if(n % cont==0):
		print(cont)
		div = div + 1
	cont = cont + 1
print(div, "divisores")
-- OUTPUT:
1
2
3
4
6
5 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:34:25) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1
div = 0

while (cont < n):
	if(n % cont==0):
		print(cont)
		div = div + 1
	cont = cont + 1
print(div, "divisores")
-- EXECUTION TIME:
0.151752
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
5 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
2 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
7 divisores
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:34:41) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1
div = 0

while (cont <= n):
	if(n % cont==0):
		print(cont)
		div = div + 1
	cont = cont + 1
	
print(div, "divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:34:45) 
-- CODE:
n = int(input("insira o numb: "))

cont = 1
div = 0

while (cont <= n):
	if(n % cont==0):
		print(cont)
		div = div + 1
	cont = cont + 1
	
print(div, "divisores")
-- EXECUTION TIME:
0.163549
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
