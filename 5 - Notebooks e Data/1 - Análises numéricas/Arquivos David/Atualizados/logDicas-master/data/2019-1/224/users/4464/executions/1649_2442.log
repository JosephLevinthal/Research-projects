== TEST (2019-04-09 19:28:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:")

if (num%2==0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num%2==0)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:28:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:")

if (num%2==0) =
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num%2==0) =
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:29:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:")

if num%2 == 0
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if num%2 == 0
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:30:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero:")

if (num%2 == 0)
	mensagem = "Par"
	if (num%2 /=0)
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num%2 == 0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:31:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero inteiro:")

if (num%2 == 0)
	mensagem = "Par"
	if (num%2 /=0)
	mensagem = "Impar"

print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num%2 == 0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:31:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero inteiro:")

if (num%2 == 0)
	mensagem = "Par"


print(mensagem)

-- ERROR:
File "XXXX", line 7
    if (num%2 == 0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:32:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero inteiro:")

if (num%2 == 0)
	mensagem = "Par"


-- ERROR:
File "XXXX", line 7
    if (num%2 == 0)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:34:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = input("Digite um numero inteiro:")

if ((num) %2 == 0)
	mensagem = "Par"


-- ERROR:
File "XXXX", line 7
    if ((num) %2 == 0)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 09:58:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))


-- ERROR:
File "XXXX", line 7
    if ((num) %2 == 0)
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:01:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num/2==0 
	mensagem = "par"
if num/2/=0 
	mensagem = "impar"

-- ERROR:
File "XXXX", line 6
    if num/2==0 
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:01:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num/2==0:
	mensagem = "par"
if num/2/=0:
	mensagem = "impar"

-- ERROR:
File "XXXX", line 8
    if num/2/=0:
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:01:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num/2==0:
	mensagem = "par"
else:
	mensagem = "impar"

-- ERROR:
File "XXXX", line 8
    if num/2/=0:
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:02:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num/2==0:
	mensagem = "par"
else:
	mensagem = "impar"
print (num , mensagem)

-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:02:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num/2==0:
	mensagem = "par"
else:
	mensagem = "impar"
print (num , mensagem)

-- EXECUTION TIME:
0.153493
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 impar
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:02:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num/2==0:
	mensagem = "par"
else:
	mensagem = "impar"
print (num , mensagem)

-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:03:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num/2==0:
	mensagem = "par"
else:
	mensagem = "impar"
print (num , mensagem)

-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:03:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	mensagem = "par"
else:
	mensagem = "impar"
print (num , mensagem)

-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:03:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	mensagem = "par"
else:
	mensagem = "impar"
print (num , mensagem)

-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:03:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	mensagem = "par"
else:
	mensagem = "impar"
print (num , mensagem)

-- EXECUTION TIME:
0.213187
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:04:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	mensagem = "par"


-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:04:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	mensagem = "par"
print (num , mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (num , mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:04:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	mensagem = "par"
print (num , mensagem)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (num , mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:05:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	mensagem = "par"
if num%2/=0
	mensagem = "impar"
print (num , mensagem)

-- ERROR:
File "XXXX", line 8
    if num%2/=0
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:07:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
print (num ,"par")
-- ERROR:
File "XXXX", line 7
    print (num ,"par")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:08:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	print (num ,"par")
-- ERROR:
File "XXXX", line 7
    print (num ,"par")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:09:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	print (num ,"par")
else:
	print (num ,"impar")
-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:09:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite um numero inteiro:"))
if num%2==0:
	print (num ,"par")
else:
	print (num ,"impar")
-- EXECUTION TIME:
0.217351
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:09:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite  numero inteiro:"))
if num%2==0:
	print (num ,"par")
else:
	print (num ,"impar")
-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:09:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int (input ("digite  numero inteiro:"))
if num%2==0:
	print (num ,"par")
else:
	print (num ,"impar")
-- EXECUTION TIME:
0.136326
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:14:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0)
	mensagem = "Par"
else
	mensagem = "Impar"

print(mensagem)
-- ERROR:
File "XXXX", line 7
    if (num % 2 == 0)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:15:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(num , mensagem)
-- OUTPUT:
55 Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:15:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(num , mensagem)
-- EXECUTION TIME:
0.221287
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:17:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num%2==0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(num , mensagem)
-- OUTPUT:
55 Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:17:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num%2==0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(num , mensagem)
-- EXECUTION TIME:
0.160372
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:17:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num%2==0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(num,mensagem)
-- OUTPUT:
55 Impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:17:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num%2==0):
	mensagem = "Par"
else:
	mensagem = "Impar"

print(num,mensagem)
-- EXECUTION TIME:
0.180665
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 Impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 Par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:18:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(num , mensagem)
-- OUTPUT:
55 impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:18:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(num , mensagem)
-- EXECUTION TIME:
0.226136
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
55 impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
842 par
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:19:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)
-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:19:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	mensagem = "par"
else:
	mensagem = "impar"

print(mensagem)
-- EXECUTION TIME:
0.15815
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:20:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	kakaroto = "par"
else:
	kakaroto = "impar"

print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    print(mensagem)
NameError: name 'mensagem' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:20:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	kakaroto = "par"
else:
	kakaroto = "impar"

print(kakaroto)
-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 10:21:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	kakaroto = "par"
else:
	kakaroto = "impar"

print(kakaroto)
-- OUTPUT:
impar
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:21:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	kakaroto = "par"
else:
	kakaroto = "impar"

print(kakaroto)
-- EXECUTION TIME:
0.123394
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 10:21:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

num = int(input("Digite um numero:"))

if (num % 2 == 0):
	kakaroto = "par"
else:
	kakaroto = "impar"

print(kakaroto)
-- EXECUTION TIME:
0.179868
-- TEST CASE 1:
---- input:
55
---- correct output:
impar
---- user output:
impar
-- TEST CASE 3:
---- input:
842
---- correct output:
par
---- user output:
par
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
