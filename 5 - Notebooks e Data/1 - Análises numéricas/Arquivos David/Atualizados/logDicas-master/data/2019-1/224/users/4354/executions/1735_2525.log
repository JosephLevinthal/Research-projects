== TEST (2019-05-14 18:17:44) 
-- CODE:
n = int(input("digite o numero: "))
if(n = 1):
	print("1 divisor")
else:
	i = 1
	while(i<=n):
		if(n % i == 0):
			print(n)
		i = i + 1
		n = n + 1 
		
-- ERROR:
File "XXXX", line 2
    if(n = 1):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:22:06) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 1
	b = 0
	while(i<=n):
		if(n % i == 0):
			print(n)
			b = b + 1
		i = i + 1
		n = n + 1 
		print(b)
-- OUTPUT:
12
1
1
1
1
1
1
1
1
1
1
22
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:25:20) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 0
	while(i<n):
		if(n % i == 0):
			print(n)
			b = b + 1
		i = i + 1 
		print(b)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    if(n % i == 0):
ZeroDivisionError: integer division or modulo by zero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:25:32) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 1
	b = 0
	while(i<=n):
		if(n % i == 0):
			print(n)
			b = b + 1
		i = i + 1 
		print(b)
-- OUTPUT:
12
1
12
2
12
3
12
4
4
12
5
5
5
5
5
5
12
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:27:04) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 1
	b = 0
	while(i<=n):
		if(n % i == 0):
			print(i)
			b = b + 1
		i = i + 1 
		print(b)
-- OUTPUT:
1
1
2
2
3
3
4
4
4
6
5
5
5
5
5
5
12
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:30:24) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	while(i<n):
		if(n % b == 0):
			print(b)
		else:
	b = b + 1
	i = i + 1
-- ERROR:
File "XXXX", line 11
    b = b + 1
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:30:38) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	while(i<n):
		if(n % b == 0):
			print(b)
		else:
	b = b + 1
	i = i + 1
-- ERROR:
File "XXXX", line 11
    b = b + 1
    ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:30:55) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	while(i<n):
		if(n % b == 0):
			print(b)
	b = b + 1
	i = i + 1
-- OUTPUT:
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:33:17) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	while(i<n):
		b = b + 1
		i = i + 1
		if(n % b == 0):
			print(b)
-- OUTPUT:
2
3
4
6
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:33:23) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	while(i<n):
		b = b + 1
		i = i + 1
		if(n % b == 0):
			print(b)
-- OUTPUT:
2
3
4
6
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:33:42) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	while(i<n):
		if(n % b == 0):
			print(b)
		b = b + 1
		i = i + 1
-- OUTPUT:
1
2
3
4
6
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:33:46) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	while(i<n):
		if(n % b == 0):
			print(b)
		b = b + 1
		i = i + 1
-- OUTPUT:
1
2
3
4
6
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:34:31) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			print(b)
			e = e + 1
		b = b + 1
		i = i + 1
	print(e)
-- OUTPUT:
1
2
3
4
6
12
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:34:47) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			print(b)
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:35:03) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			print(b)
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:35:06) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			print(b)
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:35:15) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			print(b)
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 18:35:21) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			print(b)
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-14 18:35:30) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			print(b)
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
-- EXECUTION TIME:
0.191035
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:17:29) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			s = 0
			print(b)
			s = s + b
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:17:42) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			s = 0
			print(b)
			s = s + b
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
	print(b)
-- OUTPUT:
1
2
3
4
6
12
6 divisores
13
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:17:58) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			s = 0
			print(b)
			s = s + b
			e = e + 1
		b = b + 1
		i = i + 1
	print(e,"divisores")
	print(s)
-- OUTPUT:
1
2
3
4
6
12
6 divisores
12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:18:40) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	while(i<n):
		if(n % b == 0):
			s = 0
			print(b)
			
			e = e + 1
		b = b + 1
		i = i + 1
		s = s + b
	print(e,"divisores")
	print(s)
-- OUTPUT:
1
2
3
4
6
12
6 divisores
13
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:19:13) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	s = 0
	while(i<n):
		if(n % b == 0):
			
			print(b)
			
			e = e + 1
		b = b + 1
		i = i + 1
		s = s + b
	print(e,"divisores")
	print(s)
-- OUTPUT:
1
2
3
4
6
12
6 divisores
90
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-14 19:19:39) 
-- CODE:
n = int(input("digite o numero: "))
if(n == 1):
	print("1 divisor")
else:
	i = 0
	b = 1
	e = 0
	s = 0
	while(i<n):
		if(n % b == 0):
			s = s + b
			print(b)
			
			e = e + 1
		b = b + 1
		i = i + 1
		
	print(e,"divisores")
	print(s)
-- OUTPUT:
1
2
3
4
6
12
6 divisores
28
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
