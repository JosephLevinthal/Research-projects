== TEST (2019-04-25 18:19:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
		else:
			print("invalido")
		

-- ERROR:
File "XXXX", line 14
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:19:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
		

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:19:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
		

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:20:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
		

-- EXECUTION TIME:
0.17741
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:20:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
		

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:20:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
		

-- EXECUTION TIME:
0.207341
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:21:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
		

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:21:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("invalido")
		

-- EXECUTION TIME:
0.142976
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:24:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			if((a=b) or (b=c):
				print("equilatero")
else:
	print("invalido")
		

-- ERROR:
File "XXXX", line 13
    if((a=b) or (b=c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:25:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			if((a=b) or (b=c):
				print("equilatero")
else:
	print("invalido")
		

-- ERROR:
File "XXXX", line 13
    if((a=b) or (b=c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:26:16) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			if((a==b) or (b==c)):
				print("equilatero")
else:
	print("invalido")
		

-- OUTPUT:
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:26:25) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
	if((a!=b) and (b!=c) and (c!=b)):
		print("escaleno")
	else:
		if((a!=b) or (b!=c)):
			print("isosceles")
		else:
			if((a==b) or (b==c)):
				print("equilatero")
else:
	print("invalido")
		

-- EXECUTION TIME:
0.138877
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:31:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
elif((a!=b) and (b!=c) and (c!=b)):
	print("escaleno")
elif ((a!=b) or (b!=c)):
	print("isosceles")
elif((a==b) or (b==c)):
	print("equilatero")
else:
	print("invalido")
		

-- ERROR:
File "XXXX", line 7
    elif((a!=b) and (b!=c) and (c!=b)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:31:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
elif((a!=b) and (b!=c)):
	print("escaleno")
elif ((a!=b) or (b!=c)):
	print("isosceles")
elif((a==b) or (b==c)):
	print("equilatero")
else:
	print("invalido")
		

-- ERROR:
File "XXXX", line 7
    elif((a!=b) and (b!=c)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:32:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
elif((a<0) or (b<0) or (c<0)):
	print("escaleno")
elif ((a!=b) or (b!=c)):
	print("isosceles")
elif((a==b) or (b==c)):
	print("equilatero")
else:
	print("invalido")
		

-- ERROR:
File "XXXX", line 7
    elif((a<0) or (b<0) or (c<0)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:32:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
if ((a<b+c) and (b<a+c) and (c<a+b)):
elif((a<0) or (b<0)):
	print("escaleno")
elif ((a!=b) or (b!=c)):
	print("isosceles")
elif((a==b) or (b==c)):
	print("equilatero")
else:
	print("invalido")
		

-- ERROR:
File "XXXX", line 7
    elif((a<0) or (b<0)):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:42:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a!=b and b!=c):
	print (!"Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- ERROR:
File "XXXX", line 12
    print (!"Tipo de triangulo:escaleno")
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:42:52) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a!=b and b!=c):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:43:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a!=b or b!=c):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:escaleno
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:44:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:44:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- EXECUTION TIME:
0.201622
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:44:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- EXECUTION TIME:
0.161109
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:44:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- EXECUTION TIME:
0.209027
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:44:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo:invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:44:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.127788
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.137444
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.134906
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.169107
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.193305
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.374739
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1692/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.641595
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.641902
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:45:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:45:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo:equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo:escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.262363
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:45:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:05) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.192348
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.255715
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.135405
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.392588
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.32951
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.352
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.568191
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.530719
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:46:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.501061
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.14461
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:47:29) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:36) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.19099
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:39) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.179803
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:40) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.246641
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:40) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.159439
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:40) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.417779
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:41) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.426383
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:41) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.410979
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:41) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.382198
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:41) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.399913
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:41) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.370514
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:47:41) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b and b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b and b==c and a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 and b<0 and c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.325213
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1692/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:48:10) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:48:18) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.198242
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:56:02) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("tipo de triangulo: escaleno")
else:
	print("tipo de triangulo: invalido")
		

-- OUTPUT:
entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:56:11) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("tipo de triangulo: escaleno")
else:
	print("tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.140198
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:56:17) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("tipo de triangulo: escaleno")
else:
	print("tipo de triangulo: invalido")
		

-- OUTPUT:
entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:02:01) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c or a==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<b or b<c or a<c):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:02:15) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<b or b<c or a<c):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:02:30) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<b or b<c):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:03:04) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:03:12) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.181037
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:11:57) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:" a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 4
    print("Entradas:" a, ",", b, ",", c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:12:00) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:" a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 4
    print("Entradas:" a, ",", b, ",", c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:12:07) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:12:14) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a==b or b==c):
	print("Tipo de triangulo: equilatero")
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.260103
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:15:55) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c and c<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo de triangulo: escaleno")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 7
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:16:30) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
   if a==b and b==c and c==0 :
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo de triangulo: escaleno")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 7
    print("Tipo de triangulo: equilatero")
                                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:03:16) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
   if a==b and b==c and c== :
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo de triangulo: escaleno")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 6
    if a==b and b==c and c== :
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:04:25) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
   if a==b and b==c:
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo de triangulo: escaleno")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 7
    print("Tipo de triangulo: equilatero")
                                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:05:19) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
   if a==b and b==c:
	print("Tipo de triangulo:equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo:isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo de triangulo:escaleno")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo:invalido")
		

-- ERROR:
File "XXXX", line 7
    print("Tipo de triangulo:equilatero")
                                        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:06:18) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
   if a==b and b==c:
	print("Tipo_de_triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo_de_triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo_de_triangulo: escaleno")
elif(a<0 or b<0 or c<0):
	print("Tipo_de_triangulo: invalido")
		

-- ERROR:
File "XXXX", line 7
    print("Tipo_de_triangulo: equilatero")
                                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:06:42) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c:
		print("Tipo_de_triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo_de_triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo_de_triangulo: escaleno")
elif(a<0 or b<0 or c<0):
	print("Tipo_de_triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:07:50) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c:
		print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print ("Tipo de triangulo: escaleno")
elif(a<0 and b<0 and c<0):
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:10:15) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c:
		print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a==b or a!=c or c==b:
	print ("Tipo de triangulo: escaleno")
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:11:08) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a==b or a!=c or c==b:
	print ("Tipo de triangulo: escaleno")
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:11:35) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a==b or a==c or c==b:
	print ("Tipo de triangulo: escaleno")
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:11:46) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a==b or a==c or c==b:
	print ("Tipo de triangulo: escaleno")
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.195427
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:11:54) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a==b or a==c or c==b:
	print ("Tipo de triangulo: escaleno")
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:12:07) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	print("Tipo de triangulo: equilatero")
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
elif a==b or a==c or c==b:
	print ("Tipo de triangulo: escaleno")
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.15732
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: equilatero
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: equilatero
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:12:44) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	print("Tipo de triangulo: equilatero")
print("Entradas:", a, ",", b, ",", c)
elif a==b or b==c or a==c:
	print ("Tipo de triangulo: isosceles")
print("Entradas:", a, ",", b, ",", c)
elif a==b or a==c or c==b:
	print ("Tipo de triangulo: escaleno")
print("Entradas:", a, ",", b, ",", c)
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 8
    elif a==b or b==c or a==c:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:13:12) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	print("Tipo de triangulo: equilatero")
print("Entradas:", a, ",", b, ",", c)
elif(a==b or b==c or a==c):
	print ("Tipo de triangulo: isosceles")
print("Entradas:", a, ",", b, ",", c)
elif(a==b or a==c or c==b):
	print ("Tipo de triangulo: escaleno")
print("Entradas:", a, ",", b, ",", c)
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- ERROR:
File "XXXX", line 8
    elif(a==b or b==c or a==c):
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:34:08) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c and a<=0:
		print("Tipo de triangulo: equilatero")
	elif(a==b or b==c or a==c):
		print ("Tipo de triangulo: isosceles")
	elif(a==b or a==c or c==b):
		print ("Tipo de triangulo: escaleno")
elif(a!=b or b!=c or a!=c):
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.18452
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:34:59) 
-- CODE:
a=float(input("digite o lado a:"))
b=float(input("digite o lado b:"))
c=float(input("digite o lado c:"))
print("Entradas:", a, ",", b, ",", c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c and a<=0:
		print("Tipo de triangulo: equilatero")
	elif(a==b or b==c or a==c):
		print ("Tipo de triangulo: isosceles")
	elif(a!=b or a!=c or c!=b):
		print ("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
		

-- EXECUTION TIME:
0.151757
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
