== TEST (2019-04-02 12:06:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input())
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
2.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 12:06:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input())
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- EXECUTION TIME:
0.144172
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
2.667
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
4.667
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
115.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:06:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input())
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
2.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:07:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input())
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
2.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:07:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input())
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
2.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:07:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input())
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
2.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:08:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input())
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
2.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:08:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input(9%4))
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
12.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:08:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input(9%4))
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
12.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 12:08:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input(9%4))
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- EXECUTION TIME:
0.156993
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
12.667
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.667
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
1115.667
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:08:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros = float(input(9%4))
qtd_de_michel = 1/3 * qtd_litros 
a = round(qtd_de_michel,  3)
print(a)
-- OUTPUT:
12.667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:22:55) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig= entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegaquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig+seg_dig+ter_dig+quar_dig
print(soma_dos_digitos)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 12:23:33) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig= entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegaquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig+seg_dig+ter_dig+quar_dig
print(soma_dos_digitos)
-- EXECUTION TIME:
0.1356
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
5
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
14
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 17:41:46) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig= entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegaquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig+seg_dig+ter_dig+quar_dig
print(soma_dos_digitos)
-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 17:45:05) 
-- CODE:
x=int(input("digite o valor"))
y=int(input("digite o outro valor"))

print(x)
print(y)
print(x//y)
print(x%y)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 17:45:17) 
-- CODE:
x=int(input("digite o valor"))
y=int(input("digite o outro valor"))

print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.168487
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
