== TEST (2019-03-21 19:23:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input(primeiro numero)
-- ERROR:
File "XXXX", line 4
    a = int(input(primeiro numero)
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:23:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("primeiro numero")
-- ERROR:
File "XXXX", line 5
    
                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:23:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" )
-- ERROR:
File "XXXX", line 5
    
                   ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:23:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
		  var = float(input("Qual o valor unitario do jogo? "))
-- ERROR:
File "XXXX", line 5
    var = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:24:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))

-- ERROR:
File "XXXX", line 5
    var = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:25:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
min(a,b,c)
max(a,b,c)
-- ERROR:
File "XXXX", line 5
    var = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:25:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
min(a,b,c)
max(a,b,c)
-- ERROR:
File "XXXX", line 5
    var = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:26:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
print(max(a,b,c))
-- OUTPUT:
-2
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:27:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
print(a+b+c,d-e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print(a+b+c,d-e)
TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:27:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
print(a+b+c)d-e))
-- ERROR:
File "XXXX", line 9
    print(a+b+c)d-e))
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:27:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
print(a+b+c)d-e)
-- ERROR:
File "XXXX", line 9
    print(a+b+c)d-e)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:28:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)
int(print(f*d-e))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    int(print(f*d-e))
TypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:29:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)
g = print(d-e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    g = print(d-e)
TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:29:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)
g = int(print(d-e))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    g = int(print(d-e))
TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:31:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)
-- OUTPUT:
-2
10
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:31:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)+(d-f)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(a+b+c)+(d-f)
NameError: name 'f' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:32:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)+(d-e)
-- EXECUTION TIME:
0.190268
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1015/main.py", line 9, in <module>
    f = print(a+b+c)+(d-e)
TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:32:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)+(d-e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(a+b+c)+(d-e)
TypeError: unsupported operand type(s) for -: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:32:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c,+d-e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(a+b+c,+d-e)
TypeError: bad operand type for unary +: 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:32:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c,+ d-e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(a+b+c,+ d-e)
TypeError: bad operand type for unary +: 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:33:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(d+e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(d+e)
TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:33:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(d+e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(d+e)
TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:34:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(d + e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(d + e)
TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:35:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)
-- EXECUTION TIME:
0.139376
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
10
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:35:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)
-- OUTPUT:
-2
10
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:35:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(d+e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(d+e)
TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:36:12) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = int(print(min(a,b,c)))
e = int(print(max(a,b,c)))
f = print(d+e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    d = int(print(min(a,b,c)))
TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:38:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(d+e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(d+e)
TypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:41:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = print(min(a,b,c))
e = print(max(a,b,c))
f = print(a+b+c)+(min(a,b,c))+(max(a,b,c))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(a+b+c)+(min(a,b,c))+(max(a,b,c))
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:20:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c)+(d-e)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = print(a+b+c)+(d-e)
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:21:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
d = min(a,b,c)
e = max(a,b,c)
f = int(print(a+b+c)+(d-e))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    f = int(print(a+b+c)+(d-e))
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:22:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = (print(a+b+c,d-e)
-- ERROR:
File "XXXX", line 12
    
                         ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:22:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = (print(a+b+c),d-e)
	  
	  
-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:23:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = (print(a+b+c),d-e)
	  
	  
-- EXECUTION TIME:
0.168125
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
10
-2
8
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:23:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = (print(a+b+c),d-e)
	  
	  
-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:24:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = (print(a+b+c)+d-e)
	  
	  
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    f = (print(a+b+c)+d-e)
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:25:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = (print(a+b+c),d-e)
	  
	  
-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:25:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
int(print(a+b+c),d-e

	  
	  
-- ERROR:
File "XXXX", line 15
    
       ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:26:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
int(print(a+b+c),d-e
-- ERROR:
File "XXXX", line 12
    
                        ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:26:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = int(print(a+b+c),d-e
-- ERROR:
File "XXXX", line 12
    
                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:26:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c),d-e
-- OUTPUT:
10
-2
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:26:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c,d-e)
-- OUTPUT:
10
-2
8 -12
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:27:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(max(a,b,c))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c+d-e)
-- OUTPUT:
10
-2
-4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:29:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
print(max(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c+d-e)
-- OUTPUT:
-2
10
-4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:30:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c+d-e)
print(max(a,b,c))
-- OUTPUT:
-2
-4
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:32:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(e-d)
print(max(a,b,c))
-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:32:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(e-d)
print(max(a,b,c))
-- EXECUTION TIME:
0.156986
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:32:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(e-d)
print(max(a,b,c))
-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:32:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(e-d)
print(max(a,b,c))
-- OUTPUT:
-2
12
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:32:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(e-d)
print(max(a,b,c))
-- EXECUTION TIME:
0.193342
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
12
10
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:33:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c-d-e)
print(max(a,b,c))

1
1+2+3-1-3
-- OUTPUT:
-2
0
10
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:34:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input( "primeiro numero" ))
b = int(input( "segundo numero" ))
c = int(input( "terceiro numero" ))
print(min(a,b,c))
d = min(a,b,c)
e = max(a,b,c)
f = print(a+b+c-d-e)
print(max(a,b,c))

1
1+2+3-1-3
-- EXECUTION TIME:
0.189093
-- TEST CASE 1:
---- input:
10 -2 0
---- correct output:
-2 0 10
---- user output:
-2
0
10
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
