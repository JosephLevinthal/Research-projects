== TEST (2019-03-26 19:17:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(input("digite o valor do raio")
-- ERROR:
File "XXXX", line 5
    
               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:18:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(input("digite o valor do raio"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:21:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = int(input("digite o valor do raio"))
import math
a = print(pi * raio**2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:21:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = int(input("digite o valor do raio"))
import math
a = print(pi * (raio)**2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:22:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = int(input("digite o valor do raio"))
import math
a = print(pi*raio**2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:25:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
raio = int(input("digite o valor do raio"))
import math
a = print((pi)*raio**2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:31:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(raio**2 * pi)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:32:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(raio**2 * pi)
v = print(4/3 * pi * raio**3) 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:33:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(raio**2 * pi)
v = print(4/3 * pi * raio**3) 
-- EXECUTION TIME:
0.169578
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/825/main.py", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:33:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(raio**2 * pi)
v = print((4/3)* pi * raio**3) 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:33:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(raio**2 * pi)
v = print((4/3)* pi * raio**3) 
-- EXECUTION TIME:
0.200536
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/825/main.py", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:34:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(round(raio**2 * pi,3))
v = print(round((4/3)* pi * raio**3,3)) 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:34:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(round(raio**2 * pi,3))
v = print(round((4/3)* pi * raio**3,3)) 
-- EXECUTION TIME:
0.153599
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/825/main.py", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:34:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = int(input("digite o valor do raio"))

a = print(round(raio**2 * pi,3))
v = print(round((4/3)* pi * raio**3,3)) 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    raio = int(input())
ValueError: invalid literal for int() with base 10: '4.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:35:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = float(input("digite o valor do raio"))

a = print(round(raio**2 * pi,3))
v = print(round((4/3)* pi * raio**3,3)) 
-- OUTPUT:
63.617
381.704
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:35:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
raio = float(input("digite o valor do raio"))

a = print(round(raio**2 * pi,3))
v = print(round((4/3)* pi * raio**3,3)) 
-- EXECUTION TIME:
0.103237
-- TEST CASE 1:
---- input:
4.5

---- correct output:
63.617
381.704
---- user output:
63.617
381.704
-- TEST CASE 2:
---- input:
12.34
---- correct output:
478.388
7871.076
---- user output:
478.388
7871.076
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
