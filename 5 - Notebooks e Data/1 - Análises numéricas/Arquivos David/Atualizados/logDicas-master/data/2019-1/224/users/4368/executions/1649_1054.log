== TEST (2019-04-11 18:27:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())
reta=(2x + y = 3)
if("x==y"):
mensagem="ponto pertence a reta"
else:
mensagem="ponto nao pertence a reta"
print(mensagem.lower())
-- ERROR:
File "XXXX", line 6
    reta=(2x + y = 3)
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:27:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())
reta=(2*x+y=3)
if("x==y"):
mensagem="ponto pertence a reta"
else:
mensagem="ponto nao pertence a reta"
print(mensagem.lower())
-- ERROR:
File "XXXX", line 6
    reta=(2*x+y=3)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:29:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())
reta=(2*x+y=3)
if("x==y"):
mensagem="ponto pertence a reta"
else:
mensagem="ponto nao pertence a reta"
print(mensagem.lower())
-- ERROR:
File "XXXX", line 6
    reta=(2*x+y=3)
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:29:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())
reta=(2*x+y==3)
if("x==y"):
mensagem="ponto pertence a reta"
else:
mensagem="ponto nao pertence a reta"
print(mensagem.lower())
-- ERROR:
File "XXXX", line 8
    mensagem="ponto pertence a reta"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:29:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())
reta=(2*x+y==3)
if("x==y"):
mensagem= "ponto pertence a reta"
else:
mensagem="ponto nao pertence a reta"
print(mensagem.lower())
-- ERROR:
File "XXXX", line 8
    mensagem= "ponto pertence a reta"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:31:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())

if("2*x+y==3"):
mensagem= "ponto pertence a reta"
print(mensagem)
else:
mensagem="ponto nao pertence a reta"
print(mensagem)
-- ERROR:
File "XXXX", line 8
    mensagem= "ponto pertence a reta"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:32:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())

if(2*x+y==3):
mensagem= "ponto pertence a reta"
print(mensagem)
else:
mensagem="ponto nao pertence a reta"
print(mensagem)
-- ERROR:
File "XXXX", line 8
    mensagem= "ponto pertence a reta"
           ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:32:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x=float(input())
y=float(input())

if(2*x+y==3):
	mensagem= "ponto pertence a reta"
	print(mensagem)
else:
	mensagem= "ponto nao pertence a reta"
	print(mensagem)
-- EXECUTION TIME:
0.295666
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
