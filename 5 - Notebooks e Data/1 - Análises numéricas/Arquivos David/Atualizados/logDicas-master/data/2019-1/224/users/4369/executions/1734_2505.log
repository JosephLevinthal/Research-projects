== TEST (2019-05-16 15:16:38) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=x
soma=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	soma= soma+ sinal*((x**i))/factotial(i)
	c= c+1
	i= i+2
	md= md+1
senx= senx+soma
print(round(senx, 10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    soma= soma+ sinal*((x**i))/factotial(i)
NameError: name 'factotial' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:16:48) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=x
soma=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	soma= soma+ sinal*((x**i))/factotial(i)
	c= c+1
	i= i+2
	md= md+1
senx= senx+soma
print(round(senx, 10))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    soma= soma+ sinal*((x**i))/factotial(i)
NameError: name 'factotial' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:17:04) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=x
soma=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	soma= soma+ sinal*((x**i))/factorial(i)
	c= c+1
	i= i+2
	md= md+1
senx= senx+soma
print(round(senx, 10))

-- OUTPUT:
0.9999999437
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:17:40) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=x
soma=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	soma= soma+ sinal*((x**i))/factorial(i)
	c= c+1
	i= i+2
	md= md+1
senx= senx-soma
print(round(senx, 10))

-- OUTPUT:
2.1415927098
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:17:45) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=x
soma=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	soma= soma+ sinal*((x**i))/factorial(i)
	c= c+1
	i= i+2
	md= md+1
senx= senx-soma
print(round(senx, 10))

-- OUTPUT:
2.1415927098
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:18:34) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	senx= senx+ sinal*((x**i))/factorial(i)
	c= c+1
	i= i+2
	md= md+1
print(round(senx, 10))

-- OUTPUT:
-0.5707963831
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:18:56) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	senx= senx+ sinal*((x**i))/factorial(i)
	c= c+1
	i= i+2
	md= md+1
print(round(senx, 10))

-- OUTPUT:
-0.5707963831
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:20:44) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=0
c=0
i= 3
md=1
while c<k:
	sinal= (-1)**md
	senx= senx+ sinal*(((x**i))/factorial(i))
	c= c+1
	i= i+2
	md= md+1
print(round(senx, 10))

-- OUTPUT:
-0.5707963831
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:28:39) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=0
c=0
i= 1
while c<k:
	sinal= (-1)**c
	senx= senx+ sinal*(((x**i))/factorial(i))
	c= c+1
	i= i+2
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-16 15:28:55) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=0
c=0
i= 1
while c<k:
	sinal= (-1)**c
	senx= senx+ sinal*(((x**i))/factorial(i))
	c= c+1
	i= i+2
print(round(senx, 10))

-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-16 15:30:54) 
-- CODE:
from math import*
x=eval(input("angulo x: "))
k=float(input("numero k de termos de serie: "))
senx=0
c=0
i= 1
while c<k:
	sinal= (-1)**c
	senx= senx+ sinal*(((x**i))/factorial(i))
	c= c+1
	i= i+2
print(round(senx, 10))

-- EXECUTION TIME:
0.155448
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
