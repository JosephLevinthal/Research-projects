== TEST (2019-04-05 20:52:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v_inicial = float(input("velocidade inicial: "),"m/s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v_inicial = float(input(),"m/s")
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:52:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v_inicial = float(input("velocidade inicial: "),"m/s")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    v_inicial = float(input(),"m/s")
TypeError: float() takes at most 1 argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:05:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from  math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = radians((float(input("angulo de lançamento")))
distancia_porco = float(input("distancia entre o passaro e o porco"))
gravidade = 9.8
distancia = abs(((v_inicial ** 2) * sin(2 * angulo_vetorial)) / gravidade)
if(distancia_porco == distancia) : 
	print("sim")
if(distancia_porco == distancia + 0.1) :
	print("sim")
if(distancia_porco == distancia - 0.1) :
	print("sim")
else :
	print("nao")

-- ERROR:
File "XXXX", line 7
    distancia_porco = float(input())
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:07:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from  math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = radians((float(input("angulo de lancamento: ")))
distancia_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = abs(((v_inicial ** 2) * sin(2 * angulo_vetorial)) / gravidade)
if(distancia_porco == distancia) : 
	print("sim")
if(distancia_porco == distancia + 0.1) :
	print("sim")
if(distancia_porco == distancia - 0.1) :
	print("sim")
else :
	print("nao")

-- ERROR:
File "XXXX", line 7
    distancia_porco = float(input())
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:07:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from  math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = radians((float(input("angulo de lancamento: ")))
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = abs(((v_inicial ** 2) * sin(2 * angulo_vetorial)) / gravidade)
if(distancia_porco == distancia) : 
	print("sim")
if(distancia_porco == distancia + 0.1) :
	print("sim")
if(distancia_porco == distancia - 0.1) :
	print("sim")
else :
	print("nao")

-- ERROR:
File "XXXX", line 7
    dist_porco = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:08:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from  math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = radians((float(input("angulo de lancamento: ")))
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8


-- ERROR:
File "XXXX", line 7
    dist_porco = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:08:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from  math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = (float(input("angulo de lancamento: ")))
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8


-- ERROR:
File "XXXX", line 7
    dist_porco = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:09:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from  math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = radians((input("angulo de lancamento: "))
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8


-- ERROR:
File "XXXX", line 7
    dist_porco = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:10:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from  math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = (input(radians("angulo de lancamento: "))
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8


-- ERROR:
File "XXXX", line 7
    dist_porco = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:12:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = (input("angulo de lancamento: ")
from  math import *
angulo_vetotial = radians(angulo_vetorial)						 
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8


-- ERROR:
File "XXXX", line 7
    from  math import *
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:12:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.

v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = (input("angulo de lancamento: ")
from math import *
angulo_vetotial = radians(angulo_vetorial)						 
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8


-- ERROR:
File "XXXX", line 7
    from math import *
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:14:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = (input("angulo de lancamento: ")
angulo_vetotial = radians(angulo_vetorial)						 
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8


-- ERROR:
File "XXXX", line 7
    angulo_vetotial = radians(angulo_vetorial)						 
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:15:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = (input("angulo de lancamento: ")
dist_porco = float(input("distancia entre o passaro e o porco: "))
gravidade = 9.8
angulo_vetotial = radians(angulo_vetorial)

-- ERROR:
File "XXXX", line 7
    dist_porco = float(input())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:17:11) 
-- CODE:
from math import *
ang = radians(45)
print(tan(ang))
-- OUTPUT:
0.9999999999999999
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:17:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v_inicial = float(input("velocidade inicial: "))
angulo_vetorial = radians((float(input("angulo de lançamento")))
distancia_porco = float(input("distancia entre o passaro e o porco:"))
gravidade = 9.8
distancia = abs(((v_inicial ** 2) * sin(2 * angulo_vetorial)) / gravidade)
if(distancia_porco == distancia) : 
	print("sim")
if(distancia_porco == distancia + 0.1) :
	print("sim")
if(distancia_porco == distancia - 0.1) :
	print("sim")
else :
	print("nao")

-- ERROR:
File "XXXX", line 7
    distancia_porco = float(input())
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:19:02) 
-- CODE:
from math import *
ang = radians(float(input("angulo: "))
print(sen(angulo))
-- ERROR:
File "XXXX", line 3
    print(sen(angulo))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:19:17) 
-- CODE:
from math import *
ang = radians(float(input("angulo: "))
print(sin(angulo))
-- ERROR:
File "XXXX", line 3
    print(sin(angulo))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:19:28) 
-- CODE:
from math import *
ang = radians(float(input("angulo: "))
print(sin(ang))
-- ERROR:
File "XXXX", line 3
    print(sin(ang))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:19:50) 
-- CODE:
from math import *
ang = float(input"angulo: ")
print(sin(ang))
-- ERROR:
File "XXXX", line 2
    ang = float(input"angulo: ")
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:20:10) 
-- CODE:
from math import *
ang = float(input("angulo: "))
print(sin(ang))
-- OUTPUT:
-0.87969575997167
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:20:31) 
-- CODE:
from math import *
ang = radians(float(input("angulo: ")))
print(sin(ang))
-- OUTPUT:
0.18223552549214747
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:21:06) 
-- CODE:
from math import *
ang = radians(float(input("angulo: ")))
print(rount(sin(ang),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    print(rount(sin(ang),2))
NameError: name 'rount' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:21:18) 
-- CODE:
from math import *
ang = radians(float(input("angulo: ")))
print(round(sin(ang),2))
-- OUTPUT:
0.18
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 21:56:41) 
-- CODE:
from math import *
angulo = radians(float(input("digite o angulo de lancamento: ")))
print(sin(angulo))
-- OUTPUT:
0.18223552549214747
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 22:02:39) 
-- CODE:
from math import *
angulo = radians(float(input("angulo de lancamento: ")))
velocidade_inicial = float(input("velocidade inicial: "))
distancia_porco = input("digite a distancia entre o passaro e o porco: ")
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (distancia == distancia_porco + 0.1) : 
	print("sim")
if (distancia == distancia_porco - 0.1) :
	print("sim")
else :
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (distancia == distancia_porco + 0.1) : 
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 22:03:52) 
-- CODE:
from math import *
angulo = radians(float(input("angulo de lancamento: ")))
velocidade_inicial = float(input("velocidade inicial: "))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (distancia == distancia_porco + 0.1) : 
	print("sim")
if (distancia == distancia_porco - 0.1) :
	print("sim")
else :
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 22:04:10) 
-- CODE:
from math import *
angulo = radians(float(input("angulo de lancamento: ")))
velocidade_inicial = float(input("velocidade inicial: "))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (distancia == distancia_porco + 0.1) : 
	print("sim")
if (distancia == distancia_porco - 0.1) :
	print("sim")
else :
	print("nao")
-- EXECUTION TIME:
0.132983
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 22:08:53) 
-- CODE:
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo de lancamento: ")))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (abs(distancia_porco - distancia) == 0.1) : 
	print("sim")
else :
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 22:09:11) 
-- CODE:
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo de lancamento: ")))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (abs(distancia_porco - distancia) == 0.1) : 
	print("sim")
else :
	print("nao")
-- EXECUTION TIME:
0.142337
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 22:10:17) 
-- CODE:
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo de lancamento: ")))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (abs(distancia_porco - distancia == 0.1)) : 
	print("sim")
else :
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 22:12:21) 
-- CODE:
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo de lancamento: ")))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (abs(distancia_porco - distancia) <= 0.1) : 
	print("sim")
else :
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 22:12:24) 
-- CODE:
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo de lancamento: ")))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (abs(distancia_porco - distancia) <= 0.1) : 
	print("sim")
else :
	print("nao")
-- EXECUTION TIME:
0.12498
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-08 01:01:49) 
-- CODE:
from math import *
velocidade_inicial = float(input("velocidade inicial: "))
angulo = radians(float(input("angulo de lancamento: ")))
distancia_porco = float(input("digite a distancia entre o passaro e o porco: "))
gravidade = 9.8
distancia = ((velocidade_inicial ** 2) * sin(2 * angulo)) / gravidade

if (distancia == distancia_porco) :
	print("sim")
if (abs(distancia_porco - distancia) <= 0.1) : 
	print("sim")
else :
	print("nao")
-- EXECUTION TIME:
0.139133
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
