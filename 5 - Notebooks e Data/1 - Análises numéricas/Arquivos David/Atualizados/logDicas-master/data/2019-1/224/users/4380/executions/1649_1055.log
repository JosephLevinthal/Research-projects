== TEST (2019-04-14 20:17:21) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
radians(ang)
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*ang))/g
if (D*0.9<=R<=D*1.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:17:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
radians(ang)
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*ang))/g
if (D*0.9<=R<=D*1.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.148817
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 20:28:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
radians(ang)
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*ang))/g
if (abs(D-R)<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.205546
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:28:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
radians(ang)
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*ang))/g
if (abs(D-R)<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 20:33:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
radians(ang)
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*ang))/g
if (abs(D-R)<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:38:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
radians(ang)
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*ang))/g
if (abs(D-R)<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:38:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
radians(ang)
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*ang))/g
if (abs(D-R)<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.192361
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:53:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*radians(ang)))/g
if (abs(D-R)<0.1):
	print("sim")
else:
	print("nao")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:54:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import *
v0=float(input("vel inicial: "))
ang=float(input("angulo alfa: "))
D=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*radians(ang)))/g
if (abs(D-R)<0.1):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.183822
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
