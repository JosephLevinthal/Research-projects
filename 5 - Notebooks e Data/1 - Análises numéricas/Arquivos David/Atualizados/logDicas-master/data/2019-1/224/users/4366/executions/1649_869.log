== TEST (2019-04-09 19:22:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preço sem desconto"
	print(mensagem)
else:
	mensagem="preço com desconto"
	print(mensagem)

-- OUTPUT:
preço sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:22:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preço sem desconto"
	print(mensagem)
else:
	mensagem="preço com desconto"
	print(mensagem)

-- OUTPUT:
preço sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:22:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preço sem desconto"
	print(mensagem)
else:
	mensagem="preço com desconto"
	print(mensagem)

-- OUTPUT:
preço sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:22:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preco sem desconto"
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(mensagem)

-- OUTPUT:
preco sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:23:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preco sem desconto"
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(mensagem)

-- EXECUTION TIME:
0.180065
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
preco sem desconto
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
preco sem desconto
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:24:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preco sem desconto"
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
preco sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:24:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preco sem desconto"
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- EXECUTION TIME:
0.215546
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
preco sem desconto
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
preco sem desconto
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:24:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200%5):
	mensagem="preco sem desconto"
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
preco sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:26:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= 5%
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
File "XXXX", line 6
    desconto= 5%
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:26:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra %5
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:27:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+200
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:29:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+200*5
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:30:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+200*5
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:31:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+200*5
	mensagem="preco sem desconto"
	print(round(desconto,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
1200.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:31:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+200*5
	mensagem="preco sem desconto"
	print(round(desconto,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- EXECUTION TIME:
0.136932
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
1200.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
1200.53
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:31:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+200*5
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:21:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor a ser pago:"))
if(compra>=200):
	desconto= compra+(200*5)
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:21:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+(200*5)
	mensagem="preco sem desconto"
	print(round(mensagem,2))
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem,2))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:22:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+(200*5)
	mensagem="preco sem desconto"
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
preco sem desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:22:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+(200*5)
	mensagem="preco com desconto"
	print(mensagem)
else:
	mensagem="preco sem desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
preco com desconto
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:22:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+(200*5)
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco sem desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
1200.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:23:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto= compra+(200/5)
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco sem desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
240.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:23:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=200/5
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco sem desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
40.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:25:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=200*5/100
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco sem desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:26:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=200*5
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco sem desconto"
	print(round(mensagem,2))
	

-- EXECUTION TIME:
0.15955
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
1000
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
1000
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:28:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=5*200/100
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco sem desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:28:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=5*200/100
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:28:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=5*200/100
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:28:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=5*200/100
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- EXECUTION TIME:
0.146272
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
10.0
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
10.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:29:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>200):
	desconto=5*200/100
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
10.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:41:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>200):
	desconto=100*200/5
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- OUTPUT:
4000.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:41:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>200):
	desconto=
	mensagem=desconto
	print(mensagem)
else:
	mensagem="preco com desconto"
	print(round(mensagem,2))
	

-- ERROR:
File "XXXX", line 6
    desconto=
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 22:02:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=(valor-valor*5/100)
   print(round(desconto,2))
else:
	print(round(compra,2))
	

-- ERROR:
File "XXXX", line 7
    print(round(desconto,2))
                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 22:03:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
compra=float(input("digite o valor da compra:"))
if(compra>=200):
	desconto=(compra-compra*5/100)
   print(round(desconto,2))
else:
	print(round(compra,2))
	

-- ERROR:
File "XXXX", line 7
    print(round(desconto,2))
                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 22:05:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
   print(round(desconto,2))
else:
	print(round(compra,2))
	

-- ERROR:
File "XXXX", line 7
    print(round(desconto,2))
                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 22:05:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
   print(round(desconto, 2))
else:
	print(round(compra, 2))
	

-- ERROR:
File "XXXX", line 7
    print(round(desconto, 2))
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 22:05:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
   print (round (desconto, 2))
else:
	print(round(compra, 2))
	

-- ERROR:
File "XXXX", line 7
    print (round (desconto, 2))
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 22:06:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
   print (round (desconto, 2))
else:
	print(round(compra, 2))
	

-- EXECUTION TIME:
0.208223
-- ERROR:
  File "/home/codebench/codes/1649/869/main.py", line 7
    print (round (desconto, 2))
                              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 22:06:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
   print(round(desconto, 2))
else:
	print(round(compra, 2))
	

-- EXECUTION TIME:
0.268252
-- ERROR:
  File "/home/codebench/codes/1649/869/main.py", line 7
    print(round(desconto, 2))
                            ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 22:06:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
   print(round(desconto, 2))
else:
	print(round(compra, 2))
	

-- ERROR:
File "XXXX", line 7
    print(round(desconto, 2))
                            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 22:06:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
	print(round(desconto, 2))
else:
	print(round(compra, 2))
	

-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 22:07:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
valor=float(input("digite o valor"))
if(valor>=200):
	desconto=(valor-valor*5/100)
	print(round(desconto, 2))
else:
	print(round(compra, 2))
	

-- EXECUTION TIME:
0.172562
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
