== SUBMITION (2019-04-15 20:22:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math impot*
r= (v0 ** 2 * sin * 2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.18597
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 8
    from math impot*
                  ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:22:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math impot*
r= (v0 ** 2 * sin * 2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 8
    from math impot*
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 20:22:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math impot
r= (v0 ** 2 * sin * 2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.132239
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 8
    from math impot
                  ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 20:22:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2 * sin * 2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.217785
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 9, in <module>
    r= (v0 ** 2 * sin * 2 * a)/ g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:22:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2 * sin * 2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r= (v0 ** 2 * sin * 2 * a)/ g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:23:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin * 2 * a/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    r= (v0 ** 2) * sin * 2 * a/ g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:23:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 20:24:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.155758
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:24:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 20:24:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.203775
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 20:26:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(input("angulo:"))
d=float(input(abs("distancia do porco:")))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    d=float(input(abs("distancia do porco:")))
TypeError: bad operand type for abs(): 'str'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 20:32:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(radians(input("angulo:")))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.149247
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 5, in <module>
    a=float(radians(input()))
NameError: name 'radians' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:20:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float(radians(input("angulo:")))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a=float(radians(input()))
NameError: name 'radians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:21:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0=float(input("velocidade inicial:"))
a=float((input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8
from math import*
r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 6
    d=float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:22:01) 
-- CODE:
from math import*

v0=float(input("velocidade inicial:"))
a=float((input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8

r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 5
    d=float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:22:58) 
-- CODE:
from math import*

v0=float(input("velocidade inicial:"))
a=float((input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8

r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.133315
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 5
    d=float(input())
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:23:01) 
-- CODE:
from math import*

v0=float(input("velocidade inicial:"))
a=float((input("angulo:"))
d=float(input("distancia do porco:"))
g= 9.8

r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 5
    d=float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:23:20) 
-- CODE:
from math import*

v0=float(input("velocidade inicial:"))
a=float((input("angulo:"))
dd =float(input("distancia do porco:"))
g= 9.8

r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 5
    dd =float(input())
     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:23:35) 
-- CODE:
from math import*

v0=float(input("velocidade inicial:"))
a=float((input("angulo:"))
g= 9.8

r= (v0 ** 2) * sin (2 * a)/ g
if r==d:
	print("sim")
else:
	print("nao")

-- ERROR:
File "XXXX", line 5
    g= 9.8
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:28:47) 
-- CODE:
from math import*
v0= float(input("velocidade inicial :"))
a= int(input("Angulo do vetor de lançamento com o solo :"))
g= 9.8

r= v0 ** 2 * sin * 2 * a / g

print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:30:36) 
-- CODE:
from math import*
v0= float(input("velocidade inicial :"))
a= int(input("Angulo do vetor de lançamento com o solo :"))
g= 9.8

r= v0 ** 2 * sin * (2 * a) / g

print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:30:51) 
-- CODE:
from math import*
v0= float(input("velocidade inicial :"))
a= int(input("Angulo do vetor de lancamento com o solo :"))
g= 9.8

r= v0 ** 2 * sin * (2 * a) / g

print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:31:47) 
-- CODE:
from math import*
v0= float(input("velocidade inicial :"))
a= int(input("Angulo do vetor de lancamento com o solo :"))
g= 9.8

r= v(0 ** 2)* sin * (2 * a) / g

print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:32:22) 
-- CODE:
from math import*
v0= float(input("velocidade inicial :"))
a= int(input("Angulo do vetor de lancamento com o solo :"))
g= 9.8

r= (v0 ** 2 )* sin * (2 * a) / g

print(r)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:32:54) 
-- CODE:
from math import*
v0= float(input("velocidade inicial :"))
a= float(input("Angulo do vetor de lancamento com o solo :"))
g= 9.8

r= (v0 ** 2 )* sin * (2 * a) / g

print(float(r))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    r= (v0 ** 2 )* sin * (2 * a) / g
TypeError: unsupported operand type(s) for *: 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 12:37:50) 
-- CODE:
from math import*
v0= float(input("velocidade inicial :"))
a= float(input("Angulo do vetor de lancamento com o solo :"))
d= float(input("distancia do porco :"))

g= 9.8

R=(v0**2)*(sin(2*radians(a)))/g

print(R)
-- OUTPUT:
11.2482865705094
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 12:43:24) 
-- CODE:
from math import*
v0=float(input("velocidade inicial: "))
ang=float(input("angulo alfa: "))
d=float(input("distancia porco-passaro: "))
g=9.8
R=(v0**2)*(sin(2*radians(ang)))/g

if (abs(d-R)<0.1):
    print("sim")
else:
    print("nao")
-- EXECUTION TIME:
0.160068
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
