== TEST (2019-03-26 18:55:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 1000
print(primeiro_digito)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:55:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 1000
print(primeiro_digito)
-- EXECUTION TIME:
0.151982
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:55:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 1000
print(primeiro_digito)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:56:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 9
print(primeiro_digito)
-- OUTPUT:
349
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:56:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 9
print(primeiro_digito)
-- EXECUTION TIME:
0.165172
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
349
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
349
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:56:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 9
print(primeiro_digito)
-- OUTPUT:
349
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:57:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos:"))
primeiro_digito = entrada // 1000
print(primeiro_digito)
-- OUTPUT:
9
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:57:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos:"))
primeiro_digito = entrada // 1000
print(primeiro_digito)
-- EXECUTION TIME:
0.118478
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:58:08) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos:"))
primeiro_digito = entrada // 1526
print(primeiro_digito)
-- OUTPUT:
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:00:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos:"))
primeiro_digito = entrada // 1000
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
NameError: name 'seg_dig' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:00:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos:"))
primeiro_digito = entrada // 1000
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- EXECUTION TIME:
0.204313
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/842/main.py", line 8, in <module>
    soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
NameError: name 'seg_dig' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:00:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos:"))
primeiro_digito = entrada // 1000
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
NameError: name 'seg_dig' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:06:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

entrada = int(input("numero de quatro digitos:"))

primeiro_digito = entrada // 1000
print(primeiro_digito)

seg_dig = entrada // 1000
print(seg_dig)

ter_dig = entrada // 1000
print(ter_dig)

q_dig = entrada // 1000
print(q_dig)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- OUTPUT:
9
9
9
9
36
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:07:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

entrada = int(input("numero de quatro digitos:"))

primeiro_digito = entrada // 1000
print(primeiro_digito)

seg_dig = entrada // 1000
print(seg_dig)

ter_dig = entrada // 1000
print(ter_dig)

q_dig = entrada // 1000
print(q_dig)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- EXECUTION TIME:
0.134619
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
9
9
9
36
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
1
1
1
4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:07:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

entrada = int(input("numero de quatro digitos:"))

primeiro_digito = entrada // 1000
print(primeiro_digito)

seg_dig = entrada // 1000
print(seg_dig)

ter_dig = entrada // 1000
print(ter_dig)

q_dig = entrada // 1000
print(q_dig)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- OUTPUT:
9
9
9
9
36
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:08:49) 
-- CODE:
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:08:52) 
-- CODE:
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- EXECUTION TIME:
0.192012
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/842/main.py", line 12, in <module>
    print("A soma dos n\xfameros \xe9: ", n)
UnicodeEncodeError: 'ascii' codec can't encode character '\xfa' in position 12: ordinal not in range(128)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:08:53) 
-- CODE:
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:03) 
-- CODE:
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:27) 
-- CODE:
n = int(input("Digite um número inteiro: "))

soma = 6

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:56) 
-- CODE:
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:10:11) 
-- CODE:
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.155711
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:11:40) 
-- CODE:
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:11:41) 
-- CODE:
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:11:42) 
-- CODE:
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:11:42) 
-- CODE:
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:11:42) 
-- CODE:
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:11:42) 
-- CODE:
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:11:42) 
-- CODE:
n = input("Digite um número inteiro: ")

print(sum(int(i) for i in n))

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:03) 
-- CODE:

n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:04) 
-- CODE:

n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:04) 
-- CODE:

n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:04) 
-- CODE:

n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:05) 
-- CODE:

n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:05) 
-- CODE:

n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:11) 
-- CODE:

n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ")
-- OUTPUT:
A soma dos números é:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:14:51) 
-- CODE:
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:15:09) 
-- CODE:
x = int(input("Numero: "))

soma = 0

while (x != 0):
    resto = x % 10
    x = (x - resto)//10
    soma = soma + resto
print(soma)
-- EXECUTION TIME:
0.146121
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:22:49) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pergarquartodigito = pergarterceirodig % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    pergarquartodigito = pergarterceirodig % 10
NameError: name 'pergarterceirodig' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:22:56) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pergarquartodigito = pergarterceirodig % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    pergarquartodigito = pergarterceirodig % 10
NameError: name 'pergarterceirodig' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:25:44) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegarquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:25:49) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegarquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

-- EXECUTION TIME:
0.17765
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
