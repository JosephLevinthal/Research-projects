== TEST (2019-03-22 12:12:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import sqrt()
a = sqrt((s*s-a)*(s-b)*(s-c))


-- ERROR:
File "XXXX", line 5
    from math import sqrt()
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:12:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import sqrt
a = sqrt((s*s-a)*(s-b)*(s-c))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = sqrt((s*s-a)*(s-b)*(s-c))
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:13:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

from math import sqrt
x = 3
a = 2
b = 5
c = 1
a = sqrt((x*x-a)*(x-b)*(x-c))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    a = sqrt((x*x-a)*(x-b)*(x-c))
ValueError: math domain error
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:16:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

int(input("digite a: ")
int(input("digite b: ")
int(input("digite c: ")
from math import
	 sqrt(s*s-a*s-b*s-c)


-- ERROR:
File "XXXX", line 6
    int(input()
      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:16:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: ")
b = int(input("digite b: ")
c = int(input("digite c: ")
from math import
	 sqrt(s*s-a*s-b*s-c)


-- ERROR:
File "XXXX", line 6
    b = int(input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:16:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

letra1 = int(input("digite a: ")
letra2 = int(input("digite b: ")
letra3 = int(input("digite c: ")
from math import
	 sqrt(s*s-a*s-b*s-c)

-- ERROR:
File "XXXX", line 6
    letra2 = int(input()
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:17:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

letra1 = int(input("digite a: "))
letra2 = int(input("digite b: "))
letra3 = int(input("digite c: "))
from math import
	 sqrt(s*s-a*s-b*s-c)

-- ERROR:
File "XXXX", line 8
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:17:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
semi = a/2+b/2+c/2

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:18:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import:
	sqrt(s*s-a*s-b*s-c)

-- ERROR:
File "XXXX", line 9
    from math import:
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:18:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import
	sqrt(s*s-a*s-b*s-c)

-- ERROR:
File "XXXX", line 9
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:19:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import sqrt()
	sqrt(s*s-a*s-b*s-c)

-- ERROR:
File "XXXX", line 9
    from math import sqrt()
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:19:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import sqrt
	sqrt(s*s-a*s-b*s-c)

-- ERROR:
File "XXXX", line 10
    sqrt(s*s-a*s-b*s-c)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:19:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import sqrt
	total = sqrt(s*s-a*s-b*s-c)

-- ERROR:
File "XXXX", line 10
    total = sqrt(s*s-a*s-b*s-c)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:20:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import sqrt(s*s-a*s-b*s-c)
	

-- ERROR:
File "XXXX", line 9
    from math import sqrt(s*s-a*s-b*s-c)
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:20:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import t = sqrt(s*s-a*s-b*s-c)
	

-- ERROR:
File "XXXX", line 9
    from math import t = sqrt(s*s-a*s-b*s-c)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:20:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:23:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from <math> import

	

-- ERROR:
File "XXXX", line 9
    from <math> import
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:24:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(x)

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:25:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*s-a*s-b*s-c)
print(sqrt)

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:25:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*s-a*s-b*s-c)
print(sqrt)

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:26:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*(s-a)*(s-b)*(s-c))
print(sqrt)

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:26:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*(s-a)*(s-b)*(s-c))
print(sqrt)

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:26:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*(s-a)*(s-b)*(s-c))
print(sqrt)

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:26:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*(s-a)*(s-b)*(s-c))
print(sqrt)

	

-- EXECUTION TIME:
0.130813
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1016/main.py", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:26:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*(s-a)*(s-b)*(s-c))
print(sqrt)

	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:27:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5)

	

-- ERROR:
File "XXXX", line 14
    
     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:27:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:27:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*s-a*s-b*s-c)
print(round(sqrt, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:28:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt(s*s-a*s-b*s-c)
print(round(sqrt, 5))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:31:06) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:31:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:31:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt((s*(s-a)*(s-b)*(s-c))

	  print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 12
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:32:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:32:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt = ((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:32:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt = ((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:33:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = int(input("digite a: "))
b = int(input("digite b: "))
c = int(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt = ((s*(s-a)*(s-b)*(s-c))
		  
		  
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 13
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:34:40) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt = ((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:35:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt = ((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:36:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
s = a/2+b/2+c/2
from math import *
sqrt = ((s*(s-a)*(s-b)*(s-c))
print(round(sqrt, 5))
-- ERROR:
File "XXXX", line 11
    print(round(sqrt, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:43:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
s = a/2+b/2+c/2
from math import *
a = (sqrt(s*(s-a)*(s-b)*(s-c))
print(round(a, 5))
-- ERROR:
File "XXXX", line 11
    print(round(a, 5))
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:51:10) 
-- CODE:
a = float(input("digite um valor para a:"))
b = float(input("digite um valor para b:"))
c = float(input("digite um valor para c:"))
s = a/2+b/2+c/2
from math import*
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))

-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:51:19) 
-- CODE:
a = float(input("digite um valor para a:"))
b = float(input("digite um valor para b:"))
c = float(input("digite um valor para c:"))
s = a/2+b/2+c/2
from math import*
area = sqrt(s*(s-a)*(s-b)*(s-c))
print(round(area, 5))

-- EXECUTION TIME:
0.157149
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
