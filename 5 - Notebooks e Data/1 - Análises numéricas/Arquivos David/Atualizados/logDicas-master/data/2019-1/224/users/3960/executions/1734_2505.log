== TEST (2019-05-10 13:21:59) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

cont = 1

while(cont < k):
	angulo = angulo + (angulo**cont/factorial(cont))
	cont = cont + 2
	
print(round(angulo,10))
-- OUTPUT:
8.3093054336
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:23:33) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = 1.0
cont = 1

while(cont < k):
	contA = contA + ((angulo**cont)/factorial(cont))
	cont = cont + 2
	
print(round(angulo,10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:27:57) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = 1.0
cont = 1

while(cont < k):
	contA = contA - ((radians(angulo)**cont)/factorial(cont))
	cont = cont + 2
	print(contA)
	
print(round(angulo,10))
-- OUTPUT:
0.9725844322191962
0.9725809979013751
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:34:51) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = angulo
cont = 1

while(cont < k):
	contA = contA - ((radians(angulo)**cont)/factorial(cont))
	cont = cont + 2
	
print(round(angulo,10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:39:28) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 3

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(angulo,10))
-- OUTPUT:
1.5707963268
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:40:42) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 3

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
0.0274121335
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:40:49) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 3

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
0.0274121335
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:41:39) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 3

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	contA = contA * (-1)
	
print(round(contA,10))
-- OUTPUT:
-0.0274121335
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:42:55) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = angulo
cont = 3

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
0.9248322293
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 13:43:20) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 3

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(contA,10))
-- EXECUTION TIME:
0.17846
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
0.0274121335
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.0274121335
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.0182770452
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:43:24) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 3

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
0.0274121335
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:44:58) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 3

while(cont <= k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
0.0274121333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:47:35) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 0
expoente = 3

while(cont < k):
	contA = contA - ((contA**expoente)/factorial(cont))
	cont = cont + 1
	expoente = expoente + 2
	
print(round(contA,10))
-- OUTPUT:
0.0273949464
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:53:51) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 1

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	print(round(contA,10))
	
print(round(contA,10))
-- OUTPUT:
0.0
0.0
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 13:54:10) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

contA = radians(angulo)
cont = 1

while(cont < k):
	contA = contA - ((contA**cont)/factorial(cont))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:20:45) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radian(angulo)

contA = 0
cont = 1
exp = 1
while(cont < k):
	contA = contA + ((a2**exp)*(-1)/factorial(exp))
	cont = cont + 2
	
print(round(contA,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a2 = radian(angulo)
NameError: name 'radian' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:20:55) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)

contA = 0
cont = 1
exp = 1
while(cont < k):
	contA = contA + ((a2**exp)*(-1)/factorial(exp))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
-0.0548311356
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:21:22) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)

contA = 0
cont = 1
exp = 1
while(cont < k):
	contA = contA + ((a2**exp)*(-1)/factorial(exp))
	cont = cont + 2
	
print(round(contA,9))
-- OUTPUT:
-0.054831136
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:21:30) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)

contA = 0
cont = 1
exp = 1
while(cont < k):
	contA = contA + ((a2**exp)*(-1)/factorial(exp))
	cont = cont + 2
	
print(round(contA,9))
-- OUTPUT:
-0.054831136
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:21:44) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)

contA = 0
cont = 1
exp = 1
while(cont < k):
	contA = contA + ((a2**exp)*(-1)/factorial(exp))
	cont = cont + 2
	
print(round(contA,10))
-- OUTPUT:
-0.0548311356
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:33:07) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 1
cont = 0
soma = 0

while (cont < k):
	soma = soma + ((a2**exp)*(-1))/factorial(exp)
	exp = exp + 1
	cont = cont + 1
print(soma)
	
-- OUTPUT:
-0.027794832444504033
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:33:33) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 1
cont = 0
soma = 0

while (cont < k):
	soma = soma + ((a2**exp)*(-1))/factorial(exp)
	exp = exp + 1
	cont = cont + 1
print(soma)
	
-- OUTPUT:
-0.027794832444504033
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:34:00) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 1
cont = 0
soma = 0

while (cont < k):
	soma = soma + ((a2**exp)*(-1))/factorial(exp)
	exp = exp + 2
	cont = cont + 1
print(soma)
	
-- OUTPUT:
-0.02741900222769117
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:34:15) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 1
cont = 0
soma = 0

while (cont < k):
	soma = soma + ((a2**exp))/factorial(exp)
	exp = exp + 2
	cont = cont + 1
print(soma)
	
-- OUTPUT:
0.02741900222769117
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:34:36) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 1
cont = 0
soma = 0

while (cont < k):
	soma = soma + ((a2**exp))/factorial(exp)
	exp = exp + 2
	cont = cont + 1
print(round(soma,10))
	
-- OUTPUT:
0.0274190022
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:35:19) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 1
cont = 0
soma = a2

while (cont < k):
	soma = soma + ((a2**exp))/factorial(exp)
	exp = exp + 2
	cont = cont + 1
print(round(soma,10))
	
-- OUTPUT:
0.05483457
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:35:50) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 3
cont = 0
soma = a2

while (cont < k):
	soma = soma + ((a2**exp))/factorial(exp)
	exp = exp + 2
	cont = cont + 1
print(round(soma,10))
	
-- OUTPUT:
0.0274190022
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:35:55) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 3
cont = 0
soma = a2

while (cont < k):
	soma = soma + ((a2**exp))/factorial(exp)
	exp = exp + 2
	cont = cont + 1
print(round(soma,10))
	
-- OUTPUT:
0.0274190022
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:37:20) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


exp = 1
cont = 0
soma = 0

while (cont < k):
	soma = soma + ((a2**exp))/factorial(exp)
	exp = exp + 2
	cont = cont + 1
print(round(soma,10))
	
-- OUTPUT:
0.0274190022
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:58:22) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	soma = a2 + (((-1)**(cont))*(a2**exp/factorial(exp)))
	cont = cont + 1
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    soma = a2 + (((-1)**(cont))*(a2**exp/factorial(exp)))
TypeError: unsupported operand type(s) for ** or pow(): 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:59:34) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0
exp = 1

while (cont < k):
	soma = a2 + (((-1)**(cont))*(a2**exp/factorial(exp)))
	cont = cont + 1
	exp = exp + 2
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    soma = a2 + (((-1)**(cont))*(a2**exp/factorial(exp)))
TypeError: unsupported operand type(s) for ** or pow(): 'float' and 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 14:59:58) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0
exp = 1

while (cont < k):
	soma = a2 + (((-1)**(cont))*(a2**exp/factorial(exp)))
	cont = cont + 1
	exp = exp + 2
	print(soma)
	
	
-- OUTPUT:
0.0
0.0274190020986249
0.027415567651739817
0.027415567780806085
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:03:34) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	soma = a2 + (((-1)**(cont))*(a**(cont+2)))
	cont = cont + 1
	exp = exp + 2
	print(soma)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 13, in <module>
    soma = a2 + (((-1)**(cont))*(a**(cont+2)))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:04:36) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial(cont+2)
	soma = a2 + (((-1)**(cont))*(a**(cont+2)))
	cont = cont + 1
	exp = exp + 2
	print(soma)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    soma = a2 + (((-1)**(cont))*(a**(cont+2)))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:04:50) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial(cont+2)
	soma = a2 + (((-1)**(cont))*(a**(cont+2)))
	cont = cont + 1
	exp = exp + 2
print(den)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    soma = a2 + (((-1)**(cont))*(a**(cont+2)))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:05:24) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a**(cont+2)))
	cont = cont + 1
	exp = exp + 2
print(den)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 14, in <module>
    soma = a2 + (((-1)**(cont))*(a**(cont+2)))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:05:44) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial(cont+2)
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
	exp = exp + 2
print(den)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 16, in <module>
    exp = exp + 2
TypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:06:01) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial(cont+2)
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(den)
	
	
-- OUTPUT:
720
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:06:24) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2)
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(den)
	
	
-- ERROR:
File "XXXX", line 14
    soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:06:31) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(den)
	
	
-- OUTPUT:
720
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:06:41) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(soma)
	
	
-- OUTPUT:
0.027415568205407175
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:06:59) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(round(soma,10))
	
	
-- OUTPUT:
0.0274155682
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 15:07:04) 
-- CODE:
from math import *
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(round(soma,10))
	
	
-- EXECUTION TIME:
0.172658
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
0.0274155682
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.0274155523
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.0182771568
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:07:51) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(round(soma,10))
	
	
-- OUTPUT:
0.0274155682
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:07:58) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))
	cont = cont + 1
print(round(soma,10))
	
	
-- OUTPUT:
0.0274155682
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:08:29) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	den = factorial((cont+2))
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))/den
	cont = cont + 1
print(round(soma,10))
	
	
-- OUTPUT:
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:09:03) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))/factorial(cont+2)
	cont = cont + 1
print(round(soma,10))
	
	
-- OUTPUT:
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:10:34) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))/factorial(cont+2)
	cont = cont + 1
	print(round(soma,10))
	
	
-- OUTPUT:
0.0274121335
0.0274155913
0.0274155677
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:10:43) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	soma = a2 + (((-1)**(cont))*(a2**(cont+2)))/factorial(cont+2)
	cont = cont + 1
	print(round(soma,10))
	
	
-- OUTPUT:
0.0274121335
0.0274155913
0.0274155677
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:24:21) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 1
soma = 0

while (cont < k):
	soma = a2 + ((-1)*cont) * a2*(2*(cont+1))/factorial((2*cont+1))
	cont = cont + 1
	print(round(soma,10))
	
	
-- OUTPUT:
0.0091385226
0.024674011
0.0272850175
0.0274125458
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:24:56) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


cont = 2
soma = 0

while (cont < k):
	soma = a2 + ((-1)*cont) * a2*(2*(cont+1))/factorial((2*cont+1))
	cont = cont + 1
	print(round(soma,10))
	
	
-- OUTPUT:
0.024674011
0.0272850175
0.0274125458
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:27:29) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


n = 1
soma = 0

while (cont < k):
	soma = (-1)^n/(2n+1)!*x^(2n+1)
	
	
-- ERROR:
File "XXXX", line 12
    soma = (-1)^n/(2n+1)!*x^(2n+1)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:28:03) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


n = 1
soma = 0

while (cont < k):
	soma = (-1)**n/factorial((2*n+1))*x**(2*n+1)
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    while (cont < k):
NameError: name 'cont' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:28:19) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


n = 1
soma = 0

while (cont < k):
	soma = (-1)**n/factorial((2*n+1))*x**(2*n+1)
	n = n + 1
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    while (cont < k):
NameError: name 'cont' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:28:40) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = (-1)**n/factorial((2*n+1))*x**(2*n+1)
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    soma = (-1)**n/factorial((2*n+1))*x**(2*n+1)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:28:46) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = (-1)**n/factorial((2*n+1))*x**(2*n+1)
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    soma = (-1)**n/factorial((2*n+1))*x**(2*n+1)
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:41:38) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = (-1)**n/factorial((2*n+1))*a2**(2*n+1)
	n = n + 1
	print(soma)
	
	
	
-- OUTPUT:
-3.4343178211280596e-06
1.290639572831636e-10
-2.30967128972007e-15
2.4110830431130415e-20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:42:40) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
a2 = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = a2 + ((-1)**(n)/factorial((2*n+1))) * (a2)**(2*n+1)
	n = n + 1
	print(soma)
	
	
	
-- OUTPUT:
0.027412133462982647
0.02741556790986773
0.027415567780801463
0.027415567780803774
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:45:32) 
-- CODE:
from math import *

ângulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = math.radians(ângulo)


n = 1
soma = 0

while (n < k):
	soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen = math.radians(ângulo)
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:45:47) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = math.radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen = math.radians(angulo)
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:46:18) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = (math.radians(angulo))


n = 1
soma = 0

while (n < k):
	soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen = (math.radians(angulo))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:46:59) 
-- CODE:


angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = (math.radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
File "XXXX", line 8
    n = 1
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:47:08) 
-- CODE:


angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = (math.radians(angulo))


n = 1
soma = 0

while (n < k):
	soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    angulo = eval(input())
  File "<string>", line 1, in <module>
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:47:22) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = (math.radians(angulo))


n = 1
soma = 0

while (n < k):
	soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    sen = (math.radians(angulo))
NameError: name 'math' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 15:47:35) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
	n = n + 1
	print(soma)
	
	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 12, in <module>
    soma = sen + ((-1)**(n) * ((a2)**(2*n+1)/factorial((2*n+1))))
NameError: name 'a2' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:19:01) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	d = factorial(n)
	soma = sen + (-1)**n * sen**(2*n+1)/d
	n = n + 1
	
print(round(soma,10))
	
	
	
-- OUTPUT:
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:19:08) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	d = factorial(n)
	soma = sen + (-1)**n * sen**(2*n+1)/d
	n = n + 1
	
print(round(soma,10))
	
	
	
-- OUTPUT:
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:20:28) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = sen + (-1)**n * sen**(2*n+1)/factorial(2*n+1)
	n = n + 1
	
print(round(soma,10))
-- OUTPUT:
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 16:20:37) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = sen + (-1)**n * sen**(2*n+1)/factorial(2*n+1)
	n = n + 1
	
print(round(soma,10))
-- EXECUTION TIME:
0.207448
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
0.0274155678
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.0274155678
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.0182770452
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:21:07) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	soma = sen + (-1)**n * sen**(2*n+1)/factorial(2*n+1)
	n = n + 1
	print(round(soma,10))
-- OUTPUT:
0.0274121335
0.0274155679
0.0274155678
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:26:35) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	d = factorial(2*n+1)
	soma = sen + (-1)**n * sen**(2*n+1)/d
	n = n + 1
	print(round(soma,10))
-- OUTPUT:
0.0274121335
0.0274155679
0.0274155678
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:28:54) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	d = factorial(2*n+1)
	soma = sen + ((-1)**n * (sen)**(2*n+1))/d
	n = n + 1
	print(round(soma,10))
-- OUTPUT:
0.0274121335
0.0274155679
0.0274155678
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:33:56) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 1
soma = 0

while (n < k):
	exp = 2*n+1
	d = factorial(2*n+1)
	soma = sen + (-1)**(n) * (sen)**(exp)/d
	n = n + 1
	print(round(soma,10))
-- OUTPUT:
0.0274121335
0.0274155679
0.0274155678
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:39:36) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 0
soma = 0

while (n < k):
	soma = sen + (-1)**n * sen**(2*n) / factorial(2*n)
	n = n + 1
	print(round(soma,10))
-- OUTPUT:
1.0274155678
0.0270397611
0.0274155913
0.0274155678
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:40:21) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 0
soma = 0

while (n < k):
	soma = sen + (-1)**n * sen**(2*n) / factorial(2*n)
	n = n + 1
	print(round(soma,10))
-- OUTPUT:
1.0274155678
0.0270397611
0.0274155913
0.0274155678
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:52:32) 
-- CODE:
from math import *

angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 0
soma = 0

while (n < k):
	sen = (sen)**(2*n+1)
	n = n + 1 
	print(sen)
	
-- OUTPUT:
0.027415567780803774
2.0605906926768358e-05
3.7149987273045374e-24
9.765864297350779e-165
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:54:04) 
-- CODE:
from math import *
print(sen(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 0
soma = 0

while (n < k):
	sen = (sen)**(2*n+1)
	n = n + 1 
	print(sen)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print(sen(pi/4))
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:54:13) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))
sen = radians(angulo)


n = 0
soma = 0

while (n < k):
	sen = (sen)**(2*n+1)
	n = n + 1 
	print(sen)
	
-- OUTPUT:
0.7071067811865475
0.027415567780803774
2.0605906926768358e-05
3.7149987273045374e-24
9.765864297350779e-165
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:55:06) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = (sen)**(2*n+1)
	n = n + 1 
	print(sen)
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    sen = (sen)**(2*n+1)
NameError: name 'sen' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:55:22) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = (angulo)**(2*n+1)
	n = n + 1 
	print(sen)
	
-- OUTPUT:
0.7071067811865475
1.5707963267948966
3.875784585037477
9.563115149540044
23.596040842006182
58.22089713563711
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:56:34) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 
	print(sen)
	
-- ERROR:
File "XXXX", line 11
    sen = angulo + (-1)**(2n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:56:40) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 
	print(sen)
	
-- OUTPUT:
0.7071067811865475
0.0
0.9248322292886504
1.4911037005487295
1.5661145726595778
1.5706358856101093
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:57:20) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 
	print(round(sen,10))
	
-- OUTPUT:
0.7071067811865475
0.0
0.9248322293
1.4911037005
1.5661145727
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:57:42) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
0.7071067811865475
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 16:57:47) 
-- CODE:
from math import *
print(sin(pi/4))
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- EXECUTION TIME:
0.182641
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
0.7071067811865475
1.5706358856
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
0.7071067811865475
-1.5661145727
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.7071067811865475
1.036703049
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 16:57:52) 
-- CODE:
from math import *


angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- EXECUTION TIME:
0.135312
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.5706358856
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-1.5661145727
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
1.036703049
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:57:58) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:58:25) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 1
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 16:58:30) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 1
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- EXECUTION TIME:
0.140274
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.5706358856
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-1.5661145727
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
1.036703049
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:58:39) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 1
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:58:58) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 16:59:44) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(n+1) * (angulo)**(n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5707699734
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:00:07) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1)/ factorial(2*n+1)
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:02:22) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	f = factorial (2*n+1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:07:41) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = (-1)**n / factorial (2 * n +1) * (angulo) ** (2 * n +1) 
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:08:18) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen = (-1)**n * (angulo) ** (2 * n +1) / factorial (2 * n +1) 
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
0.0001604412
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:08:33) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen =angulo + (-1)**n * (angulo) ** (2 * n +1) / factorial (2 * n +1) 
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:08:36) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	sen =angulo + (-1)**n * (angulo) ** (2 * n +1) / factorial (2 * n +1) 
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:09:26) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k)
	f = factorial (2*n+1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))
	
-- ERROR:
File "XXXX", line 9
    while (n < k)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:09:28) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k)
	f = factorial (2*n+1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))
	
-- ERROR:
File "XXXX", line 9
    while (n < k)
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:09:32) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	f = factorial (2*n+1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))
	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:10:20) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))


	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:11:04) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))


	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:11:23) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))


	
-- OUTPUT:
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:12:40) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

print((-1)**2)
n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))


	
-- OUTPUT:
1
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:13:03) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

print(-1 ** 2)
n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	sen = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

print(round(sen,10))


	
-- OUTPUT:
-1
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:14:31) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

print(-1 ** 2)
n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 
a = radians(soma)

print(round(radians(a),10))


	
-- OUTPUT:
-1
0.0004784431
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:14:40) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

print(-1 ** 2)
n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(radians(a),10))


	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 15, in <module>
    print(round(radians(a),10))
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:15:13) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

print(-1 ** 2)
n = 0
soma = 0

while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 

a = radians(soma)


print(round(a,10))


	
-- OUTPUT:
-1
0.0274127676
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:16:06) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))

angulo2 = radians(angulo)

print(-1 ** 2)
n = 0
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo2 + (-1)**(2*n+1) * (angulo2)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	
-- OUTPUT:
-1
0.0274155678
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:16:28) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 0
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	
-- OUTPUT:
-1
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:16:57) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(n) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	
-- OUTPUT:
-1
1.570956768
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:17:46) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 0
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	
-- OUTPUT:
-1
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 17:18:59) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	
-- EXECUTION TIME:
0.157586
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
-1
1.5706358856
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-1
-1.5661145727
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
-1
1.036703049
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-10 17:19:00) 
-- CODE:
from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	
-- OUTPUT:
-1
1.5706358856
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:02:51) 
-- CODE:
'''from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	-1'''
from math import *

angulo = float(input("Angulo: "))
k = int(input("Quantidade de termos desejada para a serie: "))

sen = angulo
cont = 1

while(cont < k):
	sen = sen + (-1)**cont * ((angulo**(cont*2+1)) / factorial((cont*2+1)))
	cont = cont + 1
	
print(round(sen,10))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 21, in <module>
    angulo = float(input())
ValueError: could not convert string to float: 'pi/2'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:03:06) 
-- CODE:
'''from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	-1'''
from math import *

angulo = eval(input("Angulo: "))
k = int(input("Quantidade de termos desejada para a serie: "))

sen = angulo
cont = 1

while(cont < k):
	sen = sen + (-1)**cont * ((angulo**(cont*2+1)) / factorial((cont*2+1)))
	cont = cont + 1
	
print(round(sen,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:03:20) 
-- CODE:
'''from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	-1'''
from math import *

angulo = eval(input("Angulo: "))
k = int(input("Quantidade de termos desejada para a serie: "))

sen = angulo
cont = 1

while(cont < k):
	sen = sen + (-1)**cont * ((angulo**(cont*2+1)) / factorial((cont*2+1)))
	cont = cont + 1
	
print(round(sen,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 13:03:31) 
-- CODE:
'''from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	-1'''
from math import *

angulo = eval(input("Angulo: "))
k = int(input("Quantidade de termos desejada para a serie: "))

sen = angulo
cont = 1

while(cont < k):
	sen = sen + (-1)**cont * ((angulo**(cont*2+1)) / factorial((cont*2+1)))
	cont = cont + 1
	
print(round(sen,10))
-- OUTPUT:
1.0000035426
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 13:03:41) 
-- CODE:
'''from math import *
angulo = eval(input("Insira o angulo em radianos: "))
k = int(input("Insira a quantidade de termos da serie: "))


print(-1 ** 2)
n = 1
soma = 0
while (n < k):
	f = factorial (2 * n +1)
	soma = angulo + (-1)**(2*n+1) * (angulo)**(2*n+1) / f
	n = n + 1 


print(round(soma,10))


	-1'''
from math import *

angulo = eval(input("Angulo: "))
k = int(input("Quantidade de termos desejada para a serie: "))

sen = angulo
cont = 1

while(cont < k):
	sen = sen + (-1)**cont * ((angulo**(cont*2+1)) / factorial((cont*2+1)))
	cont = cont + 1
	
print(round(sen,10))
-- EXECUTION TIME:
0.259564
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 13:15:28) 
-- CODE:
from math import *

angulo = eval(input("Angulo: "))
k = int(input("Quantidade de termos desejada para a serie: "))

sen = angulo
cont = 1

while(cont < k):
	sen = sen + (-1)**cont * ((angulo**(cont*2+1)) / factorial((cont*2+1)))
	cont = cont + 1
	
print(round(sen,10))
-- EXECUTION TIME:
0.19048
-- TEST CASE 1:
---- input:
pi/2
5
---- correct output:
1.0000035426
---- user output:
1.0000035426
-- TEST CASE 2:
---- input:
-pi/2
4
---- correct output:
-0.9998431014
---- user output:
-0.9998431014
-- TEST CASE 3:
---- input:
pi/3
3
---- correct output:
0.8662952838
---- user output:
0.8662952838
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
