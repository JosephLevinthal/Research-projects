== TEST (2019-05-02 11:23:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a= float(input("Num a: "))
b= float(input("Num b: "))
c= float(input("Num c: "))
d= float(input("Num d: "))
print("Intervalo 1: ", a,",", b)
print("Intervalo 2:", c, ",", d)

if(b<=a)or (d<=c):
	print("Entrada invalidas")
elif(b<c):
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")

-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 11:23:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo.
a= float(input("Num a: "))
b= float(input("Num b: "))
c= float(input("Num c: "))
d= float(input("Num d: "))
print("Intervalo 1: ", a,",", b)
print("Intervalo 2:", c, ",", d)

if(b<=a)or (d<=c):
	print("Entrada invalidas")
elif(b<c):
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")

-- EXECUTION TIME:
0.124836
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entrada invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 11:24:24) 
-- CODE:
a= float(input("Num a: "))
b= float(input("Num b: "))
c= float(input("Num c: "))
d= float(input("Num d: "))
print("Intervalo 1: ", a,",", b)
print("Intervalo 2:", c, ",", d)

if(b<=a)or(d<=c):
	print("Entrada invalidas")
elif(b<c):
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")

-- EXECUTION TIME:
0.190724
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entrada invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 11:24:31) 
-- CODE:
a= float(input("Num a: "))
b= float(input("Num b: "))
c= float(input("Num c: "))
d= float(input("Num d: "))
print("Intervalo 1: ", a,",", b)
print("Intervalo 2:", c, ",", d)

if(b<=a)or(d<=c):
	print("Entrada invalidas")
elif(b<c):
	print("Nao ha intersecao")
else: 
	print("Ha intersecao")

-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-02 16:04:32) 
-- CODE:
a= float(input("Num a: "))
b= float(input("Num b: "))
c= float(input("Num c: "))
d= float(input("Num d: "))
print("Intervalo 1: ", a, ",", b)
print("Intervalo 2:", c, ",", d)

if(b<=a) or (d<=c):
	print("Entradas invalidas")
elif(b+c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")

-- OUTPUT:
Intervalo 1:  1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:05:03) 
-- CODE:
a= float(input("Num a: "))
b= float(input("Num b: "))
c= float(input("Num c: "))
d= float(input("Num d: "))
print("Intervalo 1: ", a, ",", b)
print("Intervalo 2:", c, ",", d)

if(b<=a) or (d<=c):
	print("Entradas invalidas")
elif(b+c):
	print("Nao ha intersecao")
else:
	print("Ha intersecao")

-- EXECUTION TIME:
0.147432
-- TEST CASE 1:
---- input:
1
2
4
5
---- correct output:
Intervalo 1: 1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
---- user output:
Intervalo 1:  1.0 , 2.0
Intervalo 2: 4.0 , 5.0
Nao ha intersecao
-- TEST CASE 2:
---- input:
1.5
5
2.5
3
---- correct output:
Intervalo 1: 1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Ha intersecao
---- user output:
Intervalo 1:  1.5 , 5.0
Intervalo 2: 2.5 , 3.0
Nao ha intersecao
-- TEST CASE 3:
---- input:
-1
-3
1
3
---- correct output:
Intervalo 1: -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
---- user output:
Intervalo 1:  -1.0 , -3.0
Intervalo 2: 1.0 , 3.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
