== TEST (2019-04-16 14:19:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3)
nsg= "ponto pertence a reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 7
    if (eq==3)
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:20:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence a reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 8
    nsg= "ponto pertence a reta"
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:20:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:20:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:20:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:20:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.177649
-- ERROR:
  File "/home/codebench/codes/1649/1054/main.py", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:20:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.273681
-- ERROR:
  File "/home/codebench/codes/1649/1054/main.py", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:20:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.0881431
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1649/1054/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:20:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.134258
-- ERROR:
  File "/home/codebench/codes/1649/1054/main.py", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:21:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:21:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.201779
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:

-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:21:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:21:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 8
    nsg= "ponto pertence n reta"
      ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:21:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.132556
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:

-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:22:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
   else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.163851
-- ERROR:
  File "/home/codebench/codes/1649/1054/main.py", line 9
    else:
       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:22:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
   else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 14:22:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
 else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- EXECUTION TIME:
0.111302
-- ERROR:
  File "/home/codebench/codes/1649/1054/main.py", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:22:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
 else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:22:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
 else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:22:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
	else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:23:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if  (eq==3):
    nsg= "ponto pertence n reta"
   else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:32:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if  (eq==3):
    nsg= "ponto pertence n reta"
   else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:33:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:1"))
b= int(input("coordenada y:1"))
eq= (2*a + b)
if  (eq==3):
    nsg= "ponto pertence n reta"
   else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:33:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:1"))
b= int(input("coordenada y:1"))
eq= (2*a + b)
if  (eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:34:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if  (eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:36:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if(eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 14:36:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a= int(input("coordenada x:"))
b= int(input("coordenada y:"))
eq= (2*a + b)
if (eq==3):
   nsg= "ponto pertence n reta"
else:
	nsg="ponto nao pertence a reta"
	print(nsg)
-- ERROR:
File "XXXX", line 9
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
