== TEST (2019-05-11 16:19:41) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 3
i = 1
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
print(sqrt(12)*soma)
		
		
-- OUTPUT:
-0.9675249319040191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 16:20:11) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 3
i = 1
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
	print(sqrt(12)*soma)
		
		
-- OUTPUT:
-0.9675249319040191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 16:21:11) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 1
i = 0
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i+1<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
	print(sqrt(12)*soma)
		
		
-- OUTPUT:
3.1415905109380797
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 16:21:50) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 1
i = 0
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
	print(sqrt(12)*soma)
		
		
-- OUTPUT:
3.1415933045030813
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 16:21:55) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 1
i = 0
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
	print(sqrt(12)*soma)
		
		
-- OUTPUT:
3.1415933045030813
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 16:21:59) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 1
i = 0
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
	print(sqrt(12)*soma)
		
		
-- OUTPUT:
3.1415933045030813
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 16:22:03) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 1
i = 0
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
	print(sqrt(12)*soma)
		
		
-- OUTPUT:
3.1415933045030813
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-11 16:22:32) 
-- CODE:
from math import sqrt
k = int(input("numero de termos: "))
v1 = 0
v2 = 1
i = 0
soma = 0
if(k == 1):
	print(sqrt(12))
else:
	while(i<k):
		sinal = (-1)**i
		soma = soma + sinal*(1/(v2*(3**v1)))
		v1 = v1 + 1
		v2 = v2 + 2
		i = i + 1
	print(round(sqrt(12)*soma,8))
		
		
-- EXECUTION TIME:
0.140191
-- TEST CASE 1:
---- input:
11
---- correct output:
3.1415933
---- user output:
3.1415933
-- TEST CASE 2:
---- input:
15
---- correct output:
3.14159266
---- user output:
3.14159266
-- TEST CASE 3:
---- input:
8
---- correct output:
3.14156872
---- user output:
3.14156872
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
