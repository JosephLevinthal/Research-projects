== TEST (2019-04-11 18:37:59) 
-- CODE:
nota=float(input("digite a nota do aluno:"))
if(bonificaçao=="s ou N"):
	mensagem= 
	print(bonificaçao)
else:
	print(float(bonificaçao))
-- ERROR:
File "XXXX", line 3
    mensagem= 
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:38:13) 
-- CODE:
nota=float(input("digite a nota do aluno:"))
if(bonificaçao=="s ou N"):
	print(bonificaçao)
else:
	print(float(bonificaçao))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if(bonificaçao=="s ou N"):
NameError: name 'bonificaçao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:38:41) 
-- CODE:
nota=float(input("digite a nota do aluno:"))
if(bonificaçao=="s"):
	print(bonificaçao)
else:
	print(float(bonificaçao))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if(bonificaçao=="s"):
NameError: name 'bonificaçao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:39:04) 
-- CODE:
nota=float(input("digite a nota do aluno:"))
if(nota == "s"):
	print(bonificaçao)
else:
	print(float(bonificaçao))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    print(float(bonificaçao))
NameError: name 'bonificaçao' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:39:22) 
-- CODE:
nota=float(input("digite a nota do aluno:"))
if(nota == "s"):
	print(nota)
else:
	print(float(nota))
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:50:48) 
-- CODE:
nota=float(input("digite a nota do aluno:0-10"))
bonificaçao=input("s ou n")
if bonificaçao.upper()== "s":
	nota=nota+((10*nota)/100)
else bonificaçao.upper()=="n" 
	print(nota)
print(round(nota, 1))
-- ERROR:
File "XXXX", line 5
    else bonificaçao.upper()=="n" 
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:51:08) 
-- CODE:
nota=float(input("digite a nota do aluno:0-10"))
bonificaçao=input("s ou n")
if bonificaçao.upper()== "s":
	nota=nota+((10*nota)/100)
else bonificaçao.upper()=="n" :
	print(nota)
print(round(nota, 1))
-- ERROR:
File "XXXX", line 5
    else bonificaçao.upper()=="n" :
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:51:27) 
-- CODE:
nota=float(input("digite a nota do aluno:0-10"))
bonificaçao=input("s ou n")
if bonificaçao.upper()== "s":
	nota=nota+((10*nota)/100)
else bonificaçao.upper()=="n" :
	  print(nota)
print(round(nota, 1))
-- ERROR:
File "XXXX", line 5
    else bonificaçao.upper()=="n" :
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:52:02) 
-- CODE:
nota=float(input("digite a nota do aluno:0-10"))
bonificaçao=input("s ou n")
if bonificaçao.upper()== "s":
	nota=nota+((10*nota)/100)
print(round(nota, 1))
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:52:34) 
-- CODE:
nota=float(input("digite a nota do aluno:0-10"))
bonificaçao=input("S ou N")
if bonificaçao.upper()== "s":
	nota=nota+((10*nota)/100)
print(round(nota, 1))
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 18:53:36) 
-- CODE:
nota=float(input("digite a nota do aluno:0-10"))
bonificaçao=input("S ou N")
if bonificaçao.upper()== "S":
	nota=nota+((10*nota)/100)
print(round(nota, 1))
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 18:53:45) 
-- CODE:
nota=float(input("digite a nota do aluno:0-10"))
bonificaçao=input("S ou N")
if bonificaçao.upper()== "S":
	nota=nota+((10*nota)/100)
print(round(nota, 1))
-- EXECUTION TIME:
0.21228
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
