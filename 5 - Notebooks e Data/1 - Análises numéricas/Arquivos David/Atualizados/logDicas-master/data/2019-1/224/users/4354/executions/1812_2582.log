== TEST (2019-06-09 00:26:20) 
-- CODE:
from math import *
x = float(input("digite o angulo: "))
k = int(input('digite o numero de termos: '))
soma = 0
b = 0
for i in range(k):
	soma = soma + (x**b)/factorial(b)
print(round(soma,8))
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 00:26:27) 
-- CODE:
from math import *
x = float(input("digite o angulo: "))
k = int(input('digite o numero de termos: '))
soma = 0
b = 0
for i in range(k):
	soma = soma + (x**b)/factorial(b)
print(round(soma,8))
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 00:26:31) 
-- CODE:
from math import *
x = float(input("digite o angulo: "))
k = int(input('digite o numero de termos: '))
soma = 0
b = 0
for i in range(k):
	soma = soma + (x**b)/factorial(b)
print(round(soma,8))
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 00:26:43) 
-- CODE:
from math import *
x = float(input("digite o angulo: "))
k = int(input('digite o numero de termos: '))
soma = 0
b = 0
for i in range(k):
	soma = soma + (x**b)/factorial(b)
	b = b + 2
print(round(soma,8))
-- OUTPUT:
3.76190476
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-09 00:26:51) 
-- CODE:
from math import *
x = float(input("digite o angulo: "))
k = int(input('digite o numero de termos: '))
soma = 0
b = 0
for i in range(k):
	soma = soma + (x**b)/factorial(b)
	b = b + 2
print(round(soma,8))
-- OUTPUT:
3.76190476
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-09 00:27:01) 
-- CODE:
from math import *
x = float(input("digite o angulo: "))
k = int(input('digite o numero de termos: '))
soma = 0
b = 0
for i in range(k):
	soma = soma + (x**b)/factorial(b)
	b = b + 2
print(round(soma,8))
-- EXECUTION TIME:
0.791434
-- TEST CASE 1:
---- input:
2
5
---- correct output:
3.76190476
---- user output:
3.76190476
-- TEST CASE 2:
---- input:
10
2
---- correct output:
51.0
---- user output:
51.0
-- TEST CASE 3:
---- input:
12
35
---- correct output:
81377.39571257
---- user output:
81377.39571257
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
