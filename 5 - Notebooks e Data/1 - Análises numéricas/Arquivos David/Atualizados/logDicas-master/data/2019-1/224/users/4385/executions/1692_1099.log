== TEST (2019-04-30 18:46:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:47:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.193251
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:48:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:48:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.157232
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:48:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.123352
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:48:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.139234
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:49:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:49:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")
-- OUTPUT:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:49:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("tipo de triangulo: escaleno")
		else:
			print("tipo de triangulo: isosceles")
	else:
		print("tipo de triangulo: invalido")
else:
	print("tipo de triangulo: invalido")
-- EXECUTION TIME:
0.13157
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
entrada 2.0 , 4.0 , 4.0
tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
entrada 3.3 , 4.4 , 5.5
tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
entrada 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.138488
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.130729
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.176499
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.248114
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.173192
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.35688
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entrada 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.177997
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1692/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:50:34) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entrada",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.28734
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entrada 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:51:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas:",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:51:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas:",a,",",b,",",c)
if(a>0 and b>0 and c>0):
	if(abs(b-c) < a < b or abs(a-c) < b < a + c or abs(a-b) < c < a+b):
		if(a==b==c):
			print("Tipo de triangulo: equilatero")
		elif(a!=b!=c):
			print("Tipo de triangulo: escaleno")
		else:
			print("Tipo de triangulo: isosceles")
	else:
		print("Tipo de triangulo: invalido")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.172391
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
