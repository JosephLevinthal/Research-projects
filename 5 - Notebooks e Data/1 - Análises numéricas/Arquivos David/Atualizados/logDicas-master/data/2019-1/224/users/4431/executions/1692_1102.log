== TEST (2019-04-24 01:28:12) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:52:00) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif:(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
	
print(round(v,2))	
		

-- ERROR:
File "XXXX", line 8
    elif:(h<=r):
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:52:08) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
	
print(round(v,2))	
		

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81.99
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:53:10) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print(round(v,2))	
		

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81987.19
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:53:34) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print(round(v,3))	
		

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81987.191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 01:53:50) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print(round(v,3))	
		

-- EXECUTION TIME:
0.2789
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
81987.191
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:53:59) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print(round(v,3))	
		

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
81987.191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:54:34) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print("Volume:",round(v,3),"litros")	
		

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:54:48) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print("Volume:",round(v,3),"litros")	
		

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 01:55:03) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print("Volume:",round(v,3),"litros")	
		

-- EXECUTION TIME:
0.154794
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:55:07) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000		
print("Volume:",round(v,3),"litros")	
		

-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:56:08) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000		
      print("Volume:",round(v,3),"litros")		
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
		v=v*1000		
      print("Volume:",round(v,3),"litros")			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		v=v*1000		  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 11
    print("Volume:",round(v,3),"litros")		
                                         ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:56:25) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000		
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
		v=v*1000		
      print("Volume:",round(v,3),"litros")			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		v=v*1000		  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 13
    v=v*1000		
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:56:50) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,2))
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
		v=v*1000		
      print("Volume:",round(v,3),"litros")			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		v=v*1000		  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 14
    v=v*1000		
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:57:18) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,2))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=(2/3*pi*(r**3))+(pi*(r**2)*(h-r))
		v=v*1000		
      print("Volume:",round(v,3),"litros")			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		v=v*1000		  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 15
    v=v*1000		
             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:58:28) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
		v=(round(v,3))
			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		v=v*1000		  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 15
    v=(round(v,3))
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:58:45) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
   v=(round(v,3))
			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		v=v*1000		  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 15
    v=(round(v,3))
                 ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:58:59) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000

			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		v=v*1000		  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 19
    v=v*1000		  
               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:59:14) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)  
      print("Volume:",round(v,3),"litros")	
		



-- ERROR:
File "XXXX", line 17
    print("Volume:",round(v,3),"litros")	
                                        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:59:38) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000			
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)  
   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 01:59:56) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
		print("Volume:",v,"litros")
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)  
   
		



-- ERROR:
File "XXXX", line 15
    print("Volume:",v,"litros")
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:00:25) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
		v=v*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
		v=(round(v,3))
		print("Volume:",v,"litros")
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)  
   
		



-- ERROR:
File "XXXX", line 15
    v=(round(v,3))
                 ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:01:03) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)  
   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:02:52) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H>0)or(h>0)or(r>0))or((H>h)or(H>(2*r))):
	print("Volume:",v,"litros")
   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 02:03:10) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H>0)or(h>0)or(r>0))or((H>h)or(H>(2*r))):
	print("Volume:",v,"litros")
   
		



-- EXECUTION TIME:
0.147203
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:03:15) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H>0)or(h>0)or(r>0))or((H>h)or(H>(2*r))):
	print("Volume:",v,"litros")
   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:04:41) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=round(((pi/3)*h**2*(3*r-h)*1000),3)
		
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:04:56) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=round(((pi/3)*h**2*(3*r-h)*1000),3)
		print("Volume")
		
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:05:17) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=round(((pi/3)*h**2*(3*r-h)*1000),3)
		print("Volume:",v,"litros")
		
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:06:31) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=round(((pi/3)*h**2*(3*r-h)*1000),3)
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=round((((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000),3)
elif(h<=H):
	   v=round(((4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)*1000),3)
		print("Volume:",v,"litros")


   
		



-- ERROR:
File "XXXX", line 15
    print("Volume:",v,"litros")
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:06:48) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=round(((pi/3)*h**2*(3*r-h)*1000),3)
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=round((((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000),3)
elif(h<=H):
	   v=round(((4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)*1000),3)
		
		print("Volume:",v,"litros")


   
		



-- ERROR:
File "XXXX", line 16
    print("Volume:",v,"litros")
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:06:59) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=round(((pi/3)*h**2*(3*r-h)*1000),3)
		print("Volume:",v,"litros")
elif(h<H-r):
	   v=round((((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000),3)
elif(h<=H):
	   v=round(((4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)*1000),3)
	    print("Volume:",v,"litros")


   
		



-- ERROR:
File "XXXX", line 15
    print("Volume:",v,"litros")
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:09:39) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)*1000
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)*1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:10:53) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h))*1000
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h))*1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:11:13) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:11:52) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
c=(4/3)*pi*(r**3)
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    c=(4/3)*pi*(r**3)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:12:11) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
c=4/3
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    c=4/3
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:12:17) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
c=4
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    c=4
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:12:24) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
d=4
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    d=4
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:12:31) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
a=round(a,3)
b=round(b,3)
c=round(c,3)	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    a=round(a,3)
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:12:45) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 8
    if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:12:55) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
	
	
	
	
	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 13
    if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:12:55) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)*1000
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r))*1000
	
	
	
	
	
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
	 print("Volume:",a,"litros")
elif(h<H-r):
	  
elif(h<=H):

		



-- ERROR:
File "XXXX", line 13
    if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
                                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:13:33) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H>0)or(h>0)or(r>0))or((H>h)or(H>(2*r))):
	print("Volume:",v,)
   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:14:04) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
	v=0
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H>0)or(h>0)or(r>0))or((H>h)or(H>(2*r))):
	print("Volume:",v,)
   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:15:10) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
	v=0
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
else:	
	print("Volume:",v,)
   
		



-- ERROR:
File "XXXX", line 19
    else:	
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:15:21) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
	v=0
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	v=0
else:	
	print("Volume:",v,)
   
		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 02:15:32) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
	v=0
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)

v=v*1000
v=round(v,3)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	v=0
else:	
	print("Volume:",v,)
   
		



-- EXECUTION TIME:
0.188529
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:15:45) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		v=(pi/3)*h**2*(3*r-h)
elif(h<H-r):
	   v=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   v=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:16:08) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
elif(h<H-r):
	   b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:16:19) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
		print("Volume")
elif(h<H-r):
	   b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:16:39) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	   b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
elif(h<=H):
	   c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:16:49) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	   b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
		b=b*1000
elif(h<=H):
	   c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 14
    b=b*1000
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:18:25) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	   b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
       b=b*1000	
elif(h<=H):
	   c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 14
    b=b*1000	
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:18:33) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	   b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
      b=b*1000	
elif(h<=H):
	   c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 14
    b=b*1000	
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:18:55) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	    b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
       b=b*1000	
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 14
    b=b*1000	
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:19:30) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=(pi/3)*h**2*(3*r-h)
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	    b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
       b=b*1000	
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 14
    b=b*1000	
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:20:02) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	    b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
       b=b*1000	
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 14
    b=b*1000	
            ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:20:19) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
 b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	   
       b=b*1000	
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 7
    b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:20:27) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
	   
       b=b*1000	
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:21:02) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
       b=b*1000	
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- ERROR:
File "XXXX", line 15
    print("Volume:",(round(b,3)),"litros")
                                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:21:12) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81.987 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:21:23) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:21:38) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
	      c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
		   c=c*1000


		



-- ERROR:
File "XXXX", line 17
    c=c*1000
           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:22:00) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
	   
		   c=c*1000


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:22:26) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
		   c=c*1000
         print("Volume:",(round(c,3)),"litros")		


		



-- ERROR:
File "XXXX", line 18
    print("Volume:",(round(c,3)),"litros")		
                                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:22:36) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
		   c=c*1000
        print("Volume:",(round(c,3)),"litros")		


		



-- ERROR:
File "XXXX", line 18
    print("Volume:",(round(c,3)),"litros")		
                                           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:22:45) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
       print("Volume:",(round(c,3)),"litros")		


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:22:57) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=(4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h)*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
       print("Volume:",(round(c,3)),"litros")		


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 02:23:53) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=((4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h))*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
       print("Volume:",(round(c,3)),"litros")		


		



-- OUTPUT:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 02:24:03) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=((4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h))*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
       print("Volume:",(round(c,3)),"litros")		


		



-- EXECUTION TIME:
0.183183
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-24 12:14:02) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=((4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h))*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
       print("Volume:",(round(c,3)),"litros")		


		



-- EXECUTION TIME:
0.208246
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-26 01:22:02) 
-- CODE:
from math import*
H=float(input("Digite a altura total do tanque: "))
h=float(input("Digite o nivel de combustivel no tanque: "))
r=float(input("Digite o raio dos bojos semiesfericos inferior e superior: "))
print("Entradas:",H,",",h,",",r)
a=(pi/3)*h**2*(3*r-h)
b=((2/3*pi*(r**3))+(pi*(r**2)*(h-r)))*1000
c=((4/3*(pi*(r**3)))+(pi*(r**2)*(H-2*r))-(1/3)*pi*(H-h)**2*(3*r-H+h))*1000
if((H<0)or(h<0)or(r<0))or((H<h)or(H<(2*r))):
	print("Entradas invalidas")
elif(h<=r):
		a=a*1000
		print("Volume:",(round(a,3)),"litros")
elif(h<H-r):
		 print("Volume:",(round(b,3)),"litros")
elif(h<=H):
       print("Volume:",(round(c,3)),"litros")		


		



-- EXECUTION TIME:
0.156235
-- TEST CASE 1:
---- input:
11.3
5.7
2.3
---- correct output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
---- user output:
Entradas: 11.3 , 5.7 , 2.3
Volume: 81987.191 litros
-- TEST CASE 2:
---- input:
8.5
9.5
2.2
---- correct output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
---- user output:
Entradas: 8.5 , 9.5 , 2.2
Entradas invalidas
-- TEST CASE 3:
---- input:
8
4
6
---- correct output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
---- user output:
Entradas: 8.0 , 4.0 , 6.0
Entradas invalidas
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
