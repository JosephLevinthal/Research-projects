== TEST (2019-04-30 18:34:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (Lado 1 or Lado 2 or  Lado 3):
	# Testa se medidas correspondem aas de um triangulo
	if (Lado 1 + Lado 2 + Lado 3):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (Lado 1 or Lado 2 or  Lado 3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:34:12) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (Lado 1 or Lado 2 or  Lado 3):
	# Testa se medidas correspondem aas de um triangulo
	if (Lado 1 + Lado 2 + Lado 3):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (Lado 1 or Lado 2 or  Lado 3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:34:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or  c):
	# Testa se medidas correspondem aas de um triangulo
	if (Lado 1 + Lado 2 + Lado 3):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    if (Lado 1 + Lado 2 + Lado 3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:34:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or  c):
	# Testa se medidas correspondem aas de um triangulo
	if (Lado 1 + Lado 2 + Lado 3):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 15
    if (Lado 1 + Lado 2 + Lado 3):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:34:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or  c):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:35:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or  c):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:35:02) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or  c):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:35:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or  c):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:35:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or  c):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:36:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a or b or c):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:38:31) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:38:43) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.21672
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:39:34) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		
		print("Area: invalida")
else:
	print("Area: invalida")

-- OUTPUT:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:42:06) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		
		print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.2156
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: -0.0
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: invalida
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:42:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
   else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:42:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)
	else:
		print("Area: invalida")
   else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:42:43) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:42:44) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:42:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
  else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:42:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
  else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:42:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:43:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
  else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:43:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
  else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:03) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:04) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:04) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:16) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:44:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:17) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:18) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:45:39) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.135094
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:45:40) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.144123
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:45:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.155277
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:45:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.121856
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:45:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.137996
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1692/1079/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:45:41) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.184991
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1692/1079/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:45:42) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida")
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.231635
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:45:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:46:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:46:05) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
 else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:50:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
 else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:50:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
 else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:50:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:50:59) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:51:00) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida")
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:51:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
	print("Area: invalida")
   else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:51:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
	print("Area: invalida")
   else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:51:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
	print("Area: invalida")
   else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:51:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
	print("Area: invalida")
   else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:51:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
else:
	print("Area: invalida")
   else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 22
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:58:32) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c:"))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:58:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:58:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 18:59:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:00:18) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a:"))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:00:37) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:00:38) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:04:27) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	rint("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:04:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	rint("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:04:32) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:04:33) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:04:45) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:04:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
	   print("Area: invalida") 
else:
	 print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:05:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:05:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:05:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:05:25) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (a + b+ c):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:07:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:07:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:07:46) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:07:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:07:47) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:07:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:07:48) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:20) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:21) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.157931
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:22) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.213344
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.161217
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.1538
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:23) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.12415
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.161476
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1692/1079/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.213096
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.200106
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.392676
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:08:24) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.409999
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:26) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a<0 or b<0 or c<0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:53) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:54) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:08:55) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 or b>0 or c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:06) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:07) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:09:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.252909
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:09:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.190523
-- ERROR:
  File "/home/codebench/codes/1692/1079/main.py", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:14) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:15) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:09:28) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
 if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 13
    if (a>0 and b>0 and c>0):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:07) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:08) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:09) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:10) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("a: "))
b = float(input ("b: "))
c = float(input ("c: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:35) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:36) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:49) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:50) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:51) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:52) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2 "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:56) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:10:57) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
   else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-30 19:11:19) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
  	else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- ERROR:
File "XXXX", line 20
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 19:12:01) 
-- CODE:
# Ao testar sua solução, não se limite ao caso de exemplo.

from math import *

# Leitura dos lados do triangulo a, b, and c
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

# Testa se pelo menos uma das entradas eh negativa 
if (a>0 and b>0 and c>0):
	# Testa se medidas correspondem aas de um triangulo
	if (abs(b-c)< a < b or abs(a-c)< b < a + c or abs(a-b) < c < a+b):
		s = (a + b + c) / 2.0
		area = sqrt(s * (s-a) * (s-b) * (s-c))
		area = round(area, 3)
		print("Area:", area)      
	else:
		print("Area: invalida") 
else:
	print("Area: invalida")

-- EXECUTION TIME:
0.136655
-- TEST CASE 1:
---- input:
-11.0
22.0
33.0
---- correct output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: -11.0 , 22.0 , 33.0
Area: invalida
-- TEST CASE 2:
---- input:
1.61
2.40
2.89
---- correct output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
---- user output:
Entradas: 1.61 , 2.4 , 2.89
Area: 1.932
-- TEST CASE 3:
---- input:
11.0
22.0
33.0
---- correct output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
---- user output:
Entradas: 11.0 , 22.0 , 33.0
Area: invalida
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
