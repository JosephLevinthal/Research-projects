== SUBMITION (2019-06-30 23:15:09) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == 'A':
        xtab = xtab-1
    # Move personagem para DIREITA
   elif x == 'D':
        xtab = xtab+1
    # Move personagem para CIMA
   elif x == 'W':
        ytab = ytab-1
    # Move personagem para BAIXO
   elif x == 'S':
        ytab = ytab+1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab=tx
		ytab=ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
0.914419
-- ERROR:
  File "/home/codebench/codes/1850/1280/main.py", line 24
    if x == 'A':
               ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 23:21:35) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == 'A':
        xtab = xtab-1
    # Move personagem para DIREITA
   elif x == 'D':
        xtab = xtab+1
    # Move personagem para CIMA
   elif x == 'W':
        ytab = ytab-1
    # Move personagem para BAIXO
   elif x == 'S':
        ytab = ytab+1
	if(xtab > 0 -1):
		xtab = xtab - 1
	if(ytab > 1 -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab=tx
		ytab=ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
0.7253
-- ERROR:
  File "/home/codebench/codes/1850/1280/main.py", line 24
    if x == 'A':
               ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:21:38) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == 'A':
        xtab = xtab-1
    # Move personagem para DIREITA
   elif x == 'D':
        xtab = xtab+1
    # Move personagem para CIMA
   elif x == 'W':
        ytab = ytab-1
    # Move personagem para BAIXO
   elif x == 'S':
        ytab = ytab+1
	if(xtab > 0 -1):
		xtab = xtab - 1
	if(ytab > 1 -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab=tx
		ytab=ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 24
    if x == 'A':
               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:22:34) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == 'A':
        xtab = xtab-1
    # Move personagem para DIREITA
   elif x == 'D':
        xtab = xtab+1
    # Move personagem para CIMA
   elif x == 'W':
        ytab = ytab-1
    # Move personagem para BAIXO
   elif x == 'S':
        ytab = ytab+1
	if(xtab > 0 -1):
		xtab = xtab - 1
	if(ytab > 1 -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab=tx
		ytab=ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 24
    if x == 'A':
               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:23:16) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == 'A':
		xtab = xtab-1
    # Move personagem para DIREITA
   elif x == 'D':
		xtab = xtab+1
    # Move personagem para CIMA
   elif x == 'W':
		ytab = ytab-1
    # Move personagem para BAIXO
   elif x == 'S':
		ytab = ytab+1
	if(xtab > 0 -1):
		xtab = xtab - 1
	if(ytab > 1 -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab=tx
		ytab=ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 24
    if x == 'A':
               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:24:01) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == 'A':
		xtab = xtab-1
    # Move personagem para DIREITA
   elif x == 'D':
		xtab = xtab+1
    # Move personagem para CIMA
   elif x == 'W':
		ytab = ytab-1
    # Move personagem para BAIXO
   elif x == 'S':
		ytab = ytab+1
	if(xtab > 0 -1):
		xtab = xtab - 1
	if(ytab > 1 -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab=tx
		ytab=ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 24
    if x == 'A':
               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:24:37) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == "A":
		xtab = xtab-1
    # Move personagem para DIREITA
   elif x == 'D':
		xtab = xtab+1
    # Move personagem para CIMA
   elif x == 'W':
		ytab = ytab-1
    # Move personagem para BAIXO
   elif x == 'S':
		ytab = ytab+1
	if(xtab > 0 -1):
		xtab = xtab - 1
	if(ytab > 1 -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab=tx
		ytab=ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 24
    if x == "A":
               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:36:26) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
   if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
   elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
   elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
   elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 24
    if x == 'A':
               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:37:34) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
   elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
   elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
   elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
   if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
   elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 27
    elif x == 'D':
                 ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:38:35) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
	if tabuleiro[ytab,xtab] == 11:
        moeda = moeda+1
        # Apaga moeda do tabuleiro
        tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
        life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
File "XXXX", line 47
    moeda = moeda+1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:39:10) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
	if tabuleiro[ytab,xtab] == 11:
		moeda = moeda+1
        # Apaga moeda do tabuleiro
		tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
		life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 23:39:16) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
	if tabuleiro[ytab,xtab] == 11:
		moeda = moeda+1
        # Apaga moeda do tabuleiro
		tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
		life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
1.03551
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1850/1280/main.py", line 46, in <module>
    if tabuleiro[ytab,xtab] == 11:
IndexError: index 11 is out of bounds for axis 0 with size 11

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:39:48) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
	if tabuleiro[ytab,xtab] == 11:
		moeda = moeda+1
        # Apaga moeda do tabuleiro
		tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
		life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:42:10) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

    # Trata evento
    # Moeda
	if tabuleiro[ytab,xtab] == 11:
		moeda = moeda + 1
        # Apaga moeda do tabuleiro
		tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
		life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 23:44:25) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

		
	if tabuleiro[ytab,xtab] == 11:
		moeda = moeda + 1
        # Apaga moeda do tabuleiro
		tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
		life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
1.27033
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1850/1280/main.py", line 45, in <module>
    if tabuleiro[ytab,xtab] == 11:
IndexError: index 11 is out of bounds for axis 0 with size 11

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-30 23:44:32) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab > 0 ):
		ytab = ytab + 1

		
	if tabuleiro[ytab,xtab] == 11:
		moeda = moeda + 1
        # Apaga moeda do tabuleiro
		tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
		life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-30 23:46:10) 
-- CODE:
from numpy import *

# Leitura do tabuleiro
tabuleiro = array(eval(input("Tabuleiro: ")))

# Sequencia de movimentos do personagem
mov = input("Movimentos: ")
l=tabuleiro.shape[0]
c=tabuleiro.shape[1]

# Posicao inicial do personagem
xtab = 0
ytab = 0

# Contadores de atributos do personagem
moeda = 0
life = 100

# Analise da jogada
for x in mov:
	tx=xtab
	ty=ytab
    # Move personagem para ESQUERDA
	if x == 'A':
		xtab = xtab - 1
    # Move personagem para DIREITA
	elif x == 'D':
		xtab = xtab + 1
    # Move personagem para CIMA
	elif x == 'W':
		ytab = ytab - 1
    # Move personagem para BAIXO
	elif x == 'S':
		ytab = ytab + 1
	if(xtab > c -1):
		xtab = xtab - 1
	if(ytab > l -1):
		ytab = ytab - 1
	if(xtab < 0 ):
		xtab = xtab + 1
	if(ytab < 0 ):
		ytab = ytab + 1

		
	if tabuleiro[ytab,xtab] == 11:
		moeda = moeda + 1
        # Apaga moeda do tabuleiro
		tabuleiro[ytab,xtab] = 0
    # Zumbi
	elif tabuleiro[ytab,xtab] == 22:
		life = life-5
	elif tabuleiro[ytab,xtab] == 33:
		xtab = tx
		ytab = ty

# Imprime saidas
print("posicao x: ", xtab)
print("posicao y: ", ytab)
print("moedas: ", moeda)
print("life: ", life)
-- EXECUTION TIME:
1.2382
-- TEST CASE 1:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
DDDDDWWWWSSSSDDDWSWDSDWDDDDDDDDDSSSSSSSSSSSDDDDWSADSWASADSWASD
---- correct output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
---- user output:
posicao x:  11
posicao y:  10
moedas:  13
life:  75
-- TEST CASE 2:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
SAWSDADDDDDDDDDDSSSSSSSSSSSDDDDDDDWWWWWWWWAAAAAAAAAAWSDAASDSWADSAWSWD
---- correct output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
---- user output:
posicao x:  5
posicao y:  3
moedas:  20
life:  75
-- TEST CASE 3:
---- input:
[[0,11,0,33,0,33,22,0,11,0,11,0,11],[11,0,22,11,0,11,33,0,11,0,0,0,22],[11,22,22,33,0,11,11,0,22,0,11,11,22],[22,33,0,11,0,11,11,0,22,0,0,0,0],[22,11,11,11,0,11,22,0,11,0,22,0,22],[11,11,22,33,0,0,11,0,22,0,0,22,11],[0,11,0,33,0,11,22,0,22,0,22,0,11],[0,11,33,11,0,11,22,0,11,0,0,11,11],[11,11,33,11,0,0,11,0,22,0,22,0,11],[0,11,22,11,0,11,22,0,22,0,0,0,11],[0,11,22,11,0,0,11,0,22,0,11,0,11]]
AWSWDSSDSDSDSDSAWAWAWASDSDSSASASASWDWDWDWDWASWDAWSWDAWSDWSADSWASDWSAWWDSADWSAWSWDSAWSW
---- correct output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
---- user output:
posicao x:  6
posicao y:  2
moedas:  13
life:  55
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
