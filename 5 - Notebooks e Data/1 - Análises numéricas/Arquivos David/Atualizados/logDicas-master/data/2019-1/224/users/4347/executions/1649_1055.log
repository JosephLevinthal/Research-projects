== SUBMITION (2019-04-12 17:43:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
a2 = radians(a)
R = (vi**2)*(sin(2*(a2)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.172275
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:01:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = radians(float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
r = ((v**2)*sin(2*a))/g
if (abs(r-d) <= 0.1 ):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.15531
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 7
    D = float(input())
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:02:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians(float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(R - D) <= 0.1):
	print("sim")
else:
	print("nao")

-- EXECUTION TIME:
0.136715
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 7
    D = float(input())
    ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:05:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians(float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- ERROR:
File "XXXX", line 7
    D = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:06:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians(float(input("insira o angulo do vetor:"))
d = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- ERROR:
File "XXXX", line 7
    d = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:06:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = (float(input("insira o angulo do vetor:"))
d = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- ERROR:
File "XXXX", line 7
    d = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:06:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = (float(input("insira o angulo do vetor:"))
h = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- ERROR:
File "XXXX", line 7
    h = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:06:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = (float(input("insira o angulo do vetor:"))
D = (float(input("insira a distancia horizontal")))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- ERROR:
File "XXXX", line 7
    D = (float(input()))
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:06:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- OUTPUT:
não
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:07:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians(float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- ERROR:
File "XXXX", line 7
    D = float(input())
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:07:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:09:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
	print("não")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:09:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
print("não")

-- ERROR:
File "XXXX", line 13
    print("não")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:09:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
 print("não")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:09:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
 print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 17:09:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
 print("nao")

-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 17:09:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
 print("nao")

-- EXECUTION TIME:
0.20496
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
