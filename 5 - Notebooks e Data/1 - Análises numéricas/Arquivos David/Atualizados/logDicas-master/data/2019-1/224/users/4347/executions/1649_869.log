== TEST (2019-04-10 19:11:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preço = float(input("valor de compra:")) #float porque nossa saída é um numero com ".00" tipo 500.0

if (preço >= 200): # se for maior ou igual ocorrerá desconto, macho.
	preço = preço - (preço*5/100) # lembrar que o desconto de um número pode ser escrito de varias formas (todas funcionam).
else:
	preço = preço #se não tem desconto é o memú preço near
print (round (preço , 2)) #use o "round" para arredondar o bagulho tipo se ficar 199.99 ele não (sei )

-- OUTPUT:
190.09
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 17:37:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preço = float(input("valor de compra:")) #float porque nossa saída é um numero com ".00" tipo 500.0

if (preço >= 200): # se for maior ou igual ocorrerá desconto, macho.
	preço = preço - (preço*5/100) # lembrar que o desconto de um número pode ser escrito de varias formas (todas funcionam).
else:
	preço = preço #se não tem desconto é o memú preço near
print (round (preço , 2)) #use o "round" para arredondar o bagulho tipo se ficar 199.99 ele não (sei )

-- EXECUTION TIME:
0.188971
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-12 17:38:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
preço = float(input("valor de compra:"))

if (preço >= 200):
	preço = preço - (preço*5/100) 
else:
	preço = preço
print (round (preço , 2)) 

-- EXECUTION TIME:
0.167112
-- TEST CASE 1:
---- input:
200.09
---- correct output:
190.09
---- user output:
190.09
-- TEST CASE 2:
---- input:
200.53
---- correct output:
190.5
---- user output:
190.5
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
