== TEST (2019-03-18 22:44:35) 
-- CODE:
frase = ""
print(.upper("Ada Lovelace foi a primeira programadora da historia"))
-- ERROR:
File "XXXX", line 2
    print(.upper("Ada Lovelace foi a primeira programadora da historia"))
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-18 22:44:57) 
-- CODE:
frase = "main.py"
print(.upper("Ada Lovelace foi a primeira programadora da historia"))
-- ERROR:
File "XXXX", line 2
    print(.upper("Ada Lovelace foi a primeira programadora da historia"))
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-18 22:47:13) 
-- CODE:
frase = "main.py"
print("main.py".upper("Ada Lovelace foi a primeira programadora da historia"))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    print("main.py".upper("Ada Lovelace foi a primeira programadora da historia"))
TypeError: upper() takes no arguments (1 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 18:15:07) 
-- CODE:
frase = "main.py"
print("main.py".upper(Ada Lovelace foi a primeira programadora da historia"))
-- ERROR:
File "XXXX", line 2
    print("main.py".upper(Ada Lovelace foi a primeira programadora da historia"))
                                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 18:15:39) 
-- CODE:
frase = "main.py"
"main.py"print(.upper(Ada Lovelace foi a primeira programadora da historia"))
-- ERROR:
File "XXXX", line 2
    "main.py"print(.upper(Ada Lovelace foi a primeira programadora da historia"))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 18:18:02) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia"
"main.py"print("ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA")
-- ERROR:
File "XXXX", line 2
    "main.py"print("ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA")
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 18:18:18) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia"
print("ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA")
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-19 18:18:24) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia"
print("ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA")
-- EXECUTION TIME:
0.220598
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-19 18:18:35) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia"
print("ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA")
-- EXECUTION TIME:
0.215466
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-19 18:18:56) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia"
print("ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA")
-- OUTPUT:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-19 18:19:10) 
-- CODE:
frase = "Ada Lovelace foi a primeira programadora da historia."
print("ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.")
-- EXECUTION TIME:
0.151307
-- TEST CASE 1:
---- input:
nonono
---- correct output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
---- user output:
ADA LOVELACE FOI A PRIMEIRA PROGRAMADORA DA HISTORIA.
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
