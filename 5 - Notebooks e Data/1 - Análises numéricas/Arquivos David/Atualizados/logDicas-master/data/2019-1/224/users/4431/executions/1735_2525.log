== TEST (2019-05-07 23:13:46) 
-- CODE:
x=float(input("Digite um numero: "))
j=0
g=0
while(j<x):
	if(x%j==0):
		print(j)
		j=j+1
		g=g+1
	else:
		j=j+1

if(g==1):
	print("1 divisor")
else:
	print(g,"divisores")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(x%j==0):
ZeroDivisionError: float modulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 23:14:14) 
-- CODE:
x=float(input("Digite um numero: "))
j=0
g=1
while(j<=x):
	if(x%j==0):
		print(j)
		j=j+1
		g=g+1
	else:
		j=j+1

if(g==1):
	print("1 divisor")
else:
	print(g,"divisores")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    if(x%j==0):
ZeroDivisionError: float modulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-07 23:14:30) 
-- CODE:
x=float(input("Digite um numero: "))
j=1
g=0
while(j<=x):
	if(x%j==0):
		print(j)
		j=j+1
		g=g+1
	else:
		j=j+1

if(g==1):
	print("1 divisor")
else:
	print(g,"divisores")
-- OUTPUT:
1
2
3
4
6
12
6 divisores
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-07 23:14:40) 
-- CODE:
x=float(input("Digite um numero: "))
j=1
g=0
while(j<=x):
	if(x%j==0):
		print(j)
		j=j+1
		g=g+1
	else:
		j=j+1

if(g==1):
	print("1 divisor")
else:
	print(g,"divisores")
-- EXECUTION TIME:
0.191674
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-10 10:34:18) 
-- CODE:
x=float(input("Digite um numero: "))
j=1
g=0
while(j<=x):
	if(x%j==0):
		print(j)
		j=j+1
		g=g+1
	else:
		j=j+1

if(g==1):
	print("1 divisor")
else:
	print(g,"divisores")
-- EXECUTION TIME:
0.173366
-- TEST CASE 1:
---- input:
12
---- correct output:
1
2
3
4
6
12
6 divisores
---- user output:
1
2
3
4
6
12
6 divisores
-- TEST CASE 2:
---- input:
49
---- correct output:
1
7
49
3 divisores
---- user output:
1
7
49
3 divisores
-- TEST CASE 3:
---- input:
30
---- correct output:
1
2
3
5
6
10
15
30
8 divisores
---- user output:
1
2
3
5
6
10
15
30
8 divisores
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
