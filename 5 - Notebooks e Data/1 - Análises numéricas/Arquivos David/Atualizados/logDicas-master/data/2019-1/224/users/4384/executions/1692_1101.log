== TEST (2019-05-01 00:23:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
casa=lobo
print("casa")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    casa=lobo
NameError: name 'lobo' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:24:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
casa="lobo"
print("casa")
-- OUTPUT:
casa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:24:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
casa="lobo"
print("casa")
-- OUTPUT:
casa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:24:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
casa=("lobo")
print("casa")
-- OUTPUT:
casa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 00:24:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
casa=("lobo")
print("casa")
-- EXECUTION TIME:
0.17835
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
casa
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
casa
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:25:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
casa="lobo"
print("casa")
-- OUTPUT:
casa
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:46:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
casa="lobo"
print(casa)
-- OUTPUT:
lobo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-02 16:53:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
a=float(input("valor da luz:   "))
b=input(" R, I ou C:    ")
print("Entradas: ",a," kWh e tipo ",b)
if((b=="I")or(b=="R")or(b=="C"))and(a>=0):
	if(b=="R"):
		if(a>500):
			c=a*0.65
			print("Valor total: R$ ",round(c,2))
		else:
		   c=a*0.44
		   print("Valor total: R$ ",round(c,2))
	elif(b=="C"):
		if(a>1000):
			c=a*0.60
			print("Valor total: R$ ",round(c,2))
		else:
		   c=a*0.55
		   print("Valor total: R$ ",round(c,2))
	elif(b=="I"):
	   if(a>5000):
		   c=a*0.60
		   print("Valor total: R$ ",round(c,2))
	   else:
		   c=a*0.55
		   print("Valor total: R$ ",round(c,2))
else:
	print("Dados invalidos")
-- EXECUTION TIME:
0.105052
-- TEST CASE 1:
---- input:
-56
I
---- correct output:
Entradas: -56.0 kWh e tipo I
Dados invalidos
---- user output:
Entradas:  -56.0  kWh e tipo  I
Dados invalidos
-- TEST CASE 2:
---- input:
955.5
R
---- correct output:
Entradas: 955.5 kWh e tipo R
Valor total: R$ 621.08
---- user output:
Entradas:  955.5  kWh e tipo  R
Valor total: R$  621.08
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
