== TEST (2019-07-02 00:20:01) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
	if ind==max(vet):
		print(ind+1)
	ind=ind+1
-- ERROR:
File "XXXX", line 11
    if ind==max(vet):
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:20:15) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
if ind==max(vet):
	print(ind+1)
ind=ind+1
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:20:54) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
if ind==max(vet):
	print(ind+1)
ind=ind+1
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:21:17) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
if ind==max(vet):
	print(ind+1)
	ind=ind+1
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:22:21) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
if (ind==max(vet)):
print(ind+1)
ind=ind+1
-- ERROR:
File "XXXX", line 12
    print(ind+1)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:22:27) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
if (ind==max(vet)):
print(ind+1)
ind=ind+1
-- ERROR:
File "XXXX", line 12
    print(ind+1)
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:22:34) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
if (ind==max(vet)):
	print(ind+1)
ind=ind+1
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:23:42) 
-- CODE:
from numpy import *
from numpy.linalg import *

mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
ind=0
if (ind!=max(vet)):
	ind=ind+1
else:
	print(ind+1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-02 00:57:55) 
-- CODE:
from numpy import *
from numpy.linalg import *
mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
for m in range(size(vet)):
	if (vet[m]==max(vet)):
		print(m+1)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-02 00:58:12) 
-- CODE:
from numpy import *
from numpy.linalg import *
mat=array(eval(input("digite: ")))
x=shape(mat)[1]
vet=zeros(x, dtype=int)
for j in range(x):
	func=sum(mat[:,j])
	vet[j]=func
for m in range(size(vet)):
	if (vet[m]==max(vet)):
		print(m+1)
-- EXECUTION TIME:
1.07734
-- TEST CASE 1:
---- input:
[[4,4,4,4,4,4,4],[3,3,3,3,3,3,3],[6,6,6,6,6,6,6],[1,2,1,2,1,2,7],[9,8,9,3,4,6,8],[5,6,5,6,5,6,8],[2,1,2,3,6,5,2]]
---- correct output:
7
---- user output:
7
-- TEST CASE 2:
---- input:
[[9,8,8,5,3,2,4],[9,9,2,4,5,6,7],[7,8,6,4,3,5,6],[9,9,8,8,8,8,8],[6,6,1,2,1,2,1],[5,6,4,3,4,3,2],[5,9,3,4,5,6,8],[8,7,8,5,6,5,2],[4,9,5,6,8,7,2]]
---- correct output:
2
---- user output:
2
-- TEST CASE 3:
---- input:
[[1,1,7,9,9,9,9],[1,2,7,5,5,5,5],[2,3,7,4,4,4,4],[2,4,7,6,6,6,6],[2,6,6,3,4,3,2],[6,5,6,4,5,6,8],[8,7,7,5,6,5,2],[7,8,9,6,8,7,2]]
---- correct output:
3
---- user output:
3
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
