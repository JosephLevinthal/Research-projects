== TEST (2019-04-24 13:23:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )
-- OUTPUT:
2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:29:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

if(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
elif(a != b and b != c):
	print("escaleno")
else:
	print("invalido")
	
print(a, ",", b, ",", c )
print("Tipo de triangulo")
-- OUTPUT:
equilatero
2.0 , 4.0 , 4.0
Tipo de triangulo
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:33:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
if(a < b + c or b < a + c or c < a + b):
	print("Tipo de triangulo: ", )
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
elif(a != b and b != c):
	print("escaleno")
else:
	print("invalido")
	
print(a, ",", b, ",", c )
print("Tipo de triangulo: ", )
-- OUTPUT:
Tipo de triangulo: 
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:37:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))
if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
elif(a != b and b != c):
	print("escaleno")
else:
	print("invalido")
	
print(a, ",", b, ",", c )
print("Tipo de triangulo: ", )
-- OUTPUT:
Tipo de triangulo: 
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:37:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
elif(a != b and b != c):
	print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:38:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-24 13:39:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:26:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
elif(a != b or b != c or a != c):
	print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:27:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
elif(a != b and b != c and a != c):
	print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 00:29:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b or b == c):
	print("equilatero")
elif(a == b or b == c and c != a):
	print("isosceles")
elif(a != b and b != c and a != c):
	print("escaleno")
else:
	print("invalido")
	


-- EXECUTION TIME:
0.170525
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
2.0 , 4.0 , 4.0
Tipo de triangulo:
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
3.3 , 4.4 , 5.5
Tipo de triangulo:
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1.0 , 2.0 , 7.0
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:34:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b and b == c):
	print("equilatero")
elif(a == b or b == c or c == a):
	print("isosceles")
elif(a != b and b != c and a != c):
	print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:36:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
elif(a == b and b == c):
	print("equilatero")
elif(a == b or b == c or c == a):
	print("isosceles")
elif(a != b or b != c or a != c):
	print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo:
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:40:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 00:40:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- EXECUTION TIME:
0.12913
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
3.3 , 4.4 , 5.5
Tipo de triangulo: 
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1.0 , 2.0 , 7.0
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:40:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:40:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:40:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:41:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:41:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print(a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:43:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print("Entradas: "a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- ERROR:
File "XXXX", line 7
    print("Entradas: "a, ",", b, ",", c )
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:43:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print("Entradas: ", a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:43:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print("Entradas:", a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("invalido")
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-01 00:44:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print("Entradas:", a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-01 00:44:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("Digite um numero: "))
b = float(input("Digite um numero: "))
c = float(input("Digite um numero: "))

print("Entradas:", a, ",", b, ",", c )

if(a < b + c and b < a + c and c < a + b):
	print("Tipo de triangulo: ")
	if(a == b and b == c):
		print("equilatero")
	elif(a == b or b == c or c == a):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("Tipo de triangulo:", "invalido")
	


-- EXECUTION TIME:
0.165888
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: 
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: 
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
