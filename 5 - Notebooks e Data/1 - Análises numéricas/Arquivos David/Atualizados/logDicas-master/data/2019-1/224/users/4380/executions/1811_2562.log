== TEST (2019-06-06 18:32:48) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > i):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 1):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:33:21) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 1):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 18:33:38) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 1):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.08313
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
11
0
11
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
12
1
13
1
16
17
0
10
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
10
8
18
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:33:59) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 1):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:34:44) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:35:53) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:42:03) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:43:26) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:43:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:43:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
		vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:44:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:44:38) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:45:13) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))
	
	

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:45:28) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:45:49) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:46:10) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(input("prox vet"))

-- ERROR:
File "XXXX", line 26
    vet = array(input())
                       ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:46:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("prox vet"))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input())
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:46:51) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

   # Leitura do proximo vetor
	vet = array(eval(input("prox vet")))

-- ERROR:
File "XXXX", line 26
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:05) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = array(eval(input("prox vet")))

-- ERROR:
File "XXXX", line 25
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:06) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = array(eval(input("prox vet")))

-- ERROR:
File "XXXX", line 25
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:22) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = eval(input("prox vet"))

-- ERROR:
File "XXXX", line 25
    vet = eval(input())
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:24) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = eval(input("prox vet"))

-- ERROR:
File "XXXX", line 25
    vet = eval(input())
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:34) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = eval(input())

-- ERROR:
File "XXXX", line 25
    vet = eval(input())
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:36) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = eval(input())

-- ERROR:
File "XXXX", line 25
    vet = eval(input())
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = eval(input())
-- ERROR:
File "XXXX", line 25
    vet = eval(input())
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:47:41) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = eval(input())
-- ERROR:
File "XXXX", line 25
    vet = eval(input())
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:48:01) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 25
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:48:04) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))

	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:48:30) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
	
-- ERROR:
File "XXXX", line 24
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:49:46) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
	
-- ERROR:
File "XXXX", line 24
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 18:49:54) 
-- CODE:
from numpy import*

# Leitura do primeiro vetor
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
# Verifica se o programa vai terminar
while (size(vet) > elemento):
   # Zera contador de elementos pares
   npar = 0

   # Conta quantidade de elementos pares
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1

   # No. de elementos pares
   print(npar)

   # No. de elementos impares
   print(size(vet)-npar)

   # No. total de elementos
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
	
-- EXECUTION TIME:
0.753815
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 24
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:13:17) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > elemento):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
	
-- ERROR:
File "XXXX", line 12
    vet = array(eval(input()))
                             ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:14:23) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))	
-- ERROR:
File "XXXX", line 12
    vet = array(eval(input()))	
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:15:28) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))	
-- ERROR:
File "XXXX", line 12
    vet = array(eval(input()))	
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:15:29) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))	
-- ERROR:
File "XXXX", line 12
    vet = array(eval(input()))	
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:15:38) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
		vet = array(eval(input("Primeiro vetor: ")))	
-- ERROR:
File "XXXX", line 12
    vet = array(eval(input()))	
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:15:39) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
		vet = array(eval(input("Primeiro vetor: ")))	
-- ERROR:
File "XXXX", line 12
    vet = array(eval(input()))	
                              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:15:52) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
  	vet = array(eval(input("Primeiro vetor: ")))	 
	print(npar)
   print(size(vet)-npar)
   print(size(vet))
-- ERROR:
File "XXXX", line 9
    vet = array(eval(input()))	 
                               ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:15:59) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
  	vet = array(eval(input("Primeiro vetor: "))) 
	print(npar)
   print(size(vet)-npar)
   print(size(vet))
-- ERROR:
File "XXXX", line 9
    vet = array(eval(input())) 
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:16:01) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
  	vet = array(eval(input("Primeiro vetor: ")) 
	print(npar)
   print(size(vet)-npar)
   print(size(vet))
-- ERROR:
File "XXXX", line 9
    vet = array(eval(input()) 
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:16:29) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
  	vet = array(eval(input("Primeiro vetor: "))) 
	print(npar)
   print(size(vet)-npar)
   print(size(vet))
-- ERROR:
File "XXXX", line 9
    vet = array(eval(input())) 
                              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:17:07) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
  	vet = array(eval(input("Primeiro vetor: ")))
	print(npar)
   print(size(vet)-npar)
   print(size(vet))
-- ERROR:
File "XXXX", line 9
    vet = array(eval(input()))
                             ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:17:37) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
  	print(npar)
   print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:18:04) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
  	print(npar)
   print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:18:24) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:18:49) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
		print(npar)
		print(size(vet)-npar)
   	print(size(vet))
		vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:19:40) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 19:28:15) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
0.531062
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:28:31) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
   print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:30:10) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:30:33) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(elemento)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(elemento)
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 19:30:46) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 19:30:51) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
0.622272
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-09 20:01:42) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
1.03243
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:28:03) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:29:58) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:30:07) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 10
    print(size(vet)-npar)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:30:21) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:31:25) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
1.77663
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:31:36) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
1.41025
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:31:55) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:32:26) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:42:22) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:42:43) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
6.16779
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:42:47) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
12.7576
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:42:50) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
12.2946
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:42:50) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
12.4993
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:43:05) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
734.062
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:44:03) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
733.768
-- ERROR:
Killed

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-13 00:53:16) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
0.757348
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-13 15:25:40) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- ERROR:
File "XXXX", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-13 15:25:52) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
elemento=0
while (size(vet) > 1):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Primeiro vetor: ")))
-- EXECUTION TIME:
0.921588
-- ERROR:
  File "/home/codebench/codes/1811/2562/main.py", line 9
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
