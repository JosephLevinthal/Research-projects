== TEST (2019-04-04 19:31:26) 
-- CODE:
 n = float(input("Digite o numero de pessoas"))
from math import *
pn = 1 - (factorial(365)) / (factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- ERROR:
File "XXXX", line 1
    n = float(input())
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:31:32) 
-- CODE:
n = float(input("Digite o numero de pessoas"))
from math import *
pn = 1 - (factorial(365)) / (factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:31:39) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365)) / (factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:31:45) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365)) / (factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- EXECUTION TIME:
0.217291
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
0.17
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
0.54
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:31:50) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365)) / (factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- EXECUTION TIME:
0.21974
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
0.17
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
0.54
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:33:12) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365) / factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:33:52) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365) / factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- EXECUTION TIME:
0.163458
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
0.17
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
0.54
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:33:54) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365) / factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:34:20) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365) / factorial(365 - n)) * 1 / 365**n
print(round(pn, 2))
-- OUTPUT:
0.17
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:35:18) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = 1 - (factorial(365) / factorial(365 - n)) * 1 / 365**n * 100
print(round(pn, 2))
-- OUTPUT:
-82.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:35:33) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = (1 - (factorial(365) / factorial(365 - n)) * 1 / 365**n) / 100
print(round(pn, 2))
-- OUTPUT:
0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:35:46) 
-- CODE:
n = float(input("Digite o numero de pessoas: "))
from math import *
pn = (1 - (factorial(365) / factorial(365 - n)) * 1 / 365**n) * 100
print(round(pn, 2))
-- EXECUTION TIME:
0.143471
-- TEST CASE 1:
---- input:
12
---- correct output:
16.7
---- user output:
16.7
-- TEST CASE 2:
---- input:
24
---- correct output:
53.83
---- user output:
53.83
-- TEST CASE 3:
---- input:
99
---- correct output:
100.0
---- user output:
100.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
