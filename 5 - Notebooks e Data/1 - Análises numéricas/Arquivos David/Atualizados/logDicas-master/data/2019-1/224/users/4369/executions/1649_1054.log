== TEST (2019-04-05 20:38:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("Digite ponto x: "))
y = int(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:39:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("Digite ponto x: "))
y = int(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:39:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = int(input("Digite ponto x: "))
y = int(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:40:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:40:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:41:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:42:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y = 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- ERROR:
File "XXXX", line 7
    if(x,y = 3):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:42:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y = 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- ERROR:
File "XXXX", line 7
    if(x,y == ((2*x) + y = 3):
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:42:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- ERROR:
File "XXXX", line 7
    if(x,y == ((2*x) + y == 3):
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:43:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- ERROR:
File "XXXX", line 7
    if(x,y == ((2*x) + y == 3):
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:43:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- ERROR:
File "XXXX", line 7
    if(x,y == ((2*x) + y == 3):
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:44:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3) :
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- ERROR:
File "XXXX", line 7
    if(x,y == ((2*x) + y == 3) :
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:44:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3)):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:44:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3)):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:44:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3)):
	mensagem = "ponto pertence a reta"
	print(mensagem)
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem)
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:45:40) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3)):
	mensagem = "ponto pertence a reta"
	print(mensagem.lower())
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem.lower())
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 20:45:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3)):
	mensagem = "ponto pertence a reta"
	print(mensagem.lower())
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem.lower())
-- EXECUTION TIME:
0.136819
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto pertence a reta
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:45:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(x,y == ((2*x) + y == 3)):
	mensagem = "ponto pertence a reta"
	print(mensagem.lower())
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem.lower())
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:46:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(r):
	mensagem = "ponto pertence a reta"
	print(mensagem.lower())
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem.lower())
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-05 20:46:36) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(r):
	mensagem = "ponto pertence a reta"
	print(mensagem.lower())
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem.lower())
-- OUTPUT:
ponto pertence a reta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-05 20:46:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
x = float(input("Digite ponto x: "))
y = float(input("Digite ponto y: "))
r = (2*x) + y == 3
if(r):
	mensagem = "ponto pertence a reta"
	print(mensagem.lower())
else:
	mensagem = "ponto nao pertence a reta"
	print(mensagem.lower())
-- EXECUTION TIME:
0.135037
-- TEST CASE 1:
---- input:
20
-37
---- correct output:
ponto pertence a reta
---- user output:
ponto pertence a reta
-- TEST CASE 2:
---- input:
5
13
---- correct output:
ponto nao pertence a reta
---- user output:
ponto nao pertence a reta
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
