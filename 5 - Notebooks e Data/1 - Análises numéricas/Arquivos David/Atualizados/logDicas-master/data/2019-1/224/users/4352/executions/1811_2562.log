== TEST (2019-06-04 19:38:17) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpar = nimpar - npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 8
    nimpar = nimpar - npar
                         ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 17:58:51) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 8
    nimpar = size(vet)-npar
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 17:59:02) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpar = size(vet)- npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 8
    nimpar = size(vet)- npar
                           ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 17:59:13) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpar = size(vet) - npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 8
    nimpar = size(vet) - npar
                            ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:01:13) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
         npar = npar + 1
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 8
    nimpar = size(vet)-npar
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:04:56) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1]
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1]
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:05:00) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:05:06) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:05:15) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:05:22) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:05:29) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1
			nimpar = size(vet)-npar
			quant = npar + nimpar
   print(npar)
   print(nimpar)
   print(quant)
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:06:29) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:06:34) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
      if (elemento % 2 == 0):
			npar = npar + 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 7
    npar = npar + 1
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:06:56) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
   npar = 0
   for elemento in vet:
		if (elemento % 2 == 0):
			npar += 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 6
    if (elemento % 2 == 0):
                          ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:07:06) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar += 1
   print(npar)
   print(size(vet)-npar)
   print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 8
    print(npar)
              ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:07:19) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar += 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:07:31) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar += 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:07:47) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:07:57) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:08:02) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-npar)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:08:15) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			par = par + 1
print(par)
print(size(vet)-par)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:08:25) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			par = par + 1
print(par)
print(size(vet)-par)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:08:39) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:08:45) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:09:38) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 5):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:09:55) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:10:09) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
   vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:10:20) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
     vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:10:26) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
    vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:10:45) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
print(npar)
print(size(vet)-par)
print(size(vet))
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
File "XXXX", line 11
    vet = array(eval(input()))
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:05) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
			print(npar)
			print(size(vet)-npar)
			print(size(vet))
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:34) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-06 18:11:49) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Proximo vetor: ")))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 18:11:50) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.03254
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
Primeiro vetor: 8
10
18
Proximo vetor: 2
2
4
Proximo vetor:
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-06 18:12:36) 
-- CODE:
from numpy import*
vet = array(eval(input("Primeiro vetor: ")))
while (size(vet) > 1):
	npar = 0
	for elemento in vet:
		if (elemento % 2 == 0):
			npar = npar + 1
	print(npar)
	print(size(vet)-npar)
	print(size(vet))
	vet = array(eval(input("Proximo vetor: ")))

-- EXECUTION TIME:
1.06619
-- TEST CASE 1:
---- input:
[-2,-3,-5,-6,-7,-8,-9,-10]
[1,3,5,7,9,11,13,15,17,19,21]
[2,6,10,14,18,22]
[1]
---- correct output:
4
4
8
0
11
11
6
0
6

---- user output:
4
4
8
0
11
11
6
0
6
-- TEST CASE 2:
---- input:
[1,1,1,1,1,1,1,1,1,1,1,1,0]
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
[2,8,16,32,64,128,256,512,1024,2048]
[1]
---- correct output:
1
12
13
16
1
17
10
0
10

---- user output:
1
12
13
16
1
17
10
0
10
-- TEST CASE 3:
---- input:
[-1,1,-2,2,-3,3,-4,4,-5,5,-6,6,-7,7,-8,8,-9,9]
[-200,100,-201,101]
[1]
---- correct output:
8
10
18
2
2
4

---- user output:
8
10
18
2
2
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
