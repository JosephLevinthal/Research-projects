== TEST (2019-04-09 19:07:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.upper()
if(pat==CERVO):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat"nao eh patrono do Harry ")


-- ERROR:
File "XXXX", line 9
    print(pat"nao eh patrono do Harry ")
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:07:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.upper()
if(pat==CERVO):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    if(pat==CERVO):
NameError: name 'CERVO' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:08:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.upper()
if(pat=="CERVO"):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- OUTPUT:
CERVO eh patrono do Harry Potter.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:08:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.upper()
if(pat=="CERVO"):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- EXECUTION TIME:
0.192245
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
CERVO eh patrono do Harry Potter.
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
BODE nao eh patrono do Harry
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:09:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.upper()
if(pat=="CERVO"):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- OUTPUT:
CERVO eh patrono do Harry Potter.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:09:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.upper()
if(pat=="CERVO"):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- OUTPUT:
CERVO eh patrono do Harry Potter.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:09:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.upper()
if(pat=="CERVO"):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- EXECUTION TIME:
0.183571
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
CERVO eh patrono do Harry Potter.
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
BODE nao eh patrono do Harry
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:10:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.lower()
if(pat=="cervo"):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- OUTPUT:
cervo eh patrono do Harry Potter.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:10:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.lower()
if(pat=="cervo"):
	print(pat,"eh patrono do Harry Potter.")
else:
	print(pat,"nao eh patrono do Harry ")


-- EXECUTION TIME:
0.104384
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter.
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
bode nao eh patrono do Harry
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-09 19:10:42) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.lower()
if(pat=="cervo"):
	print(pat,"eh patrono do Harry Potter ")
else:
	print(pat,"nao eh patrono do Harry Potter ")


-- OUTPUT:
cervo eh patrono do Harry Potter
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-09 19:10:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
pat=input("digite: ")
pat=pat.lower()
if(pat=="cervo"):
	print(pat,"eh patrono do Harry Potter ")
else:
	print(pat,"nao eh patrono do Harry Potter ")


-- EXECUTION TIME:
0.185573
-- TEST CASE 1:
---- input:
cervo
---- correct output:
cervo eh patrono do Harry Potter
---- user output:
cervo eh patrono do Harry Potter
-- TEST CASE 2:
---- input:
bode
---- correct output:
bode nao eh patrono do Harry Potter
---- user output:
bode nao eh patrono do Harry Potter
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
