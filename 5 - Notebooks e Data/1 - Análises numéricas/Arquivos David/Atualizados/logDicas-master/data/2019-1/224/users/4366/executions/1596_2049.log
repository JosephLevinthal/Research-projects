== TEST (2019-03-24 18:04:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
print(dividendo)
print(divisor)
print(quociente 2//)
print(resto=4%2)
-- ERROR:
File "XXXX", line 8
    print(quociente 2//)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 18:05:09) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
print(dividendo)
print(divisor)
print(quociente=2)
print(resto=4%2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(quociente=2)
TypeError: 'quociente' is an invalid keyword argument for this function
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 18:05:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
quociente=2
print(dividendo)
print(divisor)
print(quociente)
print(resto=4%2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(resto=4%2)
TypeError: 'resto' is an invalid keyword argument for this function
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 18:06:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
quociente=2
resto=4%2
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- OUTPUT:
4
2
2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-24 18:06:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
quociente=2
resto=4%2
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- EXECUTION TIME:
0.196082
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
4
2
2
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
4
2
2
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
4
2
2
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 18:06:59) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
quociente=2//
resto=4%2
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- ERROR:
File "XXXX", line 6
    quociente=2//
                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 18:07:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
quociente
resto=4%2
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    quociente
NameError: name 'quociente' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-24 18:07:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir
dividendo=4
divisor=2
quociente=2
resto=4%2
print(dividendo)
print(divisor)
print(quociente)
print(resto)
-- OUTPUT:
4
2
2
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:16:16) 
-- CODE:
dividendo=int(input("digite um numero:"))
divisor=int(input("digite um numero:"))
total=dividendo/divisor
print(dividendo)
print(divisor)
print(total)
print(dividendo%divisor)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:16:18) 
-- CODE:
dividendo=int(input("digite um numero:"))
divisor=int(input("digite um numero:"))
total=dividendo/divisor
print(dividendo)
print(divisor)
print(total)
print(dividendo%divisor)
-- EXECUTION TIME:
0.188002
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:16:22) 
-- CODE:
dividendo=int(input("digite um numero:"))
divisor=int(input("digite um numero:"))
total=dividendo/divisor
print(dividendo)
print(divisor)
print(total)
print(dividendo%divisor)
-- OUTPUT:
8
5
1.6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:16:26) 
-- CODE:
dividendo=int(input("digite um numero:"))
divisor=int(input("digite um numero:"))
total=dividendo/divisor
print(dividendo)
print(divisor)
print(total)
print(dividendo%divisor)
-- EXECUTION TIME:
0.169904
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1.6
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7.0
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173.5
1
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:16:45) 
-- CODE:
dividendo=int(input("digite um numero:"))
divisor=int(input("digite um numero:"))
total=dividendo//divisor
print(dividendo)
print(divisor)
print(total)
print(dividendo%divisor)
-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:16:47) 
-- CODE:
dividendo=int(input("digite um numero:"))
divisor=int(input("digite um numero:"))
total=dividendo//divisor
print(dividendo)
print(divisor)
print(total)
print(dividendo%divisor)
-- EXECUTION TIME:
0.193126
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
