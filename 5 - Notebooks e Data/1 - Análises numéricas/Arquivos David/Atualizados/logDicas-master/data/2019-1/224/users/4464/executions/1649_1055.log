== TEST (2019-04-10 18:29:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:31:46) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= ((v0)^²) * sen(2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= ((v0)^²) * sen(2*a)/ g
             ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:31:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= ((v0)^²) * sen(2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= ((v0)^²) * sen(2*a)/ g
             ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:31:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * sen(2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * sen(2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * sen (2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * sen (2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * (2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * (2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * (2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * (2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * (2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * (2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * (2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * (2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * (2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * (2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² * (2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² * (2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:32:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
r= (v0)^² *(2*a)/ g

-- ERROR:
File "XXXX", line 7
    r= (v0)^² *(2*a)/ g
            ^
SyntaxError: invalid character in identifier
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:34:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
R = v0 * v0 * sin(2*a)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:35:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
R = v0 * v0 * sin(2*a)
print(R)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:35:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
R = v0 * v0 * sen(a*2)
print(R)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:36:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = int(input("insira a distancia horizontal"))
sin 
print(R)
sin (x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    D = int(input())
ValueError: invalid literal for int() with base 10: '11.3'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:42:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = v0**2
angulotwo = pi*a/180

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:46:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = v0**2
angulotwo = pi*a/180
R2=sin(2*algulotwo)
R3=Round((R1*R2)/g,2)
if (D==R3):
	print(R1)
elif (D+0.01==R3)
	print(R1)

-- ERROR:
File "XXXX", line 14
    elif (D+0.01==R3)
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:46:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = v0**2
angulotwo = pi*a/180
R2=sin(2*algulotwo)
R3=Round((R1*R2)/g,2)
if (D==R3):
	print(R1)
elif (D+0.01==R3):
	print(R1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:46:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = v0**2
angulotwo = pi*a/180
R2=sin(2*algulotwo)
R3=Round((R1*R2)/g,2)
if (D==R3):
	print(R1)
elif (D+0.01==R3):
	print(R1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    angulotwo = pi*a/180
NameError: name 'pi' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:47:09) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = v0**2
angulotwo = 3.14*a/180
R2=sin(2*algulotwo)
R3=Round((R1*R2)/g,2)
if (D==R3):
	print(R1)
elif (D+0.01==R3):
	print(R1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R2=sin(2*algulotwo)
NameError: name 'sin' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:47:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = v0**2
angulotwo = 3.14*a/180
R2=sin(2*algulotwo)
R3=Round((R1*R2)/g,2)
if (D==R3):
	print(R1)
elif (D+0.01==R3):
	print(R1)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    R2=sin(2*algulotwo)
NameError: name 'sin' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 15:40:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import
-- ERROR:
File "XXXX", line 8
    from math import
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 15:40:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import *
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 15:45:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
R = (v0**2) * sin(2*alpha)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 15:46:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
R = (v0**2) * sin(2*alpha)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 15:46:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
R = (v0**2) * sin(2*α)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 15:46:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
R = (v0**2) * sin(2*α)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 15:59:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
theta_2 = radians(theta)
R = (v0**2 / g) * sin(2 * theta)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    theta = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:08:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
R = (v0**2 / g) * sin(2 * radians(theta)

-- ERROR:
File "XXXX", line 10
    
                                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:08:54) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
R = (v0**2 / g) * sin(2 * radians(theta)
-- ERROR:
File "XXXX", line 10
    
                                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:11:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
R = (v0**2 / g) * sin(2 * radians(theta)
-- ERROR:
File "XXXX", line 10
    
                                            ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:11:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s= (v0**2 / g) * sin(2 * radians(theta)
-- ERROR:
File "XXXX", line 10
    
                                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:11:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s= (v0**2 / g) * sin(2 * radians(x)(theta)
-- ERROR:
File "XXXX", line 10
    
                                              ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:11:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s= (v0**2 / g) * sin(2 * (theta)
-- ERROR:
File "XXXX", line 10
    
                                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:11:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s= (v0**2 / g) * sin(2 * (theta)
-- ERROR:
File "XXXX", line 10
    
                                    ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:12:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * (theta)
-- ERROR:
File "XXXX", line 10
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:12:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * (theta)
-- ERROR:
File "XXXX", line 10
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:12:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * (theta)
-- ERROR:
File "XXXX", line 10
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:12:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * (theta)
-- ERROR:
File "XXXX", line 10
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:22:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * (theta)
-- ERROR:
File "XXXX", line 10
    
                                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:22:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * (theta))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    theta = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:23:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * radians((theta)))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    theta = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:27:15) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
if v0>=0 and theta > 0 and theta < 90:
	s = (v0**2 / g) * sin(2 * radians((theta)))
else:
	print("invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    theta = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:28:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
if v0>=0 and theta > 0 and theta < 90:
	s = (v0**2 / g) * sin(2 * radians((theta)))
	print(round(s , 3))
else:
	print("invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    theta = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:29:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
if v0>=0 and theta > 0 and theta < 90:
	s = (v0**2 / g) * sin(2 * radians((theta)))
	print(round(s , 3))
else:
	print("invalido")
-- EXECUTION TIME:
0.168741
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 5, in <module>
    theta = int(input())
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:30:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
if v0>=0 and theta > 0 and theta < 90:
	s = (v0**2 / g) * sin(2 * radians((theta)))
	print(round(s , 3))
else:
	print("invalido")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    theta = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:30:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
if v0>=0 and theta > 0 and theta < 90:
	s = (v0**2 / g) * sin(2 * radians((theta)))
	print(round(s , 3))
else:
	print("invalido")
-- OUTPUT:
11.248
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:33:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * radians((theta)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:34:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
v0 = float(input("insira a velocidade inicial:"))
theta = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
s = (v0**2 / g) * sin(2 * radians((theta)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.16192
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:35:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v0 = float(input("insira a velocidade inicial:"))
theta = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
s = (v0**2 / g) * sin(2 * radians((theta)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:35:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v0 = float(input("insira a velocidade inicial:"))
theta = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
s = (v0**2 / g) * sin(2 * radians((theta)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:35:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v0 = float(input("insira a velocidade inicial:"))
theta = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
s = (v0**2 / g) * sin(2 * radians((theta)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.209498
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:36:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
s = (vi**2 / g) * sin(2 * radians((a)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:37:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
s = (vi**2 / g) * sin(2 * radians((α)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:38:18) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = (vi**2 / g) * sin(2 * radians((α)))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:38:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = (vi**2 / g) * sin(2 * αb))
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 10
    s = (vi**2 / g) * sin(2 * αb))
                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:39:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = (vi**2 / g) * sin(2 * αb)
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:39:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = round ((vi**2 / g) * sin(2 * αb), 2)
if s == 20:
	print("sim")
elif s+0.1==20:
	print("sim")
elif s-0.1==20:
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:41:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = round ((vi**2 / g) * sin(2 * αb), 2)
if (D == s):
	print("sim")
elif (D+0.1==s):
	print("sim")
elif (D-0.1==20):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:41:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = round ((vi**2 / g) * sin(2 * αb), 2)
if (D == s):
	print("sim")
elif (D+0.1==s):
	print("sim")
elif (D-0.1==20):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:41:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = round ((vi**2 / g) * sin(2 * αb), 2)
if (D == s):
	print("sim")
elif (D+0.1==s):
	print("sim")
elif (D-0.1==20):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.152916
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:42:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = round ((vi**2 / g) * sin(2 * radians(α), 2)
if (D == s):
	print("sim")
elif (D+0.1==s):
	print("sim")
elif (D-0.1==20):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 11
    if (D == s):
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:42:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
α = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
αb = pi*α/180
s = round ((vi**2 / g) * sin(2 * αb), 2)
if (D == s):
	print("sim")
elif (D+0.1==s):
	print("sim")
elif (D-0.1==20):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:45:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:47:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:49:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3):
	print(sim)
elif (D+0.01==R3):
	print(sim)
elif (D-0.01==R3):
	print(sim)
else:
	print(nao)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:49:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3):
	print(sim)
elif (D+0.01==R3):
	print(sim)
elif (D-0.01==R3):
	print(sim)
else:
	print(nao)
-- EXECUTION TIME:
0.230884
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:49:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3):
	print(sim)
elif (D+0.01==R3):
	print(sim)
elif (D-0.01==R3):
	print(sim)
else:
	print(nao)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:49:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3):
	print(sim)
elif (D+0.01==R3):
	print(sim)
elif (D-0.01==R3):
	print(sim)
else:
	print(nao)
-- EXECUTION TIME:
0.256961
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:51:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3):
	print(sim)
elif (D+0.01==R3):
	print(sim)
elif (D-0.01==R3):
	print(sim)
else:
	print(nao)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:51:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3):
	print(sim)
elif (D+0.01==R3):
	print(sim)
elif (D-0.01==R3):
	print(sim)
else:
	print(nao)
-- EXECUTION TIME:
0.180688
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:51:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3):
	print(1)
elif (D+0.01==R3):
	print(1)
elif (D-0.01==R3):
	print(1)
else:
	print(2)
-- EXECUTION TIME:
0.158786
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:53:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3) and (D+0.1==R3) and (D-0.1==R3) 
	print(1)
else:
	print(2)
-- ERROR:
File "XXXX", line 13
    if (D==R3) and (D+0.1==R3) and (D-0.1==R3) 
                                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:53:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3) and (D+0.1==R3) and (D-0.1==R3):
	print(1)
else:
	print(2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:54:02) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3) and (D+0.1==R3) and (D-0.1==R3):
	print(1)
else:
	print(2)
-- EXECUTION TIME:
0.126775
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 16:54:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3) and (D+0.1==R3) and (D-0.1==R3):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 16:54:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
angulo = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R1 = vi**2
angulo2 = radians(angulo)
R2 = sin(2*angulo2)
R3= round(R1*R2/g , 2)
if (D==R3) and (D+0.1==R3) and (D-0.1==R3):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)
-- EXECUTION TIME:
0.158052
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 6, in <module>
    angulo = int(input())
ValueError: invalid literal for int() with base 10: '45.5'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:18:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2* (radians(a)))
if (D==R) and (D+0.1==R) and (D-0.1==R):
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)
-- ERROR:
File "XXXX", line 10
    if (D==R) and (D+0.1==R) and (D-0.1==R):
                                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:19:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2* (radians(a)))
if 
	mensagem = "sim"
else:
	mensagem = "nao"
print(mensagem)
-- ERROR:
File "XXXX", line 11
    mensagem = "sim"
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:20:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2* (radians(a)))
if d==R
-- ERROR:
File "XXXX", line 11
    
           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:20:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2* (radians(a)))
if d==R:
-- ERROR:
File "XXXX", line 10
    if d==R:
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:20:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2* (radians(a)))
if (d==R):
	print(nao)
-- ERROR:
File "XXXX", line 10
    if (d==R):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:20:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2* (radians(a)))
if (D==R):
	print(nao)
-- ERROR:
File "XXXX", line 10
    if (D==R):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:21:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)
if (D==R):
	print(nao)
-- ERROR:
File "XXXX", line 10
    if (D==R):
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:21:25) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (D==R):
	print(nao)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:23:16) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R)
	print(nao)
-- ERROR:
File "XXXX", line 10
    if (abs(D)==R)
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:23:20) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R))
	print(nao)
-- ERROR:
File "XXXX", line 10
    if (abs(D)==R))
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:23:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R):
	print(nao)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:24:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R)
	print(nao)
-- ERROR:
File "XXXX", line 10
    if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R)
                                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:25:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print(nao)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:25:49) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:25:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:26:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:26:41) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
a2 = radians(a)
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:26:56) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = int(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
a2 = radians(a)
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    a = int(input())
ValueError: invalid literal for int() with base 10: '45.5'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:27:26) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:27:45) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = (vi**2)* (sin(2*radians(a)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.160599
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:30:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
a2 = radians(a)
R = (vi**2)* (sin(2*(a2)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:30:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
g = 9.8
a2 = radians(a)
R = (vi**2)* (sin(2*(a2)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.198282
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:52:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
g = 9.8
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
a2 = radians(a)
R = (vi**2)*(sin(2*(a2)))
if (abs(D)==R) or (abs(D)+0.1==R) or (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.135558
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:53:30) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
g = 9.8
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
a2 = radians(a)
R = (vi**2)*(sin(2*(a2)))
if (abs(D)==R):
elif (abs(D)+0.1==R):
	print("sim")
elif (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- ERROR:
File "XXXX", line 12
    elif (abs(D)+0.1==R):
       ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 17:53:47) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
g = 9.8
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
a2 = radians(a)
R = (vi**2)*(sin(2*(a2)))
if (abs(D)==R):
	print("sim")
elif (abs(D)+0.1==R):
	print("sim")
elif (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 17:53:50) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
g = 9.8
vi = float(input("insira a velocidade inicial:"))
a = float(input("insira o angulo do vetor:"))
D = float(input("insira a distancia horizontal"))
a2 = radians(a)
R = (vi**2)*(sin(2*(a2)))
if (abs(D)==R):
	print("sim")
elif (abs(D)+0.1==R):
	print("sim")
elif (abs(D)-0.1==R):
	print("sim")
else:
	print("nao")
-- EXECUTION TIME:
0.210301
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 19:08:06) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #enfim aprendi como importar agora as 17hrs
r = float(input("raio")) 
x = float(input("altura")) 
opção= int(input("1 ou 2"))
vAr = (pi*(x**2)*(3*r-x)/3) 
Vesf = (4*pi*(r**3)/3) 
Vcombus = (Vesf - vAr)
if (opção == 1): 
	print( round (vAr,4)) 
if (opção == 2): 
	print(round(Vcombus, 4)) 
-- EXECUTION TIME:
0.20083
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 7, in <module>
    op\xe7\xe3o= int(input())
ValueError: invalid literal for int() with base 10: '11.3'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 19:08:36) 
-- CODE:
	# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import * #aprendi haha, esse é o jeito de importar o moto "matematico" haha (desse modo a gente pode usar funcoes math,sin,cos,tg,etc).
v = float(input("insira a velocidade inicial:"))
a = radians((float(input("insira o angulo do vetor:"))))
D = float(input("insira a distancia horizontal"))
g = 9.8
R = ((v**2)*sin(2*a))/g
if (abs(D-R) <= 0.1):
	print("sim")
else:
 print("nao")
-- EXECUTION TIME:
0.155609
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
