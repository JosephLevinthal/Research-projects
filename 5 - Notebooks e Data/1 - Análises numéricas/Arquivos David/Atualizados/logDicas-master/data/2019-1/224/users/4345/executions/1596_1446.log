== SUBMITION (2019-04-02 15:53:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.266838
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1446/main.py", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:53:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:53:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.171126
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1446/main.py", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:53:48) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:53:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- EXECUTION TIME:
0.142906
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1446/main.py", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:53:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:54:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:55:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:55:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)


-- EXECUTION TIME:
0.269138
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1446/main.py", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:55:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
x=int(input("digite o valor de x:"))
y=int(input("digite o valor de y:"))
print(x)
print(y)
print(x//y)
print(x%y)


-- EXECUTION TIME:
0.172005
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1446/main.py", line 5, in <module>
    y=int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:58:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros= float(input)
qtd_de_michael=1/3 * qtd_litros
a= round(qtd_de_michael,   3)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    qtd_litros= float(input)
TypeError: float() argument must be a string or a number, not 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:58:14) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros= float(input)
qtd_de_michael=1/3 * qtd_litros
a= round(qtd_de_michael,   3)
print(a)
-- EXECUTION TIME:
0.161658
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1446/main.py", line 4, in <module>
    qtd_litros= float(input)
TypeError: float() argument must be a string or a number, not 'builtin_function_or_method'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:58:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros= float(input)
qtd_de_michael=1/3 * qtd_litros
a= round(qtd_de_michael,  3)
print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    qtd_litros= float(input)
TypeError: float() argument must be a string or a number, not 'builtin_function_or_method'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 15:58:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros= float(input())
qtd_de_michael=1/3 * qtd_litros
a= round(qtd_de_michael,  3)
print(a)
-- OUTPUT:
2.333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 15:59:00) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
qtd_litros= float(input())
qtd_de_michael=1/3 * qtd_litros
a= round(qtd_de_michael,  3)
print(a)
-- EXECUTION TIME:
0.197401
-- TEST CASE 1:
---- input:
7
---- correct output:
2.333
---- user output:
2.333
-- TEST CASE 2:
---- input:
20.0
---- correct output:
6.667
---- user output:
6.667
-- TEST CASE 3:
---- input:
15
---- correct output:
5.0
---- user output:
5.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
