== TEST (2019-04-14 18:32:17) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=preco-pag
y=pag-preco
if (preco > pag):
	print("falta " x)
else:
	print("troco de " y)
-- ERROR:
File "XXXX", line 6
    print("falta " x)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:32:54) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=preco-pag
y=pag-preco
if (preco > pag):
	print("falta ")
else:
	print("troco de ")
-- OUTPUT:
falta
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:33:12) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=preco-pag
y=pag-preco
if (preco > pag):
	print("falta "+x)
else:
	print("troco de "+y)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("falta "+x)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:34:08) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=preco-pag
y=pag-preco
if (preco > pag):
	print(float("falta "+x))
else:
	print(float("troco de "+y))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float("falta "+x))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 18:59:46) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=preco-pag
y=pag-preco
if (preco > pag):
	print(float("falta "+x))
else:
	print(float("troco de "+y))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(float("falta "+x))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:19:07) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=round(preco-pag,2)
y=round(pag-preco,2)
if (preco > pag):
	msg= "falta "+x
else:
	msg= "falta "+y
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg= "falta "+x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 19:21:56) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	msg= "Falta "+x
else:
	msg= "Troco de "+y
print(msg)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    msg= "Falta "+x
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:39:33) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	msg=( "Falta ",x)
else:
	msg= ("Troco de ",y)
print(msg)
-- EXECUTION TIME:
0.170724
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
('Falta ', 26.0)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
('Troco de ', 28.0)
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
('Troco de ', 0.0)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:40:08) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	msg=( "Falta ",x)
else:
	msg= ("Troco de ",y)
print(msg)
-- OUTPUT:
('Falta ', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:40:41) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	msg=( "Falta "x)
else:
	msg= ("Troco de "y)
print(msg)
-- EXECUTION TIME:
0.158673
-- ERROR:
  File "/home/codebench/codes/1649/2447/main.py", line 6
    msg=( "Falta "x)
                  ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:40:43) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	msg=( "Falta "x)
else:
	msg= ("Troco de "y)
print(msg)
-- ERROR:
File "XXXX", line 6
    msg=( "Falta "x)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:41:28) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	msg=("Falta " x)
else:
	msg= ("Troco de "y)
print(msg)
-- ERROR:
File "XXXX", line 6
    msg=("Falta " x)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:42:11) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	print("Falta " x)
else:
	print("Troco de " y)

-- ERROR:
File "XXXX", line 6
    print("Falta " x)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 18:42:21) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	print("Falta ", x)
else:
	print("Troco de ", y)

-- OUTPUT:
Falta  26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 18:42:44) 
-- CODE:
preco= float(input("preco da compra: "))
pag= float(input("pagamento da compra: "))
x=float(round(preco-pag,2))
y=float(round(pag-preco,2))
if (preco > pag):
	print("Falta ", x)
else:
	print("Troco de ", y)

-- EXECUTION TIME:
0.117489
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta  26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de  28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de  0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
