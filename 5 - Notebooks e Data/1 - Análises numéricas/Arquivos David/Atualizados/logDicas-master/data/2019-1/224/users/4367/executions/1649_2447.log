== TEST (2019-04-15 08:41:35) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
if(preco>=pg):
	p=pg-preco
	mensagem= "Falta"+ " " + p
else:
	p=pg-preco
	mensagem= "Troco" + " " + p
print(round(mensagem))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    mensagem= "Falta"+ " " + p
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:42:18) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
if(preco>=pg):
	p=pg-preco
	mensagem= "Falta" + " " + p
else:
	p=pg-preco
	mensagem= "Troco" + " " + p
print(round(mensagem))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    mensagem= "Falta" + " " + p
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:43:43) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem= "Falta" + " " + p
else:
	mensagem= "Troco" + " " + 
print(round(mensagem))
-- ERROR:
File "XXXX", line 7
    mensagem= "Troco" + " " + 
                             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:44:05) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem= "Falta" + " " + p
else:
	mensagem= "Troco" + " " + p
print(round(mensagem))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    mensagem= "Falta" + " " + p
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:44:43) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem= "Falta" + " " + float(p)
else:
	mensagem= "Troco" + " " + float(p)
print(round(mensagem))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    mensagem= "Falta" + " " + float(p)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:46:19) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="falta" + p
else:
	mensagem="falta" + p
print(round(mensagem))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    mensagem="falta" + p
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:49:09) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=float(pg-preco)
if(preco>=pg):
	mensagem="falta" + p
else:
	mensagem="falta" + p
print(round(mensagem))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    mensagem="falta" + p
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:54:35) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=float(pg-preco)
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco"
print(round(mensagem + p))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem + p))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:55:08) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=float(pg-preco)
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco"
print(round(mensagem + p, 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem + p, 2))
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:56:53) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco"
print(round(mensagem))
print(p, 2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:56:53) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco"
print(round(mensagem))
print(p, 2)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print(round(mensagem))
TypeError: type str doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:57:23) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco"
print(mensagem)
print(round(p, 2))
-- OUTPUT:
Falta
-26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 08:57:31) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco"
print(mensagem)
print(round(p, 2))
-- EXECUTION TIME:
0.215167
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta
-26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Falta
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 08:57:57) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco de"
print(mensagem)
print(round(p, 2))
-- EXECUTION TIME:
0.139772
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta
-26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Falta
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:58:38) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco de p"
print(mensagem)
print(round(p, 2))
-- OUTPUT:
Falta
-26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 08:58:50) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	mensagem="Falta"
else:
	mensagem= "Troco de p"
print(mensagem)
print(round(p, 2))
-- OUTPUT:
Falta
-26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:00:19) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	print(round(p, 2))
	mensagem="Falta"+ " " + p
else:
	print(round(p, 2))
	mensagem= "Troco de" + " " + p
print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    mensagem="Falta"+ " " + p
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:03:35) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	print(round(p, 2))
	mensagem="Falta"
	x=p
else:
	print(round(p, 2))
	mensagem= "Troco de"
	x= p
print(mensagem)
print(x)
-- OUTPUT:
-26.0
Falta
-26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 09:03:51) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>=pg):
	print(round(p, 2))
	mensagem="Falta"
	x=p
else:
	print(round(p, 2))
	mensagem= "Troco de"
	x= p
print(mensagem)
print(x)
-- EXECUTION TIME:
0.195193
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
-26.0
Falta
-26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
28.0
Troco de
28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
0.0
Falta
0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:13:12) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>pg):
	print(("Falta"),(round(p, 2)))
else:
	print(("Troco de"),(round(p, 2)))
-- OUTPUT:
Falta -26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 09:13:14) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco
if(preco>pg):
	print(("Falta"),(round(p, 2)))
else:
	print(("Troco de"),(round(p, 2)))
-- EXECUTION TIME:
0.131408
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta -26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:13:24) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco

if(preco>pg):
	print(("Falta"),(round(p, 2)))
else:
	print(("Troco de"),(round(p, 2)))
-- OUTPUT:
Falta -26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:13:30) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco

if(preco>pg):
	print(("Falta"),(round(p, 2)))
else:
	print(("Troco de"),(round(p, 2)))
-- OUTPUT:
Falta -26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 09:13:36) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
p=pg-preco

if(preco>pg):
	print(("Falta"),(round(p, 2)))
else:
	print(("Troco de"),(round(p, 2)))
-- OUTPUT:
Falta -26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 09:14:41) 
-- CODE:
preco= float(input("digite o preco: "))
pg= float(input("digite o pagamento: "))
x=pg-preco
p=preco-pg
if(preco>pg):
	print(("Falta"),(round(p, 2)))
else:
	print(("Troco de"),(round(x, 2)))
-- EXECUTION TIME:
0.184181
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
