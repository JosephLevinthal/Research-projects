== TEST (2019-05-23 18:48:03) 
-- CODE:
from numpy import*
entrada=input()
print(entrada.upper().replace('',''))
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[1]
	i=i-1
print(entrada[int(len(entrada)/2)])
print(s==entrada[:int(len(entrada)/2)])
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 18:48:27) 
-- CODE:
from numpy import*
entrada=input()
print(entrada.upper().replace('',''))
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[i]
	i=i-1
print(entrada[int(len(entrada)/2)])
print(s==entrada[:int(len(entrada)/2)])
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 18:48:59) 
-- CODE:
from numpy import*
entrada=input("digite uma sequencia de caracteres:")
print(entrada.upper().replace('',''))
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[i]
	i=i-1
print(entrada[int(len(entrada)/2)])
print(s==entrada[:int(len(entrada)/2)])
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 18:50:21) 
-- CODE:
from numpy import*
entrada=input("digite uma sequencia de caracteres:")
print(entrada.upper().replace('',''))
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[i]
	i=i-1
print(entrada[int(len(entrada)/2)])
print(s==entrada[:1+int(len(entrada)/2)])
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 18:55:34) 
-- CODE:
from numpy import*
entrada=input("digite uma sequencia de caracteres:")
entrada=upper().replace('',''))
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[i]
	i=i-1
print(entrada[int(len(entrada)/2)])
if len(entrada)%2==0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
elif len(entrada)%2!=0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
else:
	print(entrada)
	print(0)
-- ERROR:
File "XXXX", line 3
    entrada=upper().replace('',''))
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 18:55:48) 
-- CODE:
from numpy import*
entrada=input("digite uma sequencia de caracteres:")
entrada=upper().replace('',''))
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[i]
	i=i-1
if len(entrada)%2==0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
elif len(entrada)%2!=0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
else:
	print(entrada)
	print(0)
-- ERROR:
File "XXXX", line 3
    entrada=upper().replace('',''))
                                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 18:56:45) 
-- CODE:
from numpy import*
entrada=input("digite uma sequencia de caracteres:")
entrada=upper().replace('','')
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[i]
	i=i-1
if len(entrada)%2==0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
elif len(entrada)%2!=0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
else:
	print(entrada)
	print(0)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 18:57:08) 
-- CODE:
from numpy import*
entrada=input("digite uma sequencia de caracteres:")
entrada=.upper(),replace('','')
i=len(entrada)-1
s=''
while(i>=int(len(entrada)/2)):
	s=s+entrada[i]
	i=i-1
if len(entrada)%2==0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
elif len(entrada)%2!=0 and (s==entrada[:1+int(len(entrada)/2)]):
	print(entrada)
	print(1)
else:
	print(entrada)
	print(0)
-- ERROR:
File "XXXX", line 3
    entrada=.upper(),replace('','')
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-25 14:52:31) 
-- CODE:
from numpy import*
pal=input("digite a frase:")
copy=""
i=0
while(i<len(pal)):
	if(pal[i] == ""):
		copy=copy+""
	else:
		copy=copy+str(pal[i])
	i=i+1
print(copy.upper())
valor=0
i2=0
while(i2<len(copy)):
	if(copy[i2]==copy[-*(i2+1)]):
		valor=valor+1
	else:
		valor=valor-0
	i2=i2+1
if(valor==len(copy)):
	print("1")
else:
	print("0")
-- EXECUTION TIME:
0.172686
-- ERROR:
  File "/home/codebench/codes/1771/1189/main.py", line 15
    if(copy[i2]==copy[-*(i2+1)]):
                       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-25 14:53:02) 
-- CODE:
from numpy import*
pal=input("digite a frase:")
copy=""
i=0
while(i<len(pal)):
	if(pal[i] == ""):
		copy=copy+""
	else:
		copy=copy+str(pal[i])
	i=i+1
print(copy.upper())
valor=0
i2=0
while(i2<len(copy)):
	if(copy[i2]==copy[-*(i2+1)]):
		valor=valor+1
	else:
		valor=valor+0
	i2=i2+1
if(valor==len(copy)):
	print("1")
else:
	print("0")
-- EXECUTION TIME:
0.195726
-- ERROR:
  File "/home/codebench/codes/1771/1189/main.py", line 15
    if(copy[i2]==copy[-*(i2+1)]):
                       ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-25 14:53:19) 
-- CODE:
from numpy import*
pal=input("digite a frase:")
copy=""
i=0
while(i<len(pal)):
	if(pal[i] == ""):
		copy=copy+""
	else:
		copy=copy+str(pal[i])
	i=i+1
print(copy.upper())
valor=0
i2=0
while(i2<len(copy)):
	if(copy[i2]==copy[-1*(i2+1)]):
		valor=valor+1
	else:
		valor=valor-0
	i2=i2+1
if(valor==len(copy)):
	print("1")
else:
	print("0")
-- EXECUTION TIME:
0.533465
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
