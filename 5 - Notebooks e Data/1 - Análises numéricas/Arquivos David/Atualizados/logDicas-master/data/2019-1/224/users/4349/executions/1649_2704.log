== TEST (2019-04-14 10:34:52) 
-- CODE:
nota_do_aluno = float(input())
if("nota" >= 6)
	nota= nota_do_aluno+10%
	mensagem= "Sim"
	print(mensagem)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
File "XXXX", line 2
    if("nota" >= 6)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:35:13) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6)
	nota= nota_do_aluno+10%
	mensagem= "Sim"
	print(mensagem)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
File "XXXX", line 2
    if("nota_do_aluno" >= 6)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:35:26) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno+10%
	mensagem= "Sim"
	print(mensagem)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
File "XXXX", line 3
    nota= nota_do_aluno+10%
                          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:35:55) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10%
	mensagem= "Sim"
	print(mensagem + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
File "XXXX", line 3
    nota= nota_do_aluno + 10%
                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:36:59) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-14 10:37:05) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- EXECUTION TIME:
0.145363
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/2704/main.py", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: unorderable types: str() >= int()

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:37:11) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:37:24) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:38:05) 
-- CODE:
nota_do_aluno = float(input())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:38:31) 
-- CODE:
nota_do_aluno = float(int())
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:39:29) 
-- CODE:
nota_do_aluno = float(input("nota"))
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:39:46) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:40:43) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(nota)
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:40:53) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if("nota_do_aluno" >= 6):
	nota= nota_do_aluno + 10//100
	mensagem= "Sim"
	print(nota)
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:42:11) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if("nota_do_aluno" >= 6):
	"nota"= nota_do_aluno + 10//100
	print(nota)
	mensagem= "Sim"
	
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
File "XXXX", line 3
    "nota"= nota_do_aluno + 10//100
    ^
SyntaxError: can't assign to literal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:43:09) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if("nota_do_aluno" >= 6):
	mensagem= "Sim"
	nota= nota_do_aluno + 10//100
	print(nota)
	
	
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno" >= 6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:44:04) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if("nota_do_aluno">=6):
	nota= nota_do_aluno + 10//100
	print(nota)
	
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno">=6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:45:35) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if("nota_do_aluno">=6):
	nota= "nota_do_aluno" + 10//100
	print(nota)
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    if("nota_do_aluno">=6):
TypeError: '>=' not supported between instances of 'str' and 'int'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:46:07) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if(nota_do_aluno>=6):
	nota= "nota_do_aluno" + 10//100
	print(nota)
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- OUTPUT:
Nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:46:17) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if(nota_do_aluno>=6):
	nota= "nota_do_aluno" + 10//100
	print(nota)
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- OUTPUT:
Nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:46:43) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if(nota_do_aluno>=6):
	nota= "nota_do_aluno"+10//100
	print(nota)
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- OUTPUT:
Nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:47:03) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if(nota_do_aluno>=6):
	nota= "notadoaluno"+10//100
	print(nota)
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- OUTPUT:
Nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:47:15) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if(nota_do_aluno>=6):
	nota= "notadoaluno"+10//100
	print(nota)
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- OUTPUT:
Nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-14 10:47:33) 
-- CODE:
nota_do_aluno = float(input("nota: "))
if(nota_do_aluno>=6):
	nota="notadoaluno"+10//100
	print(nota)
	
	mensagem= "Sim"
	print(mensagem.upper + nota)
else:
	mensagem= "Nao"
	print(mensagem)
-- OUTPUT:
Nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:44:54) 
-- CODE:
nota_do_aluno = float(input("nota: "))

if(nota_do_aluno>=6):
	nota="nota_do_aluno"+10//100
	print(nota)
		mensagem= "n"
	print(mensagem.upper)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- ERROR:
File "XXXX", line 6
    mensagem= "n"
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:45:08) 
-- CODE:
nota_do_aluno = float(input("nota: "))

if(nota_do_aluno>=6):
	nota="nota_do_aluno"+10//100
	print(nota)
	mensagem= "n"
	print(mensagem.upper)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f37580250d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:47:17) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	nota="nota_do_aluno"+10//100
	print(nota)
	mensagem= "n"
	print(mensagem.upper)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7fef7ab6f0d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:47:49) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	print(nota)
	mensagem= "n"
	print(mensagem.upper)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7ff89efdd0d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:48:12) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	mensagem= "s"
	print(mensagem.upper)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f33f903a0d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:57:29) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	print(float(mensagem.upper))
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f9f3b3e20d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:57:50) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	print(float(mensagem.upper))
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7fdc743280d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:57:57) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	print(float(mensagem.upper))
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f76407600d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:58:49) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	print(round(mensagem.upper), 2)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f79f295b0d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:59:19) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100

if(nota_do_aluno>=6):
	print(round(mensagem.upper), 2)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7f7a4cc2f0d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-15 21:59:26) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno>=6):
	print(round(mensagem.upper), 2)
	
else:
	mensagem= "n"
	print(mensagem.upper)
-- OUTPUT:
<built-in method upper of str object at 0x7fbbca3020d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:08:14) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno=="S"):
	print
	
else:
	mensagem= "N"
	print(mensagem.upper)
	
-- OUTPUT:
<built-in method upper of str object at 0x7fd5e54895a8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:09:21) 
-- CODE:
nota_do_aluno= float(input("nota: "))
bonificacao= nota_do_aluno * 10/100
if(nota_do_aluno=="s".upper):
	print
	
else:
	mensagem= "n"
	print(mensagem.upper)
	
-- OUTPUT:
<built-in method upper of str object at 0x7fbfec2fb0d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:12:08) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 10/100
if(o.upper()=="s"):
	print
	
else:
	mensagem= "n"
	print(mensagem.upper)
	
-- OUTPUT:
<built-in method upper of str object at 0x7f004f9bb0d8>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:12:32) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 10/100
if(o.upper()=="S"):
	print(a)
	
else:
	mensagem= "n"
	print(mensagem.upper)
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:12:45) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 10/100
if(o.upper()=="S"):
	print(a)
	
else:
	mensagem= "N"
	print(mensagem.upper)
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:14:08) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 10/100
if(o.upper()=="S"):
	a= a+a*10/100
	
else:
	mensagem= "N"
	print(mensagem.upper)
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:14:44) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 10/100
if(o.upper()=="S"):
	a= a+a*10/100
	
else:
	a=a
	mensagem= "N"
	print(mensagem.upper)
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:15:32) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()=="S"):
	a= a+a*0.10
	
else:
	a=a
	mensagem= "N"
	print(mensagem.upper)
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:15:56) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()=="S"):
	a= a+b
	
else:
	a=a
	mensagem= "N"
	print(mensagem.upper)
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:16:39) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()=="S":
	a= a+b
	
else:
	a=a
	mensagem= "N"
	print(mensagem.upper)
	
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:16:47) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper())=="S":
	a= a+b
	
else:
	a=a
	mensagem= "N"
	print(mensagem.upper)
	
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:17:04) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+b
	
else:
	a=a
	mensagem= "N"
	print(mensagem.upper)
	
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:17:43) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+b
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:17:56) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+b
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:18:26) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+b
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:18:36) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+b
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.176525
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:18:44) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+b
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:19:00) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+b
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.138378
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:19:37) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:19:46) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")
b= a * 0.10
if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.13854
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:20:31) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")

if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.146066
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:20:32) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")

if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:20:41) 
-- CODE:
a= float(input("nota: "))
o= input("S/N")

if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.207874
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:21:27) 
-- CODE:
a= float(input("nota: "))
o= input("recebera a bonificacao, S/N")

if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:21:41) 
-- CODE:
a= float(input("nota: "))
o= input("recebera a bonificacao, S/N")

if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.126774
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:22:07) 
-- CODE:
a= float(input("nota: "))
o= input("recebera a bonificacao, S/N")

if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a= a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:22:18) 
-- CODE:
a= float(input("nota: "))
o= input("recebera a bonificacao, S/N")

if(o.upper()) == "S":
	a= a+a*0.10
	
else:
	a= a
	print(a)
-- EXECUTION TIME:
0.180205
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:23:19) 
-- CODE:
a= float(input("nota: "))
o= input("recebera a bonificacao, S/N")

if(o.upper()) == "S":
	a= a + a*0.10
	
else:
	a= a
	print(a)
-- EXECUTION TIME:
0.217006
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:23:21) 
-- CODE:
a= float(input("nota: "))
o= input("recebera a bonificacao, S/N")

if(o.upper()) == "S":
	a= a + a*0.10
	
else:
	a= a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:24:39) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if(o.upper()) == "S":
	a= a + a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:25:00) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper()) == "S":
	a= a + a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:25:10) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper()) == "S":
	a= a + a*0.10
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.209953
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:25:59) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper())=="S":
	a= a + a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:26:09) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper())=="S":
	a= a + a*0.10
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.139348
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:26:49) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper()=="S"):
	a= a + a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:27:03) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper()=="S"):
	a= a + a*0.10
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.13778
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:27:39) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper()=="S"):
	a= a+a*0.10
	
else:
	a=a
	print(a)
-- ERROR:
File "XXXX", line 4
    if(o.upper()=="S":
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:28:58) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper()=="S"):
	a= a+a*0.10
	print(S)
	
else:
	a=a
	print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(S)
NameError: name 'S' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:29:11) 
-- CODE:
a= float(input("nota: "))
o= input("bonificacao S/N")

if (o.upper()=="S"):
	a= a+a*0.10
	print(S)
	
else:
	a=a
	print(a)
-- EXECUTION TIME:
0.18266
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/2704/main.py", line 6, in <module>
    print(S)
NameError: name 'S' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:32:55) 
-- CODE:
a = float("nota: ")
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    a = float("nota: ")
ValueError: could not convert string to float: 'nota: '
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:33:20) 
-- CODE:
a = float(input("nota: ")
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- ERROR:
File "XXXX", line 2
    bonificacao = input()
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:33:40) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- ERROR:
File "XXXX", line 2
    bonificacao = input()
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:33:59) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- EXECUTION TIME:
0.186722
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:34:31) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- ERROR:
File "XXXX", line 2
    bonificacao = input()
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:35:00) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- EXECUTION TIME:
0.164347
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:50:04) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:50:12) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
print(a)
-- EXECUTION TIME:
0.237379
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:50:19) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:53:35) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:53:40) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- EXECUTION TIME:
0.195013
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:53:44) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- EXECUTION TIME:
0.175665
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:53:45) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:53:56) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- EXECUTION TIME:
0.216444
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:54:03) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:54:03) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:54:10) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
print(a)
-- EXECUTION TIME:
0.233618
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:58:17) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:58:22) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
	print(a)
-- EXECUTION TIME:
0.140278
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:

-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:

-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 17:58:34) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
print(a)
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 17:58:38) 
-- CODE:
a = float(input("nota: "))
bonificacao = input("S/N")

if (bonificacao.upper()) == "S":
	a = a + a*0.10

else:
	a = a
print(a)
-- EXECUTION TIME:
0.17107
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
