== TEST (2019-05-11 21:12:34) 
-- CODE:
x=int(input("Digite um numero: "))
print(((2/5)+1)*((1+(2/5))*2))	
	
-- OUTPUT:
3.9199999999999995
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 21:12:51) 
-- CODE:
x=int(input("Digite um numero: "))
print(((2/5)+1)*(((2/5))*2))	
	
-- OUTPUT:
1.1199999999999999
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 21:13:07) 
-- CODE:
x=int(input("Digite um numero: "))
print(((2/5)+1)*((1+(1/3))*2))	
	
-- OUTPUT:
3.733333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 21:13:15) 
-- CODE:
x=int(input("Digite um numero: "))
print(((2/5)+1)*((+(1/3))*2))	
	
-- OUTPUT:
0.9333333333333332
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 21:13:19) 
-- CODE:
x=int(input("Digite um numero: "))
print(((2/5)+1)*(((1/3))*2))	
	
-- OUTPUT:
0.9333333333333332
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-11 21:13:35) 
-- CODE:
x=int(input("Digite um numero: "))
print((((2/5)+1)*(((1/3)))*2))	
	
-- OUTPUT:
0.9333333333333332
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 11:08:33) 
-- CODE:

v=1+(1/3)
print(v)
-- OUTPUT:
1.3333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 11:08:52) 
-- CODE:

v=2+(2/3)
print(v)
-- OUTPUT:
2.6666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 11:11:01) 
-- CODE:

v=((2/5+1)*(1/3))+(((2/5)+1)*1)
print(v)
-- OUTPUT:
1.8666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 11:11:09) 
-- CODE:

v=((2/5+1)*(1/3))+(((2/5)+1)*1)
print(v*2)

-- OUTPUT:
3.733333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 11:12:01) 
-- CODE:

v=(2/5+1)+(1+1/3)
print(v*2)

-- OUTPUT:
5.466666666666667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 11:12:07) 
-- CODE:

v=(2/5+1)*1+1/3)
print(v*2)

-- ERROR:
File "XXXX", line 2
    v=(2/5+1)*1+1/3)
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 11:12:16) 
-- CODE:

v=(2/5+1)*(1+1/3)
print(v*2)

-- OUTPUT:
3.733333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 14:02:18) 
-- CODE:
print(round(3+1/60,10))

-- OUTPUT:
3.0166666667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 20:01:27) 
-- CODE:
x=(1+1/3*(1+2/5))*2

-- OUTPUT:
3.0166666667
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 20:01:33) 
-- CODE:
x=(1+1/3*(1+2/5))*2
print(x)

-- OUTPUT:
2.933333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 20:02:54) 
-- CODE:
x=3*(1+(2/5))
n=1+(1/x)
z=2*n
-- OUTPUT:
2.933333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 20:03:02) 
-- CODE:
x=3*(1+(2/5))
n=1+(1/x)
z=2*n
print(z)
-- OUTPUT:
2.4761904761904763
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-12 20:03:42) 
-- CODE:
z=2*1+1/3*1+2/5
print(z)
-- EXECUTION TIME:
0.167703
-- TEST CASE 1:
---- input:
10
---- correct output:
3.1413699476
---- user output:
2.7333333333333334
-- TEST CASE 2:
---- input:
150
---- correct output:
3.1415926536
---- user output:
2.7333333333333334
-- TEST CASE 3:
---- input:
100
---- correct output:
3.1415926536 
---- user output:
2.7333333333333334
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-12 20:03:43) 
-- CODE:
z=2*1+1/3*1+2/5
print(z)
-- OUTPUT:
2.7333333333333334
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:50:48) 
-- CODE:
x=2*(1+1/3)*(1+2/5)*(1+3/7)*(1+4/9)
print(x)
-- OUTPUT:
7.703703703703703
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:51:13) 
-- CODE:
x=1+1/3
y=1+2/5
print(x*y)
-- OUTPUT:
1.8666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:51:32) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
print(x*y*z)
-- OUTPUT:
2.6666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:51:50) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
print(x*y*z*u)
-- OUTPUT:
3.8518518518518516
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:52:10) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
print(x*(y*(z*u))
-- ERROR:
File "XXXX", line 6
    
                     ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:52:17) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
print(x*(y*(z*u)))
-- OUTPUT:
3.8518518518518516
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:56:16) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
z=1.5*(1+4/9)
print(z)
-- OUTPUT:
2.1666666666666665
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:56:33) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
z=1.5*(1+3/7)
print(z)
-- OUTPUT:
2.142857142857143
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:56:43) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
z=1.5*(1+2/5)
print(z)
-- OUTPUT:
2.0999999999999996
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:56:55) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
z=1.5*(1+1/3)
print(z)
-- OUTPUT:
2.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:57:56) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
z=1.5*2
print(z)
-- OUTPUT:
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:58:04) 
-- CODE:
x=1+1/3
y=1+2/5
z=1+3/7
u=1+4/9
z=1.5*2
print(y)
-- OUTPUT:
1.4
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:58:17) 
-- CODE:
x=1+1/3
y=1+2/5*1.5
z=1+3/7
u=1+4/9
z=1.5*2
print(y)
-- OUTPUT:
1.6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 00:58:38) 
-- CODE:
x=1+1/3

z=1+3/7
u=1+4/9+1*5
z=1.5*2
print(u)
-- OUTPUT:
6.444444444444445
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:10:54) 
-- CODE:
x=2/5
y=1/3
print(x*y+1)
-- OUTPUT:
1.1333333333333333
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:41:03) 
-- CODE:
n = int(input("entrada:"))
if n != 1:
   count = n
   soma = 0
   divisor = (n)*2 + 1
   soma_ant = 1.5
	while(count>=1):
		soma=(count/divisor*soma_ant)+1
		soma_ant=soma
		count=count-1
		divisor=divisor-2
	print(round(2*soma,10))
else:
	print("3.0")
-- ERROR:
File "XXXX", line 7
    while(count>=1):
                   ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:41:16) 
-- CODE:
n = int(input("entrada:"))
if n != 1:
   count = n
   soma = 0
   divisor = (n)*2 + 1
   soma_ant = 1.5
	 while(count>=1)
		soma=(count/divisor*soma_ant)+1
		soma_ant=soma
		count=count-1
		divisor=divisor-2
	print(round(2*soma,10))
else:
	print("3.0")
-- ERROR:
File "XXXX", line 7
    while(count>=1)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:43:46) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		z=z-1
		y=y-2
	print(round(2*z,10))	
else:
	print("3.0")
-- ERROR:
File "XXXX", line 7
    while(count>=1)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:44:12) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		z=z-1
		y=y-2
else:
	print("3.0")
-- ERROR:
File "XXXX", line 7
    while(count>=1)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:44:53) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		z=z-1
		y=y-2
else:
	print("3.0")

if(n!=1):
	print(round(2*z,10))
-- ERROR:
File "XXXX", line 7
    while(count>=1)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:45:07) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		z=z-1
		y=y-2
else:
	print("3.0")

print(z)
-- ERROR:
File "XXXX", line 7
    while(count>=1)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:45:16) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
print(z)
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		z=z-1
		y=y-2
else:
	print("3.0")

print(z)
-- ERROR:
File "XXXX", line 7
    while(count>=1)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:45:34) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	print(b)
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		z=z-1
		y=y-2
else:
	print("3.0")

print(z)
-- ERROR:
File "XXXX", line 7
    while(count>=1)
                  ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:45:59) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		n=n-1
		y=y-2
else:
	print("3.0")

print(z)
-- OUTPUT:
1.570684973780949
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:46:14) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		n=n-1
		y=y-2
else:
	print("3.0")

print(round(2*z,10))
-- OUTPUT:
3.1413699476
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-05-23 19:46:30) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		n=n-1
		y=y-2
	print(round(2*z,10))	
else:
	print("3.0")


-- OUTPUT:
3.1413699476
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-23 19:46:36) 
-- CODE:
x = int(input("entrada:"))
n=x
y=(n*2)+1
b=1.5
z=0
if n != 1:
	while(n>=1):
		z=((n/y)*b)+1
		b=z
		n=n-1
		y=y-2
	print(round(2*z,10))	
else:
	print("3.0")


-- EXECUTION TIME:
0.192743
-- TEST CASE 1:
---- input:
10
---- correct output:
3.1413699476
---- user output:
3.1413699476
-- TEST CASE 2:
---- input:
150
---- correct output:
3.1415926536
---- user output:
3.1415926536
-- TEST CASE 3:
---- input:
100
---- correct output:
3.1415926536 
---- user output:
3.1415926536
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
