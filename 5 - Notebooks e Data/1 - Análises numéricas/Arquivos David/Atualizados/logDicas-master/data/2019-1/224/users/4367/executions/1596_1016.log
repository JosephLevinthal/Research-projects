== TEST (2019-03-22 12:16:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= 
from math import sqrt()

-- ERROR:
File "XXXX", line 7
    semi_perimetro= 
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:18:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math import sqrt()

-- ERROR:
File "XXXX", line 8
    from math import sqrt()
                         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:18:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math import:

-- ERROR:
File "XXXX", line 8
    from math import:
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:19:42) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math import sqrt


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:19:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math import sqrt


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:20:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math import sqrt
print(from math import sqrt())

-- ERROR:
File "XXXX", line 9
    print(from math import sqrt())
             ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:21:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math import sqrt
print(math import sqrt())

-- ERROR:
File "XXXX", line 9
    print(math import sqrt())
                    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:23:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from <math> import sqrt
print

-- ERROR:
File "XXXX", line 8
    from <math> import sqrt
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:24:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math impor*
print

-- ERROR:
File "XXXX", line 8
    from math impor*
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:24:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
semi_perimetro= a//2+b//2+c//2
from math import*
print

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:29:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:29:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:30:15) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:30:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:31:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- EXECUTION TIME:
0.128083
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1016/main.py", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:31:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- EXECUTION TIME:
0.126649
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1016/main.py", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:31:50) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= ((sp*(sp-a)*(sp-b)*(sp-c)))**0.5
print(round(area, 5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:31:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= ((sp*(sp-a)*(sp-b)*(sp-c)))**0.5
print(round(area, 5))

-- EXECUTION TIME:
0.173903
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/1016/main.py", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:32:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= ((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:33:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= int(input("escolha um numero" ))
b= int(input("escolaha um numero"))
c= int(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 4, in <module>
    a= int(input())
ValueError: invalid literal for int() with base 10: '11.0'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:34:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input("escolha um numero" ))
b= float(input("escolaha um numero"))
c= float(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- OUTPUT:
24.73863
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:35:02) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input("escolha um numero" ))
b= float(input("escolaha um numero"))
c= float(input("escolha um numero"))
sp= a//2+b//2+c//2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- EXECUTION TIME:
0.186651
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
24.73863
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
612.35284
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-22 12:49:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input("escolha um numero" ))
b= float(input("escolaha um numero"))
c= float(input("escolha um numero"))
sp= a/2+b/2+c/2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- OUTPUT:
69.41967
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-22 12:49:35) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a= float(input("escolha um numero" ))
b= float(input("escolaha um numero"))
c= float(input("escolha um numero"))
sp= a/2+b/2+c/2
from math import*
area= sqrt((sp*(sp-a)*(sp-b)*(sp-c)))
print(round(area, 5))

-- EXECUTION TIME:
0.208194
-- TEST CASE 1:
---- input:
11.0
19.5
13.2
---- correct output:
69.41967
---- user output:
69.41967
-- TEST CASE 2:
---- input:
30.0
40.0
50.0
---- correct output:
600.0
---- user output:
600.0
-- TEST CASE 3:
---- input:
33.0
43.0
55.0
---- correct output:
709.16654
---- user output:
709.16654
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
