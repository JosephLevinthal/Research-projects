== TEST (2019-07-09 18:23:47) 
-- CODE:
from numpy import*
s=input("digite: ").upper()
v=0
c=0
for ch in s:
	if(ch=="A" or ch=="E" or ch=="I" or ch=="O" or ch==U):
		v=v+1
	else:
		c=c+1
print(v)
print(c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-09 18:24:10) 
-- CODE:
from numpy import*
s=input("digite: ").upper()
v=0
c=0
for ch in s:
	if(ch=="A" or ch=="E" or ch=="I" or ch=="O" or ch=="U"):
		v=v+1
	else:
		c=c+1
print(v)
print(c)
-- EXECUTION TIME:
0.833045
-- TEST CASE 1:
---- input:
cachorro
---- correct output:
3
5
---- user output:
3
5
-- TEST CASE 2:
---- input:
amazonia
---- correct output:
5
3
---- user output:
5
3
-- TEST CASE 3:
---- input:
qwrt
---- correct output:
0
4
---- user output:
digite: 0
4
-- GRADE:
67%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-09 18:24:14) 
-- CODE:
from numpy import*
s=input("digite: ").upper()
v=0
c=0
for ch in s:
	if(ch=="A" or ch=="E" or ch=="I" or ch=="O" or ch=="U"):
		v=v+1
	else:
		c=c+1
print(v)
print(c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-07-09 18:24:37) 
-- CODE:
from numpy import*
s=input("digite: ").upper()
v=0
c=0
for ch in s:
	if(ch=="A" or ch=="E" or ch=="I" or ch=="O" or ch=="U"):
		v=v+1
	else:
		c=c+1
print(v)
print(c)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import*
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-07-09 18:24:45) 
-- CODE:
from numpy import*
s=input("digite: ").upper()
v=0
c=0
for ch in s:
	if(ch=="A" or ch=="E" or ch=="I" or ch=="O" or ch=="U"):
		v=v+1
	else:
		c=c+1
print(v)
print(c)
-- EXECUTION TIME:
0.968944
-- TEST CASE 1:
---- input:
cachorro
---- correct output:
3
5
---- user output:
3
5
-- TEST CASE 2:
---- input:
amazonia
---- correct output:
5
3
---- user output:
5
3
-- TEST CASE 3:
---- input:
qwrt
---- correct output:
0
4
---- user output:
0
4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
