== TEST (2019-04-11 19:22:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
g= float(input("aceleração da graviade"))
a=randians(angulo)
d= abs(v0**2*sin(2*a)/g)
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a=randians(angulo)
NameError: name 'randians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:23:03) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
g= float(input("aceleração da graviade"))
a=randians(angulo)
d= abs(v0**2*sin(2*a)/g)
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a=randians(angulo)
NameError: name 'randians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:23:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
g= float(input("aceleração da graviade"))
a=randians(angulo)
d= v0**2*sin(2*a)/g
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a=randians(angulo)
NameError: name 'randians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:23:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
g= input("aceleração da graviade")
a=randians(angulo)
d= v0**2*sin(2*a)/g
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a=randians(angulo)
NameError: name 'randians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:24:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha a distancia"))
d= input("aceleração da graviade")
a=randians(angulo)
r= v0**2*sin(2*a)/g
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a=randians(angulo)
NameError: name 'randians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:25:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha a distancia"))
d= float(input("aceleração da graviade"))
a=randians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a=randians(angulo)
NameError: name 'randians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:26:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha a distancia"))
d= float(input("aceleração da graviade"))
a=randians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
print(d)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    a=randians(angulo)
NameError: name 'randians' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:27:24) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha a distancia"))
d= float(input("aceleração da graviade"))
a=radians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
print(d)
-- OUTPUT:
11.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:28:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
print(d)
-- OUTPUT:
11.3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:32:48) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
if (abs(d-r)<0.1):
	 print("sim")
else:
	print("não")
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:34:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
if (abs(d-r)<0.1):
	m= "sim"
	 print(m)
else:
	m= "não"
	print(m)
-- ERROR:
File "XXXX", line 13
    print(m)
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:34:32) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
if (abs(d-r)<0.1):
	m= "sim"
	print(m)
else:
	m= "não"
	print(m)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:35:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
if (abs(d-r)<0.1):
	m= "sim"
	print(m)
else:
	m= "não"
	print(m)
-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:37:55) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= v0**2*sin(2*a)/g
print(r)
if (abs(d-r)<0.1):
	m= "sim"
	print(m)
else:
	m= "não"
	print(m)
-- OUTPUT:
11.2482865705094
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:38:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
print(r)
if (abs(d-r)<0.1):
	m= "sim"
	print(m)
else:
	m= "não"
	print(m)
-- OUTPUT:
11.2482865705094
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:39:23) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
print(r)
if(abs(d-r)<0.1):
	m= "sim"
	print(m)
else:
	m= "não"
	print(m)
-- OUTPUT:
11.2482865705094
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:39:53) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
print(r)
if(abs(d-r)<0.1):
	m= "sim"
	print(m)
else:
	m= "não"
	print(n)
-- OUTPUT:
11.2482865705094
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:39:57) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
print(r)
if(abs(d-r)<0.1):
	m= "sim"
	print(m)
else:
	m= "não"
	print(m)
-- OUTPUT:
11.2482865705094
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:42:08) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
print(r)
if(  abs(d-r) < 0.1 ):
	m= "sim"
	print(m)
else:
	m= "nao"
	print(m)
-- OUTPUT:
11.2482865705094
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:42:39) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("escolha a velociade"))
angulo= float(input("escolha o angulo"))
d= float(input("escolha a distancia"))
a=radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if(  abs(d-r) < 0.1 ):
	m= "sim"
	print(m)
else:
	m= "nao"
	print(m)
-- EXECUTION TIME:
0.192209
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
