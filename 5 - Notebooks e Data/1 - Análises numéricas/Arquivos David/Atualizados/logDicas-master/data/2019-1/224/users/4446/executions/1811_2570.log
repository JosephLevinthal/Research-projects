== TEST (2019-06-11 18:17:39) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

from i in vet:
	f=abs(elemento-m)*f
p=f**1/n
print(round(p, 3))
	
-- ERROR:
File "XXXX", line 7
    from i in vet:
            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:18:02) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

from elemento in vet:
	f=abs(elemento-m)*f
p=f**1/n
print(round(p, 3))
	
-- ERROR:
File "XXXX", line 7
    from elemento in vet:
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:18:06) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

from elemento in vet:
	f=abs(elemento-m)*f
p=f**1/n
print(round(p, 3))
	
-- ERROR:
File "XXXX", line 7
    from elemento in vet:
                   ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:18:15) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

for elemento in vet:
	f=abs(elemento-m)*f
p=f**1/n
print(round(p, 3))
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:21:58) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

for elemento in vet:
	f=abs(elemento-m)*f
	p=f**1/n
print(round(p, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:22:48) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

for elemento in vet:
	f=abs(elemento-m)*f
p=f**1/n
print(round(p, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:25:04) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

for elemento in vet:
	f=abs(elemento-m)*f
	print(f)
p=f**1/n
print(round(p, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:25:59) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1
print(m)

for elemento in vet:
	f=abs(elemento-m)*f
	print(f)
p=f**1/n
print(round(p, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-06-11 18:28:59) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1
print(m)

for elemento in vet:
	f=abs(elemento-m)*f
	print(f)
p=f**(1/n)
print(round(p, 3))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 1, in <module>
    from numpy import *
ModuleNotFoundError: No module named 'numpy'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-11 18:29:55) 
-- CODE:
from numpy import *
vet=array(eval(input("digite os numeros: ")))
n=size(vet)
m=sum(vet)/n
f=1

for elemento in vet:
	f=abs(elemento-m)*f
p=f**(1/n)
print(round(p, 3))
-- EXECUTION TIME:
0.951849
-- TEST CASE 1:
---- input:
[-25,8,-6,10,12,13,-4,-7,-9]
---- correct output:
8.839
---- user output:
8.839
-- TEST CASE 2:
---- input:
[-1.5,-5.5,-3.8,-9.6,-12.8,-13.3,-15.9]
---- correct output:
3.757
---- user output:
3.757
-- TEST CASE 3:
---- input:
[32.2,31.6,42.8,61.7,10.5,52.7,15.9,17.8,19.2]
---- correct output:
0.212
---- user output:
0.212
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
