== TEST (2019-03-26 18:42:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
int(input(Escreva quatro numeros))

-- ERROR:
File "XXXX", line 4
    int(input(Escreva quatro numeros))
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:42:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(Escreva quatro numeros))

-- ERROR:
File "XXXX", line 4
    input(Escreva quatro numeros))
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:42:36) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
input(Escreva quatro numeros)

-- ERROR:
File "XXXX", line 4
    input(Escreva quatro numeros)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:42:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input(Escreva quatro numeros)

-- ERROR:
File "XXXX", line 4
    a = input(Escreva quatro numeros)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:42:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input(escreva quatro numeros)

-- ERROR:
File "XXXX", line 4
    a = input(escreva quatro numeros)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:42:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input(escreva quatro numeros)

-- ERROR:
File "XXXX", line 4
    a = input(escreva quatro numeros)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:42:58) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input(escreva quatro numeros)

-- ERROR:
File "XXXX", line 4
    a = input(escreva quatro numeros)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:43:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = input("escreva quatro numeros")

-- ERROR:
File "XXXX", line 4
    a = input(escreva quatro numeros)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:43:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("escreva quatro numeros"))
		 
-- ERROR:
File "XXXX", line 4
    a = input(escreva quatro numeros)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:47:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("1 digito"))
b = int(input("2 digito"))
c = int(input("3 digito"))
d = int(input("4 digito"))
print(a+b+c+d)
		 
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 5, in <module>
    b = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:47:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("1 digito"))
b = int(input("2 digito"))
c = int(input("3 digito"))
d = int(input("4 digito"))
print(a+b+c+d)
		 
-- EXECUTION TIME:
0.187983
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/842/main.py", line 5, in <module>
    b = int(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:49:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digitos"))

print(a%4)
		 
-- OUTPUT:
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:49:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digitos"))

print(a//4)
		 
-- OUTPUT:
2293
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:49:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("digitos"))

print(a//4)
		 
-- OUTPUT:
2293
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:52:55) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
    n = (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
		 
-- OUTPUT:
A soma dos números é:  0.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:53:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
n = int(input("Digite um número inteiro: "))

soma = 0

while (n > 0):

    resto = n % 10
      (n - resto)/10
    soma = soma + resto


print("A soma dos números é: ", n)
		 
-- ERROR:
File "XXXX", line 11
    (n - resto)/10
    ^
IndentationError: unexpected indent
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 18:55:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada//1000
print(primeiro_digito)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:02:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
primeiro_digito = entrada//1000
seg_dig = entrada % 100
				  ter_dig = entrada % 10
				  quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
				  print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    primeiro_digito = entrada//1000
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:02:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
primeiro_digito = entrada // 1000
seg_dig = entrada % 100
				  ter_dig = entrada % 10
				  quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
				  print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    primeiro_digito = entrada // 1000
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:03:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pri_dig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pri_dig = entrada // 1000
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:23) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:26) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:32) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:03) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000

-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000

-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000

-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000

-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:05) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos")
pridig = entrada // 1000

-- ERROR:
File "XXXX", line 5
    pridig = entrada // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
pridig = a // 1000

-- ERROR:
File "XXXX", line 5
    pridig = a // 1000
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos")
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
a = int(input("numero de quatro digitos"))
b = a // 1000

-- ERROR:
File "XXXX", line 5
    b = a // 1000
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:54) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pridig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + quar_dig
NameError: name 'primeiro_digito' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:06:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)
-- OUTPUT:
85
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:08:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

print(entrada % 100)
-- OUTPUT:
85
73
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

print(entrada % 100)
-- OUTPUT:
85
73
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:10:11) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
seg_dig = entrada % 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

print(entrada % 1000)
-- OUTPUT:
85
173
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:12:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
ter_dig = entrada % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

print(pergarsegdigito // 100)
-- OUTPUT:
13
1
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:14:57) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegarquartodigito = pergarterceirodigito % 10
quar_dig = entrada % 1
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)

print(pergarterceirodigito % 10)
-- OUTPUT:
17
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:15:20) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegarquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)


-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:15:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digitos"))
pri_dig = entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegarquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10
				  
				  
soma_dos_digitos = pri_dig + seg_dig + ter_dig + quar_dig
print(soma_dos_digitos)


-- EXECUTION TIME:
0.130314
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
