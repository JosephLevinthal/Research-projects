== TEST (2019-03-31 00:15:36) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
f = ((5*d1)**0.5 + pi * d2/3)
int(f)
#saídas
print(p)
print(d1)
print(d2)
print(f)

-- OUTPUT:
200
1
6
8.519253284679376
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:15:47) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
f = ((5*d1)**0.5 + pi * d2/3)
int(f)
#saídas
print(p)
print(d1)
print(d2)
print(f)

-- OUTPUT:
200
1
6
8.519253284679376
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:16:11) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
f = int(f(5*d1)**0.5 + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(f)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    f = int(f(5*d1)**0.5 + pi * d2/3)
NameError: name 'f' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:16:25) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
f = int(f)((5*d1)**0.5 + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(f)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    f = int(f)((5*d1)**0.5 + pi * d2/3)
NameError: name 'f' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:16:48) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
f = int((5*d1)**0.5 + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(f)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 00:16:54) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
f = int((5*d1)**0.5 + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(f)

-- EXECUTION TIME:
0.135604
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
200
1
6
8
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
300
6
6
11
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
500
1
1
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:17:31) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = float(input("digite D1: "))
d2 = float(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int((5*d1)**0.5 + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1.0
6.0
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:17:49) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int((5*d1)**0.5 + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:19:06) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-31 00:19:12) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- EXECUTION TIME:
0.129556
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
200
1
6
8
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
300
6
6
11
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
500
1
1
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:19:26) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:20:33) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#ppontos iniciais no RPG
p = int(input("digite pontos iniciais: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    d2 = int(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:20:57) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2/3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:22:54) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2//3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:24:03) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * 3 / 2)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:24:11) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * 3 // 2)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:24:17) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * 3 // 2)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
6
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:24:30) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * 3 // d2)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:24:36) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * 3 // d2)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:24:46) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2 / 3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-31 00:24:53) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2 / 3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:03:44) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2 // 3)
#saídas
print(p)
print(d1)
print(d2)
print(dano)

-- OUTPUT:
200
1
6
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:04:05) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2 // 3)
#saídas

print(dano)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 18:04:11) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int(sqrt(5*d1) + pi * d2 // 3)
#saídas

print(dano)

-- EXECUTION TIME:
0.142064
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
8
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
11
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 18:04:49) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import * 
dano = int((5*d1)**0.5 + pi * d2 // 3)
#saídas
print(dano)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:12:19) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import *
dano = int(sqrt(5*d1) + pi * d2 // 3)
#saídas
print(dano)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 18:12:27) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import *
dano = int(sqrt(5*d1) + pi * d2 // 3)
#saídas
print(dano)

-- EXECUTION TIME:
0.201013
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
8
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
11
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:12:27) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import *
dano = int(sqrt(5*d1) + pi * d2 // 3)
#saídas
print(dano)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:13:11) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import *
dano = sqrt(5*d1) + pi * d2 // 3
dano_final = int(dano)
#saídas
print(dano_final)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 18:13:15) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))
#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))
#pontos de vida RESTANTES
from math import *
dano = sqrt(5*d1) + pi * d2 // 3
dano_final = int(dano)
#saídas
print(dano_final)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:10:00) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = sqrt(5*d1) + pi * d2 // 3


#saídas
print(dano)

-- OUTPUT:
8.23606797749979
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:10:07) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = sqrt(5*d1) + pi * d2 // 3


#saídas
print(dano)

-- OUTPUT:
8.23606797749979
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:15:07) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = sqrt(5*d1) + pi * (d2 // 3)

dano_final = int(dano)

#saídas
print(dano_final)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:15:23) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = sqrt(5*d1) + pi * (d2 / 3)

dano_final = int(dano)

#saídas
print(dano_final)

-- EXECUTION TIME:
0.134296
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
8
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
11
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:15:24) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = sqrt(5*d1) + pi * (d2 / 3)

dano_final = int(dano)

#saídas
print(dano_final)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:16:03) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = (sqrt(5*d1)) + pi * (d2 // 3)

dano_final = int(dano)

#saídas
print(dano_final)

-- OUTPUT:
8
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:17:17) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = (sqrt(5*d1)) + pi * (d2 // 3)
dano_final1 = int(dano)
dano_final2 = (p - dano_final1)

#saídas
print(dano_final2)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:17:46) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = (sqrt(5*d1)) + pi * (d2 / 3)
dano_final1 = int(dano)
dano_final2 = (p - dano_final1)

#saídas
print(dano_final2)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:17:52) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = (sqrt(5*d1)) + pi * (d2 / 3)
dano_final1 = int(dano)
dano_final2 = (p - dano_final1)

#saídas
print(dano_final2)

-- EXECUTION TIME:
0.170118
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
192
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
289
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:17:59) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = (sqrt(5*d1)) + pi * (d2 / 3)
dano_final1 = int(dano)
dano_final2 = (p - dano_final1)

#saídas
print(dano_final2)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:18:03) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = (sqrt(5*d1)) + pi * (d2 / 3)
dano_final1 = int(dano)
dano_final2 = (p - dano_final1)

#saídas
print(dano_final2)

-- EXECUTION TIME:
0.186416
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
192
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
289
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:18:03) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = (sqrt(5*d1)) + pi * (d2 / 3)
dano_final1 = int(dano)
dano_final2 = (p - dano_final1)

#saídas
print(dano_final2)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:18:23) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((sqrt(5*d1)) + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:18:27) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((sqrt(5*d1)) + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- EXECUTION TIME:
0.209382
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
192
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
289
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:18:28) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((sqrt(5*d1)) + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:18:53) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((sqrt(5*d1)) + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- EXECUTION TIME:
0.19977
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
192
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
289
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:18:56) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((sqrt(5*d1)) + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:19:12) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((sqrt(5*d1)) + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:19:16) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((sqrt(5*d1)) + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- EXECUTION TIME:
0.19058
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
192
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
289
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:20:04) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3)
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- ERROR:
File "XXXX", line 11
    dano_final1 = (p - dano)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:20:19) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:20:23) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- EXECUTION TIME:
0.165462
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
192
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
289
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:20:25) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:21:32) 
-- CODE:
#pontos de vida iniciais do RPG
p = float(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = float(input("digite D1: "))
d2 = float(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:21:38) 
-- CODE:
#pontos de vida iniciais do RPG
p = float(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = float(input("digite D1: "))
d2 = float(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- EXECUTION TIME:
0.129531
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
192.0
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
289.0
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:21:38) 
-- CODE:
#pontos de vida iniciais do RPG
p = float(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = float(input("digite D1: "))
d2 = float(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:21:58) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:24:12) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi * (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
192
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-04 19:24:35) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi ** (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- OUTPUT:
188
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-04 19:24:39) 
-- CODE:
#pontos de vida iniciais do RPG
p = int(input("digite pontos de vida: "))

#valores sorteados nos dados D1 e D2
d1 = int(input("digite D1: "))
d2 = int(input("digite D2: "))

#pontos de vida RESTANTES
from math import *
dano = int((5*d1)**0.5 + pi ** (d2 / 3))
dano_final1 = (p - dano)

#saídas
print(dano_final1)

-- EXECUTION TIME:
0.134409
-- TEST CASE 1:
---- input:
200
1
6
---- correct output:
188
---- user output:
188
-- TEST CASE 2:
---- input:
300
6
6
---- correct output:
285
---- user output:
285
-- TEST CASE 3:
---- input:
500
1
1
---- correct output:
497
---- user output:
497
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
