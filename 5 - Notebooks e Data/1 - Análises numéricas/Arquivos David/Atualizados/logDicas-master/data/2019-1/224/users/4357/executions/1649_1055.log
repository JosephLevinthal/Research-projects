== SUBMITION (2019-04-11 19:16:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"


-- EXECUTION TIME:
0.144653
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 9
    r=(v0**)*(sin(2*a))/g
           ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:16:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"


-- ERROR:
File "XXXX", line 9
    r=(v0**)*(sin(2*a))/g
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:16:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"


-- ERROR:
File "XXXX", line 9
    r=(v0**)*(sin(2*a))/g
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:17:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"


-- EXECUTION TIME:
0.139722
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:

-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:

-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:17:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"


-- ERROR:
File "XXXX", line 9
    r=(v0**)*(sin(2*a))/g
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:18:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.200089
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:18:10) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:18:29) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.157436
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
nao
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
nao
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:18:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (distancia==r):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- OUTPUT:
nao
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:21:27) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (abs(distancia - r):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.279571
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 10
    if (abs(distancia - r):
                          ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:22:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.161283
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 10
    if (abs(distancia - r < 0,1):
                                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:23:04) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- ERROR:
File "XXXX", line 10
    if (abs(distancia - r < 0,1):
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:23:52) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.191232
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 10, in <module>
    if (abs(distancia - r < 0,1)):
TypeError: abs() takes exactly one argument (2 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:24:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(distancia - r < 0,1)):
TypeError: abs() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-11 19:24:07) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.159227
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 10, in <module>
    if (abs(distancia - r < 0,1)):
TypeError: abs() takes exactly one argument (2 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-11 19:24:11) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r=(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(distancia - r < 0,1)):
TypeError: abs() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 18:18:44) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.242627
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 10, in <module>
    if (abs(distancia - r < 0,1)):
TypeError: abs() takes exactly one argument (2 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 18:18:51) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(distancia - r < 0,1)):
TypeError: abs() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 18:19:31) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (abs(distancia - r < 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(distancia - r < 0,1)):
TypeError: abs() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 18:43:05) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (abs(distancia - r > 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.289994
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/1055/main.py", line 10, in <module>
    if (abs(distancia - r > 0,1)):
TypeError: abs() takes exactly one argument (2 given)

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 18:43:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (abs(distancia - r > 0,1)):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    if (abs(distancia - r > 0,1)):
TypeError: abs() takes exactly one argument (2 given)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 18:44:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (distancia - r > 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 18:44:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (distancia - r > 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.159886
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:21:33) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= radians(v0**2)*(sin(2*a))/g
if (abs(distancia - r) < 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.134806
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:23:12) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(distancia - r) < 0,1):
	mensagem="sim"
	pint(mesagem)
else:
	mensagem= "nao"
   print(mensagem)


-- EXECUTION TIME:
0.225094
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 15
    print(mensagem)
                  ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:23:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(distancia - r) < 0,1):
	mensagem="sim"
	pint(mesagem)
else:
	mensagem= "nao"
   print(mensagem)


-- ERROR:
File "XXXX", line 15
    print(mensagem)
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:24:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
angulo= radians(a)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(distancia - r) < 0,1):
	mensagem="sim"
	print(mesagem)
else:
	mensagem= "nao"
   print(mensagem)


-- EXECUTION TIME:
0.155882
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 16
    print(mensagem)
                  ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:24:43) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
angulo= radians(a)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(distancia - r) < 0,1):
	mensagem="sim"
	print(mesagem)
else:
	mensagem= "nao"
   print(mensagem)


-- ERROR:
File "XXXX", line 16
    print(mensagem)
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:25:13) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
angulo= radians(a)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(distancia - r) < 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:25:34) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
a=float(input("digite o numero"))
distancia=float(input("digite o numero"))
angulo= radians(a)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(distancia - r) < 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.198965
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:27:35) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem="sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.158948
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:27:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem= "sim"
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.21282
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:28:58) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem= "sim"
	print(mensagem)
else:
	mensagem= "nao"
   print(mensagem)


-- EXECUTION TIME:
0.172471
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 16
    print(mensagem)
                  ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:29:01) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem= "sim"
	print(mensagem)
else:
	mensagem= "nao"
   print(mensagem)


-- ERROR:
File "XXXX", line 16
    print(mensagem)
                  ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:29:22) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem= "sim"
	print(mensagem)
else:
	mensagem= "nao"
print(mensagem)


-- EXECUTION TIME:
0.171226
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:29:28) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem= "sim"
	print(mensagem)
else:
	mensagem= "nao"
print(mensagem)


-- OUTPUT:
sim
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:30:14) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem= "sim"
	print(mensagem)
else:
	m= "nao"
   print(m)


-- EXECUTION TIME:
0.151217
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 16
    print(m)
           ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:30:19) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	mensagem= "sim"
	print(mensagem)
else:
	m= "nao"
   print(m)


-- ERROR:
File "XXXX", line 16
    print(m)
           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:31:37) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if ( abs(d-r) < 0,1):
	m= "sim"
	print(m)
else:
	m= "nao"
   print(m)


-- EXECUTION TIME:
0.130372
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 16
    print(m)
           ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:31:59) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if( abs(d-r) < 0,1):
	m= "sim"
	print(m)
else:
	m= "nao"
   print(m)


-- EXECUTION TIME:
0.144418
-- ERROR:
  File "/home/codebench/codes/1649/1055/main.py", line 16
    print(m)
           ^
IndentationError: unindent does not match any outer indentation level

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:32:38) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if( abs(d-r) < 0,1):
	m= "sim"
	print(m)
else:
	m= "nao"
   print(m)


-- ERROR:
File "XXXX", line 16
    print(m)
           ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-16 10:34:17) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if( abs(d-r) < 0,1):
	m= "sim"
else:
	m= "nao"
print(m)


-- OUTPUT:
sim
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-16 10:35:00) 
-- CODE:
# Teste seu código aos poucos.
# Não teste tudo no final, pois fica mais difícil de identificar erros.
# Use as mensagens de erro para corrigir seu código.
from math import*
v0=float(input("digite o numero"))
angulo=float(input("digite o numero"))
d=float(input("digite o numero"))
a= radians(angulo)
g=9.8
r= (v0**2*sin(2*a))/g
if( abs(d-r) < 0,1):
	m= "sim"
else:
	m= "nao"
print(m)


-- EXECUTION TIME:
0.150226
-- TEST CASE 1:
---- input:
10.5
45.5
11.3
---- correct output:
sim
---- user output:
sim
-- TEST CASE 2:
---- input:
29.5
17.1
51.0
---- correct output:
nao
---- user output:
sim
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
