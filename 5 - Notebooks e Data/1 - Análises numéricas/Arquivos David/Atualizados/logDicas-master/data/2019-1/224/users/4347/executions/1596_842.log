== TEST (2019-03-26 18:55:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada=3141
primerio_digito=entrada//1000
print(primeiro_digito)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print(primeiro_digito)
NameError: name 'primeiro_digito' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:56:04) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada=3141
primeiro_digito=entrada//1000
print(primeiro_digito)
-- EXECUTION TIME:
0.118702
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:56:33) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada=3141
primeiro_digito =entrada//1000
print (primeiro_digito)
-- EXECUTION TIME:
0.189199
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:00:13) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada= int(input("numero de quatro digitos:"))
pri_dig =entrada // 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
NameError: name 'seg_dig' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:00:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada= int(input("numero de quatro digitos:"))
pri_dig =entrada // 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- EXECUTION TIME:
0.243613
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/842/main.py", line 8, in <module>
    soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
NameError: name 'seg_dig' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:00:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada= int(input("numero de quatro digitos:"))
pri_dig =entrada // 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- EXECUTION TIME:
0.188964
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/842/main.py", line 8, in <module>
    soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
NameError: name 'seg_dig' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:00:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada= int(input("numero de quatro digitos:"))
pri_dig =entrada // 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
NameError: name 'seg_dig' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:00:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada= int(input("numero de quatro digitos: "))
pri_dig =entrada // 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- EXECUTION TIME:
0.177399
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/842/main.py", line 8, in <module>
    soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
NameError: name 'seg_dig' is not defined

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:04:47) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada= int(input("numero de quatro digitos: "))
seg_dig= entrada // 1000
pri_dig=entrada // 1000
terc_dig= entrada % 1000
q_dig= entrada % 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- OUTPUT:
9
364
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:05:01) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada= int(input("numero de quatro digitos: "))
seg_dig= entrada // 1000
pri_dig=entrada // 1000
terc_dig= entrada % 1000
q_dig= entrada % 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- EXECUTION TIME:
0.160254
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
364
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
22
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:06:16) 
-- CODE:

entrada= int(input("numero de quatro digitos: "))
seg_dig= entrada // 1000
pri_dig=entrada // 1000
terc_dig= entrada % 1000
q_dig= entrada % 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- OUTPUT:
9
364
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:06:30) 
-- CODE:

entrada= int(input("numero de quatro digitos: "))
seg_dig= entrada // 1000
pri_dig=entrada // 1000
terc_dig= entrada % 1000
q_dig= entrada % 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- EXECUTION TIME:
0.219502
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
364
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
22
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:07:12) 
-- CODE:

entrada= int(input("numero de quatro digitos: "))
seg_dig= entrada // 1000
pri_dig=entrada // 1000
terc_dig= entrada % 1000
q_dig= entrada % 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- EXECUTION TIME:
0.20359
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
364
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
22
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:07:14) 
-- CODE:

entrada= int(input("numero de quatro digitos: "))
seg_dig= entrada // 1000
pri_dig=entrada // 1000
terc_dig= entrada % 1000
q_dig= entrada % 1000
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- OUTPUT:
9
364
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:08:04) 
-- CODE:

entrada= int(input("numero de quatro digitos: "))
seg_dig= entrada // 1000
print (seg_dig)
pri_dig=entrada // 1000
terc_dig= entrada % 1000
print (terc_dig)
q_dig= entrada % 1000
print (q_dig)
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- EXECUTION TIME:
0.161918
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
173
173
9
364
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
10
10
1
22
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:17) 
-- CODE:

entrada= int(input("numero de quatro digitos: ")
seg_dig= entrada // 1000
print (seg_dig)
pri_dig=entrada // 1000
terc_dig= entrada % 1000
print (terc_dig)
q_dig= entrada % 1000
print (q_dig)
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- ERROR:
File "XXXX", line 3
    seg_dig= entrada // 1000
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:27) 
-- CODE:

entrada= int(input("numero de quatro digitos: ")
seg_dig  entrada // 1000
print (seg_dig)
pri_dig=entrada // 1000
terc_dig= entrada % 1000
print (terc_dig)
q_dig= entrada % 1000
print (q_dig)
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- ERROR:
File "XXXX", line 3
    seg_dig  entrada // 1000
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:38) 
-- CODE:

entrada= int(input("numero de quatro digitos: ")
seg_dig =trada // 1000
print (seg_dig)
pri_dig=entrada // 1000
terc_dig= entrada % 1000
print (terc_dig)
q_dig= entrada % 1000
print (q_dig)
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- ERROR:
File "XXXX", line 3
    seg_dig =trada // 1000
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:54) 
-- CODE:

entrada= int(input("numero de quatro digitos: ")
seg_dig =entrada //1000
print (seg_dig)
pri_dig=entrada // 1000
terc_dig= entrada % 1000
print (terc_dig)
q_dig= entrada % 1000
print (q_dig)
print (pri_dig)

soma_dos_digitos = pri_dig + seg_dig + terc_dig + q_dig
print (soma_dos_digitos)
-- ERROR:
File "XXXX", line 3
    seg_dig =entrada //1000
          ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 08:42:41) 
-- CODE:
numero=int(input("numero com quatro algarismo: "))
pri_algarismo=numero//1000
seg_algarismo=(numero%1000)//100
terc_algarismo=((numero%1000)%100)//10
quart_algarismo=(((numero%1000)%100)%10)
somatorio_algarismos= pri_algarismo+seg_algarismo+terc_algarismo+quart_algarismo
print(somatorio_algarismos)
-- EXECUTION TIME:
0.14689
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
