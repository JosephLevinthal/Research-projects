== TEST (2019-03-26 20:11:31) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t2) * cos(t2) * cos(g1 - g2))
print(round(distancia,2))

-- OUTPUT:
80.63
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 20:12:24) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t2) * cos(t2) * cos(g1 - g2))
print(round(distancia,2))

-- OUTPUT:
80.63
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 20:12:27) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t2) * cos(t2) * cos(g1 - g2))
print(round(distancia,2))

-- EXECUTION TIME:
0.119891
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
80.63
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 20:12:45) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t2) * cos(t2) * cos(g1 - g2))
print(round(distancia,2))

-- OUTPUT:
80.63
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 20:14:49) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t2) * cos(t2) * cos(g1 - g2))
print(round(distancia = R,2))

-- EXECUTION TIME:
0.124595
-- ERROR:
  File "/home/codebench/codes/1596/1017/main.py", line 11
    print(round(distancia = R,2))
                             ^
SyntaxError: non-keyword arg after keyword arg

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 20:14:53) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t2) * cos(t2) * cos(g1 - g2))
print(round(distancia = R,2))

-- ERROR:
File "XXXX", line 11
    print(round(distancia = R,2))
                             ^
SyntaxError: positional argument follows keyword argument
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 20:15:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t2) * cos(t2) * cos(g1 - g2))
print(round(distancia,2))

-- EXECUTION TIME:
0.1138
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
80.63
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 20:15:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
from math import *
t1 = radians(float(input("Latitude de P1: ")))
g1 = radians(float(input("Latitude de G1: ")))
t2 = radians(float(input("Latitude de T2: ")))
g2 = radians(float(input("Latitude de G1: ")))
R = 6371.01
distancia = R * acos(sin(t1) * sin(t2) + cos(t1) * cos(t2) * cos(g1 - g2))
print(round(distancia,2))

-- EXECUTION TIME:
0.169817
-- TEST CASE 1:
---- input:
-3.036131
-60.04585
-3.088496
-59.59464
---- correct output:
50.44
---- user output:
50.44
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
