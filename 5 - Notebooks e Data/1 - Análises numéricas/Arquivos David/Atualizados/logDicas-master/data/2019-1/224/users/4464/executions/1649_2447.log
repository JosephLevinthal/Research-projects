== TEST (2019-04-10 17:14:24) 
-- CODE:
preço = float(input("digite o preço do bagulho, negão:"))
pagamento = float(input("informe o valor pago, peixão:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" x)
else:
	imprima = ("Troco de" y)
-- ERROR:
File "XXXX", line 6
    imprima = ("Falta" x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:14:32) 
-- CODE:
preço = float(input("digite o preço do bagulho, negão:"))
pagamento = float(input("informe o valor pago, peixão:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" x)
else:
	imprima = ("Troco de" , y)
-- ERROR:
File "XXXX", line 6
    imprima = ("Falta" x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:14:39) 
-- CODE:
preço = float(input("digite o preço do bagulho, negão:"))
pagamento = float(input("informe o valor pago, peixão:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" , x)
else:
	imprima = ("Troco de" , y)
-- ERROR:
File "XXXX", line 6
    imprima = ("Falta" x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:14:51) 
-- CODE:
preço = float(input("digite o preço do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" , x)
else:
	imprima = ("Troco de" , y)
-- ERROR:
File "XXXX", line 6
    imprima = ("Falta" x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:15:06) 
-- CODE:
preço = float(input("digite o preco do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" , x)
else:
	imprima = ("Troco de" , y)
-- ERROR:
File "XXXX", line 6
    imprima = ("Falta" x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:15:22) 
-- CODE:
preço = float(input("digite o preço do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" , x)
else:
	imprima = ("Troco de" , y)
-- ERROR:
File "XXXX", line 6
    imprima = ("Falta" x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:15:31) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" , x)
else:
	imprima = ("Troco de" , y)
-- ERROR:
File "XXXX", line 6
    imprima = ("Falta" x)
                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:16:16) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" , x)
else:
	imprima = ("Troco de" , y)
print (round (imprima , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round (imprima , 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:17:15) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	imprima = ("Falta" , x)
else:
	imprima = ("Troco de" , y)
print (round (imprima,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round (imprima,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:18:01) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	ver = ("Falta" , x)
else:
	ver = ("Troco de" , y)
print (round (ver,2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round (ver,2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:18:47) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	ver = ("Falta" , x)
else:
	ver = ("Troco de" , y)
print (round ((ver),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round ((ver),2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:19:10) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
x = preço - pagamento
y = pagamento - preço
if (preço > pagamento):
	ver = ("Falta" , x)
else:
	ver = ("Troco de" , y)
	print (round ((ver),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round ((ver),2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:22:17) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = preço - pagamento
Y = pagamento - preço
if (preço > pagamento):
	ver = ("Falta" , X)
else:
	ver = ("Troco de" , Y)
	print (round ((ver),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round ((ver),2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:22:45) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ("Falta" , X)
else:
	ver = ("Troco de" , Y)
	print (round ((ver),2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 9, in <module>
    print (round ((ver),2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:23:01) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ("Falta" , X)
else:
	ver = ("Troco de" , Y)
	print (ver,2))
-- ERROR:
File "XXXX", line 9
    print (ver,2))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:23:06) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ("Falta" , X)
else:
	ver = ("Troco de" , Y)
	print (ver,2)
-- ERROR:
File "XXXX", line 9
    print (ver,2))
                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:23:18) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ("Falta" , X)
else:
	ver = ("Troco de" , Y)
print (ver,2)
-- OUTPUT:
('Falta', 26.0) 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:23:51) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ('Falta' , X)
else:
	ver = ('Troco de' , Y)
print (ver,2)
-- OUTPUT:
('Falta', 26.0) 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:24:15) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ('Falta' , X)
else:
	ver = ('Troco de' , Y)
print (ver)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:24:40) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ('Falta' , X)
else:
	ver = ('Troco de' Y)
print (ver)
-- ERROR:
File "XXXX", line 8
    ver = ('Troco de' Y)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:24:50) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ('Falta' , X)
else:
	ver = 'Troco de', Y
print (ver)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:25:10) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ('Falta' , X)
else:
	ver = 'Troco de', Y
print (ver)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:26:22) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ("Falta X")
else:
	ver = ("Troco de", Y)
print (ver)
-- OUTPUT:
Falta X
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:26:46) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ("Falta ",X)
else:
	ver = ("Troco de", Y)
print (ver)
-- OUTPUT:
('Falta ', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:26:49) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
X = (preço) - (pagamento)
Y = (pagamento) - (preço)
if (preço > pagamento):
	ver = ("Falta ",X)
else:
	ver = ("Troco de", Y)
print (ver)
-- EXECUTION TIME:
0.14578
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
('Falta ', 26.0)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
('Troco de', 28.0)
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
('Troco de', 0.0)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:28:32) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , (preço - pagamento)
-- ERROR:
File "XXXX", line 5
    
                                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:28:49) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" ,preço - pagamento)
-- ERROR:
File "XXXX", line 5
    
                                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:29:38) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print(imprimir)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:29:48) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print(imprimir)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:29:49) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print(imprimir)
-- EXECUTION TIME:
0.182596
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
('Falta', 26.0)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
('Troco de', 28.0)
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
('Troco de', 0.0)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:30:10) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print(round(imprimir))
-- EXECUTION TIME:
0.182941
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/2447/main.py", line 7, in <module>
    print(round(imprimir))
TypeError: type tuple doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:30:19) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print(round(imprimir)
-- EXECUTION TIME:
0.151207
-- ERROR:
  File "/home/codebench/codes/1649/2447/main.py", line 8
    
                         ^
SyntaxError: unexpected EOF while parsing

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:30:50) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print(round((imprimir,2))
-- ERROR:
File "XXXX", line 8
    
                             ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:30:59) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print(round(imprimir,2)
-- ERROR:
File "XXXX", line 8
    
                           ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:31:13) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print round(imprimir,2)
-- ERROR:
File "XXXX", line 7
    print round(imprimir,2)
              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:31:41) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (round (imprimir , 2))
-- EXECUTION TIME:
0.137476
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1649/2447/main.py", line 7, in <module>
    print (round (imprimir , 2))
TypeError: type tuple doesn't define __round__ method

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:31:43) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (round (imprimir , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print (round (imprimir , 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:32:17) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (round (imprimir , (-2))
-- ERROR:
File "XXXX", line 8
    
                                  ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:33:08) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (round (imprimir , 2)
-- ERROR:
File "XXXX", line 8
    
                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:33:13) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (round (imprimir , 2)
-- ERROR:
File "XXXX", line 8
    
                               ^
SyntaxError: unexpected EOF while parsing
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:33:24) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (round (imprimir , 2))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print (round (imprimir , 2))
TypeError: type tuple doesn't define __round__ method
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:38:43) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print()
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir , 2)
-- OUTPUT:
('Falta', 26.0) 2
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:39:08) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print()
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:39:38) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print()
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- EXECUTION TIME:
0.144102
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
('Falta', 26.0)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
('Troco de', 28.0)
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
('Troco de', 0.0)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:39:49) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:39:51) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- EXECUTION TIME:
0.123956
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
('Falta', 26.0)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
('Troco de', 28.0)
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
('Troco de', 0.0)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:56:01) 
-- CODE:
"TEM TROCO?"
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- OUTPUT:
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:56:43) 
-- CODE:
print("TEM TROCO?")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- OUTPUT:
TEM TROCO?
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:56:46) 
-- CODE:
print("TEM TROCO?")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- EXECUTION TIME:
0.195875
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
TEM TROCO?
('Falta', 26.0)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
TEM TROCO?
('Troco de', 28.0)
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
TEM TROCO?
('Troco de', 0.0)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:56:52) 
-- CODE:
print("TEM TROCO?")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- OUTPUT:
TEM TROCO?
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:56:54) 
-- CODE:
print("TEM TROCO?")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- OUTPUT:
TEM TROCO?
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:57:06) 
-- CODE:
print(" TEM TROCO? ")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- OUTPUT:
TEM TROCO? 
('Falta', 26.0)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:57:09) 
-- CODE:
print(" TEM TROCO? ")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	imprimir = ("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- EXECUTION TIME:
0.189276
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
TEM TROCO? 
('Falta', 26.0)
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
TEM TROCO? 
('Troco de', 28.0)
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
TEM TROCO? 
('Troco de', 0.0)
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:58:58) 
-- CODE:
print(" TEM TROCO? ")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print("Falta" , preço - pagamento)
else:
	imprimir = ("Troco de" , pagamento - preço)
print (imprimir)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 8, in <module>
    print (imprimir)
NameError: name 'imprimir' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:59:17) 
-- CODE:
print(" TEM TROCO? ")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print("Falta" , preço - pagamento)
else:
   print("Troco de" , pagamento - preço)

-- OUTPUT:
TEM TROCO? 
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 17:59:27) 
-- CODE:
print(" TEM TROCO? ")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print("Falta" , preço - pagamento)
else:
   print("Troco de" , pagamento - preço)

-- EXECUTION TIME:
0.131738
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
TEM TROCO? 
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
TEM TROCO? 
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
TEM TROCO? 
Troco de 0.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 17:59:45) 
-- CODE:
print(" TEM TROCO? ")
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print("Falta" , preço - pagamento)
else:
   print("Troco de" , pagamento - preço)

-- OUTPUT:
TEM TROCO? 
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:00:08) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print("Falta" , preço - pagamento)
else:
   print("Troco de" , pagamento - preço)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-10 18:00:15) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:"))
pagamento = float(input("informe o valor pago, peixenho:"))
if preço>pagamento:
	print("Falta" , preço - pagamento)
else:
   print("Troco de" , pagamento - preço)

-- EXECUTION TIME:
0.116004
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-10 18:03:21) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:")) #numeros reias são tipo float's
pagamento = float(input("informe o valor pago, peixenho:")) 
if preço>pagamento: #condição exigida pelo enunciado
	print("Falta" , preço - pagamento) #como no enunciado fala "imprimir" você joga logo duma lapada só depois do "if" imprimindo na msm linha 
else:
   print("Troco de" , pagamento - preço)

-- OUTPUT:
Falta 26.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-15 19:06:58) 
-- CODE:
preço = float(input("digite o valor do bagulho, nego:")) 
pagamento = float(input("informe o valor pago, peixenho:")) 
if preço>pagamento: 
	print("Falta" , preço - pagamento) 
else:
   print("Troco de" , pagamento - preço) 

-- EXECUTION TIME:
0.302384
-- TEST CASE 1:
---- input:
38.0
12.0
---- correct output:
Falta 26.0
---- user output:
Falta 26.0
-- TEST CASE 2:
---- input:
32.0
60.0
---- correct output:
Troco de 28.0
---- user output:
Troco de 28.0
-- TEST CASE 3:
---- input:
516.0
516.0
---- correct output:
Troco de 0.0
---- user output:
Troco de 0.0
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
