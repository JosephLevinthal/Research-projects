== TEST (2019-04-25 18:17:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=int(input("digite a: "))
b=int(input("digite b: "))
c=int(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a!=b and a!=c and b!=c)
	print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    elif(a!=b and a!=c and b!=c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:17:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=int(input("digite a: "))
b=int(input("digite b: "))
c=int(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a!=b and a!=c and b!=c):
	print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    elif(a!=b and a!=c and b!=c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:17:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=int(input("digite a: "))
b=int(input("digite b: "))
c=int(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a!=b and a!=c and b!=c):
	print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    elif(a!=b and a!=c and b!=c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:18:24) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a!=b and a!=c and b!=c):
	print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    elif(a!=b and a!=c and b!=c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:18:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a!=b and a!=c and b!=c):
	print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.183976
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:26:47) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a!=b!=c or a,b,c<0 ):
	print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    elif(a!=b and a!=c and b!=c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:27:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a<0 or b<0 or c<0):
	print("escaleno")
else:
	print("invalido")
-- ERROR:
File "XXXX", line 11
    elif(a!=b and a!=c and b!=c)
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:27:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a<0 or b<0 or c<0):
	print("escaleno")
else:
	print("invalido")
-- EXECUTION TIME:
0.172693
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:28:31) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a<0 or b<0 or c<0):
	print("escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.1537
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:28:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("equilatero")
elif(a==b or a==c or b==c):
	print("isosceles")
elif(a<0 or b<0 or c<0):
	print("escaleno")
else:
	print(Tipo de triangulo :" invalido")
-- EXECUTION TIME:
0.119576
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 14
    print(Tipo de triangulo :" invalido")
                ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:29:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a<b+c and b<a+c and c<a+b):
	if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.178196
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:

-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:30:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.255754
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:31:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:31:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.203515
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:31:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.19055
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo: isosceles
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:31:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.119993
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:31:36) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.111795
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:31:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.0994091
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:31:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.173621
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:33:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:34:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print(a, b, c)
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.253847
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
3.3 4.4 5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
1.0 2.0 7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:34:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print(a, b, c)
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:35:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("a, b, c")
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.104238
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
a, b, c
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
a, b, c
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:35:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print(a, b, c)
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:36:08) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" a, b, c)
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.197301
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 13
    print("Entradas:" a, b, c)
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:36:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" a, b, c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:" a, b, c)
                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:36:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + a, b, c)
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:37:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + a +","b + ","c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:" + a +","b + ","c)
                              ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+a+","b+","c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:"+a+","b+","c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:38) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+a+","b+","c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:"+a+","b+","c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+a+","b+","c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:"+a+","b+","c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+a+","b+","c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:"+a+","b+","c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+a+","b+","c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:"+a+","b+","c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:40) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+a+","b+","c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 13
    print("Entradas:"+a+","b+","c)
                           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:50:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+a+","+b+","+c)
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:52:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+str(a)+","+str(b)+","+str(c)
	print("Tipo de triangulo : invalido")
-- ERROR:
File "XXXX", line 14
    print("Tipo de triangulo : invalido")
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:52:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:53:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
		print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.23098
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:3.3,4.4,5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0,2.0,7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:53:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.158505
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:3.3,4.4,5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0,2.0,7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:53:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:55:07) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:"+str(a)+","+str(b)+","+str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.300061
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:3.3,4.4,5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0,2.0,7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:55:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:56:30) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + "," + str(b) + "," + str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.229902
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:3.3,4.4,5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0,2.0,7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:57:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + "," + str(b) + "," + str(c))
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:58:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:58:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +","+ str(b) +","+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.120604
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:2.0,4.0,4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:3.3 , 4.4 , 5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0 , 2.0 , 7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:58:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.163013
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:3.3 , 4.4 , 5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0 , 2.0 , 7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:58:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.185831
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:3.3 , 4.4 , 5.5
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:58:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.180154
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:3.3 , 4.4 , 5.5
Tipo de triangulo : invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0 , 2.0 , 7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:58:57) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo : invalido")
-- EXECUTION TIME:
0.178993
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:3.3 , 4.4 , 5.5
Tipo de triangulo : invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:

-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:1.0 , 2.0 , 7.0
Tipo de triangulo : invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:59:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas:" +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas:" + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo : invalido")
-- OUTPUT:
Entradas:2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:01:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:02:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.13099
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:02:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:02:41) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:02:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:03:23) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:04:09) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")-
-- ERROR:
File "XXXX", line 17
    print("Tipo de triangulo: invalido")-
                                        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:04:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a<0 or b<0 or c<0):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
else:
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:07:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
if(a==b and b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: equilatero")
elif(a==b or a==c or b==c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: isosceles")
elif(a!=b and a!=c and b!=c):
	print("Entradas: " +str(a) +" , "+ str(b) +" , "+ str(c))
	print("Tipo de triangulo: escaleno")
elif(a<0 or b<0 or c<0):
	print("Entradas: " + str(a) + " , " + str(b) + " , " + str(c))
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.128104
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:14:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: "a, " , " ,b " , " ,c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c c<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
elif a<0 or b<0 or c<0:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.165428
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 6
    print("Entradas: "a, " , " ,b " , " ,c)
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:14:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: "a, " , " ,b " , " ,c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c c<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
elif a<0 or b<0 or c<0:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.125387
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 6
    print("Entradas: "a, " , " ,b " , " ,c)
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:14:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: "a, " , " ,b " , " ,c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c c<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
elif a<0 or b<0 or c<0:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.131799
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 6
    print("Entradas: "a, " , " ,b " , " ,c)
                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:14:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: "a, " , " ,b " , " ,c)
if(a<b+c and b<c+a and c<a+b):
	if a==b and b==c c<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
elif a<0 or b<0 or c<0:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.246923
-- ERROR:
sh: 1: cannot open /home/codebench/codes/1692/1099/cbtemp.txt: No such file

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:21:56) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a() and (c<a+b):
	if a==b and b==c a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.130767
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 7
    if(a<b+c) and (b<c+a() and (c<a+b):
                                      ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:22:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a() and (c<a+b):
	if a==b and b==c a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 7
    if(a<b+c) and (b<c+a() and (c<a+b):
                                      ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:22:42) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.202244
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 8
    if a==b and b==c a<=0 :
                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:22:43) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.13239
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 8
    if a==b and b==c a<=0 :
                     ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:22:44) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 8
    if a==b and b==c a<=0 :
                     ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:22:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c and a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.25177
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 9
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:23:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c and a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.147185
-- ERROR:
  File "/home/codebench/codes/1692/1099/main.py", line 9
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:23:03) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c and a<=0 :
	print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- ERROR:
File "XXXX", line 9
    print("Tipo de triangulo: equilatero")
        ^
IndentationError: expected an indented block
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 19:23:14) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c and a<=0 :
		print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.141393
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 19:23:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c and a<=0 :
		print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-28 20:57:41) 
-- CODE:
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, "," , b, "," , c)
if(a<b+c) and (b<c+a) and (c<a+b):
	if a==b and b==c and a<=0 :
		print("Tipo de triangulo: equilatero")
elif a==b or a==c or b==c:
	print("Tipo de triangulo: isosceles")
elif a!=b and a!=c and b!=c:
	print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.132608
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:32:17) 
-- CODE:
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, ",", b, "," , c)
if(a< b+c) and (b< c+a) and (c< a+b):
	if a==b and b==c and a<=0 :
		print("Tipo de triangulo: equilatero")
	elif a==b or a==c or b==c:
		print("Tipo de triangulo: isosceles")
	elif a!=b and a!=c and b!=c:
		print("Tipo de triangulo: escaleno")
	else:
		print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.2082
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-30 18:32:25) 
-- CODE:
a=float(input("digite a: "))
b=float(input("digite b: "))
c=float(input("digite c: "))
print("Entradas: ", a, ",", b, "," , c)
if(a< b+c) and (b< c+a) and (c< a+b):
	if a==b and b==c and a<=0 :
		print("Tipo de triangulo: equilatero")
	elif a==b or a==c or b==c:
		print("Tipo de triangulo: isosceles")
	elif a!=b and a!=c and b!=c:
		print("Tipo de triangulo: escaleno")
else:
	print("Tipo de triangulo: invalido")
-- EXECUTION TIME:
0.207122
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
