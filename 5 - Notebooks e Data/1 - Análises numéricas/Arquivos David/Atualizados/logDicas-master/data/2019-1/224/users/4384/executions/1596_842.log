== TEST (2019-03-26 18:56:21) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 1000

print(primeiro_digito)
-- OUTPUT:
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 18:56:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = 3141
primeiro_digito = entrada // 1000

print(primeiro_digito)
-- EXECUTION TIME:
0.213826
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
3
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
3
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:00:28) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig ter_dig + q_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 8
    soma_dos_digitos = primeiro_digito + seg_dig ter_dig + q_dig
                                                       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:07) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- OUTPUT:
9
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:05:51) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- EXECUTION TIME:
0.21995
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
15
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
7
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:05:52) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- OUTPUT:
9
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:06:17) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- OUTPUT:
9
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-26 19:06:18) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- EXECUTION TIME:
0.118189
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
9
15
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
1
7
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:06:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- OUTPUT:
9
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:08:37) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada %// 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    primeiro_digito = entrada %// 1000
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:08:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada %// 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- ERROR:
File "XXXX", line 5
    primeiro_digito = entrada %// 1000
                                ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-26 19:09:46) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.
entrada = int(input("numero de quatro digito"))
primeiro_digito = entrada // 1000
seg_dig = 1 
ter_dig = 4
q_dig = 1
print(primeiro_digito)

soma_dos_digitos = primeiro_digito + seg_dig + ter_dig + q_dig
print(soma_dos_digitos)
-- OUTPUT:
9
15
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:25:32) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig= entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegaquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig+seg_dig+ter_dig+quar_dig
print(soma_dos_digitos)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-02 12:25:39) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig= entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegaquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig+seg_dig+ter_dig+quar_dig
print(soma_dos_digitos)
-- OUTPUT:
20
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-02 12:26:02) 
-- CODE:
entrada = int(input("numero de quatro digitos"))
pri_dig= entrada // 1000
pergarsegdigito = entrada % 1000
seg_dig = pergarsegdigito // 100
pergarterceirodigito = pergarsegdigito % 100
ter_dig = pergarterceirodigito // 10
pegaquartodigito = pergarterceirodigito % 10
quar_dig = pergarterceirodigito % 10

soma_dos_digitos = pri_dig+seg_dig+ter_dig+quar_dig
print(soma_dos_digitos)
-- EXECUTION TIME:
0.190027
-- TEST CASE 1:
---- input:
9173
---- correct output:
20
---- user output:
20
-- TEST CASE 2:
---- input:
1010
---- correct output:
2
---- user output:
2
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
