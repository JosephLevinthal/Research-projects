== TEST (2019-03-21 19:07:19) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 15
y = 3
dndo = x
dsor = y
quoc = 5
resto = 0

print(dndo//dsor)
print(quoc)
print(resto)
-- OUTPUT:
5
5
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:07:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 15
y = 3
dndo = x
dsor = y
quoc = 5
resto = 0

print(dndo)
print(dsor)
print(quoc)
print(resto)
-- OUTPUT:
15
3
5
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:07:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 15
y = 3
dndo = x
dsor = y
quoc = 5
resto = 0

print(dndo)
print(dsor)
print(quoc)
print(resto)
-- EXECUTION TIME:
0.174738
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
15
3
5
0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
15
3
5
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
15
3
5
0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:07:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = 15
y = 3
dndo = x
dsor = y
quoc = 5
resto = 0

print(dndo)
print(dsor)
print(quoc)
print(resto)
-- OUTPUT:
15
3
5
0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:10:34) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

v1 = float(input("digite o dividendo: "))
v2 = float(input("digite o divisor: "))
v3 = float(input("digite o quociente: "))
v4 = float(input("digite o resto: "))
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v3 = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:11:10) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

v1 = float(input("digite o dividendo: "))
v2 = float(input("digite o divisor: "))
v3 = float(input("digite o quociente: "))
v4 = float(input("digite o resto: "))

print(v1//v2)
print(v3)
print(v4)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v3 = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:11:30) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

v1 = float(input("digite o dividendo: "))
v2 = float(input("digite o divisor: "))
v3 = float(input("digite o quociente: "))
v4 = float(input("digite o resto: "))

print(v1)
print(v2)
print(v3)
print(v4)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    v3 = float(input())
EOFError: EOF when reading a line
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:11:39) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

v1 = float(input("digite o dividendo: "))
v2 = float(input("digite o divisor: "))
v3 = float(input("digite o quociente: "))
v4 = float(input("digite o resto: "))

print(v1)
print(v2)
print(v3)
print(v4)
-- EXECUTION TIME:
0.121288
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1596/2049/main.py", line 7, in <module>
    v3 = float(input())
EOFError: EOF when reading a line

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:13:16) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:13:22) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:13:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.159612
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:13:44) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:13:56) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.24133
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:14:25) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:14:41) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- EXECUTION TIME:
0.218238
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8.0
5.0
1.0
3.0
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14.0
2.0
7.0
0.0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347.0
2.0
173.0
1.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:14:43) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = float(input("digite o dividendo: "))
y = float(input("digite o divisor: "))

print(x)
print(y)
print(x//y)
print(x%y)

-- OUTPUT:
8.0
5.0
1.0
3.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-03-21 19:23:29) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite o dividendo: "))
y = int(input("digite o divisor: "))
quociente = x//y
resto = x%y

print(x)
print(y)
print(quociente)
print(resto)

-- OUTPUT:
8
5
1
3
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-03-21 19:23:38) 
-- CODE:
# Teste seu codigo aos poucos.
# Nao teste tudo no final, pois fica mais dificil de identificar erros.
# Nao se intimide com as mensagens de erro. Elas ajudam a corrigir seu codigo.

x = int(input("digite o dividendo: "))
y = int(input("digite o divisor: "))
quociente = x//y
resto = x%y

print(x)
print(y)
print(quociente)
print(resto)

-- EXECUTION TIME:
0.17214
-- TEST CASE 1:
---- input:
8
5
---- correct output:
8
5
1
3
---- user output:
8
5
1
3
-- TEST CASE 2:
---- input:
14
2
---- correct output:
14
2
7
0
---- user output:
14
2
7
0
-- TEST CASE 3:
---- input:
347
2
---- correct output:
347
2
173
1
---- user output:
347
2
173
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
