== TEST (2019-04-25 18:21:28) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo"
if (a >= b + c) or (b >= a + c) or (c >= a + b):
    print("invalido")
else:
 	if a == b and b == c:
       	 print(x + "equilatero")
    	else:
       	 if a == b or b == c or a == c:
            print(x + "isosceles")
       		 	else:
           			 print(x + "escaleno")

-- ERROR:
File "XXXX", line 10
    else:
        ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:22:50) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = equilatero
f = isosceles
g = escaleno
h = invalido


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    e = equilatero
NameError: name 'equilatero' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:24:24) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"

if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
-- OUTPUT:
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:24:33) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"

if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
-- OUTPUT:
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:26:41) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
print(y + a + b + c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(y + a + b + c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:26:52) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
print(y + a + b + c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(y + a + b + c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:27:04) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
print(y + a,b,c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(y + a,b,c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:27:10) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
print(y + a,b,c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 10, in <module>
    print(y + a,b,c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:27:55) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y + ent)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(y + ent)
TypeError: must be str, not tuple
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:28:08) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y + ent)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(y + ent)
TypeError: must be str, not tuple
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:28:37) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,ent)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- OUTPUT:
Entradas:  (2.0, 4.0, 4.0)
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:29:08) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,ent)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- EXECUTION TIME:
0.167709
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  (2.0, 4.0, 4.0)
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  (3.3, 4.4, 5.5)
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  (1.0, 2.0, 7.0)
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:29:09) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,ent)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- OUTPUT:
Entradas:  (2.0, 4.0, 4.0)
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:29:24) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,b,c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- OUTPUT:
Entradas:  2.0 4.0 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:30:19) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y + a "," + b "," + c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
File "XXXX", line 11
    print(y + a "," + b "," + c)
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:30:29) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y + a + "," + b + "," + c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(y + a + "," + b + "," + c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:30:35) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y + a + "," + b + "," + c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 11, in <module>
    print(y + a + "," + b + "," + c)
TypeError: must be str, not float
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:31:21) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:31:25) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- EXECUTION TIME:
0.164126
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:31:28) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
elif a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
else: 
	print(x + g)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:33:01) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c:
   print(x + g)
else (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
-- ERROR:
File "XXXX", line 18
    else (a<b+c) or (b<a+c) or (c<b+c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:33:19) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c:
   print(x + g)
else (a<b+c) or (b<a+c) or (c<b+c):
	print(x + h)
-- ERROR:
File "XXXX", line 18
    else (a<b+c) or (b<a+c) or (c<b+c):
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:33:30) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c:
   print(x + g)
else:
	print(x + h)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:34:14) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c and a!=c:
   print(x + g)
else:
	print(x + h)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:34:39) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c and a!=c:
   print(x + g)
else:
	print(x + h)
-- EXECUTION TIME:
0.0876672
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: escaleno
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:34:40) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c and a!=c:
   print(x + g)
else:
	print(x + h)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:35:21) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c and a!=c:
   print(x + g)
else:
	print(x + h)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:35:36) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c and a!=c:
   print(x + h)
else:
	print(x + g)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:35:40) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c and a!=c:
   print(x + h)
else:
	print(x + g)
-- EXECUTION TIME:
0.215443
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:35:41) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  a==b and b==c:
	print(x + e)
elif a==b or b==c or a==c:
	print(x + f)
elif a!=b and b!=c and a!=c:
   print(x + h)
else:
	print(x + g)
-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:37:44) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
else:
	if a == b and b == c:
        print("equilatero")
      else:
         if a == b or b == c or a == c:
            print("isosceles")
         else:
            print("escaleno")


-- ERROR:
File "XXXX", line 16
    print("equilatero")
                      ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:12) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
else:
	if a == b and b == c:
        print(x + e)
      else:
         if a == b or b == c or a == c:
            print(x + f)
         else:
            print(x + g)


-- ERROR:
File "XXXX", line 16
    print(x + e)
               ^
TabError: inconsistent use of tabs and spaces in indentation
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:35) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
else:
	if a == b and b == c:
		print(x + e)
      else:
         if a == b or b == c or a == c:
            print(x + f)
         else:
            print(x + g)


-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:38:53) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
else:
	if a == b and b == c:
		print(x + e)
   else:
		if a == b or b == c or a == c:
            print(x + f)
      else:
            print(x + g)


-- ERROR:
File "XXXX", line 17
    else:
        ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:39:20) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
else:
	if a == b and b == c:
		print(x + e)
   elif a == b or b == c or a == c:
        print(x + f)
   else:
        print(x + g)


-- ERROR:
File "XXXX", line 17
    elif a == b or b == c or a == c:
                                   ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:39:46) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
else:
	if a == b and b == c:
		print(x + e)
   elif a == b or b == c or a == c:
		print(x + f)
   else:
      print(x + g)


-- ERROR:
File "XXXX", line 17
    elif a == b or b == c or a == c:
                                   ^
IndentationError: unindent does not match any outer indentation level
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-25 18:40:44) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
elif a == b and b == c:
	print(x + e)
elif a == b or b == c or a == c:
	print(x + f)
else:
	print(x + g)

-- OUTPUT:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-25 18:40:49) 
-- CODE:
a = float(input("digite a: "))
b = float(input("digite b: "))
c = float(input("digite c: "))
x = "Tipo de triangulo: "
y = "Entradas: "
e = "equilatero"
f = "isosceles"
g = "escaleno"
h = "invalido"
ent = a,b,c
print(y,a,",",b,",",c)
if  (a >= b + c) or (b >= a + c) or (c >= a + b):
	print(x + h)
elif a == b and b == c:
	print(x + e)
elif a == b or b == c or a == c:
	print(x + f)
else:
	print(x + g)

-- EXECUTION TIME:
0.166784
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas:  2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas:  3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas:  1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
