== TEST (2019-04-29 09:04:00) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input("entrada a; "))
b = float(input("entrada b; "))
c = float(input("entrada c; "))
print("Entradas:", a, ",", b, ",", c)
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    if ((x < y + z) and (y < x + z) and (z < y + x)):
NameError: name 'x' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:04:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
c = float(input("entrada c; "))
print("Entradas:", a, ",", b, ",", c)
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")


-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 6, in <module>
    print("Entradas:", a, ",", b, ",", c)
NameError: name 'a' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:05:06) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 09:05:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")


-- EXECUTION TIME:
0.197629
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Nao eh triangulo
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:22:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
if ((x == y) and (y == z) and (z == x)):
	print("equilatero")
	if ((x == y) or (z == y)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 09:22:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
if ((x == y) and (y == z) and (z == x)):
	print("equilatero")
	if ((x == y) or (z == y)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("tipo de triangulo: invalido")


-- EXECUTION TIME:
0.226569
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
tipo de triangulo: invalido
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:24:11) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
if ((x == y) and (y == z) and (z == x)):
	print("equilatero")
	if ((x == y) or (z == y)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:25:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
if ((x == y) and (y == z) and (z == x)):
	print("equilatero")
	if ((x == y) or (z == y)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:25:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
if ((x == y) and (y == z) and (z == x)):
	print("equilatero")
	if ((x == y) or (z == y)):
		print("isosceles")
	else:
		print("escaleno")
else:
	print("tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
tipo de triangulo: invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:25:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
#arrumar as ordes apartir daqui
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:26:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
#arrumar as ordes apartir daqui
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Nao eh triangulo")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-29 09:26:50) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
#arrumar as ordes apartir daqui
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("tipo de triangulo: invalido")


-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 09:27:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
#arrumar as ordes apartir daqui
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.214732
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-29 09:27:21) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
x = float(input("entrada a; "))
y = float(input("entrada b; "))
z = float(input("entrada c; "))
print("Entradas:", x, ",", y, ",", z)
#arrumar as ordes apartir daqui
if ((x < y + z) and (y < x + z) and (z < y + x)):
	if ((x != y) and (y != z) and (z != x)):
		print("escaleno")
	else:
		if ((x != y) or (y != z)):
			print("isosceles")
		else:
			print("equilatero")
else:
	print("Tipo de triangulo: invalido")


-- EXECUTION TIME:
0.144562
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
