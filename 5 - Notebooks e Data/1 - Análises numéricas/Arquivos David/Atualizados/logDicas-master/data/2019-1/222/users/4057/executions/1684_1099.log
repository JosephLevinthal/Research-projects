== TEST (2019-04-18 20:09:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c):
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	x = "isosceles"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:10:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and (a + b)> c:
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	x = "isosceles"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:11:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((a + b)> c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	x = "isosceles"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:12:33) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))

print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:13:19) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif ((a != b) and (b != c) and (a != c)) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:13:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif ((a != b) and (b != c) and (a != c)) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- EXECUTION TIME:
0.160859
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:14:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif ((a != b) and (b != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- ERROR:
File "XXXX", line 15
    elif ((a != b) and (b != c) and (d > c) :
                                            ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:14:32) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif ((a != b) and (b != c):
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- ERROR:
File "XXXX", line 15
    elif ((a != b) and (b != c):
                               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:14:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:16:45) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (d > c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and (d > c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0) (d > c): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 18, in <module>
    elif (a < 0) or (b < 0)or(c < 0) (d > c): 
TypeError: 'bool' object is not callable
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:16:54) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (d > c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and (d > c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif (a < 0) or (b < 0)or(c < 0) or (d > c): 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:17:17) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (d > c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and (d > c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- ERROR:
File "XXXX", line 18
    else
       ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:17:35) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (d > c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and (d > c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:17:46) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (d > c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and (d > c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:17:55) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (d > c):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and (d > c) :
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and (d > c) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- EXECUTION TIME:
0.138381
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:24:28) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and ((d > c) or (e > a) or(f> b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) or (e > a) or(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) or (e > a) or(f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:25:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and ((d > c) or (e > a) or(f> b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) or (e > a) or(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) and (e > a) and (f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:25:51) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and ((d > c) and (e > a) and (f> b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) and (e > a) and(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) and (e > a) and (f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- EXECUTION TIME:
0.164105
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:27:39) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (a == c) and ((d > c) and (e > a) and (f > b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) and (e > a) and(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) and (e > a) and (f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:27:53) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (a == c) and ((d > c) and (e > a) and (f > b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) and (e > a) and(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) and (e > a) and (f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- EXECUTION TIME:
0.143018
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:28:26) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (a == c) and ((d > c) and (e > a) and (f > b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) and (e > a) and(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) and (e > a) and (f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- EXECUTION TIME:
0.127147
-- ERROR:
  File "/home/codebench/codes/1684/1099/main.py", line 20
    elif: 
        ^
SyntaxError: invalid syntax

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:28:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (a == c) and ((d > c) and (e > a) and (f > b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) and (e > a) and(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) and (e > a) and (f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
elif: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- ERROR:
File "XXXX", line 20
    elif: 
        ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:28:59) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
a = float(input ("Lado 1: "))
b = float(input ("Lado 2: "))
c = float(input ("Lado 3: "))
d = a + b
e = b + c
f = a + c
print("Entradas:", a, ",", b, ",", c)

if (a == b) and (b == c)and (a == c) and ((d > c) and (e > a) and (f > b)):
	x = "equilatero"
	print("Tipo de triangulo: ", x)
elif (a == b) and (b != c)and ((d > c) and (e > a) and(f > b)):
	x = "isosceles"
	print("Tipo de triangulo: ", x)
elif (a != b) and (b != c) and (a != c) and ((d > c) and (e > a) and (f > b)) :
	x = "escaleno"
	print("Tipo de triangulo: ", x)
else: 
	x = "invalido"
	print("Tipo de triangulo: ", x)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:32:18) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
d = A + B
e = B + C
f = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- EXECUTION TIME:
0.121576
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:32:29) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
d = A + B
e = B + C
f = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:33:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- EXECUTION TIME:
0.107168
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:33:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:33:15) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:33:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:34:20) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:35:58) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:45:27) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:45:49) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) and ((D > C) and (E > A) and (F > B)):
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C)and ((D > C) and (E > A) and (F > B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and ((D > C) and (E > A) and (F > B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:47:48) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C) and (A != c):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C)  :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:48:04) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C) and (A != c):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C)  :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:48:13) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif (A == B) and (B != C) and (A != c):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C)  :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  invalido
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:50:10) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif ((A == B) and (B != C) and (A != C)) or ((A == C) and (B != C) and (A != B)) or ((A != C) and (B == C) and (A != B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C)  :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:50:22) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif ((A == B) and (B != C) and (A != C)) or ((A == C) and (B != C) and (A != B)) or ((A != C) and (B == C) and (A != B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C)  :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:50:37) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif ((A == B) and (B != C) and (A != C)) or ((A == C) and (B != C) and (A != B)) or ((A != C) and (B == C) and (A != B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C)  :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-18 20:55:01) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif ((A == B) and (B != C) and (A != C)) or ((A == C) and (B != C) and (A != B)) or ((A != C) and (B == C) and (A != B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and((D > C)and (E>A)and(F>B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- OUTPUT:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-18 20:55:12) 
-- CODE:
# Teste seu código aos poucos. Não teste tudo no final, pois fica mais difícil de identificar erros.
# Ao testar sua solução, não se limite ao caso de exemplo. Teste as diversas possibilidades de saída
A = float(input ("Lado 1: "))
B = float(input ("Lado 2: "))
C = float(input ("Lado 3: "))
D = A + B
E = B + C
F = A + C
print("Entradas:", A, ",", B, ",", C)

if (A == B) and (B == C)and (A == C) :
	X = "equilatero"
	print("Tipo de triangulo: ", X)
elif ((A == B) and (B != C) and (A != C)) or ((A == C) and (B != C) and (A != B)) or ((A != C) and (B == C) and (A != B)):
	X = "isosceles"
	print("Tipo de triangulo: ", X)
elif (A != B) and (B != C) and (A != C) and((D > C)and (E>A)and(F>B)) :
	X = "escaleno"
	print("Tipo de triangulo: ", X)
else: 
	X = "invalido"
	print("Tipo de triangulo: ", X)
-- EXECUTION TIME:
0.139207
-- TEST CASE 1:
---- input:
2
4
4
---- correct output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo: isosceles
---- user output:
Entradas: 2.0 , 4.0 , 4.0
Tipo de triangulo:  isosceles
-- TEST CASE 2:
---- input:
3.3
4.4
5.5
---- correct output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo: escaleno
---- user output:
Entradas: 3.3 , 4.4 , 5.5
Tipo de triangulo:  escaleno
-- TEST CASE 3:
---- input:
1
2
7
---- correct output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo: invalido
---- user output:
Entradas: 1.0 , 2.0 , 7.0
Tipo de triangulo:  invalido
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
