== TEST (2019-04-13 22:23:14) 
-- CODE:
notas=float(input("nota do aluno: "))
bonificacao=input("vai receber bonificação: ")
if(bonificacao==s):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(bonificacao==s):
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:24:03) 
-- CODE:
notas=float(input("nota do aluno: "))
bonificacao=input("vai receber bonificacao: ")
if(bonificacao==s):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 3, in <module>
    if(bonificacao==s):
NameError: name 's' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:24:24) 
-- CODE:
notas=float(input("nota do aluno: "))
bonificacao=input("vai receber bonificacao: ")
if(bonificacao=s):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 3
    if(bonificacao=s):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:24:29) 
-- CODE:
notas=float(input("nota do aluno: "))
bonificacao=input("vai receber bonificacao: ")
if(bonificacao=s):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 3
    if(bonificacao=s):
                  ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:26:09) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=s):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 3
    if(boni=s):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:27:00) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 3
    if(boni="s"):
           ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:27:16) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:30:01) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men.upeer())	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 7, in <module>
    print(men.upeer())	
AttributeError: 'float' object has no attribute 'upeer'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:31:43) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ".upper())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
VAI RECEBER BONIFICACAO?: 5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 22:32:38) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- EXECUTION TIME:
0.175148
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.0
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.0
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:33:26) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")(upeer())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    boni=input()(upeer())
NameError: name 'upeer' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:34:33) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=uper(input("vai receber bonificacao?: "))
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    boni=uper(input())
NameError: name 'uper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:40:43) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input(apput()"vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 2
    boni=input(apput()"vai receber bonificacao?: ")
                                                 ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:49:13) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ".apput())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    boni=input("vai receber bonificacao?: ".apput())
AttributeError: 'str' object has no attribute 'apput'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:50:00) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ".apput())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    boni=input("vai receber bonificacao?: ".apput())
AttributeError: 'str' object has no attribute 'apput'
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 22:50:56) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ".upper())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
VAI RECEBER BONIFICACAO?: 5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:00:27) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ".upper())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
VAI RECEBER BONIFICACAO?: 5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 23:00:40) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ".upper())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- EXECUTION TIME:
0.211545
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
VAI RECEBER BONIFICACAO?: 5.0
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
VAI RECEBER BONIFICACAO?: 9.0
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
VAI RECEBER BONIFICACAO?: 4.4
-- GRADE:
0%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:01:39) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=.upper()input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 2
    boni=.upper()input()
         ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:03:23) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=upper(input("vai receber bonificacao?: "))
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
Traceback (most recent call last):
  File "XXXX", line 2, in <module>
    boni=upper(input())
NameError: name 'upper' is not defined
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:03:47) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=(input("vai receber bonificacao?: "))
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:05:12) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ".upper())
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
VAI RECEBER BONIFICACAO?: 5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:05:49) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:06:23) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input(.upper"vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 2
    boni=input(.upper"vai receber bonificacao?: ")
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:06:33) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input(.upper()"vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 2
    boni=input(.upper()"vai receber bonificacao?: ")
               ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:06:52) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:07:36) 
-- CODE:
notas=float(input("nota do aluno: "))
boni.upper()=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 2
    boni.upper()=input()
    ^
SyntaxError: can't assign to function call
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:08:32) 
-- CODE:
notas=float(input("nota do aluno: "))
.upper()boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 2
    .upper()boni=input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:08:33) 
-- CODE:
notas=float(input("nota do aluno: "))
.upper()boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- ERROR:
File "XXXX", line 2
    .upper()boni=input()
    ^
SyntaxError: invalid syntax
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:09:46) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:10:59) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
if(boni=="s".upper()):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:12:47) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
var=boni.upper()
if(var=="s"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
-- OUTPUT:
5.0
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:13:43) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
var=boni.upper()
if(var=="S"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
	
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-04-13 23:13:56) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
var=boni.upper()
if(var=="S"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
	
-- EXECUTION TIME:
0.14197
-- TEST CASE 1:
---- input:
5.0
S
---- correct output:
5.5
---- user output:
5.5
-- TEST CASE 2:
---- input:
9.0
S
---- correct output:
9.9
---- user output:
9.9
-- TEST CASE 3:
---- input:
4.4
N
---- correct output:
4.4
---- user output:
4.4
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:15:11) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
var=boni.upper()
if(var=="S"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
	
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:15:21) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
var=boni.upper()
if(var=="S"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
	
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:15:44) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
var=boni.upper()
if(var=="S"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
	
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== TEST (2019-04-13 23:16:11) 
-- CODE:
notas=float(input("nota do aluno: "))
boni=input("vai receber bonificacao?: ")
var=boni.upper()
if(var=="S"):
	men=notas+((10/100)*notas)
else:
	men=notas
print(men)	
	
	
-- OUTPUT:
5.5
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
