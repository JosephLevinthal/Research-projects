== SUBMITION (2019-05-23 22:24:30) 
-- CODE:
from numpy import *

ent = input()

num = len(ent)

print(ent.replace(" ","").upper())

n = ent[0]

inv = ent[-1]



if (n==inv):

print(1)

else:

print(0)

-- EXECUTION TIME:
0.135882
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 17
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-23 22:24:42) 
-- CODE:
from numpy import *

ent = input()

num = len(ent)

print(ent.replace(" ","").upper())

n = ent[0]

inv = ent[-1]



if (n==inv):

print(1)

else:

print(0)

-- EXECUTION TIME:
0.237726
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 17
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-23 22:24:42) 
-- CODE:
from numpy import *

ent = input()

num = len(ent)

print(ent.replace(" ","").upper())

n = ent[0]

inv = ent[-1]



if (n==inv):

print(1)

else:

print(0)

-- EXECUTION TIME:
0.169388
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 17
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-23 22:24:42) 
-- CODE:
from numpy import *

ent = input()

num = len(ent)

print(ent.replace(" ","").upper())

n = ent[0]

inv = ent[-1]



if (n==inv):

print(1)

else:

print(0)

-- EXECUTION TIME:
0.196901
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 17
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-23 22:24:42) 
-- CODE:
from numpy import *

ent = input()

num = len(ent)

print(ent.replace(" ","").upper())

n = ent[0]

inv = ent[-1]



if (n==inv):

print(1)

else:

print(0)

-- EXECUTION TIME:
0.304994
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 17
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-23 22:26:36) 
-- CODE:
from numpy import *

ent = input("ent:")

num = len(ent)

print(ent.replace(" ","").upper())

n = ent[0]

inv = ent[-1]



if (n==inv):

print(1)

else:

print(0)

-- EXECUTION TIME:
0.162242
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 17
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-05-23 22:27:00) 
-- CODE:
from numpy import *

ent = input("ent:")
num = len(ent)
print(ent.replace(" ","").upper())
n = ent[0]
inv = ent[-1]
if (n==inv):
print(1)
else:
print(0)

-- EXECUTION TIME:
0.129437
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 9
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 10:54:57) 
-- CODE:
from numpy import *

ent = input("ent:")
num = len(ent)
print(ent.replace(" ","").upper())
n = ent[0]
inv = ent(-1)
if (n==inv):
print(1)
else:
print(0)

-- EXECUTION TIME:
0.556095
-- ERROR:
  File "/home/codebench/codes/1760/1189/main.py", line 9
    print(1)
        ^
IndentationError: expected an indented block

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 12:05:24) 
-- CODE:
from numpy import *

ent = input("ent:")
num = len(ent)
print(ent.replace(" ","").upper())
n = ent[0]
inv = ent(-1)
if (n==inv):
   print(1)
else:
   print(0)

-- EXECUTION TIME:
1.08762
-- ERROR:
Traceback (most recent call last):
  File "/home/codebench/codes/1760/1189/main.py", line 7, in <module>
    inv = ent(-1)
TypeError: 'str' object is not callable

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
== SUBMITION (2019-06-26 12:05:45) 
-- CODE:
from numpy import *

ent = input("ent:")
num = len(ent)
print(ent.replace(" ","").upper())
n = ent[0]
inv = ent[-1]
if (n==inv):
   print(1)
else:
   print(0)

-- EXECUTION TIME:
1.02319
-- TEST CASE 1:
---- input:
ACARARAJADADAJARARACA
---- correct output:
ACARARAJADADAJARARACA
1
---- user output:
ACARARAJADADAJARARACA
1
-- TEST CASE 2:
---- input:
CACHORRO
---- correct output:
CACHORRO
0
---- user output:
CACHORRO
0
-- TEST CASE 3:
---- input:
amalanadanalama
---- correct output:
AMALANADANALAMA
1
---- user output:
AMALANADANALAMA
1
-- GRADE:
100%
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
